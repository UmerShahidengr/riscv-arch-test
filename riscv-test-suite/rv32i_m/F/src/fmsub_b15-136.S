
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_17280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:51840*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51840*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:51843*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51843*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:51846*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51846*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:51849*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51849*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:51852*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51852*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:51855*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51855*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:51858*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51858*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:51861*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51861*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:51864*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51864*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86800000; valaddr_reg:x3; val_offset:51867*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51867*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86800001; valaddr_reg:x3; val_offset:51870*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51870*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86800003; valaddr_reg:x3; val_offset:51873*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51873*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86800007; valaddr_reg:x3; val_offset:51876*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51876*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x8680000f; valaddr_reg:x3; val_offset:51879*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51879*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x8680001f; valaddr_reg:x3; val_offset:51882*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51882*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x8680003f; valaddr_reg:x3; val_offset:51885*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51885*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x8680007f; valaddr_reg:x3; val_offset:51888*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51888*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x868000ff; valaddr_reg:x3; val_offset:51891*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51891*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x868001ff; valaddr_reg:x3; val_offset:51894*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51894*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x868003ff; valaddr_reg:x3; val_offset:51897*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51897*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x868007ff; valaddr_reg:x3; val_offset:51900*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51900*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86800fff; valaddr_reg:x3; val_offset:51903*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51903*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86801fff; valaddr_reg:x3; val_offset:51906*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51906*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86803fff; valaddr_reg:x3; val_offset:51909*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51909*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86807fff; valaddr_reg:x3; val_offset:51912*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51912*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x8680ffff; valaddr_reg:x3; val_offset:51915*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51915*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x8681ffff; valaddr_reg:x3; val_offset:51918*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51918*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x8683ffff; valaddr_reg:x3; val_offset:51921*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51921*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x8687ffff; valaddr_reg:x3; val_offset:51924*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51924*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x868fffff; valaddr_reg:x3; val_offset:51927*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51927*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x869fffff; valaddr_reg:x3; val_offset:51930*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51930*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86bfffff; valaddr_reg:x3; val_offset:51933*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51933*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86c00000; valaddr_reg:x3; val_offset:51936*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51936*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86e00000; valaddr_reg:x3; val_offset:51939*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51939*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86f00000; valaddr_reg:x3; val_offset:51942*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51942*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86f80000; valaddr_reg:x3; val_offset:51945*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51945*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86fc0000; valaddr_reg:x3; val_offset:51948*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51948*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86fe0000; valaddr_reg:x3; val_offset:51951*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51951*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86ff0000; valaddr_reg:x3; val_offset:51954*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51954*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86ff8000; valaddr_reg:x3; val_offset:51957*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51957*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86ffc000; valaddr_reg:x3; val_offset:51960*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51960*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86ffe000; valaddr_reg:x3; val_offset:51963*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51963*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86fff000; valaddr_reg:x3; val_offset:51966*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51966*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86fff800; valaddr_reg:x3; val_offset:51969*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51969*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86fffc00; valaddr_reg:x3; val_offset:51972*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51972*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86fffe00; valaddr_reg:x3; val_offset:51975*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51975*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86ffff00; valaddr_reg:x3; val_offset:51978*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51978*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86ffff80; valaddr_reg:x3; val_offset:51981*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51981*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86ffffc0; valaddr_reg:x3; val_offset:51984*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51984*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86ffffe0; valaddr_reg:x3; val_offset:51987*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51987*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86fffff0; valaddr_reg:x3; val_offset:51990*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51990*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86fffff8; valaddr_reg:x3; val_offset:51993*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51993*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86fffffc; valaddr_reg:x3; val_offset:51996*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51996*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86fffffe; valaddr_reg:x3; val_offset:51999*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51999*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x340e7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb40e7f; op2val:0x80000000;
op3val:0x86ffffff; valaddr_reg:x3; val_offset:52002*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52002*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd800000; valaddr_reg:x3; val_offset:52005*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52005*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd800001; valaddr_reg:x3; val_offset:52008*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52008*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd800003; valaddr_reg:x3; val_offset:52011*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52011*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd800007; valaddr_reg:x3; val_offset:52014*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52014*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd80000f; valaddr_reg:x3; val_offset:52017*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52017*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd80001f; valaddr_reg:x3; val_offset:52020*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52020*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd80003f; valaddr_reg:x3; val_offset:52023*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52023*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd80007f; valaddr_reg:x3; val_offset:52026*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52026*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd8000ff; valaddr_reg:x3; val_offset:52029*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52029*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd8001ff; valaddr_reg:x3; val_offset:52032*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52032*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd8003ff; valaddr_reg:x3; val_offset:52035*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52035*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd8007ff; valaddr_reg:x3; val_offset:52038*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52038*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd800fff; valaddr_reg:x3; val_offset:52041*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52041*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd801fff; valaddr_reg:x3; val_offset:52044*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52044*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd803fff; valaddr_reg:x3; val_offset:52047*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52047*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd807fff; valaddr_reg:x3; val_offset:52050*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52050*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd80ffff; valaddr_reg:x3; val_offset:52053*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52053*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd81ffff; valaddr_reg:x3; val_offset:52056*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52056*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd83ffff; valaddr_reg:x3; val_offset:52059*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52059*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd87ffff; valaddr_reg:x3; val_offset:52062*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52062*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd8fffff; valaddr_reg:x3; val_offset:52065*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52065*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbd9fffff; valaddr_reg:x3; val_offset:52068*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52068*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdbfffff; valaddr_reg:x3; val_offset:52071*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52071*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdc00000; valaddr_reg:x3; val_offset:52074*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52074*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbde00000; valaddr_reg:x3; val_offset:52077*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52077*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdf00000; valaddr_reg:x3; val_offset:52080*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52080*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdf80000; valaddr_reg:x3; val_offset:52083*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52083*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdfc0000; valaddr_reg:x3; val_offset:52086*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52086*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdfe0000; valaddr_reg:x3; val_offset:52089*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52089*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdff0000; valaddr_reg:x3; val_offset:52092*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52092*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdff8000; valaddr_reg:x3; val_offset:52095*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52095*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdffc000; valaddr_reg:x3; val_offset:52098*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52098*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdffe000; valaddr_reg:x3; val_offset:52101*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52101*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdfff000; valaddr_reg:x3; val_offset:52104*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52104*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdfff800; valaddr_reg:x3; val_offset:52107*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52107*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdfffc00; valaddr_reg:x3; val_offset:52110*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52110*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdfffe00; valaddr_reg:x3; val_offset:52113*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52113*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdffff00; valaddr_reg:x3; val_offset:52116*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52116*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdffff80; valaddr_reg:x3; val_offset:52119*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52119*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdffffc0; valaddr_reg:x3; val_offset:52122*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52122*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdffffe0; valaddr_reg:x3; val_offset:52125*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52125*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdfffff0; valaddr_reg:x3; val_offset:52128*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52128*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdfffff8; valaddr_reg:x3; val_offset:52131*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52131*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdfffffc; valaddr_reg:x3; val_offset:52134*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52134*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdfffffe; valaddr_reg:x3; val_offset:52137*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52137*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbdffffff; valaddr_reg:x3; val_offset:52140*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52140*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbf800001; valaddr_reg:x3; val_offset:52143*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52143*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbf800003; valaddr_reg:x3; val_offset:52146*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52146*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbf800007; valaddr_reg:x3; val_offset:52149*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52149*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbf999999; valaddr_reg:x3; val_offset:52152*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52152*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:52155*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52155*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:52158*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52158*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:52161*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52161*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:52164*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52164*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:52167*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52167*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:52170*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52170*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:52173*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52173*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:52176*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52176*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:52179*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52179*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:52182*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52182*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:52185*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52185*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x349fb1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ab537 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb49fb1; op2val:0x805ab537;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:52188*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52188*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x35708e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb5708e; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:52191*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52191*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x35708e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb5708e; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:52194*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52194*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x35708e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb5708e; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:52197*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52197*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x35708e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb5708e; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:52200*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52200*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x35708e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb5708e; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:52203*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52203*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x35708e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb5708e; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:52206*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52206*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x35708e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb5708e; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:52209*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52209*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x35708e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb5708e; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:52212*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52212*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x35708e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb5708e; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:52215*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52215*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x35708e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb5708e; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:52218*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52218*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x35708e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb5708e; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:52221*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52221*0 + 3*135*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535552,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535553,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535555,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535559,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535567,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535583,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535615,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535679,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535807,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256536063,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256536575,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256537599,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256539647,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256543743,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256551935,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256568319,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256601087,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256666623,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256797695,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2257059839,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2257584127,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2258632703,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2260729855,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2260729856,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2262827008,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2263875584,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264399872,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264662016,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264793088,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264858624,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264891392,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264907776,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264915968,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264920064,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264922112,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264923136,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264923648,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264923904,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924032,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924096,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924128,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924144,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924152,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924156,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924158,32,FLEN)
NAN_BOXED(2125729407,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924159,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179282432,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179282433,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179282435,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179282439,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179282447,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179282463,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179282495,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179282559,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179282687,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179282943,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179283455,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179284479,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179286527,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179290623,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179298815,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179315199,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179347967,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179413503,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179544575,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3179806719,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3180331007,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3181379583,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3183476735,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3183476736,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3185573888,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3186622464,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187146752,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187408896,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187539968,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187605504,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187638272,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187654656,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187662848,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187666944,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187668992,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187670016,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187670528,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187670784,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187670912,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187670976,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187671008,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187671024,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187671032,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187671036,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187671038,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3187671039,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2125766577,32,FLEN)
NAN_BOXED(2153428279,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2125820046,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2125820046,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2125820046,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2125820046,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2125820046,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2125820046,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2125820046,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2125820046,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2125820046,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2125820046,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2125820046,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
