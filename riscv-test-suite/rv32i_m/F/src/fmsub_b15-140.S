
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_17792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb00007f; valaddr_reg:x3; val_offset:53376*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53376*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb0000ff; valaddr_reg:x3; val_offset:53379*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53379*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb0001ff; valaddr_reg:x3; val_offset:53382*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53382*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb0003ff; valaddr_reg:x3; val_offset:53385*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53385*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb0007ff; valaddr_reg:x3; val_offset:53388*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53388*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb000fff; valaddr_reg:x3; val_offset:53391*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53391*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb001fff; valaddr_reg:x3; val_offset:53394*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53394*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb003fff; valaddr_reg:x3; val_offset:53397*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53397*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb007fff; valaddr_reg:x3; val_offset:53400*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53400*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb00ffff; valaddr_reg:x3; val_offset:53403*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53403*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb01ffff; valaddr_reg:x3; val_offset:53406*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53406*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb03ffff; valaddr_reg:x3; val_offset:53409*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53409*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb07ffff; valaddr_reg:x3; val_offset:53412*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53412*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb0fffff; valaddr_reg:x3; val_offset:53415*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53415*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb1fffff; valaddr_reg:x3; val_offset:53418*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53418*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb3fffff; valaddr_reg:x3; val_offset:53421*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53421*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb400000; valaddr_reg:x3; val_offset:53424*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53424*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb600000; valaddr_reg:x3; val_offset:53427*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53427*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb700000; valaddr_reg:x3; val_offset:53430*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53430*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb780000; valaddr_reg:x3; val_offset:53433*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53433*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7c0000; valaddr_reg:x3; val_offset:53436*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53436*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7e0000; valaddr_reg:x3; val_offset:53439*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53439*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7f0000; valaddr_reg:x3; val_offset:53442*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53442*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7f8000; valaddr_reg:x3; val_offset:53445*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53445*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7fc000; valaddr_reg:x3; val_offset:53448*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53448*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7fe000; valaddr_reg:x3; val_offset:53451*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53451*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7ff000; valaddr_reg:x3; val_offset:53454*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53454*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7ff800; valaddr_reg:x3; val_offset:53457*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53457*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7ffc00; valaddr_reg:x3; val_offset:53460*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53460*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7ffe00; valaddr_reg:x3; val_offset:53463*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53463*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7fff00; valaddr_reg:x3; val_offset:53466*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53466*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7fff80; valaddr_reg:x3; val_offset:53469*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53469*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7fffc0; valaddr_reg:x3; val_offset:53472*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53472*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7fffe0; valaddr_reg:x3; val_offset:53475*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53475*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7ffff0; valaddr_reg:x3; val_offset:53478*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53478*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7ffff8; valaddr_reg:x3; val_offset:53481*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53481*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7ffffc; valaddr_reg:x3; val_offset:53484*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53484*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7ffffe; valaddr_reg:x3; val_offset:53487*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53487*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb94394; op2val:0x0;
op3val:0xb7fffff; valaddr_reg:x3; val_offset:53490*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53490*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:53493*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53493*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:53496*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53496*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:53499*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53499*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:53502*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53502*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:53505*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53505*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:53508*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53508*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:53511*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53511*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:53514*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53514*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:53517*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53517*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:53520*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53520*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:53523*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53523*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:53526*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53526*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:53529*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53529*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:53532*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53532*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:53535*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53535*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:53538*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53538*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf000000; valaddr_reg:x3; val_offset:53541*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53541*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf000001; valaddr_reg:x3; val_offset:53544*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53544*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf000003; valaddr_reg:x3; val_offset:53547*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53547*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf000007; valaddr_reg:x3; val_offset:53550*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53550*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf00000f; valaddr_reg:x3; val_offset:53553*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53553*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf00001f; valaddr_reg:x3; val_offset:53556*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53556*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf00003f; valaddr_reg:x3; val_offset:53559*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53559*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf00007f; valaddr_reg:x3; val_offset:53562*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53562*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf0000ff; valaddr_reg:x3; val_offset:53565*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53565*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf0001ff; valaddr_reg:x3; val_offset:53568*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53568*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf0003ff; valaddr_reg:x3; val_offset:53571*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53571*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf0007ff; valaddr_reg:x3; val_offset:53574*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53574*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf000fff; valaddr_reg:x3; val_offset:53577*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53577*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf001fff; valaddr_reg:x3; val_offset:53580*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53580*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf003fff; valaddr_reg:x3; val_offset:53583*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53583*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf007fff; valaddr_reg:x3; val_offset:53586*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53586*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf00ffff; valaddr_reg:x3; val_offset:53589*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53589*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf01ffff; valaddr_reg:x3; val_offset:53592*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53592*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf03ffff; valaddr_reg:x3; val_offset:53595*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53595*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf07ffff; valaddr_reg:x3; val_offset:53598*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53598*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf0fffff; valaddr_reg:x3; val_offset:53601*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53601*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf1fffff; valaddr_reg:x3; val_offset:53604*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53604*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf3fffff; valaddr_reg:x3; val_offset:53607*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53607*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf400000; valaddr_reg:x3; val_offset:53610*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53610*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf600000; valaddr_reg:x3; val_offset:53613*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53613*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf700000; valaddr_reg:x3; val_offset:53616*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53616*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf780000; valaddr_reg:x3; val_offset:53619*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53619*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7c0000; valaddr_reg:x3; val_offset:53622*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53622*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7e0000; valaddr_reg:x3; val_offset:53625*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53625*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7f0000; valaddr_reg:x3; val_offset:53628*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53628*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7f8000; valaddr_reg:x3; val_offset:53631*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53631*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7fc000; valaddr_reg:x3; val_offset:53634*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53634*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7fe000; valaddr_reg:x3; val_offset:53637*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53637*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7ff000; valaddr_reg:x3; val_offset:53640*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53640*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7ff800; valaddr_reg:x3; val_offset:53643*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53643*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7ffc00; valaddr_reg:x3; val_offset:53646*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53646*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7ffe00; valaddr_reg:x3; val_offset:53649*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53649*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7fff00; valaddr_reg:x3; val_offset:53652*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53652*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7fff80; valaddr_reg:x3; val_offset:53655*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53655*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7fffc0; valaddr_reg:x3; val_offset:53658*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53658*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7fffe0; valaddr_reg:x3; val_offset:53661*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53661*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7ffff0; valaddr_reg:x3; val_offset:53664*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53664*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7ffff8; valaddr_reg:x3; val_offset:53667*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53667*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7ffffc; valaddr_reg:x3; val_offset:53670*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53670*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7ffffe; valaddr_reg:x3; val_offset:53673*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53673*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39db1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9db1f; op2val:0x0;
op3val:0xf7fffff; valaddr_reg:x3; val_offset:53676*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53676*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xbf800001; valaddr_reg:x3; val_offset:53679*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53679*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xbf800003; valaddr_reg:x3; val_offset:53682*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53682*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xbf800007; valaddr_reg:x3; val_offset:53685*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53685*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xbf999999; valaddr_reg:x3; val_offset:53688*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53688*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:53691*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53691*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:53694*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53694*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:53697*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53697*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:53700*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53700*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:53703*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53703*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:53706*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53706*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:53709*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53709*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:53712*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53712*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:53715*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53715*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:53718*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53718*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:53721*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53721*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:53724*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53724*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xc1000000; valaddr_reg:x3; val_offset:53727*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53727*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xc1000001; valaddr_reg:x3; val_offset:53730*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53730*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xc1000003; valaddr_reg:x3; val_offset:53733*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53733*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xc1000007; valaddr_reg:x3; val_offset:53736*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53736*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xc100000f; valaddr_reg:x3; val_offset:53739*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53739*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xc100001f; valaddr_reg:x3; val_offset:53742*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53742*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xc100003f; valaddr_reg:x3; val_offset:53745*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53745*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xc100007f; valaddr_reg:x3; val_offset:53748*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53748*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xc10000ff; valaddr_reg:x3; val_offset:53751*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53751*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xc10001ff; valaddr_reg:x3; val_offset:53754*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53754*0 + 3*139*FLEN/8, x4, x1, x2)

inst_17919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39eef2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x581e19 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9eef2; op2val:0x80581e19;
op3val:0xc10003ff; valaddr_reg:x3; val_offset:53757*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 53757*0 + 3*139*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549503,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549631,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549887,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184550399,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184551423,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184553471,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184557567,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184565759,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184582143,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184614911,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184680447,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184811519,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(185073663,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(185597951,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(186646527,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(188743679,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(188743680,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(190840832,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(191889408,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192413696,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192675840,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192806912,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192872448,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192905216,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192921600,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192929792,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192933888,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192935936,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192936960,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937472,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937728,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937856,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937920,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937952,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937968,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937976,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937980,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937982,32,FLEN)
NAN_BOXED(2126070676,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937983,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658240,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658241,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658243,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658247,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658255,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658271,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658303,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658367,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658495,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658751,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251659263,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251660287,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251662335,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251666431,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251674623,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251691007,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251723775,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251789311,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251920383,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(252182527,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(252706815,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(253755391,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255852543,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255852544,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(257949696,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(258998272,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259522560,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259784704,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259915776,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259981312,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260014080,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260030464,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260038656,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260042752,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260044800,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260045824,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046336,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046592,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046720,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046784,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046816,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046832,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046840,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046844,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046846,32,FLEN)
NAN_BOXED(2126109471,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046847,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3238002688,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3238002689,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3238002691,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3238002695,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3238002703,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3238002719,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3238002751,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3238002815,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3238002943,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3238003199,32,FLEN)
NAN_BOXED(2126114546,32,FLEN)
NAN_BOXED(2153258521,32,FLEN)
NAN_BOXED(3238003711,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
