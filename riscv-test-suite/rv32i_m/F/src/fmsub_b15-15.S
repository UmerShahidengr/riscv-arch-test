
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_1792:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0c9ced and fs2 == 0 and fe2 == 0x03 and fm2 == 0x69096a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0c9ced; op2val:0x1e9096a;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:5376*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5376*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1793:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0c9ced and fs2 == 0 and fe2 == 0x03 and fm2 == 0x69096a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0c9ced; op2val:0x1e9096a;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:5379*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5379*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1794:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0c9ced and fs2 == 0 and fe2 == 0x03 and fm2 == 0x69096a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0c9ced; op2val:0x1e9096a;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:5382*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5382*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1795:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0c9ced and fs2 == 0 and fe2 == 0x03 and fm2 == 0x69096a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0c9ced; op2val:0x1e9096a;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:5385*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5385*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1796:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0c9ced and fs2 == 0 and fe2 == 0x03 and fm2 == 0x69096a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0c9ced; op2val:0x1e9096a;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:5388*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5388*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1797:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0c9ced and fs2 == 0 and fe2 == 0x03 and fm2 == 0x69096a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0c9ced; op2val:0x1e9096a;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:5391*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5391*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1798:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x69000000; valaddr_reg:x3; val_offset:5394*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5394*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1799:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x69000001; valaddr_reg:x3; val_offset:5397*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5397*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1800:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x69000003; valaddr_reg:x3; val_offset:5400*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5400*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1801:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x69000007; valaddr_reg:x3; val_offset:5403*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5403*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1802:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x6900000f; valaddr_reg:x3; val_offset:5406*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5406*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1803:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x6900001f; valaddr_reg:x3; val_offset:5409*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5409*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1804:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x6900003f; valaddr_reg:x3; val_offset:5412*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5412*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1805:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x6900007f; valaddr_reg:x3; val_offset:5415*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5415*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1806:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x690000ff; valaddr_reg:x3; val_offset:5418*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5418*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1807:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x690001ff; valaddr_reg:x3; val_offset:5421*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5421*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1808:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x690003ff; valaddr_reg:x3; val_offset:5424*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5424*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1809:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x690007ff; valaddr_reg:x3; val_offset:5427*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5427*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1810:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x69000fff; valaddr_reg:x3; val_offset:5430*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5430*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1811:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x69001fff; valaddr_reg:x3; val_offset:5433*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5433*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1812:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x69003fff; valaddr_reg:x3; val_offset:5436*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5436*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1813:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x69007fff; valaddr_reg:x3; val_offset:5439*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5439*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1814:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x6900ffff; valaddr_reg:x3; val_offset:5442*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5442*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1815:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x6901ffff; valaddr_reg:x3; val_offset:5445*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5445*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1816:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x6903ffff; valaddr_reg:x3; val_offset:5448*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5448*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1817:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x6907ffff; valaddr_reg:x3; val_offset:5451*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5451*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1818:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x690fffff; valaddr_reg:x3; val_offset:5454*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5454*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1819:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x691fffff; valaddr_reg:x3; val_offset:5457*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5457*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1820:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x693fffff; valaddr_reg:x3; val_offset:5460*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5460*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1821:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x69400000; valaddr_reg:x3; val_offset:5463*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5463*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1822:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x69600000; valaddr_reg:x3; val_offset:5466*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5466*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1823:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x69700000; valaddr_reg:x3; val_offset:5469*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5469*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1824:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x69780000; valaddr_reg:x3; val_offset:5472*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5472*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1825:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697c0000; valaddr_reg:x3; val_offset:5475*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5475*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1826:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697e0000; valaddr_reg:x3; val_offset:5478*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5478*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1827:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697f0000; valaddr_reg:x3; val_offset:5481*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5481*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1828:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697f8000; valaddr_reg:x3; val_offset:5484*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5484*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1829:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697fc000; valaddr_reg:x3; val_offset:5487*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5487*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1830:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697fe000; valaddr_reg:x3; val_offset:5490*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5490*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1831:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697ff000; valaddr_reg:x3; val_offset:5493*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5493*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1832:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697ff800; valaddr_reg:x3; val_offset:5496*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5496*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1833:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697ffc00; valaddr_reg:x3; val_offset:5499*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5499*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1834:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697ffe00; valaddr_reg:x3; val_offset:5502*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5502*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1835:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697fff00; valaddr_reg:x3; val_offset:5505*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5505*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1836:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697fff80; valaddr_reg:x3; val_offset:5508*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5508*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1837:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697fffc0; valaddr_reg:x3; val_offset:5511*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5511*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1838:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697fffe0; valaddr_reg:x3; val_offset:5514*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5514*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1839:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697ffff0; valaddr_reg:x3; val_offset:5517*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5517*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1840:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697ffff8; valaddr_reg:x3; val_offset:5520*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5520*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1841:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697ffffc; valaddr_reg:x3; val_offset:5523*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5523*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1842:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697ffffe; valaddr_reg:x3; val_offset:5526*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5526*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1843:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x697fffff; valaddr_reg:x3; val_offset:5529*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5529*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1844:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x7f000001; valaddr_reg:x3; val_offset:5532*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5532*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1845:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x7f000003; valaddr_reg:x3; val_offset:5535*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5535*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1846:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x7f000007; valaddr_reg:x3; val_offset:5538*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5538*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1847:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x7f199999; valaddr_reg:x3; val_offset:5541*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5541*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1848:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x7f249249; valaddr_reg:x3; val_offset:5544*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5544*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1849:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x7f333333; valaddr_reg:x3; val_offset:5547*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5547*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1850:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:5550*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5550*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1851:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:5553*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5553*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1852:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x7f444444; valaddr_reg:x3; val_offset:5556*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5556*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1853:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:5559*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5559*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1854:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:5562*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5562*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1855:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x7f666666; valaddr_reg:x3; val_offset:5565*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5565*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1856:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:5568*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5568*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1857:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:5571*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5571*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1858:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:5574*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5574*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1859:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6717f0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0dcb9f; op2val:0x41e717f0;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:5577*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5577*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1860:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:5580*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5580*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1861:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:5583*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5583*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1862:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:5586*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5586*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1863:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:5589*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5589*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1864:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:5592*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5592*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1865:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:5595*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5595*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1866:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:5598*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5598*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1867:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:5601*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5601*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1868:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:5604*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5604*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1869:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:5607*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5607*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1870:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:5610*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5610*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1871:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:5613*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5613*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1872:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:5616*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5616*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1873:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:5619*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5619*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1874:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:5622*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5622*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1875:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:5625*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5625*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1876:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d800000; valaddr_reg:x3; val_offset:5628*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5628*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1877:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d800001; valaddr_reg:x3; val_offset:5631*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5631*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1878:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d800003; valaddr_reg:x3; val_offset:5634*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5634*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1879:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d800007; valaddr_reg:x3; val_offset:5637*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5637*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1880:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d80000f; valaddr_reg:x3; val_offset:5640*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5640*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1881:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d80001f; valaddr_reg:x3; val_offset:5643*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5643*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1882:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d80003f; valaddr_reg:x3; val_offset:5646*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5646*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1883:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d80007f; valaddr_reg:x3; val_offset:5649*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5649*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1884:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d8000ff; valaddr_reg:x3; val_offset:5652*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5652*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1885:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d8001ff; valaddr_reg:x3; val_offset:5655*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5655*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1886:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d8003ff; valaddr_reg:x3; val_offset:5658*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5658*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1887:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d8007ff; valaddr_reg:x3; val_offset:5661*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5661*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1888:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d800fff; valaddr_reg:x3; val_offset:5664*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5664*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1889:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d801fff; valaddr_reg:x3; val_offset:5667*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5667*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1890:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d803fff; valaddr_reg:x3; val_offset:5670*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5670*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1891:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d807fff; valaddr_reg:x3; val_offset:5673*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5673*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1892:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d80ffff; valaddr_reg:x3; val_offset:5676*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5676*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1893:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d81ffff; valaddr_reg:x3; val_offset:5679*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5679*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1894:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d83ffff; valaddr_reg:x3; val_offset:5682*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5682*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1895:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d87ffff; valaddr_reg:x3; val_offset:5685*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5685*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1896:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d8fffff; valaddr_reg:x3; val_offset:5688*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5688*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1897:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8d9fffff; valaddr_reg:x3; val_offset:5691*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5691*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1898:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dbfffff; valaddr_reg:x3; val_offset:5694*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5694*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1899:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dc00000; valaddr_reg:x3; val_offset:5697*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5697*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1900:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8de00000; valaddr_reg:x3; val_offset:5700*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5700*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1901:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8df00000; valaddr_reg:x3; val_offset:5703*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5703*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1902:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8df80000; valaddr_reg:x3; val_offset:5706*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5706*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1903:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dfc0000; valaddr_reg:x3; val_offset:5709*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5709*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1904:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dfe0000; valaddr_reg:x3; val_offset:5712*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5712*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1905:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dff0000; valaddr_reg:x3; val_offset:5715*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5715*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1906:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dff8000; valaddr_reg:x3; val_offset:5718*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5718*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1907:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dffc000; valaddr_reg:x3; val_offset:5721*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5721*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1908:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dffe000; valaddr_reg:x3; val_offset:5724*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5724*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1909:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dfff000; valaddr_reg:x3; val_offset:5727*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5727*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1910:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dfff800; valaddr_reg:x3; val_offset:5730*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5730*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1911:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dfffc00; valaddr_reg:x3; val_offset:5733*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5733*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1912:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dfffe00; valaddr_reg:x3; val_offset:5736*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5736*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1913:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dffff00; valaddr_reg:x3; val_offset:5739*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5739*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1914:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dffff80; valaddr_reg:x3; val_offset:5742*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5742*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1915:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dffffc0; valaddr_reg:x3; val_offset:5745*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5745*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1916:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dffffe0; valaddr_reg:x3; val_offset:5748*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5748*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1917:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dfffff0; valaddr_reg:x3; val_offset:5751*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5751*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1918:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dfffff8; valaddr_reg:x3; val_offset:5754*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5754*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1919:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fee30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0fee30; op2val:0x80000000;
op3val:0x8dfffffc; valaddr_reg:x3; val_offset:5757*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5757*0 + 3*14*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2097978605,32,FLEN)
NAN_BOXED(32049514,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2097978605,32,FLEN)
NAN_BOXED(32049514,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2097978605,32,FLEN)
NAN_BOXED(32049514,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2097978605,32,FLEN)
NAN_BOXED(32049514,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2097978605,32,FLEN)
NAN_BOXED(32049514,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2097978605,32,FLEN)
NAN_BOXED(32049514,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761607680,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761607681,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761607683,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761607687,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761607695,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761607711,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761607743,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761607807,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761607935,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761608191,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761608703,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761609727,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761611775,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761615871,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761624063,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761640447,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761673215,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761738751,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1761869823,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1762131967,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1762656255,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1763704831,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1765801983,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1765801984,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1767899136,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1768947712,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769472000,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769734144,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769865216,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769930752,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769963520,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769979904,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769988096,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769992192,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769994240,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769995264,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769995776,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769996032,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769996160,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769996224,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769996256,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769996272,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769996280,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769996284,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769996286,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(1769996287,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2098056095,32,FLEN)
NAN_BOXED(1105663984,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976064,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976065,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976067,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976071,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976079,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976095,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976127,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976191,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976319,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976575,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373977087,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373978111,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373980159,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373984255,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373992447,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374008831,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374041599,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374107135,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374238207,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374500351,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2375024639,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2376073215,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2378170367,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2378170368,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2380267520,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2381316096,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2381840384,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382102528,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382233600,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382299136,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382331904,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382348288,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382356480,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382360576,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382362624,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382363648,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364160,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364416,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364544,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364608,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364640,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364656,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364664,32,FLEN)
NAN_BOXED(2098196016,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364668,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
