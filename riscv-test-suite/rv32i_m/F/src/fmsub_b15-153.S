
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_19456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5e87ffff; valaddr_reg:x3; val_offset:58368*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58368*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5e8fffff; valaddr_reg:x3; val_offset:58371*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58371*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5e9fffff; valaddr_reg:x3; val_offset:58374*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58374*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5ebfffff; valaddr_reg:x3; val_offset:58377*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58377*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5ec00000; valaddr_reg:x3; val_offset:58380*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58380*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5ee00000; valaddr_reg:x3; val_offset:58383*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58383*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5ef00000; valaddr_reg:x3; val_offset:58386*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58386*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5ef80000; valaddr_reg:x3; val_offset:58389*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58389*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5efc0000; valaddr_reg:x3; val_offset:58392*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58392*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5efe0000; valaddr_reg:x3; val_offset:58395*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58395*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5eff0000; valaddr_reg:x3; val_offset:58398*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58398*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5eff8000; valaddr_reg:x3; val_offset:58401*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58401*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5effc000; valaddr_reg:x3; val_offset:58404*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58404*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5effe000; valaddr_reg:x3; val_offset:58407*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58407*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5efff000; valaddr_reg:x3; val_offset:58410*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58410*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5efff800; valaddr_reg:x3; val_offset:58413*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58413*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5efffc00; valaddr_reg:x3; val_offset:58416*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58416*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5efffe00; valaddr_reg:x3; val_offset:58419*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58419*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5effff00; valaddr_reg:x3; val_offset:58422*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58422*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5effff80; valaddr_reg:x3; val_offset:58425*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58425*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5effffc0; valaddr_reg:x3; val_offset:58428*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58428*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5effffe0; valaddr_reg:x3; val_offset:58431*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58431*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5efffff0; valaddr_reg:x3; val_offset:58434*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58434*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5efffff8; valaddr_reg:x3; val_offset:58437*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58437*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5efffffc; valaddr_reg:x3; val_offset:58440*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58440*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5efffffe; valaddr_reg:x3; val_offset:58443*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58443*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x5effffff; valaddr_reg:x3; val_offset:58446*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58446*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x7f000001; valaddr_reg:x3; val_offset:58449*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58449*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x7f000003; valaddr_reg:x3; val_offset:58452*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58452*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x7f000007; valaddr_reg:x3; val_offset:58455*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58455*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x7f199999; valaddr_reg:x3; val_offset:58458*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58458*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x7f249249; valaddr_reg:x3; val_offset:58461*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58461*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x7f333333; valaddr_reg:x3; val_offset:58464*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58464*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:58467*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58467*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:58470*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58470*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x7f444444; valaddr_reg:x3; val_offset:58473*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58473*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:58476*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58476*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:58479*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58479*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x7f666666; valaddr_reg:x3; val_offset:58482*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58482*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:58485*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58485*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:58488*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58488*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:58491*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58491*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x232a12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8d404; op2val:0x40232a12;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:58494*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58494*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x32000000; valaddr_reg:x3; val_offset:58497*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58497*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x32000001; valaddr_reg:x3; val_offset:58500*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58500*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x32000003; valaddr_reg:x3; val_offset:58503*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58503*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x32000007; valaddr_reg:x3; val_offset:58506*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58506*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3200000f; valaddr_reg:x3; val_offset:58509*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58509*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3200001f; valaddr_reg:x3; val_offset:58512*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58512*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3200003f; valaddr_reg:x3; val_offset:58515*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58515*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3200007f; valaddr_reg:x3; val_offset:58518*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58518*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x320000ff; valaddr_reg:x3; val_offset:58521*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58521*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x320001ff; valaddr_reg:x3; val_offset:58524*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58524*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x320003ff; valaddr_reg:x3; val_offset:58527*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58527*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x320007ff; valaddr_reg:x3; val_offset:58530*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58530*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x32000fff; valaddr_reg:x3; val_offset:58533*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58533*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x32001fff; valaddr_reg:x3; val_offset:58536*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58536*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x32003fff; valaddr_reg:x3; val_offset:58539*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58539*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x32007fff; valaddr_reg:x3; val_offset:58542*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58542*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3200ffff; valaddr_reg:x3; val_offset:58545*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58545*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3201ffff; valaddr_reg:x3; val_offset:58548*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58548*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3203ffff; valaddr_reg:x3; val_offset:58551*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58551*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3207ffff; valaddr_reg:x3; val_offset:58554*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58554*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x320fffff; valaddr_reg:x3; val_offset:58557*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58557*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x321fffff; valaddr_reg:x3; val_offset:58560*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58560*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x323fffff; valaddr_reg:x3; val_offset:58563*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58563*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x32400000; valaddr_reg:x3; val_offset:58566*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58566*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x32600000; valaddr_reg:x3; val_offset:58569*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58569*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x32700000; valaddr_reg:x3; val_offset:58572*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58572*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x32780000; valaddr_reg:x3; val_offset:58575*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58575*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327c0000; valaddr_reg:x3; val_offset:58578*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58578*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327e0000; valaddr_reg:x3; val_offset:58581*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58581*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327f0000; valaddr_reg:x3; val_offset:58584*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58584*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327f8000; valaddr_reg:x3; val_offset:58587*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58587*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327fc000; valaddr_reg:x3; val_offset:58590*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58590*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327fe000; valaddr_reg:x3; val_offset:58593*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58593*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327ff000; valaddr_reg:x3; val_offset:58596*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58596*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327ff800; valaddr_reg:x3; val_offset:58599*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58599*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327ffc00; valaddr_reg:x3; val_offset:58602*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58602*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327ffe00; valaddr_reg:x3; val_offset:58605*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58605*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327fff00; valaddr_reg:x3; val_offset:58608*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58608*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327fff80; valaddr_reg:x3; val_offset:58611*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58611*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327fffc0; valaddr_reg:x3; val_offset:58614*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58614*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327fffe0; valaddr_reg:x3; val_offset:58617*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58617*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327ffff0; valaddr_reg:x3; val_offset:58620*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58620*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327ffff8; valaddr_reg:x3; val_offset:58623*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58623*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327ffffc; valaddr_reg:x3; val_offset:58626*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58626*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327ffffe; valaddr_reg:x3; val_offset:58629*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58629*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x64 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x327fffff; valaddr_reg:x3; val_offset:58632*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58632*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3f800001; valaddr_reg:x3; val_offset:58635*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58635*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3f800003; valaddr_reg:x3; val_offset:58638*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58638*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3f800007; valaddr_reg:x3; val_offset:58641*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58641*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3f999999; valaddr_reg:x3; val_offset:58644*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58644*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:58647*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58647*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:58650*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58650*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:58653*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58653*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:58656*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58656*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:58659*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58659*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:58662*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58662*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:58665*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58665*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:58668*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58668*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:58671*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58671*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:58674*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58674*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:58677*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58677*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48ddf9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5190fd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8ddf9; op2val:0x5190fd;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:58680*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58680*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:58683*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58683*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:58686*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58686*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:58689*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58689*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:58692*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58692*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:58695*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58695*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:58698*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58698*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:58701*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58701*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:58704*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58704*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:58707*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58707*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:58710*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58710*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:58713*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58713*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:58716*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58716*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:58719*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58719*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:58722*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58722*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:58725*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58725*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:58728*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58728*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x83000000; valaddr_reg:x3; val_offset:58731*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58731*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x83000001; valaddr_reg:x3; val_offset:58734*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58734*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x83000003; valaddr_reg:x3; val_offset:58737*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58737*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x83000007; valaddr_reg:x3; val_offset:58740*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58740*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x8300000f; valaddr_reg:x3; val_offset:58743*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58743*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x8300001f; valaddr_reg:x3; val_offset:58746*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58746*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x490d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec90d58; op2val:0x80000000;
op3val:0x8300003f; valaddr_reg:x3; val_offset:58749*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58749*0 + 3*152*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1585971199,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1586495487,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1587544063,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1589641215,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1589641216,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1591738368,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1592786944,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593311232,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593573376,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593704448,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593769984,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593802752,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593819136,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593827328,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593831424,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593833472,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593834496,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593835008,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593835264,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593835392,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593835456,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593835488,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593835504,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593835512,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593835516,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593835518,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(1593835519,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2127090692,32,FLEN)
NAN_BOXED(1076046354,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838860800,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838860801,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838860803,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838860807,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838860815,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838860831,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838860863,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838860927,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838861055,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838861311,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838861823,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838862847,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838864895,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838868991,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838877183,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838893567,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838926335,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(838991871,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(839122943,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(839385087,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(839909375,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(840957951,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(843055103,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(843055104,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(845152256,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(846200832,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(846725120,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(846987264,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847118336,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847183872,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847216640,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847233024,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847241216,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847245312,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847247360,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847248384,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847248896,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847249152,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847249280,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847249344,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847249376,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847249392,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847249400,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847249404,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847249406,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(847249407,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2127093241,32,FLEN)
NAN_BOXED(5345533,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815296,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815297,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815299,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815303,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815311,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815327,32,FLEN)
NAN_BOXED(2127105368,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815359,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
