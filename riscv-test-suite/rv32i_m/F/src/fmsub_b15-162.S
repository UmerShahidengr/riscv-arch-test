
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_20608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50f6c7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0f6c7; op2val:0x0;
op3val:0x77fffff; valaddr_reg:x3; val_offset:61824*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61824*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xbf800001; valaddr_reg:x3; val_offset:61827*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61827*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xbf800003; valaddr_reg:x3; val_offset:61830*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61830*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xbf800007; valaddr_reg:x3; val_offset:61833*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61833*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xbf999999; valaddr_reg:x3; val_offset:61836*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61836*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:61839*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61839*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:61842*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61842*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:61845*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61845*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:61848*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61848*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:61851*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61851*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:61854*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61854*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:61857*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61857*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:61860*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61860*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:61863*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61863*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:61866*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61866*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:61869*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61869*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:61872*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61872*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca000000; valaddr_reg:x3; val_offset:61875*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61875*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca000001; valaddr_reg:x3; val_offset:61878*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61878*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca000003; valaddr_reg:x3; val_offset:61881*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61881*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca000007; valaddr_reg:x3; val_offset:61884*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61884*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca00000f; valaddr_reg:x3; val_offset:61887*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61887*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca00001f; valaddr_reg:x3; val_offset:61890*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61890*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca00003f; valaddr_reg:x3; val_offset:61893*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61893*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca00007f; valaddr_reg:x3; val_offset:61896*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61896*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca0000ff; valaddr_reg:x3; val_offset:61899*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61899*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca0001ff; valaddr_reg:x3; val_offset:61902*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61902*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca0003ff; valaddr_reg:x3; val_offset:61905*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61905*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca0007ff; valaddr_reg:x3; val_offset:61908*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61908*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca000fff; valaddr_reg:x3; val_offset:61911*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61911*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca001fff; valaddr_reg:x3; val_offset:61914*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61914*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca003fff; valaddr_reg:x3; val_offset:61917*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61917*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca007fff; valaddr_reg:x3; val_offset:61920*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61920*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca00ffff; valaddr_reg:x3; val_offset:61923*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61923*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca01ffff; valaddr_reg:x3; val_offset:61926*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61926*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca03ffff; valaddr_reg:x3; val_offset:61929*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61929*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca07ffff; valaddr_reg:x3; val_offset:61932*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61932*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca0fffff; valaddr_reg:x3; val_offset:61935*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61935*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca1fffff; valaddr_reg:x3; val_offset:61938*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61938*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca3fffff; valaddr_reg:x3; val_offset:61941*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61941*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca400000; valaddr_reg:x3; val_offset:61944*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61944*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca600000; valaddr_reg:x3; val_offset:61947*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61947*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca700000; valaddr_reg:x3; val_offset:61950*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61950*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca780000; valaddr_reg:x3; val_offset:61953*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61953*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7c0000; valaddr_reg:x3; val_offset:61956*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61956*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7e0000; valaddr_reg:x3; val_offset:61959*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61959*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7f0000; valaddr_reg:x3; val_offset:61962*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61962*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7f8000; valaddr_reg:x3; val_offset:61965*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61965*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7fc000; valaddr_reg:x3; val_offset:61968*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61968*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7fe000; valaddr_reg:x3; val_offset:61971*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61971*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7ff000; valaddr_reg:x3; val_offset:61974*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61974*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7ff800; valaddr_reg:x3; val_offset:61977*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61977*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7ffc00; valaddr_reg:x3; val_offset:61980*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61980*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7ffe00; valaddr_reg:x3; val_offset:61983*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61983*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7fff00; valaddr_reg:x3; val_offset:61986*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61986*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7fff80; valaddr_reg:x3; val_offset:61989*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61989*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7fffc0; valaddr_reg:x3; val_offset:61992*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61992*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7fffe0; valaddr_reg:x3; val_offset:61995*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61995*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7ffff0; valaddr_reg:x3; val_offset:61998*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61998*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7ffff8; valaddr_reg:x3; val_offset:62001*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62001*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7ffffc; valaddr_reg:x3; val_offset:62004*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62004*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7ffffe; valaddr_reg:x3; val_offset:62007*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62007*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5161a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4e3fe1 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed161a5; op2val:0x804e3fe1;
op3val:0xca7fffff; valaddr_reg:x3; val_offset:62010*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62010*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8800000; valaddr_reg:x3; val_offset:62013*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62013*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8800001; valaddr_reg:x3; val_offset:62016*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62016*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8800003; valaddr_reg:x3; val_offset:62019*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62019*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8800007; valaddr_reg:x3; val_offset:62022*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62022*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe880000f; valaddr_reg:x3; val_offset:62025*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62025*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe880001f; valaddr_reg:x3; val_offset:62028*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62028*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe880003f; valaddr_reg:x3; val_offset:62031*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62031*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe880007f; valaddr_reg:x3; val_offset:62034*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62034*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe88000ff; valaddr_reg:x3; val_offset:62037*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62037*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe88001ff; valaddr_reg:x3; val_offset:62040*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62040*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe88003ff; valaddr_reg:x3; val_offset:62043*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62043*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe88007ff; valaddr_reg:x3; val_offset:62046*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62046*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8800fff; valaddr_reg:x3; val_offset:62049*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62049*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8801fff; valaddr_reg:x3; val_offset:62052*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62052*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8803fff; valaddr_reg:x3; val_offset:62055*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62055*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8807fff; valaddr_reg:x3; val_offset:62058*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62058*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe880ffff; valaddr_reg:x3; val_offset:62061*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62061*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe881ffff; valaddr_reg:x3; val_offset:62064*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62064*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe883ffff; valaddr_reg:x3; val_offset:62067*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62067*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe887ffff; valaddr_reg:x3; val_offset:62070*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62070*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe88fffff; valaddr_reg:x3; val_offset:62073*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62073*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe89fffff; valaddr_reg:x3; val_offset:62076*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62076*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8bfffff; valaddr_reg:x3; val_offset:62079*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62079*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8c00000; valaddr_reg:x3; val_offset:62082*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62082*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8e00000; valaddr_reg:x3; val_offset:62085*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62085*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8f00000; valaddr_reg:x3; val_offset:62088*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62088*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8f80000; valaddr_reg:x3; val_offset:62091*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62091*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8fc0000; valaddr_reg:x3; val_offset:62094*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62094*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8fe0000; valaddr_reg:x3; val_offset:62097*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62097*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8ff0000; valaddr_reg:x3; val_offset:62100*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62100*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8ff8000; valaddr_reg:x3; val_offset:62103*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62103*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8ffc000; valaddr_reg:x3; val_offset:62106*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62106*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8ffe000; valaddr_reg:x3; val_offset:62109*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62109*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8fff000; valaddr_reg:x3; val_offset:62112*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62112*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8fff800; valaddr_reg:x3; val_offset:62115*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62115*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8fffc00; valaddr_reg:x3; val_offset:62118*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62118*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8fffe00; valaddr_reg:x3; val_offset:62121*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62121*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8ffff00; valaddr_reg:x3; val_offset:62124*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62124*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8ffff80; valaddr_reg:x3; val_offset:62127*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62127*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8ffffc0; valaddr_reg:x3; val_offset:62130*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62130*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8ffffe0; valaddr_reg:x3; val_offset:62133*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62133*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8fffff0; valaddr_reg:x3; val_offset:62136*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62136*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8fffff8; valaddr_reg:x3; val_offset:62139*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62139*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8fffffc; valaddr_reg:x3; val_offset:62142*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62142*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8fffffe; valaddr_reg:x3; val_offset:62145*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62145*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xe8ffffff; valaddr_reg:x3; val_offset:62148*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62148*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xff000001; valaddr_reg:x3; val_offset:62151*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62151*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xff000003; valaddr_reg:x3; val_offset:62154*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62154*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xff000007; valaddr_reg:x3; val_offset:62157*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62157*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xff199999; valaddr_reg:x3; val_offset:62160*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62160*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xff249249; valaddr_reg:x3; val_offset:62163*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62163*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xff333333; valaddr_reg:x3; val_offset:62166*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62166*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:62169*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62169*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:62172*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62172*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xff444444; valaddr_reg:x3; val_offset:62175*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62175*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:62178*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62178*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:62181*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62181*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xff666666; valaddr_reg:x3; val_offset:62184*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62184*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:62187*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62187*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:62190*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62190*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:62193*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62193*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x520f7e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1bfe3d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed20f7e; op2val:0xc01bfe3d;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:62196*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62196*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xbf800001; valaddr_reg:x3; val_offset:62199*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62199*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xbf800003; valaddr_reg:x3; val_offset:62202*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62202*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xbf800007; valaddr_reg:x3; val_offset:62205*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62205*0 + 3*161*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127623879,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829119,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3388997632,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3388997633,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3388997635,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3388997639,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3388997647,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3388997663,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3388997695,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3388997759,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3388997887,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3388998143,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3388998655,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3388999679,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3389001727,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3389005823,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3389014015,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3389030399,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3389063167,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3389128703,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3389259775,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3389521919,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3390046207,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3391094783,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3393191935,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3393191936,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3395289088,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3396337664,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3396861952,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397124096,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397255168,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397320704,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397353472,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397369856,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397378048,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397382144,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397384192,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397385216,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397385728,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397385984,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397386112,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397386176,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397386208,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397386224,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397386232,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397386236,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397386238,32,FLEN)
NAN_BOXED(2127651237,32,FLEN)
NAN_BOXED(2152611809,32,FLEN)
NAN_BOXED(3397386239,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900702720,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900702721,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900702723,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900702727,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900702735,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900702751,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900702783,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900702847,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900702975,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900703231,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900703743,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900704767,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900706815,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900710911,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900719103,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900735487,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900768255,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900833791,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3900964863,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3901227007,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3901751295,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3902799871,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3904897023,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3904897024,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3906994176,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3908042752,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3908567040,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3908829184,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3908960256,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3909025792,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3909058560,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3909074944,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3909083136,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3909087232,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3909089280,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3909090304,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3909090816,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3909091072,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3909091200,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3909091264,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3909091296,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3909091312,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3909091320,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3909091324,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3909091326,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(3909091327,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2127695742,32,FLEN)
NAN_BOXED(3223060029,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
