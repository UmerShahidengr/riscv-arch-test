
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_20736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xbf999999; valaddr_reg:x3; val_offset:62208*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62208*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:62211*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62211*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:62214*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62214*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:62217*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62217*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:62220*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62220*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:62223*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62223*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:62226*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62226*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:62229*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62229*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:62232*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62232*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:62235*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62235*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:62238*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62238*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:62241*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62241*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:62244*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62244*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc6000000; valaddr_reg:x3; val_offset:62247*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62247*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc6000001; valaddr_reg:x3; val_offset:62250*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62250*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc6000003; valaddr_reg:x3; val_offset:62253*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62253*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc6000007; valaddr_reg:x3; val_offset:62256*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62256*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc600000f; valaddr_reg:x3; val_offset:62259*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62259*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc600001f; valaddr_reg:x3; val_offset:62262*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62262*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc600003f; valaddr_reg:x3; val_offset:62265*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62265*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc600007f; valaddr_reg:x3; val_offset:62268*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62268*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc60000ff; valaddr_reg:x3; val_offset:62271*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62271*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc60001ff; valaddr_reg:x3; val_offset:62274*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62274*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc60003ff; valaddr_reg:x3; val_offset:62277*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62277*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc60007ff; valaddr_reg:x3; val_offset:62280*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62280*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc6000fff; valaddr_reg:x3; val_offset:62283*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62283*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc6001fff; valaddr_reg:x3; val_offset:62286*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62286*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc6003fff; valaddr_reg:x3; val_offset:62289*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62289*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc6007fff; valaddr_reg:x3; val_offset:62292*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62292*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc600ffff; valaddr_reg:x3; val_offset:62295*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62295*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc601ffff; valaddr_reg:x3; val_offset:62298*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62298*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc603ffff; valaddr_reg:x3; val_offset:62301*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62301*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc607ffff; valaddr_reg:x3; val_offset:62304*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62304*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc60fffff; valaddr_reg:x3; val_offset:62307*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62307*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc61fffff; valaddr_reg:x3; val_offset:62310*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62310*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc63fffff; valaddr_reg:x3; val_offset:62313*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62313*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc6400000; valaddr_reg:x3; val_offset:62316*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62316*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc6600000; valaddr_reg:x3; val_offset:62319*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62319*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc6700000; valaddr_reg:x3; val_offset:62322*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62322*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc6780000; valaddr_reg:x3; val_offset:62325*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62325*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67c0000; valaddr_reg:x3; val_offset:62328*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62328*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67e0000; valaddr_reg:x3; val_offset:62331*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62331*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67f0000; valaddr_reg:x3; val_offset:62334*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62334*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67f8000; valaddr_reg:x3; val_offset:62337*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62337*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67fc000; valaddr_reg:x3; val_offset:62340*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62340*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67fe000; valaddr_reg:x3; val_offset:62343*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62343*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67ff000; valaddr_reg:x3; val_offset:62346*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62346*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67ff800; valaddr_reg:x3; val_offset:62349*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62349*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67ffc00; valaddr_reg:x3; val_offset:62352*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62352*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67ffe00; valaddr_reg:x3; val_offset:62355*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62355*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67fff00; valaddr_reg:x3; val_offset:62358*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62358*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67fff80; valaddr_reg:x3; val_offset:62361*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62361*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67fffc0; valaddr_reg:x3; val_offset:62364*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62364*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67fffe0; valaddr_reg:x3; val_offset:62367*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62367*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67ffff0; valaddr_reg:x3; val_offset:62370*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62370*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67ffff8; valaddr_reg:x3; val_offset:62373*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62373*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67ffffc; valaddr_reg:x3; val_offset:62376*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62376*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67ffffe; valaddr_reg:x3; val_offset:62379*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62379*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52a5bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4dc77c and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed2a5bf; op2val:0x804dc77c;
op3val:0xc67fffff; valaddr_reg:x3; val_offset:62382*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62382*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:62385*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62385*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:62388*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62388*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:62391*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62391*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:62394*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62394*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:62397*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62397*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:62400*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62400*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:62403*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62403*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:62406*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62406*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:62409*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62409*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:62412*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62412*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:62415*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62415*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:62418*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62418*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:62421*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62421*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:62424*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62424*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:62427*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62427*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:62430*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62430*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x5000000; valaddr_reg:x3; val_offset:62433*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62433*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x5000001; valaddr_reg:x3; val_offset:62436*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62436*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x5000003; valaddr_reg:x3; val_offset:62439*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62439*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x5000007; valaddr_reg:x3; val_offset:62442*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62442*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x500000f; valaddr_reg:x3; val_offset:62445*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62445*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x500001f; valaddr_reg:x3; val_offset:62448*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62448*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x500003f; valaddr_reg:x3; val_offset:62451*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62451*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x500007f; valaddr_reg:x3; val_offset:62454*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62454*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x50000ff; valaddr_reg:x3; val_offset:62457*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62457*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x50001ff; valaddr_reg:x3; val_offset:62460*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62460*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x50003ff; valaddr_reg:x3; val_offset:62463*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62463*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x50007ff; valaddr_reg:x3; val_offset:62466*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62466*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x5000fff; valaddr_reg:x3; val_offset:62469*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62469*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x5001fff; valaddr_reg:x3; val_offset:62472*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62472*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x5003fff; valaddr_reg:x3; val_offset:62475*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62475*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x5007fff; valaddr_reg:x3; val_offset:62478*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62478*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x500ffff; valaddr_reg:x3; val_offset:62481*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62481*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x501ffff; valaddr_reg:x3; val_offset:62484*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62484*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x503ffff; valaddr_reg:x3; val_offset:62487*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62487*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x507ffff; valaddr_reg:x3; val_offset:62490*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62490*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x50fffff; valaddr_reg:x3; val_offset:62493*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62493*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x51fffff; valaddr_reg:x3; val_offset:62496*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62496*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x53fffff; valaddr_reg:x3; val_offset:62499*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62499*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x5400000; valaddr_reg:x3; val_offset:62502*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62502*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x5600000; valaddr_reg:x3; val_offset:62505*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62505*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x5700000; valaddr_reg:x3; val_offset:62508*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62508*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x5780000; valaddr_reg:x3; val_offset:62511*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62511*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57c0000; valaddr_reg:x3; val_offset:62514*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62514*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57e0000; valaddr_reg:x3; val_offset:62517*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62517*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57f0000; valaddr_reg:x3; val_offset:62520*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62520*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57f8000; valaddr_reg:x3; val_offset:62523*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62523*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57fc000; valaddr_reg:x3; val_offset:62526*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62526*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57fe000; valaddr_reg:x3; val_offset:62529*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62529*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57ff000; valaddr_reg:x3; val_offset:62532*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62532*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57ff800; valaddr_reg:x3; val_offset:62535*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62535*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57ffc00; valaddr_reg:x3; val_offset:62538*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62538*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57ffe00; valaddr_reg:x3; val_offset:62541*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62541*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57fff00; valaddr_reg:x3; val_offset:62544*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62544*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57fff80; valaddr_reg:x3; val_offset:62547*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62547*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57fffc0; valaddr_reg:x3; val_offset:62550*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62550*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57fffe0; valaddr_reg:x3; val_offset:62553*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62553*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57ffff0; valaddr_reg:x3; val_offset:62556*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62556*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57ffff8; valaddr_reg:x3; val_offset:62559*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62559*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57ffffc; valaddr_reg:x3; val_offset:62562*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62562*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57ffffe; valaddr_reg:x3; val_offset:62565*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62565*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x536e28 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed36e28; op2val:0x0;
op3val:0x57fffff; valaddr_reg:x3; val_offset:62568*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62568*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38800000; valaddr_reg:x3; val_offset:62571*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62571*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38800001; valaddr_reg:x3; val_offset:62574*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62574*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38800003; valaddr_reg:x3; val_offset:62577*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62577*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38800007; valaddr_reg:x3; val_offset:62580*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62580*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3880000f; valaddr_reg:x3; val_offset:62583*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62583*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3880001f; valaddr_reg:x3; val_offset:62586*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62586*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3880003f; valaddr_reg:x3; val_offset:62589*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62589*0 + 3*162*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3321888768,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3321888769,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3321888771,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3321888775,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3321888783,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3321888799,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3321888831,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3321888895,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3321889023,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3321889279,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3321889791,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3321890815,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3321892863,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3321896959,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3321905151,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3321921535,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3321954303,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3322019839,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3322150911,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3322413055,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3322937343,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3323985919,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3326083071,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3326083072,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3328180224,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3329228800,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3329753088,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330015232,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330146304,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330211840,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330244608,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330260992,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330269184,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330273280,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330275328,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330276352,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330276864,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330277120,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330277248,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330277312,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330277344,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330277360,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330277368,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330277372,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330277374,32,FLEN)
NAN_BOXED(2127734207,32,FLEN)
NAN_BOXED(2152580988,32,FLEN)
NAN_BOXED(3330277375,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886080,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886081,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886083,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886087,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886095,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886111,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886143,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886207,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886335,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886591,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83887103,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83888127,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83890175,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83894271,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83902463,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83918847,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83951615,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84017151,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84148223,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84410367,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84934655,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(85983231,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080383,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080384,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(90177536,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91226112,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91750400,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92012544,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92143616,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92209152,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92241920,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92258304,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92266496,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92270592,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92272640,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92273664,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274176,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274432,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274560,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274624,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274656,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274672,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274680,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274684,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274686,32,FLEN)
NAN_BOXED(2127785512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274687,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(947912704,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(947912705,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(947912707,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(947912711,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(947912719,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(947912735,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(947912767,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
