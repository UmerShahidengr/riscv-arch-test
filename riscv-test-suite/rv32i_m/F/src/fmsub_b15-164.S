
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_20864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3880007f; valaddr_reg:x3; val_offset:62592*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62592*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x388000ff; valaddr_reg:x3; val_offset:62595*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62595*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x388001ff; valaddr_reg:x3; val_offset:62598*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62598*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x388003ff; valaddr_reg:x3; val_offset:62601*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62601*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x388007ff; valaddr_reg:x3; val_offset:62604*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62604*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38800fff; valaddr_reg:x3; val_offset:62607*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62607*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38801fff; valaddr_reg:x3; val_offset:62610*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62610*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38803fff; valaddr_reg:x3; val_offset:62613*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62613*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38807fff; valaddr_reg:x3; val_offset:62616*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62616*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3880ffff; valaddr_reg:x3; val_offset:62619*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62619*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3881ffff; valaddr_reg:x3; val_offset:62622*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62622*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3883ffff; valaddr_reg:x3; val_offset:62625*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62625*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3887ffff; valaddr_reg:x3; val_offset:62628*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62628*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x388fffff; valaddr_reg:x3; val_offset:62631*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62631*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x389fffff; valaddr_reg:x3; val_offset:62634*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62634*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38bfffff; valaddr_reg:x3; val_offset:62637*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62637*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38c00000; valaddr_reg:x3; val_offset:62640*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62640*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38e00000; valaddr_reg:x3; val_offset:62643*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62643*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38f00000; valaddr_reg:x3; val_offset:62646*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62646*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38f80000; valaddr_reg:x3; val_offset:62649*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62649*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38fc0000; valaddr_reg:x3; val_offset:62652*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62652*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38fe0000; valaddr_reg:x3; val_offset:62655*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62655*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38ff0000; valaddr_reg:x3; val_offset:62658*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62658*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38ff8000; valaddr_reg:x3; val_offset:62661*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62661*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38ffc000; valaddr_reg:x3; val_offset:62664*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62664*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38ffe000; valaddr_reg:x3; val_offset:62667*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62667*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38fff000; valaddr_reg:x3; val_offset:62670*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62670*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38fff800; valaddr_reg:x3; val_offset:62673*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62673*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38fffc00; valaddr_reg:x3; val_offset:62676*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62676*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38fffe00; valaddr_reg:x3; val_offset:62679*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62679*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38ffff00; valaddr_reg:x3; val_offset:62682*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62682*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38ffff80; valaddr_reg:x3; val_offset:62685*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62685*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38ffffc0; valaddr_reg:x3; val_offset:62688*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62688*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38ffffe0; valaddr_reg:x3; val_offset:62691*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62691*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38fffff0; valaddr_reg:x3; val_offset:62694*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62694*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38fffff8; valaddr_reg:x3; val_offset:62697*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62697*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38fffffc; valaddr_reg:x3; val_offset:62700*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62700*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38fffffe; valaddr_reg:x3; val_offset:62703*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62703*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x38ffffff; valaddr_reg:x3; val_offset:62706*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62706*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3f800001; valaddr_reg:x3; val_offset:62709*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62709*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3f800003; valaddr_reg:x3; val_offset:62712*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62712*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3f800007; valaddr_reg:x3; val_offset:62715*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62715*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3f999999; valaddr_reg:x3; val_offset:62718*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62718*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:62721*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62721*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:62724*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62724*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:62727*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62727*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:62730*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62730*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:62733*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62733*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:62736*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62736*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:62739*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62739*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:62742*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62742*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:62745*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62745*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:62748*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62748*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:62751*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62751*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53c6fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4d5d42 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3c6fb; op2val:0x4d5d42;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:62754*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62754*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:62757*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62757*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:62760*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62760*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:62763*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62763*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:62766*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62766*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:62769*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62769*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:62772*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62772*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:62775*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62775*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:62778*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62778*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:62781*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62781*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:62784*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62784*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:62787*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62787*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:62790*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62790*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:62793*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62793*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:62796*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62796*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:62799*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62799*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:62802*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62802*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a800000; valaddr_reg:x3; val_offset:62805*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62805*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a800001; valaddr_reg:x3; val_offset:62808*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62808*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a800003; valaddr_reg:x3; val_offset:62811*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62811*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a800007; valaddr_reg:x3; val_offset:62814*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62814*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a80000f; valaddr_reg:x3; val_offset:62817*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62817*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a80001f; valaddr_reg:x3; val_offset:62820*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62820*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a80003f; valaddr_reg:x3; val_offset:62823*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62823*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a80007f; valaddr_reg:x3; val_offset:62826*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62826*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a8000ff; valaddr_reg:x3; val_offset:62829*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62829*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a8001ff; valaddr_reg:x3; val_offset:62832*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62832*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a8003ff; valaddr_reg:x3; val_offset:62835*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62835*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a8007ff; valaddr_reg:x3; val_offset:62838*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62838*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a800fff; valaddr_reg:x3; val_offset:62841*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62841*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a801fff; valaddr_reg:x3; val_offset:62844*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62844*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a803fff; valaddr_reg:x3; val_offset:62847*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62847*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a807fff; valaddr_reg:x3; val_offset:62850*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62850*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a80ffff; valaddr_reg:x3; val_offset:62853*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62853*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a81ffff; valaddr_reg:x3; val_offset:62856*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62856*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a83ffff; valaddr_reg:x3; val_offset:62859*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62859*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a87ffff; valaddr_reg:x3; val_offset:62862*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62862*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a8fffff; valaddr_reg:x3; val_offset:62865*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62865*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8a9fffff; valaddr_reg:x3; val_offset:62868*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62868*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8abfffff; valaddr_reg:x3; val_offset:62871*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62871*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8ac00000; valaddr_reg:x3; val_offset:62874*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62874*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8ae00000; valaddr_reg:x3; val_offset:62877*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62877*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8af00000; valaddr_reg:x3; val_offset:62880*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62880*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8af80000; valaddr_reg:x3; val_offset:62883*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62883*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8afc0000; valaddr_reg:x3; val_offset:62886*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62886*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8afe0000; valaddr_reg:x3; val_offset:62889*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62889*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8aff0000; valaddr_reg:x3; val_offset:62892*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62892*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8aff8000; valaddr_reg:x3; val_offset:62895*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62895*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8affc000; valaddr_reg:x3; val_offset:62898*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62898*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8affe000; valaddr_reg:x3; val_offset:62901*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62901*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8afff000; valaddr_reg:x3; val_offset:62904*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62904*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8afff800; valaddr_reg:x3; val_offset:62907*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62907*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8afffc00; valaddr_reg:x3; val_offset:62910*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62910*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8afffe00; valaddr_reg:x3; val_offset:62913*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62913*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8affff00; valaddr_reg:x3; val_offset:62916*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62916*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8affff80; valaddr_reg:x3; val_offset:62919*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62919*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8affffc0; valaddr_reg:x3; val_offset:62922*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62922*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8affffe0; valaddr_reg:x3; val_offset:62925*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62925*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8afffff0; valaddr_reg:x3; val_offset:62928*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62928*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8afffff8; valaddr_reg:x3; val_offset:62931*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62931*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8afffffc; valaddr_reg:x3; val_offset:62934*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62934*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8afffffe; valaddr_reg:x3; val_offset:62937*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62937*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x561c9f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed61c9f; op2val:0x80000000;
op3val:0x8affffff; valaddr_reg:x3; val_offset:62940*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62940*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:62943*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62943*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:62946*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62946*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:62949*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62949*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:62952*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62952*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:62955*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62955*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:62958*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62958*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:62961*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62961*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:62964*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62964*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:62967*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62967*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:62970*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62970*0 + 3*163*FLEN/8, x4, x1, x2)

inst_20991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:62973*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62973*0 + 3*163*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(947912831,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(947912959,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(947913215,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(947913727,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(947914751,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(947916799,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(947920895,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(947929087,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(947945471,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(947978239,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(948043775,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(948174847,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(948436991,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(948961279,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(950009855,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(952107007,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(952107008,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(954204160,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(955252736,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(955777024,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956039168,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956170240,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956235776,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956268544,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956284928,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956293120,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956297216,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956299264,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956300288,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956300800,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956301056,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956301184,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956301248,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956301280,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956301296,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956301304,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956301308,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956301310,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(956301311,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2127808251,32,FLEN)
NAN_BOXED(5070146,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644416,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644417,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644419,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644423,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644431,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644447,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644479,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644543,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644671,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644927,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323645439,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323646463,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323648511,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323652607,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323660799,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323677183,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323709951,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323775487,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323906559,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2324168703,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2324692991,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2325741567,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2327838719,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2327838720,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2329935872,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2330984448,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331508736,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331770880,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331901952,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331967488,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332000256,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332016640,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332024832,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332028928,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332030976,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032000,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032512,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032768,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032896,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032960,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032992,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033008,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033016,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033020,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033022,32,FLEN)
NAN_BOXED(2127961247,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033023,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
