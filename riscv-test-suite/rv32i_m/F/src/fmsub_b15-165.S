
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_20992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:62976*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62976*0 + 3*164*FLEN/8, x4, x1, x2)

inst_20993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:62979*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62979*0 + 3*164*FLEN/8, x4, x1, x2)

inst_20994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:62982*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62982*0 + 3*164*FLEN/8, x4, x1, x2)

inst_20995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:62985*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62985*0 + 3*164*FLEN/8, x4, x1, x2)

inst_20996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:62988*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62988*0 + 3*164*FLEN/8, x4, x1, x2)

inst_20997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x89000000; valaddr_reg:x3; val_offset:62991*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62991*0 + 3*164*FLEN/8, x4, x1, x2)

inst_20998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x89000001; valaddr_reg:x3; val_offset:62994*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62994*0 + 3*164*FLEN/8, x4, x1, x2)

inst_20999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x89000003; valaddr_reg:x3; val_offset:62997*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62997*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x89000007; valaddr_reg:x3; val_offset:63000*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63000*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x8900000f; valaddr_reg:x3; val_offset:63003*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63003*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x8900001f; valaddr_reg:x3; val_offset:63006*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63006*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x8900003f; valaddr_reg:x3; val_offset:63009*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63009*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x8900007f; valaddr_reg:x3; val_offset:63012*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63012*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x890000ff; valaddr_reg:x3; val_offset:63015*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63015*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x890001ff; valaddr_reg:x3; val_offset:63018*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63018*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x890003ff; valaddr_reg:x3; val_offset:63021*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63021*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x890007ff; valaddr_reg:x3; val_offset:63024*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63024*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x89000fff; valaddr_reg:x3; val_offset:63027*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63027*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x89001fff; valaddr_reg:x3; val_offset:63030*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63030*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x89003fff; valaddr_reg:x3; val_offset:63033*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63033*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x89007fff; valaddr_reg:x3; val_offset:63036*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63036*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x8900ffff; valaddr_reg:x3; val_offset:63039*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63039*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x8901ffff; valaddr_reg:x3; val_offset:63042*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63042*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x8903ffff; valaddr_reg:x3; val_offset:63045*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63045*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x8907ffff; valaddr_reg:x3; val_offset:63048*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63048*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x890fffff; valaddr_reg:x3; val_offset:63051*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63051*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x891fffff; valaddr_reg:x3; val_offset:63054*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63054*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x893fffff; valaddr_reg:x3; val_offset:63057*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63057*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x89400000; valaddr_reg:x3; val_offset:63060*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63060*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x89600000; valaddr_reg:x3; val_offset:63063*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63063*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x89700000; valaddr_reg:x3; val_offset:63066*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63066*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x89780000; valaddr_reg:x3; val_offset:63069*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63069*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897c0000; valaddr_reg:x3; val_offset:63072*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63072*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897e0000; valaddr_reg:x3; val_offset:63075*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63075*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897f0000; valaddr_reg:x3; val_offset:63078*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63078*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897f8000; valaddr_reg:x3; val_offset:63081*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63081*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897fc000; valaddr_reg:x3; val_offset:63084*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63084*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897fe000; valaddr_reg:x3; val_offset:63087*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63087*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897ff000; valaddr_reg:x3; val_offset:63090*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63090*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897ff800; valaddr_reg:x3; val_offset:63093*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63093*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897ffc00; valaddr_reg:x3; val_offset:63096*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63096*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897ffe00; valaddr_reg:x3; val_offset:63099*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63099*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897fff00; valaddr_reg:x3; val_offset:63102*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63102*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897fff80; valaddr_reg:x3; val_offset:63105*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63105*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897fffc0; valaddr_reg:x3; val_offset:63108*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63108*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897fffe0; valaddr_reg:x3; val_offset:63111*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63111*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897ffff0; valaddr_reg:x3; val_offset:63114*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63114*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897ffff8; valaddr_reg:x3; val_offset:63117*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63117*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897ffffc; valaddr_reg:x3; val_offset:63120*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63120*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897ffffe; valaddr_reg:x3; val_offset:63123*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63123*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562a6e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62a6e; op2val:0x80000000;
op3val:0x897fffff; valaddr_reg:x3; val_offset:63126*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63126*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74800000; valaddr_reg:x3; val_offset:63129*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63129*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74800001; valaddr_reg:x3; val_offset:63132*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63132*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74800003; valaddr_reg:x3; val_offset:63135*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63135*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74800007; valaddr_reg:x3; val_offset:63138*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63138*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7480000f; valaddr_reg:x3; val_offset:63141*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63141*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7480001f; valaddr_reg:x3; val_offset:63144*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63144*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7480003f; valaddr_reg:x3; val_offset:63147*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63147*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7480007f; valaddr_reg:x3; val_offset:63150*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63150*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x748000ff; valaddr_reg:x3; val_offset:63153*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63153*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x748001ff; valaddr_reg:x3; val_offset:63156*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63156*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x748003ff; valaddr_reg:x3; val_offset:63159*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63159*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x748007ff; valaddr_reg:x3; val_offset:63162*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63162*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74800fff; valaddr_reg:x3; val_offset:63165*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63165*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74801fff; valaddr_reg:x3; val_offset:63168*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63168*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74803fff; valaddr_reg:x3; val_offset:63171*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63171*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74807fff; valaddr_reg:x3; val_offset:63174*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63174*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7480ffff; valaddr_reg:x3; val_offset:63177*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63177*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7481ffff; valaddr_reg:x3; val_offset:63180*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63180*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7483ffff; valaddr_reg:x3; val_offset:63183*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63183*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7487ffff; valaddr_reg:x3; val_offset:63186*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63186*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x748fffff; valaddr_reg:x3; val_offset:63189*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63189*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x749fffff; valaddr_reg:x3; val_offset:63192*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63192*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74bfffff; valaddr_reg:x3; val_offset:63195*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63195*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74c00000; valaddr_reg:x3; val_offset:63198*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63198*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74e00000; valaddr_reg:x3; val_offset:63201*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63201*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74f00000; valaddr_reg:x3; val_offset:63204*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63204*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74f80000; valaddr_reg:x3; val_offset:63207*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63207*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74fc0000; valaddr_reg:x3; val_offset:63210*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63210*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74fe0000; valaddr_reg:x3; val_offset:63213*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63213*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74ff0000; valaddr_reg:x3; val_offset:63216*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63216*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74ff8000; valaddr_reg:x3; val_offset:63219*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63219*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74ffc000; valaddr_reg:x3; val_offset:63222*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63222*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74ffe000; valaddr_reg:x3; val_offset:63225*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63225*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74fff000; valaddr_reg:x3; val_offset:63228*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63228*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74fff800; valaddr_reg:x3; val_offset:63231*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63231*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74fffc00; valaddr_reg:x3; val_offset:63234*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63234*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74fffe00; valaddr_reg:x3; val_offset:63237*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63237*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74ffff00; valaddr_reg:x3; val_offset:63240*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63240*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74ffff80; valaddr_reg:x3; val_offset:63243*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63243*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74ffffc0; valaddr_reg:x3; val_offset:63246*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63246*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74ffffe0; valaddr_reg:x3; val_offset:63249*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63249*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74fffff0; valaddr_reg:x3; val_offset:63252*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63252*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74fffff8; valaddr_reg:x3; val_offset:63255*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63255*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74fffffc; valaddr_reg:x3; val_offset:63258*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63258*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74fffffe; valaddr_reg:x3; val_offset:63261*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63261*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xe9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x74ffffff; valaddr_reg:x3; val_offset:63264*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63264*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7f000001; valaddr_reg:x3; val_offset:63267*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63267*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7f000003; valaddr_reg:x3; val_offset:63270*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63270*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7f000007; valaddr_reg:x3; val_offset:63273*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63273*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7f199999; valaddr_reg:x3; val_offset:63276*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63276*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7f249249; valaddr_reg:x3; val_offset:63279*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63279*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7f333333; valaddr_reg:x3; val_offset:63282*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63282*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:63285*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63285*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:63288*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63288*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7f444444; valaddr_reg:x3; val_offset:63291*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63291*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:63294*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63294*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:63297*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63297*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7f666666; valaddr_reg:x3; val_offset:63300*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63300*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:63303*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63303*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:63306*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63306*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:63309*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63309*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5690fc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x18b7a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed690fc; op2val:0x4018b7a1;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:63312*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63312*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x573c68 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed73c68; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:63315*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63315*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x573c68 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed73c68; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:63318*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63318*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x573c68 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed73c68; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:63321*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63321*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x573c68 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed73c68; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:63324*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63324*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x573c68 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed73c68; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:63327*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63327*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x573c68 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed73c68; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:63330*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63330*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x573c68 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed73c68; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:63333*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63333*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x573c68 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed73c68; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:63336*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63336*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x573c68 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed73c68; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:63339*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63339*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x573c68 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed73c68; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:63342*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63342*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x573c68 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed73c68; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:63345*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63345*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x573c68 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed73c68; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:63348*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63348*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x573c68 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed73c68; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:63351*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63351*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x573c68 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed73c68; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:63354*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63354*0 + 3*164*FLEN/8, x4, x1, x2)

inst_21119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x573c68 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed73c68; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:63357*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63357*0 + 3*164*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478592,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478593,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478595,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478599,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478607,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478623,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478655,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478719,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478847,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298479103,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298479615,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298480639,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298482687,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298486783,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298494975,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298511359,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298544127,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298609663,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298740735,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2299002879,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2299527167,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2300575743,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2302672895,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2302672896,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2304770048,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2305818624,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306342912,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306605056,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306736128,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306801664,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306834432,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306850816,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306859008,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306863104,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306865152,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866176,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866688,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866944,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867072,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867136,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867168,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867184,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867192,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867196,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867198,32,FLEN)
NAN_BOXED(2127964782,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867199,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954545664,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954545665,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954545667,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954545671,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954545679,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954545695,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954545727,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954545791,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954545919,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954546175,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954546687,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954547711,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954549759,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954553855,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954562047,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954578431,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954611199,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954676735,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1954807807,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1955069951,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1955594239,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1956642815,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1958739967,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1958739968,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1960837120,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1961885696,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962409984,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962672128,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962803200,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962868736,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962901504,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962917888,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962926080,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962930176,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962932224,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962933248,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962933760,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962934016,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962934144,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962934208,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962934240,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962934256,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962934264,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962934268,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962934270,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(1962934271,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2127991036,32,FLEN)
NAN_BOXED(1075361697,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2128034920,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2128034920,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2128034920,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2128034920,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2128034920,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2128034920,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2128034920,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2128034920,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2128034920,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2128034920,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2128034920,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2128034920,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2128034920,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2128034920,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2128034920,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
