
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_21248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86800007; valaddr_reg:x3; val_offset:63744*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63744*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x8680000f; valaddr_reg:x3; val_offset:63747*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63747*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x8680001f; valaddr_reg:x3; val_offset:63750*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63750*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x8680003f; valaddr_reg:x3; val_offset:63753*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63753*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x8680007f; valaddr_reg:x3; val_offset:63756*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63756*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x868000ff; valaddr_reg:x3; val_offset:63759*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63759*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x868001ff; valaddr_reg:x3; val_offset:63762*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63762*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x868003ff; valaddr_reg:x3; val_offset:63765*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63765*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x868007ff; valaddr_reg:x3; val_offset:63768*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63768*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86800fff; valaddr_reg:x3; val_offset:63771*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63771*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86801fff; valaddr_reg:x3; val_offset:63774*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63774*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86803fff; valaddr_reg:x3; val_offset:63777*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63777*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86807fff; valaddr_reg:x3; val_offset:63780*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63780*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x8680ffff; valaddr_reg:x3; val_offset:63783*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63783*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x8681ffff; valaddr_reg:x3; val_offset:63786*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63786*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x8683ffff; valaddr_reg:x3; val_offset:63789*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63789*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x8687ffff; valaddr_reg:x3; val_offset:63792*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63792*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x868fffff; valaddr_reg:x3; val_offset:63795*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63795*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x869fffff; valaddr_reg:x3; val_offset:63798*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63798*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86bfffff; valaddr_reg:x3; val_offset:63801*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63801*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86c00000; valaddr_reg:x3; val_offset:63804*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63804*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86e00000; valaddr_reg:x3; val_offset:63807*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63807*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86f00000; valaddr_reg:x3; val_offset:63810*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63810*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86f80000; valaddr_reg:x3; val_offset:63813*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63813*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86fc0000; valaddr_reg:x3; val_offset:63816*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63816*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86fe0000; valaddr_reg:x3; val_offset:63819*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63819*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86ff0000; valaddr_reg:x3; val_offset:63822*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63822*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86ff8000; valaddr_reg:x3; val_offset:63825*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63825*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86ffc000; valaddr_reg:x3; val_offset:63828*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63828*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86ffe000; valaddr_reg:x3; val_offset:63831*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63831*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86fff000; valaddr_reg:x3; val_offset:63834*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63834*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86fff800; valaddr_reg:x3; val_offset:63837*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63837*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86fffc00; valaddr_reg:x3; val_offset:63840*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63840*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86fffe00; valaddr_reg:x3; val_offset:63843*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63843*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86ffff00; valaddr_reg:x3; val_offset:63846*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63846*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86ffff80; valaddr_reg:x3; val_offset:63849*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63849*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86ffffc0; valaddr_reg:x3; val_offset:63852*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63852*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86ffffe0; valaddr_reg:x3; val_offset:63855*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63855*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86fffff0; valaddr_reg:x3; val_offset:63858*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63858*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86fffff8; valaddr_reg:x3; val_offset:63861*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63861*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86fffffc; valaddr_reg:x3; val_offset:63864*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63864*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86fffffe; valaddr_reg:x3; val_offset:63867*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63867*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a9945 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda9945; op2val:0x80000000;
op3val:0x86ffffff; valaddr_reg:x3; val_offset:63870*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63870*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:63873*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63873*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:63876*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63876*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:63879*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63879*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:63882*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63882*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:63885*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63885*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:63888*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63888*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:63891*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63891*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:63894*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63894*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:63897*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63897*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:63900*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63900*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:63903*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63903*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:63906*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63906*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:63909*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63909*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:63912*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63912*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:63915*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63915*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:63918*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63918*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x7000000; valaddr_reg:x3; val_offset:63921*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63921*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x7000001; valaddr_reg:x3; val_offset:63924*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63924*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x7000003; valaddr_reg:x3; val_offset:63927*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63927*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x7000007; valaddr_reg:x3; val_offset:63930*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63930*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x700000f; valaddr_reg:x3; val_offset:63933*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63933*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x700001f; valaddr_reg:x3; val_offset:63936*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63936*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x700003f; valaddr_reg:x3; val_offset:63939*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63939*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x700007f; valaddr_reg:x3; val_offset:63942*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63942*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x70000ff; valaddr_reg:x3; val_offset:63945*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63945*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x70001ff; valaddr_reg:x3; val_offset:63948*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63948*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x70003ff; valaddr_reg:x3; val_offset:63951*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63951*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x70007ff; valaddr_reg:x3; val_offset:63954*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63954*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x7000fff; valaddr_reg:x3; val_offset:63957*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63957*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x7001fff; valaddr_reg:x3; val_offset:63960*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63960*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x7003fff; valaddr_reg:x3; val_offset:63963*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63963*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x7007fff; valaddr_reg:x3; val_offset:63966*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63966*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x700ffff; valaddr_reg:x3; val_offset:63969*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63969*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x701ffff; valaddr_reg:x3; val_offset:63972*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63972*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x703ffff; valaddr_reg:x3; val_offset:63975*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63975*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x707ffff; valaddr_reg:x3; val_offset:63978*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63978*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x70fffff; valaddr_reg:x3; val_offset:63981*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63981*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x71fffff; valaddr_reg:x3; val_offset:63984*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63984*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x73fffff; valaddr_reg:x3; val_offset:63987*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63987*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x7400000; valaddr_reg:x3; val_offset:63990*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63990*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x7600000; valaddr_reg:x3; val_offset:63993*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63993*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x7700000; valaddr_reg:x3; val_offset:63996*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63996*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x7780000; valaddr_reg:x3; val_offset:63999*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63999*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77c0000; valaddr_reg:x3; val_offset:64002*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64002*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77e0000; valaddr_reg:x3; val_offset:64005*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64005*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77f0000; valaddr_reg:x3; val_offset:64008*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64008*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77f8000; valaddr_reg:x3; val_offset:64011*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64011*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77fc000; valaddr_reg:x3; val_offset:64014*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64014*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77fe000; valaddr_reg:x3; val_offset:64017*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64017*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77ff000; valaddr_reg:x3; val_offset:64020*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64020*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77ff800; valaddr_reg:x3; val_offset:64023*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64023*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77ffc00; valaddr_reg:x3; val_offset:64026*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64026*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77ffe00; valaddr_reg:x3; val_offset:64029*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64029*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77fff00; valaddr_reg:x3; val_offset:64032*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64032*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77fff80; valaddr_reg:x3; val_offset:64035*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64035*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77fffc0; valaddr_reg:x3; val_offset:64038*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64038*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77fffe0; valaddr_reg:x3; val_offset:64041*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64041*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77ffff0; valaddr_reg:x3; val_offset:64044*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64044*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77ffff8; valaddr_reg:x3; val_offset:64047*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64047*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77ffffc; valaddr_reg:x3; val_offset:64050*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64050*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77ffffe; valaddr_reg:x3; val_offset:64053*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64053*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc337b; op2val:0x0;
op3val:0x77fffff; valaddr_reg:x3; val_offset:64056*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64056*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25800000; valaddr_reg:x3; val_offset:64059*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64059*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25800001; valaddr_reg:x3; val_offset:64062*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64062*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25800003; valaddr_reg:x3; val_offset:64065*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64065*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25800007; valaddr_reg:x3; val_offset:64068*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64068*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x2580000f; valaddr_reg:x3; val_offset:64071*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64071*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x2580001f; valaddr_reg:x3; val_offset:64074*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64074*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x2580003f; valaddr_reg:x3; val_offset:64077*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64077*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x2580007f; valaddr_reg:x3; val_offset:64080*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64080*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x258000ff; valaddr_reg:x3; val_offset:64083*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64083*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x258001ff; valaddr_reg:x3; val_offset:64086*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64086*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x258003ff; valaddr_reg:x3; val_offset:64089*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64089*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x258007ff; valaddr_reg:x3; val_offset:64092*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64092*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25800fff; valaddr_reg:x3; val_offset:64095*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64095*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25801fff; valaddr_reg:x3; val_offset:64098*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64098*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25803fff; valaddr_reg:x3; val_offset:64101*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64101*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25807fff; valaddr_reg:x3; val_offset:64104*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64104*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x2580ffff; valaddr_reg:x3; val_offset:64107*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64107*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x2581ffff; valaddr_reg:x3; val_offset:64110*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64110*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x2583ffff; valaddr_reg:x3; val_offset:64113*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64113*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x2587ffff; valaddr_reg:x3; val_offset:64116*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64116*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x258fffff; valaddr_reg:x3; val_offset:64119*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64119*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x259fffff; valaddr_reg:x3; val_offset:64122*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64122*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25bfffff; valaddr_reg:x3; val_offset:64125*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64125*0 + 3*166*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535559,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535567,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535583,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535615,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535679,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535807,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256536063,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256536575,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256537599,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256539647,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256543743,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256551935,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256568319,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256601087,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256666623,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256797695,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2257059839,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2257584127,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2258632703,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2260729855,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2260729856,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2262827008,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2263875584,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264399872,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264662016,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264793088,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264858624,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264891392,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264907776,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264915968,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264920064,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264922112,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264923136,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264923648,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264923904,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924032,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924096,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924128,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924144,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924152,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924156,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924158,32,FLEN)
NAN_BOXED(2128255301,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924159,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440512,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440513,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440515,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440519,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440527,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440543,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440575,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440639,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440767,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117441023,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117441535,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117442559,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117444607,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117448703,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117456895,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117473279,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117506047,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117571583,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117702655,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117964799,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(118489087,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(119537663,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(121634815,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(121634816,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(123731968,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(124780544,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125304832,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125566976,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125698048,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125763584,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125796352,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125812736,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125820928,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125825024,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125827072,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828096,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828608,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828864,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828992,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829056,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829088,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829104,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829112,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829116,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829118,32,FLEN)
NAN_BOXED(2128360315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829119,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629145600,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629145601,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629145603,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629145607,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629145615,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629145631,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629145663,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629145727,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629145855,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629146111,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629146623,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629147647,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629149695,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629153791,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629161983,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629178367,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629211135,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629276671,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629407743,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(629669887,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(630194175,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(631242751,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(633339903,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
