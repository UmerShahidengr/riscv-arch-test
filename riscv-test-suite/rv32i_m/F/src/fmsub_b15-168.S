
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_21376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25c00000; valaddr_reg:x3; val_offset:64128*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64128*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25e00000; valaddr_reg:x3; val_offset:64131*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64131*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25f00000; valaddr_reg:x3; val_offset:64134*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64134*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25f80000; valaddr_reg:x3; val_offset:64137*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64137*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25fc0000; valaddr_reg:x3; val_offset:64140*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64140*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25fe0000; valaddr_reg:x3; val_offset:64143*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64143*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25ff0000; valaddr_reg:x3; val_offset:64146*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64146*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25ff8000; valaddr_reg:x3; val_offset:64149*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64149*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25ffc000; valaddr_reg:x3; val_offset:64152*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64152*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25ffe000; valaddr_reg:x3; val_offset:64155*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64155*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25fff000; valaddr_reg:x3; val_offset:64158*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64158*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25fff800; valaddr_reg:x3; val_offset:64161*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64161*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25fffc00; valaddr_reg:x3; val_offset:64164*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64164*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25fffe00; valaddr_reg:x3; val_offset:64167*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64167*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25ffff00; valaddr_reg:x3; val_offset:64170*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64170*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25ffff80; valaddr_reg:x3; val_offset:64173*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64173*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25ffffc0; valaddr_reg:x3; val_offset:64176*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64176*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25ffffe0; valaddr_reg:x3; val_offset:64179*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64179*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25fffff0; valaddr_reg:x3; val_offset:64182*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64182*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25fffff8; valaddr_reg:x3; val_offset:64185*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64185*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25fffffc; valaddr_reg:x3; val_offset:64188*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64188*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25fffffe; valaddr_reg:x3; val_offset:64191*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64191*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x25ffffff; valaddr_reg:x3; val_offset:64194*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64194*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x3f800001; valaddr_reg:x3; val_offset:64197*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64197*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x3f800003; valaddr_reg:x3; val_offset:64200*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64200*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x3f800007; valaddr_reg:x3; val_offset:64203*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64203*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x3f999999; valaddr_reg:x3; val_offset:64206*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64206*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:64209*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64209*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:64212*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64212*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:64215*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64215*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:64218*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64218*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:64221*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64221*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:64224*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64224*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:64227*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64227*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:64230*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64230*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:64233*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64233*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:64236*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64236*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:64239*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64239*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c9349 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4a474a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc9349; op2val:0x4a474a;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:64242*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64242*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xbf800001; valaddr_reg:x3; val_offset:64245*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64245*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xbf800003; valaddr_reg:x3; val_offset:64248*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64248*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xbf800007; valaddr_reg:x3; val_offset:64251*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64251*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xbf999999; valaddr_reg:x3; val_offset:64254*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64254*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:64257*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64257*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:64260*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64260*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:64263*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64263*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:64266*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64266*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:64269*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64269*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:64272*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64272*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:64275*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64275*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:64278*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64278*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:64281*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64281*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:64284*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64284*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:64287*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64287*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:64290*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64290*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8800000; valaddr_reg:x3; val_offset:64293*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64293*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8800001; valaddr_reg:x3; val_offset:64296*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64296*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8800003; valaddr_reg:x3; val_offset:64299*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64299*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8800007; valaddr_reg:x3; val_offset:64302*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64302*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc880000f; valaddr_reg:x3; val_offset:64305*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64305*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc880001f; valaddr_reg:x3; val_offset:64308*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64308*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc880003f; valaddr_reg:x3; val_offset:64311*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64311*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc880007f; valaddr_reg:x3; val_offset:64314*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64314*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc88000ff; valaddr_reg:x3; val_offset:64317*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64317*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc88001ff; valaddr_reg:x3; val_offset:64320*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64320*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc88003ff; valaddr_reg:x3; val_offset:64323*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64323*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc88007ff; valaddr_reg:x3; val_offset:64326*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64326*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8800fff; valaddr_reg:x3; val_offset:64329*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64329*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8801fff; valaddr_reg:x3; val_offset:64332*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64332*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8803fff; valaddr_reg:x3; val_offset:64335*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64335*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8807fff; valaddr_reg:x3; val_offset:64338*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64338*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc880ffff; valaddr_reg:x3; val_offset:64341*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64341*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc881ffff; valaddr_reg:x3; val_offset:64344*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64344*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc883ffff; valaddr_reg:x3; val_offset:64347*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64347*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc887ffff; valaddr_reg:x3; val_offset:64350*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64350*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc88fffff; valaddr_reg:x3; val_offset:64353*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64353*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc89fffff; valaddr_reg:x3; val_offset:64356*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64356*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8bfffff; valaddr_reg:x3; val_offset:64359*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64359*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8c00000; valaddr_reg:x3; val_offset:64362*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64362*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8e00000; valaddr_reg:x3; val_offset:64365*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64365*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8f00000; valaddr_reg:x3; val_offset:64368*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64368*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8f80000; valaddr_reg:x3; val_offset:64371*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64371*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8fc0000; valaddr_reg:x3; val_offset:64374*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64374*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8fe0000; valaddr_reg:x3; val_offset:64377*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64377*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8ff0000; valaddr_reg:x3; val_offset:64380*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64380*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8ff8000; valaddr_reg:x3; val_offset:64383*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64383*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8ffc000; valaddr_reg:x3; val_offset:64386*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64386*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8ffe000; valaddr_reg:x3; val_offset:64389*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64389*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8fff000; valaddr_reg:x3; val_offset:64392*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64392*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8fff800; valaddr_reg:x3; val_offset:64395*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64395*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8fffc00; valaddr_reg:x3; val_offset:64398*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64398*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8fffe00; valaddr_reg:x3; val_offset:64401*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64401*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8ffff00; valaddr_reg:x3; val_offset:64404*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64404*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8ffff80; valaddr_reg:x3; val_offset:64407*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64407*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8ffffc0; valaddr_reg:x3; val_offset:64410*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64410*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8ffffe0; valaddr_reg:x3; val_offset:64413*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64413*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8fffff0; valaddr_reg:x3; val_offset:64416*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64416*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8fffff8; valaddr_reg:x3; val_offset:64419*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64419*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8fffffc; valaddr_reg:x3; val_offset:64422*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64422*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8fffffe; valaddr_reg:x3; val_offset:64425*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64425*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d16a1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a1b29 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd16a1; op2val:0x804a1b29;
op3val:0xc8ffffff; valaddr_reg:x3; val_offset:64428*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64428*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:64431*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64431*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:64434*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64434*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:64437*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64437*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:64440*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64440*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:64443*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64443*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:64446*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64446*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:64449*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64449*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:64452*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64452*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:64455*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64455*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:64458*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64458*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:64461*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64461*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:64464*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64464*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:64467*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64467*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:64470*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64470*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:64473*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64473*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:64476*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64476*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x8b000000; valaddr_reg:x3; val_offset:64479*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64479*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x8b000001; valaddr_reg:x3; val_offset:64482*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64482*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x8b000003; valaddr_reg:x3; val_offset:64485*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64485*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x8b000007; valaddr_reg:x3; val_offset:64488*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64488*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x8b00000f; valaddr_reg:x3; val_offset:64491*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64491*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x8b00001f; valaddr_reg:x3; val_offset:64494*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64494*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x8b00003f; valaddr_reg:x3; val_offset:64497*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64497*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x8b00007f; valaddr_reg:x3; val_offset:64500*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64500*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x8b0000ff; valaddr_reg:x3; val_offset:64503*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64503*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x8b0001ff; valaddr_reg:x3; val_offset:64506*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64506*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ece35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edece35; op2val:0x80000000;
op3val:0x8b0003ff; valaddr_reg:x3; val_offset:64509*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64509*0 + 3*167*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(633339904,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(635437056,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(636485632,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637009920,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637272064,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637403136,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637468672,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637501440,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637517824,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637526016,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637530112,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637532160,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637533184,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637533696,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637533952,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637534080,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637534144,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637534176,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637534192,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637534200,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637534204,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637534206,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(637534207,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2128384841,32,FLEN)
NAN_BOXED(4867914,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363831808,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363831809,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363831811,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363831815,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363831823,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363831839,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363831871,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363831935,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363832063,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363832319,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363832831,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363833855,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363835903,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363839999,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363848191,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363864575,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363897343,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3363962879,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3364093951,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3364356095,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3364880383,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3365928959,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3368026111,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3368026112,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3370123264,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3371171840,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3371696128,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3371958272,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372089344,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372154880,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372187648,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372204032,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372212224,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372216320,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372218368,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372219392,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372219904,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372220160,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372220288,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372220352,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372220384,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372220400,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372220408,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372220412,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372220414,32,FLEN)
NAN_BOXED(2128418465,32,FLEN)
NAN_BOXED(2152340265,32,FLEN)
NAN_BOXED(3372220415,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033024,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033025,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033027,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033031,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033039,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033055,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033087,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033151,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033279,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033535,32,FLEN)
NAN_BOXED(2128530997,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332034047,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
