
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_2048:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c800003; valaddr_reg:x3; val_offset:6144*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6144*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2049:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c800007; valaddr_reg:x3; val_offset:6147*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6147*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2050:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c80000f; valaddr_reg:x3; val_offset:6150*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6150*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2051:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c80001f; valaddr_reg:x3; val_offset:6153*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6153*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2052:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c80003f; valaddr_reg:x3; val_offset:6156*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6156*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2053:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c80007f; valaddr_reg:x3; val_offset:6159*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6159*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2054:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c8000ff; valaddr_reg:x3; val_offset:6162*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6162*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2055:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c8001ff; valaddr_reg:x3; val_offset:6165*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6165*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2056:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c8003ff; valaddr_reg:x3; val_offset:6168*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6168*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2057:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c8007ff; valaddr_reg:x3; val_offset:6171*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6171*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2058:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c800fff; valaddr_reg:x3; val_offset:6174*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6174*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2059:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c801fff; valaddr_reg:x3; val_offset:6177*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6177*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2060:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c803fff; valaddr_reg:x3; val_offset:6180*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6180*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2061:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c807fff; valaddr_reg:x3; val_offset:6183*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6183*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2062:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c80ffff; valaddr_reg:x3; val_offset:6186*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6186*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2063:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c81ffff; valaddr_reg:x3; val_offset:6189*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6189*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2064:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c83ffff; valaddr_reg:x3; val_offset:6192*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6192*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2065:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c87ffff; valaddr_reg:x3; val_offset:6195*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6195*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2066:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c8fffff; valaddr_reg:x3; val_offset:6198*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6198*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2067:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7c9fffff; valaddr_reg:x3; val_offset:6201*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6201*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2068:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cbfffff; valaddr_reg:x3; val_offset:6204*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6204*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2069:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cc00000; valaddr_reg:x3; val_offset:6207*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6207*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2070:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7ce00000; valaddr_reg:x3; val_offset:6210*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6210*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2071:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cf00000; valaddr_reg:x3; val_offset:6213*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6213*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2072:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cf80000; valaddr_reg:x3; val_offset:6216*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6216*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2073:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cfc0000; valaddr_reg:x3; val_offset:6219*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6219*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2074:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cfe0000; valaddr_reg:x3; val_offset:6222*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6222*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2075:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cff0000; valaddr_reg:x3; val_offset:6225*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6225*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2076:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cff8000; valaddr_reg:x3; val_offset:6228*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6228*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2077:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cffc000; valaddr_reg:x3; val_offset:6231*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6231*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2078:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cffe000; valaddr_reg:x3; val_offset:6234*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6234*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2079:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cfff000; valaddr_reg:x3; val_offset:6237*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6237*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2080:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cfff800; valaddr_reg:x3; val_offset:6240*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6240*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2081:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cfffc00; valaddr_reg:x3; val_offset:6243*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6243*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2082:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cfffe00; valaddr_reg:x3; val_offset:6246*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6246*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2083:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cffff00; valaddr_reg:x3; val_offset:6249*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6249*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2084:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cffff80; valaddr_reg:x3; val_offset:6252*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6252*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2085:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cffffc0; valaddr_reg:x3; val_offset:6255*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6255*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2086:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cffffe0; valaddr_reg:x3; val_offset:6258*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6258*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2087:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cfffff0; valaddr_reg:x3; val_offset:6261*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6261*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2088:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cfffff8; valaddr_reg:x3; val_offset:6264*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6264*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2089:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cfffffc; valaddr_reg:x3; val_offset:6267*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6267*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2090:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cfffffe; valaddr_reg:x3; val_offset:6270*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6270*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2091:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7cffffff; valaddr_reg:x3; val_offset:6273*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6273*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2092:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7f000001; valaddr_reg:x3; val_offset:6276*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6276*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2093:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7f000003; valaddr_reg:x3; val_offset:6279*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6279*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2094:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7f000007; valaddr_reg:x3; val_offset:6282*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6282*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2095:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7f199999; valaddr_reg:x3; val_offset:6285*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6285*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2096:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7f249249; valaddr_reg:x3; val_offset:6288*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6288*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2097:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7f333333; valaddr_reg:x3; val_offset:6291*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6291*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2098:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:6294*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6294*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2099:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:6297*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6297*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2100:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7f444444; valaddr_reg:x3; val_offset:6300*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6300*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2101:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:6303*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6303*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2102:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:6306*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6306*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2103:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7f666666; valaddr_reg:x3; val_offset:6309*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6309*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2104:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:6312*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6312*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2105:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:6315*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6315*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2106:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:6318*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6318*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2107:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x48aa40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d234c07; op2val:0x41c8aa40;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:6321*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6321*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2108:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:6324*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6324*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2109:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:6327*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6327*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2110:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:6330*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6330*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2111:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:6333*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6333*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2112:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:6336*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6336*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2113:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:6339*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6339*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2114:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:6342*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6342*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2115:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:6345*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6345*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2116:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:6348*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6348*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2117:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:6351*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6351*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2118:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:6354*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6354*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2119:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:6357*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6357*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2120:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:6360*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6360*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2121:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:6363*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6363*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2122:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:6366*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6366*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2123:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:6369*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6369*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2124:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x9000000; valaddr_reg:x3; val_offset:6372*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6372*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2125:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x9000001; valaddr_reg:x3; val_offset:6375*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6375*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2126:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x9000003; valaddr_reg:x3; val_offset:6378*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6378*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2127:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x9000007; valaddr_reg:x3; val_offset:6381*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6381*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2128:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x900000f; valaddr_reg:x3; val_offset:6384*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6384*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2129:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x900001f; valaddr_reg:x3; val_offset:6387*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6387*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2130:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x900003f; valaddr_reg:x3; val_offset:6390*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6390*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2131:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x900007f; valaddr_reg:x3; val_offset:6393*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6393*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2132:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x90000ff; valaddr_reg:x3; val_offset:6396*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6396*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2133:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x90001ff; valaddr_reg:x3; val_offset:6399*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6399*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2134:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x90003ff; valaddr_reg:x3; val_offset:6402*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6402*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2135:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x90007ff; valaddr_reg:x3; val_offset:6405*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6405*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2136:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x9000fff; valaddr_reg:x3; val_offset:6408*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6408*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2137:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x9001fff; valaddr_reg:x3; val_offset:6411*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6411*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2138:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x9003fff; valaddr_reg:x3; val_offset:6414*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6414*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2139:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x9007fff; valaddr_reg:x3; val_offset:6417*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6417*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2140:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x900ffff; valaddr_reg:x3; val_offset:6420*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6420*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2141:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x901ffff; valaddr_reg:x3; val_offset:6423*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6423*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2142:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x903ffff; valaddr_reg:x3; val_offset:6426*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6426*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2143:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x907ffff; valaddr_reg:x3; val_offset:6429*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6429*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2144:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x90fffff; valaddr_reg:x3; val_offset:6432*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6432*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2145:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x91fffff; valaddr_reg:x3; val_offset:6435*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6435*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2146:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x93fffff; valaddr_reg:x3; val_offset:6438*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6438*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2147:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x9400000; valaddr_reg:x3; val_offset:6441*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6441*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2148:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x9600000; valaddr_reg:x3; val_offset:6444*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6444*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2149:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x9700000; valaddr_reg:x3; val_offset:6447*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6447*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2150:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x9780000; valaddr_reg:x3; val_offset:6450*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6450*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2151:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97c0000; valaddr_reg:x3; val_offset:6453*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6453*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2152:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97e0000; valaddr_reg:x3; val_offset:6456*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6456*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2153:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97f0000; valaddr_reg:x3; val_offset:6459*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6459*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2154:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97f8000; valaddr_reg:x3; val_offset:6462*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6462*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2155:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97fc000; valaddr_reg:x3; val_offset:6465*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6465*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2156:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97fe000; valaddr_reg:x3; val_offset:6468*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6468*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2157:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97ff000; valaddr_reg:x3; val_offset:6471*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6471*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2158:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97ff800; valaddr_reg:x3; val_offset:6474*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6474*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2159:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97ffc00; valaddr_reg:x3; val_offset:6477*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6477*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2160:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97ffe00; valaddr_reg:x3; val_offset:6480*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6480*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2161:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97fff00; valaddr_reg:x3; val_offset:6483*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6483*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2162:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97fff80; valaddr_reg:x3; val_offset:6486*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6486*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2163:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97fffc0; valaddr_reg:x3; val_offset:6489*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6489*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2164:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97fffe0; valaddr_reg:x3; val_offset:6492*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6492*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2165:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97ffff0; valaddr_reg:x3; val_offset:6495*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6495*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2166:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97ffff8; valaddr_reg:x3; val_offset:6498*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6498*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2167:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97ffffc; valaddr_reg:x3; val_offset:6501*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6501*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2168:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97ffffe; valaddr_reg:x3; val_offset:6504*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6504*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2169:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2621cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2621cd; op2val:0x0;
op3val:0x97fffff; valaddr_reg:x3; val_offset:6507*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6507*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2170:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2db9cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2db9cd; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:6510*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6510*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2171:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2db9cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2db9cd; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:6513*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6513*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2172:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2db9cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2db9cd; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:6516*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6516*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2173:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2db9cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2db9cd; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:6519*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6519*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2174:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2db9cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2db9cd; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:6522*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6522*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2175:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2db9cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2db9cd; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:6525*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6525*0 + 3*16*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2088763395,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2088763399,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2088763407,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2088763423,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2088763455,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2088763519,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2088763647,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2088763903,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2088764415,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2088765439,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2088767487,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2088771583,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2088779775,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2088796159,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2088828927,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2088894463,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2089025535,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2089287679,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2089811967,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2090860543,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2092957695,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2092957696,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2095054848,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2096103424,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2096627712,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2096889856,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097020928,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097086464,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097119232,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097135616,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097143808,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097147904,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097149952,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097150976,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097151488,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097151744,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097151872,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097151936,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097151968,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097151984,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097151992,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097151996,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097151998,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2097151999,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2099465223,32,FLEN)
NAN_BOXED(1103669824,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994944,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994945,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994947,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994951,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994959,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994975,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995007,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995071,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995199,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995455,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995967,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150996991,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150999039,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151003135,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151011327,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151027711,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151060479,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151126015,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151257087,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151519231,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(152043519,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(153092095,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(155189247,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(155189248,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(157286400,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(158334976,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(158859264,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159121408,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159252480,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159318016,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159350784,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159367168,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159375360,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159379456,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159381504,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159382528,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383040,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383296,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383424,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383488,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383520,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383536,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383544,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383548,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383550,32,FLEN)
NAN_BOXED(2099651021,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383551,32,FLEN)
NAN_BOXED(2100148685,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2100148685,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2100148685,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2100148685,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2100148685,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2100148685,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
