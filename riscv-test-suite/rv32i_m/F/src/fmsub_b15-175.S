
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_22272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x648b04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee48b04; op2val:0x0;
op3val:0x97ffc00; valaddr_reg:x3; val_offset:66816*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66816*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x648b04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee48b04; op2val:0x0;
op3val:0x97ffe00; valaddr_reg:x3; val_offset:66819*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66819*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x648b04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee48b04; op2val:0x0;
op3val:0x97fff00; valaddr_reg:x3; val_offset:66822*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66822*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x648b04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee48b04; op2val:0x0;
op3val:0x97fff80; valaddr_reg:x3; val_offset:66825*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66825*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x648b04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee48b04; op2val:0x0;
op3val:0x97fffc0; valaddr_reg:x3; val_offset:66828*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66828*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x648b04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee48b04; op2val:0x0;
op3val:0x97fffe0; valaddr_reg:x3; val_offset:66831*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66831*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x648b04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee48b04; op2val:0x0;
op3val:0x97ffff0; valaddr_reg:x3; val_offset:66834*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66834*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x648b04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee48b04; op2val:0x0;
op3val:0x97ffff8; valaddr_reg:x3; val_offset:66837*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66837*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x648b04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee48b04; op2val:0x0;
op3val:0x97ffffc; valaddr_reg:x3; val_offset:66840*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66840*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x648b04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee48b04; op2val:0x0;
op3val:0x97ffffe; valaddr_reg:x3; val_offset:66843*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66843*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x648b04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee48b04; op2val:0x0;
op3val:0x97fffff; valaddr_reg:x3; val_offset:66846*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66846*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xbf800001; valaddr_reg:x3; val_offset:66849*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66849*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xbf800003; valaddr_reg:x3; val_offset:66852*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66852*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xbf800007; valaddr_reg:x3; val_offset:66855*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66855*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xbf999999; valaddr_reg:x3; val_offset:66858*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66858*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:66861*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66861*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:66864*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66864*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:66867*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66867*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:66870*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66870*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:66873*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66873*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:66876*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66876*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:66879*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66879*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:66882*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66882*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:66885*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66885*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:66888*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66888*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:66891*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66891*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:66894*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66894*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5800000; valaddr_reg:x3; val_offset:66897*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66897*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5800001; valaddr_reg:x3; val_offset:66900*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66900*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5800003; valaddr_reg:x3; val_offset:66903*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66903*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5800007; valaddr_reg:x3; val_offset:66906*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66906*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc580000f; valaddr_reg:x3; val_offset:66909*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66909*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc580001f; valaddr_reg:x3; val_offset:66912*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66912*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc580003f; valaddr_reg:x3; val_offset:66915*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66915*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc580007f; valaddr_reg:x3; val_offset:66918*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66918*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc58000ff; valaddr_reg:x3; val_offset:66921*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66921*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc58001ff; valaddr_reg:x3; val_offset:66924*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66924*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc58003ff; valaddr_reg:x3; val_offset:66927*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66927*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc58007ff; valaddr_reg:x3; val_offset:66930*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66930*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5800fff; valaddr_reg:x3; val_offset:66933*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66933*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5801fff; valaddr_reg:x3; val_offset:66936*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66936*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5803fff; valaddr_reg:x3; val_offset:66939*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66939*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5807fff; valaddr_reg:x3; val_offset:66942*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66942*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc580ffff; valaddr_reg:x3; val_offset:66945*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66945*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc581ffff; valaddr_reg:x3; val_offset:66948*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66948*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc583ffff; valaddr_reg:x3; val_offset:66951*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66951*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc587ffff; valaddr_reg:x3; val_offset:66954*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66954*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc58fffff; valaddr_reg:x3; val_offset:66957*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66957*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc59fffff; valaddr_reg:x3; val_offset:66960*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66960*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5bfffff; valaddr_reg:x3; val_offset:66963*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66963*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5c00000; valaddr_reg:x3; val_offset:66966*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66966*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5e00000; valaddr_reg:x3; val_offset:66969*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66969*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5f00000; valaddr_reg:x3; val_offset:66972*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66972*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5f80000; valaddr_reg:x3; val_offset:66975*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66975*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5fc0000; valaddr_reg:x3; val_offset:66978*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66978*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5fe0000; valaddr_reg:x3; val_offset:66981*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66981*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5ff0000; valaddr_reg:x3; val_offset:66984*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66984*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5ff8000; valaddr_reg:x3; val_offset:66987*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66987*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5ffc000; valaddr_reg:x3; val_offset:66990*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66990*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5ffe000; valaddr_reg:x3; val_offset:66993*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66993*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5fff000; valaddr_reg:x3; val_offset:66996*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66996*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5fff800; valaddr_reg:x3; val_offset:66999*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66999*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5fffc00; valaddr_reg:x3; val_offset:67002*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67002*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5fffe00; valaddr_reg:x3; val_offset:67005*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67005*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5ffff00; valaddr_reg:x3; val_offset:67008*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67008*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5ffff80; valaddr_reg:x3; val_offset:67011*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67011*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5ffffc0; valaddr_reg:x3; val_offset:67014*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67014*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5ffffe0; valaddr_reg:x3; val_offset:67017*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67017*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5fffff0; valaddr_reg:x3; val_offset:67020*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67020*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5fffff8; valaddr_reg:x3; val_offset:67023*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67023*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5fffffc; valaddr_reg:x3; val_offset:67026*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67026*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5fffffe; valaddr_reg:x3; val_offset:67029*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67029*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6513ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x47858d and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee513ce; op2val:0x8047858d;
op3val:0xc5ffffff; valaddr_reg:x3; val_offset:67032*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67032*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64800000; valaddr_reg:x3; val_offset:67035*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67035*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64800001; valaddr_reg:x3; val_offset:67038*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67038*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64800003; valaddr_reg:x3; val_offset:67041*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67041*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64800007; valaddr_reg:x3; val_offset:67044*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67044*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x6480000f; valaddr_reg:x3; val_offset:67047*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67047*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x6480001f; valaddr_reg:x3; val_offset:67050*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67050*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x6480003f; valaddr_reg:x3; val_offset:67053*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67053*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x6480007f; valaddr_reg:x3; val_offset:67056*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67056*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x648000ff; valaddr_reg:x3; val_offset:67059*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67059*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x648001ff; valaddr_reg:x3; val_offset:67062*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67062*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x648003ff; valaddr_reg:x3; val_offset:67065*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67065*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x648007ff; valaddr_reg:x3; val_offset:67068*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67068*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64800fff; valaddr_reg:x3; val_offset:67071*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67071*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64801fff; valaddr_reg:x3; val_offset:67074*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67074*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64803fff; valaddr_reg:x3; val_offset:67077*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67077*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64807fff; valaddr_reg:x3; val_offset:67080*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67080*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x6480ffff; valaddr_reg:x3; val_offset:67083*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67083*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x6481ffff; valaddr_reg:x3; val_offset:67086*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67086*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x6483ffff; valaddr_reg:x3; val_offset:67089*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67089*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x6487ffff; valaddr_reg:x3; val_offset:67092*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67092*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x648fffff; valaddr_reg:x3; val_offset:67095*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67095*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x649fffff; valaddr_reg:x3; val_offset:67098*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67098*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64bfffff; valaddr_reg:x3; val_offset:67101*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67101*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64c00000; valaddr_reg:x3; val_offset:67104*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67104*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64e00000; valaddr_reg:x3; val_offset:67107*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67107*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64f00000; valaddr_reg:x3; val_offset:67110*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67110*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64f80000; valaddr_reg:x3; val_offset:67113*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67113*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64fc0000; valaddr_reg:x3; val_offset:67116*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67116*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64fe0000; valaddr_reg:x3; val_offset:67119*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67119*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64ff0000; valaddr_reg:x3; val_offset:67122*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67122*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64ff8000; valaddr_reg:x3; val_offset:67125*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67125*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64ffc000; valaddr_reg:x3; val_offset:67128*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67128*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64ffe000; valaddr_reg:x3; val_offset:67131*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67131*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64fff000; valaddr_reg:x3; val_offset:67134*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67134*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64fff800; valaddr_reg:x3; val_offset:67137*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67137*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64fffc00; valaddr_reg:x3; val_offset:67140*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67140*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64fffe00; valaddr_reg:x3; val_offset:67143*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67143*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64ffff00; valaddr_reg:x3; val_offset:67146*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67146*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64ffff80; valaddr_reg:x3; val_offset:67149*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67149*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64ffffc0; valaddr_reg:x3; val_offset:67152*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67152*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64ffffe0; valaddr_reg:x3; val_offset:67155*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67155*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64fffff0; valaddr_reg:x3; val_offset:67158*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67158*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64fffff8; valaddr_reg:x3; val_offset:67161*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67161*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64fffffc; valaddr_reg:x3; val_offset:67164*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67164*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64fffffe; valaddr_reg:x3; val_offset:67167*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67167*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x64ffffff; valaddr_reg:x3; val_offset:67170*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67170*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x7f000001; valaddr_reg:x3; val_offset:67173*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67173*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x7f000003; valaddr_reg:x3; val_offset:67176*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67176*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x7f000007; valaddr_reg:x3; val_offset:67179*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67179*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x7f199999; valaddr_reg:x3; val_offset:67182*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67182*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x7f249249; valaddr_reg:x3; val_offset:67185*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67185*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x7f333333; valaddr_reg:x3; val_offset:67188*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67188*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:67191*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67191*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:67194*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67194*0 + 3*174*FLEN/8, x4, x1, x2)

inst_22399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x7f444444; valaddr_reg:x3; val_offset:67197*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67197*0 + 3*174*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2128907012,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159382528,32,FLEN)
NAN_BOXED(2128907012,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383040,32,FLEN)
NAN_BOXED(2128907012,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383296,32,FLEN)
NAN_BOXED(2128907012,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383424,32,FLEN)
NAN_BOXED(2128907012,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383488,32,FLEN)
NAN_BOXED(2128907012,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383520,32,FLEN)
NAN_BOXED(2128907012,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383536,32,FLEN)
NAN_BOXED(2128907012,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383544,32,FLEN)
NAN_BOXED(2128907012,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383548,32,FLEN)
NAN_BOXED(2128907012,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383550,32,FLEN)
NAN_BOXED(2128907012,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383551,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313500160,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313500161,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313500163,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313500167,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313500175,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313500191,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313500223,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313500287,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313500415,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313500671,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313501183,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313502207,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313504255,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313508351,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313516543,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313532927,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313565695,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313631231,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3313762303,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3314024447,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3314548735,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3315597311,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3317694463,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3317694464,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3319791616,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3320840192,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321364480,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321626624,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321757696,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321823232,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321856000,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321872384,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321880576,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321884672,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321886720,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321887744,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321888256,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321888512,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321888640,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321888704,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321888736,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321888752,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321888760,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321888764,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321888766,32,FLEN)
NAN_BOXED(2128942030,32,FLEN)
NAN_BOXED(2152170893,32,FLEN)
NAN_BOXED(3321888767,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686110208,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686110209,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686110211,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686110215,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686110223,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686110239,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686110271,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686110335,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686110463,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686110719,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686111231,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686112255,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686114303,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686118399,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686126591,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686142975,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686175743,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686241279,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686372351,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1686634495,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1687158783,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1688207359,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1690304511,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1690304512,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1692401664,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1693450240,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1693974528,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694236672,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694367744,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694433280,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694466048,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694482432,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694490624,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694494720,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694496768,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694497792,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694498304,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694498560,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694498688,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694498752,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694498784,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694498800,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694498808,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694498812,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694498814,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(1694498815,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
