
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_22400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:67200*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67200*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:67203*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67203*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x7f666666; valaddr_reg:x3; val_offset:67206*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67206*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:67209*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67209*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:67212*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67212*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:67215*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67215*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ecf05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5742e; op2val:0x400ecf05;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:67218*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67218*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9800000; valaddr_reg:x3; val_offset:67221*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67221*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9800001; valaddr_reg:x3; val_offset:67224*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67224*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9800003; valaddr_reg:x3; val_offset:67227*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67227*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9800007; valaddr_reg:x3; val_offset:67230*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67230*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe980000f; valaddr_reg:x3; val_offset:67233*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67233*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe980001f; valaddr_reg:x3; val_offset:67236*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67236*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe980003f; valaddr_reg:x3; val_offset:67239*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67239*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe980007f; valaddr_reg:x3; val_offset:67242*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67242*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe98000ff; valaddr_reg:x3; val_offset:67245*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67245*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe98001ff; valaddr_reg:x3; val_offset:67248*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67248*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe98003ff; valaddr_reg:x3; val_offset:67251*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67251*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe98007ff; valaddr_reg:x3; val_offset:67254*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67254*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9800fff; valaddr_reg:x3; val_offset:67257*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67257*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9801fff; valaddr_reg:x3; val_offset:67260*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67260*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9803fff; valaddr_reg:x3; val_offset:67263*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67263*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9807fff; valaddr_reg:x3; val_offset:67266*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67266*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe980ffff; valaddr_reg:x3; val_offset:67269*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67269*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe981ffff; valaddr_reg:x3; val_offset:67272*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67272*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe983ffff; valaddr_reg:x3; val_offset:67275*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67275*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe987ffff; valaddr_reg:x3; val_offset:67278*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67278*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe98fffff; valaddr_reg:x3; val_offset:67281*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67281*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe99fffff; valaddr_reg:x3; val_offset:67284*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67284*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9bfffff; valaddr_reg:x3; val_offset:67287*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67287*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9c00000; valaddr_reg:x3; val_offset:67290*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67290*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9e00000; valaddr_reg:x3; val_offset:67293*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67293*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9f00000; valaddr_reg:x3; val_offset:67296*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67296*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9f80000; valaddr_reg:x3; val_offset:67299*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67299*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9fc0000; valaddr_reg:x3; val_offset:67302*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67302*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9fe0000; valaddr_reg:x3; val_offset:67305*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67305*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9ff0000; valaddr_reg:x3; val_offset:67308*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67308*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9ff8000; valaddr_reg:x3; val_offset:67311*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67311*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9ffc000; valaddr_reg:x3; val_offset:67314*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67314*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9ffe000; valaddr_reg:x3; val_offset:67317*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67317*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9fff000; valaddr_reg:x3; val_offset:67320*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67320*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9fff800; valaddr_reg:x3; val_offset:67323*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67323*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9fffc00; valaddr_reg:x3; val_offset:67326*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67326*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9fffe00; valaddr_reg:x3; val_offset:67329*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67329*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9ffff00; valaddr_reg:x3; val_offset:67332*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67332*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9ffff80; valaddr_reg:x3; val_offset:67335*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67335*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9ffffc0; valaddr_reg:x3; val_offset:67338*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67338*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9ffffe0; valaddr_reg:x3; val_offset:67341*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67341*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9fffff0; valaddr_reg:x3; val_offset:67344*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67344*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9fffff8; valaddr_reg:x3; val_offset:67347*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67347*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9fffffc; valaddr_reg:x3; val_offset:67350*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67350*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9fffffe; valaddr_reg:x3; val_offset:67353*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67353*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xe9ffffff; valaddr_reg:x3; val_offset:67356*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67356*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xff000001; valaddr_reg:x3; val_offset:67359*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67359*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xff000003; valaddr_reg:x3; val_offset:67362*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67362*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xff000007; valaddr_reg:x3; val_offset:67365*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67365*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xff199999; valaddr_reg:x3; val_offset:67368*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67368*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xff249249; valaddr_reg:x3; val_offset:67371*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67371*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xff333333; valaddr_reg:x3; val_offset:67374*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67374*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:67377*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67377*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:67380*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67380*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xff444444; valaddr_reg:x3; val_offset:67383*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67383*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:67386*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67386*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:67389*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67389*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xff666666; valaddr_reg:x3; val_offset:67392*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67392*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:67395*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67395*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:67398*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67398*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:67401*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67401*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6726a1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0dc29c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee726a1; op2val:0xc00dc29c;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:67404*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67404*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x39000000; valaddr_reg:x3; val_offset:67407*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67407*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x39000001; valaddr_reg:x3; val_offset:67410*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67410*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x39000003; valaddr_reg:x3; val_offset:67413*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67413*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x39000007; valaddr_reg:x3; val_offset:67416*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67416*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3900000f; valaddr_reg:x3; val_offset:67419*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67419*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3900001f; valaddr_reg:x3; val_offset:67422*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67422*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3900003f; valaddr_reg:x3; val_offset:67425*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67425*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3900007f; valaddr_reg:x3; val_offset:67428*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67428*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x390000ff; valaddr_reg:x3; val_offset:67431*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67431*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x390001ff; valaddr_reg:x3; val_offset:67434*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67434*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x390003ff; valaddr_reg:x3; val_offset:67437*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67437*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x390007ff; valaddr_reg:x3; val_offset:67440*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67440*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x39000fff; valaddr_reg:x3; val_offset:67443*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67443*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x39001fff; valaddr_reg:x3; val_offset:67446*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67446*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x39003fff; valaddr_reg:x3; val_offset:67449*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67449*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x39007fff; valaddr_reg:x3; val_offset:67452*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67452*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3900ffff; valaddr_reg:x3; val_offset:67455*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67455*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3901ffff; valaddr_reg:x3; val_offset:67458*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67458*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3903ffff; valaddr_reg:x3; val_offset:67461*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67461*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3907ffff; valaddr_reg:x3; val_offset:67464*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67464*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x390fffff; valaddr_reg:x3; val_offset:67467*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67467*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x391fffff; valaddr_reg:x3; val_offset:67470*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67470*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x393fffff; valaddr_reg:x3; val_offset:67473*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67473*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x39400000; valaddr_reg:x3; val_offset:67476*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67476*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x39600000; valaddr_reg:x3; val_offset:67479*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67479*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x39700000; valaddr_reg:x3; val_offset:67482*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67482*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x39780000; valaddr_reg:x3; val_offset:67485*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67485*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397c0000; valaddr_reg:x3; val_offset:67488*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67488*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397e0000; valaddr_reg:x3; val_offset:67491*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67491*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397f0000; valaddr_reg:x3; val_offset:67494*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67494*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397f8000; valaddr_reg:x3; val_offset:67497*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67497*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397fc000; valaddr_reg:x3; val_offset:67500*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67500*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397fe000; valaddr_reg:x3; val_offset:67503*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67503*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397ff000; valaddr_reg:x3; val_offset:67506*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67506*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397ff800; valaddr_reg:x3; val_offset:67509*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67509*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397ffc00; valaddr_reg:x3; val_offset:67512*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67512*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397ffe00; valaddr_reg:x3; val_offset:67515*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67515*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397fff00; valaddr_reg:x3; val_offset:67518*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67518*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397fff80; valaddr_reg:x3; val_offset:67521*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67521*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397fffc0; valaddr_reg:x3; val_offset:67524*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67524*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397fffe0; valaddr_reg:x3; val_offset:67527*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67527*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397ffff0; valaddr_reg:x3; val_offset:67530*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67530*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397ffff8; valaddr_reg:x3; val_offset:67533*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67533*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397ffffc; valaddr_reg:x3; val_offset:67536*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67536*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397ffffe; valaddr_reg:x3; val_offset:67539*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67539*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x397fffff; valaddr_reg:x3; val_offset:67542*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67542*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3f800001; valaddr_reg:x3; val_offset:67545*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67545*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3f800003; valaddr_reg:x3; val_offset:67548*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67548*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3f800007; valaddr_reg:x3; val_offset:67551*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67551*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3f999999; valaddr_reg:x3; val_offset:67554*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67554*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:67557*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67557*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:67560*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67560*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:67563*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67563*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:67566*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67566*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:67569*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67569*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:67572*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67572*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:67575*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67575*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:67578*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67578*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68613e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x468157 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8613e; op2val:0x468157;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:67581*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67581*0 + 3*175*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2128966702,32,FLEN)
NAN_BOXED(1074712325,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917479936,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917479937,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917479939,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917479943,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917479951,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917479967,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917479999,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917480063,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917480191,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917480447,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917480959,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917481983,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917484031,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917488127,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917496319,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917512703,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917545471,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917611007,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3917742079,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3918004223,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3918528511,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3919577087,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3921674239,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3921674240,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3923771392,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3924819968,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925344256,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925606400,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925737472,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925803008,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925835776,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925852160,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925860352,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925864448,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925866496,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925867520,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925868032,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925868288,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925868416,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925868480,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925868512,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925868528,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925868536,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925868540,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925868542,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(3925868543,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2129077921,32,FLEN)
NAN_BOXED(3222127260,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956301312,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956301313,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956301315,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956301319,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956301327,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956301343,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956301375,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956301439,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956301567,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956301823,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956302335,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956303359,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956305407,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956309503,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956317695,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956334079,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956366847,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956432383,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956563455,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(956825599,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(957349887,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(958398463,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(960495615,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(960495616,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(962592768,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(963641344,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964165632,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964427776,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964558848,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964624384,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964657152,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964673536,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964681728,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964685824,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964687872,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964688896,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964689408,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964689664,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964689792,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964689856,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964689888,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964689904,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964689912,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964689916,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964689918,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(964689919,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2129158462,32,FLEN)
NAN_BOXED(4620631,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
