
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_23040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:69120*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69120*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:69123*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69123*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:69126*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69126*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e000000; valaddr_reg:x3; val_offset:69129*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69129*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e000001; valaddr_reg:x3; val_offset:69132*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69132*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e000003; valaddr_reg:x3; val_offset:69135*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69135*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e000007; valaddr_reg:x3; val_offset:69138*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69138*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e00000f; valaddr_reg:x3; val_offset:69141*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69141*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e00001f; valaddr_reg:x3; val_offset:69144*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69144*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e00003f; valaddr_reg:x3; val_offset:69147*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69147*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e00007f; valaddr_reg:x3; val_offset:69150*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69150*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e0000ff; valaddr_reg:x3; val_offset:69153*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69153*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e0001ff; valaddr_reg:x3; val_offset:69156*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69156*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e0003ff; valaddr_reg:x3; val_offset:69159*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69159*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e0007ff; valaddr_reg:x3; val_offset:69162*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69162*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e000fff; valaddr_reg:x3; val_offset:69165*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69165*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e001fff; valaddr_reg:x3; val_offset:69168*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69168*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e003fff; valaddr_reg:x3; val_offset:69171*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69171*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e007fff; valaddr_reg:x3; val_offset:69174*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69174*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e00ffff; valaddr_reg:x3; val_offset:69177*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69177*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e01ffff; valaddr_reg:x3; val_offset:69180*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69180*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e03ffff; valaddr_reg:x3; val_offset:69183*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69183*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e07ffff; valaddr_reg:x3; val_offset:69186*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69186*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e0fffff; valaddr_reg:x3; val_offset:69189*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69189*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e1fffff; valaddr_reg:x3; val_offset:69192*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69192*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e3fffff; valaddr_reg:x3; val_offset:69195*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69195*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e400000; valaddr_reg:x3; val_offset:69198*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69198*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e600000; valaddr_reg:x3; val_offset:69201*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69201*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e700000; valaddr_reg:x3; val_offset:69204*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69204*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e780000; valaddr_reg:x3; val_offset:69207*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69207*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7c0000; valaddr_reg:x3; val_offset:69210*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69210*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7e0000; valaddr_reg:x3; val_offset:69213*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69213*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7f0000; valaddr_reg:x3; val_offset:69216*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69216*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7f8000; valaddr_reg:x3; val_offset:69219*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69219*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7fc000; valaddr_reg:x3; val_offset:69222*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69222*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7fe000; valaddr_reg:x3; val_offset:69225*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69225*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7ff000; valaddr_reg:x3; val_offset:69228*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69228*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7ff800; valaddr_reg:x3; val_offset:69231*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69231*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7ffc00; valaddr_reg:x3; val_offset:69234*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69234*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7ffe00; valaddr_reg:x3; val_offset:69237*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69237*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7fff00; valaddr_reg:x3; val_offset:69240*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69240*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7fff80; valaddr_reg:x3; val_offset:69243*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69243*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7fffc0; valaddr_reg:x3; val_offset:69246*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69246*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7fffe0; valaddr_reg:x3; val_offset:69249*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69249*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7ffff0; valaddr_reg:x3; val_offset:69252*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69252*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7ffff8; valaddr_reg:x3; val_offset:69255*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69255*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7ffffc; valaddr_reg:x3; val_offset:69258*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69258*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7ffffe; valaddr_reg:x3; val_offset:69261*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69261*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cad48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecad48; op2val:0x80000000;
op3val:0x8e7fffff; valaddr_reg:x3; val_offset:69264*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69264*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba800000; valaddr_reg:x3; val_offset:69267*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69267*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba800001; valaddr_reg:x3; val_offset:69270*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69270*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba800003; valaddr_reg:x3; val_offset:69273*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69273*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba800007; valaddr_reg:x3; val_offset:69276*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69276*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba80000f; valaddr_reg:x3; val_offset:69279*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69279*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba80001f; valaddr_reg:x3; val_offset:69282*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69282*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba80003f; valaddr_reg:x3; val_offset:69285*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69285*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba80007f; valaddr_reg:x3; val_offset:69288*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69288*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba8000ff; valaddr_reg:x3; val_offset:69291*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69291*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba8001ff; valaddr_reg:x3; val_offset:69294*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69294*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba8003ff; valaddr_reg:x3; val_offset:69297*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69297*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba8007ff; valaddr_reg:x3; val_offset:69300*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69300*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba800fff; valaddr_reg:x3; val_offset:69303*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69303*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba801fff; valaddr_reg:x3; val_offset:69306*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69306*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba803fff; valaddr_reg:x3; val_offset:69309*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69309*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba807fff; valaddr_reg:x3; val_offset:69312*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69312*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba80ffff; valaddr_reg:x3; val_offset:69315*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69315*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba81ffff; valaddr_reg:x3; val_offset:69318*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69318*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba83ffff; valaddr_reg:x3; val_offset:69321*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69321*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba87ffff; valaddr_reg:x3; val_offset:69324*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69324*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba8fffff; valaddr_reg:x3; val_offset:69327*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69327*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xba9fffff; valaddr_reg:x3; val_offset:69330*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69330*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbabfffff; valaddr_reg:x3; val_offset:69333*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69333*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbac00000; valaddr_reg:x3; val_offset:69336*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69336*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbae00000; valaddr_reg:x3; val_offset:69339*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69339*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbaf00000; valaddr_reg:x3; val_offset:69342*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69342*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbaf80000; valaddr_reg:x3; val_offset:69345*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69345*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbafc0000; valaddr_reg:x3; val_offset:69348*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69348*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbafe0000; valaddr_reg:x3; val_offset:69351*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69351*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbaff0000; valaddr_reg:x3; val_offset:69354*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69354*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbaff8000; valaddr_reg:x3; val_offset:69357*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69357*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbaffc000; valaddr_reg:x3; val_offset:69360*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69360*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbaffe000; valaddr_reg:x3; val_offset:69363*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69363*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbafff000; valaddr_reg:x3; val_offset:69366*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69366*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbafff800; valaddr_reg:x3; val_offset:69369*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69369*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbafffc00; valaddr_reg:x3; val_offset:69372*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69372*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbafffe00; valaddr_reg:x3; val_offset:69375*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69375*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbaffff00; valaddr_reg:x3; val_offset:69378*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69378*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbaffff80; valaddr_reg:x3; val_offset:69381*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69381*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbaffffc0; valaddr_reg:x3; val_offset:69384*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69384*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbaffffe0; valaddr_reg:x3; val_offset:69387*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69387*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbafffff0; valaddr_reg:x3; val_offset:69390*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69390*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbafffff8; valaddr_reg:x3; val_offset:69393*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69393*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbafffffc; valaddr_reg:x3; val_offset:69396*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69396*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbafffffe; valaddr_reg:x3; val_offset:69399*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69399*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbaffffff; valaddr_reg:x3; val_offset:69402*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69402*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbf800001; valaddr_reg:x3; val_offset:69405*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69405*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbf800003; valaddr_reg:x3; val_offset:69408*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69408*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbf800007; valaddr_reg:x3; val_offset:69411*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69411*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbf999999; valaddr_reg:x3; val_offset:69414*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69414*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:69417*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69417*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:69420*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69420*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:69423*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69423*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:69426*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69426*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:69429*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69429*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:69432*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69432*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:69435*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69435*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:69438*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69438*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:69441*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69441*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:69444*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69444*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:69447*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69447*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6cc07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x453407 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eecc07d; op2val:0x80453407;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:69450*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69450*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd000000; valaddr_reg:x3; val_offset:69453*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69453*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd000001; valaddr_reg:x3; val_offset:69456*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69456*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd000003; valaddr_reg:x3; val_offset:69459*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69459*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd000007; valaddr_reg:x3; val_offset:69462*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69462*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd00000f; valaddr_reg:x3; val_offset:69465*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69465*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd00001f; valaddr_reg:x3; val_offset:69468*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69468*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd00003f; valaddr_reg:x3; val_offset:69471*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69471*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd00007f; valaddr_reg:x3; val_offset:69474*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69474*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd0000ff; valaddr_reg:x3; val_offset:69477*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69477*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd0001ff; valaddr_reg:x3; val_offset:69480*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69480*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd0003ff; valaddr_reg:x3; val_offset:69483*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69483*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd0007ff; valaddr_reg:x3; val_offset:69486*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69486*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd000fff; valaddr_reg:x3; val_offset:69489*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69489*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd001fff; valaddr_reg:x3; val_offset:69492*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69492*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd003fff; valaddr_reg:x3; val_offset:69495*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69495*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd007fff; valaddr_reg:x3; val_offset:69498*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69498*0 + 3*180*FLEN/8, x4, x1, x2)

inst_23167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd00ffff; valaddr_reg:x3; val_offset:69501*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69501*0 + 3*180*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364672,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364673,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364675,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364679,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364687,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364703,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364735,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364799,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364927,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382365183,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382365695,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382366719,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382368767,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382372863,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382381055,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382397439,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382430207,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382495743,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382626815,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382888959,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2383413247,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2384461823,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2386558975,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2386558976,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2388656128,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2389704704,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390228992,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390491136,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390622208,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390687744,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390720512,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390736896,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390745088,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390749184,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390751232,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390752256,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390752768,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753024,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753152,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753216,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753248,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753264,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753272,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753276,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753278,32,FLEN)
NAN_BOXED(2129440072,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753279,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3128950784,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3128950785,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3128950787,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3128950791,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3128950799,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3128950815,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3128950847,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3128950911,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3128951039,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3128951295,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3128951807,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3128952831,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3128954879,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3128958975,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3128967167,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3128983551,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3129016319,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3129081855,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3129212927,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3129475071,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3129999359,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3131047935,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3133145087,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3133145088,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3135242240,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3136290816,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3136815104,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137077248,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137208320,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137273856,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137306624,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137323008,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137331200,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137335296,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137337344,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137338368,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137338880,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137339136,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137339264,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137339328,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137339360,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137339376,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137339384,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137339388,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137339390,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3137339391,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2129444989,32,FLEN)
NAN_BOXED(2152018951,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3170893824,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3170893825,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3170893827,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3170893831,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3170893839,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3170893855,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3170893887,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3170893951,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3170894079,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3170894335,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3170894847,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3170895871,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3170897919,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3170902015,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3170910207,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3170926591,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3170959359,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
