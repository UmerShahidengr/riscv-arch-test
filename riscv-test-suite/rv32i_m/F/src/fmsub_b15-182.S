
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_23168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd01ffff; valaddr_reg:x3; val_offset:69504*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69504*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd03ffff; valaddr_reg:x3; val_offset:69507*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69507*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd07ffff; valaddr_reg:x3; val_offset:69510*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69510*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd0fffff; valaddr_reg:x3; val_offset:69513*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69513*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd1fffff; valaddr_reg:x3; val_offset:69516*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69516*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd3fffff; valaddr_reg:x3; val_offset:69519*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69519*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd400000; valaddr_reg:x3; val_offset:69522*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69522*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd600000; valaddr_reg:x3; val_offset:69525*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69525*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd700000; valaddr_reg:x3; val_offset:69528*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69528*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd780000; valaddr_reg:x3; val_offset:69531*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69531*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7c0000; valaddr_reg:x3; val_offset:69534*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69534*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7e0000; valaddr_reg:x3; val_offset:69537*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69537*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7f0000; valaddr_reg:x3; val_offset:69540*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69540*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7f8000; valaddr_reg:x3; val_offset:69543*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69543*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7fc000; valaddr_reg:x3; val_offset:69546*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69546*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7fe000; valaddr_reg:x3; val_offset:69549*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69549*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7ff000; valaddr_reg:x3; val_offset:69552*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69552*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7ff800; valaddr_reg:x3; val_offset:69555*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69555*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7ffc00; valaddr_reg:x3; val_offset:69558*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69558*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7ffe00; valaddr_reg:x3; val_offset:69561*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69561*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7fff00; valaddr_reg:x3; val_offset:69564*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69564*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7fff80; valaddr_reg:x3; val_offset:69567*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69567*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7fffc0; valaddr_reg:x3; val_offset:69570*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69570*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7fffe0; valaddr_reg:x3; val_offset:69573*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69573*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7ffff0; valaddr_reg:x3; val_offset:69576*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69576*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7ffff8; valaddr_reg:x3; val_offset:69579*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69579*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7ffffc; valaddr_reg:x3; val_offset:69582*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69582*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7ffffe; valaddr_reg:x3; val_offset:69585*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69585*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbd7fffff; valaddr_reg:x3; val_offset:69588*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69588*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbf800001; valaddr_reg:x3; val_offset:69591*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69591*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbf800003; valaddr_reg:x3; val_offset:69594*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69594*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbf800007; valaddr_reg:x3; val_offset:69597*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69597*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbf999999; valaddr_reg:x3; val_offset:69600*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69600*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:69603*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69603*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:69606*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69606*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:69609*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69609*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:69612*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69612*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:69615*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69615*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:69618*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69618*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:69621*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69621*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:69624*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69624*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:69627*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69627*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:69630*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69630*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:69633*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69633*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d61c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x450504 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed61c2; op2val:0x80450504;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:69636*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69636*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x63000000; valaddr_reg:x3; val_offset:69639*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69639*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x63000001; valaddr_reg:x3; val_offset:69642*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69642*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x63000003; valaddr_reg:x3; val_offset:69645*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69645*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x63000007; valaddr_reg:x3; val_offset:69648*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69648*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x6300000f; valaddr_reg:x3; val_offset:69651*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69651*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x6300001f; valaddr_reg:x3; val_offset:69654*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69654*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x6300003f; valaddr_reg:x3; val_offset:69657*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69657*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x6300007f; valaddr_reg:x3; val_offset:69660*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69660*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x630000ff; valaddr_reg:x3; val_offset:69663*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69663*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x630001ff; valaddr_reg:x3; val_offset:69666*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69666*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x630003ff; valaddr_reg:x3; val_offset:69669*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69669*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x630007ff; valaddr_reg:x3; val_offset:69672*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69672*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x63000fff; valaddr_reg:x3; val_offset:69675*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69675*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x63001fff; valaddr_reg:x3; val_offset:69678*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69678*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x63003fff; valaddr_reg:x3; val_offset:69681*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69681*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x63007fff; valaddr_reg:x3; val_offset:69684*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69684*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x6300ffff; valaddr_reg:x3; val_offset:69687*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69687*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x6301ffff; valaddr_reg:x3; val_offset:69690*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69690*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x6303ffff; valaddr_reg:x3; val_offset:69693*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69693*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x6307ffff; valaddr_reg:x3; val_offset:69696*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69696*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x630fffff; valaddr_reg:x3; val_offset:69699*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69699*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x631fffff; valaddr_reg:x3; val_offset:69702*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69702*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x633fffff; valaddr_reg:x3; val_offset:69705*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69705*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x63400000; valaddr_reg:x3; val_offset:69708*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69708*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x63600000; valaddr_reg:x3; val_offset:69711*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69711*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x63700000; valaddr_reg:x3; val_offset:69714*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69714*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x63780000; valaddr_reg:x3; val_offset:69717*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69717*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637c0000; valaddr_reg:x3; val_offset:69720*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69720*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637e0000; valaddr_reg:x3; val_offset:69723*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69723*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637f0000; valaddr_reg:x3; val_offset:69726*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69726*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637f8000; valaddr_reg:x3; val_offset:69729*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69729*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637fc000; valaddr_reg:x3; val_offset:69732*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69732*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637fe000; valaddr_reg:x3; val_offset:69735*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69735*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637ff000; valaddr_reg:x3; val_offset:69738*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69738*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637ff800; valaddr_reg:x3; val_offset:69741*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69741*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637ffc00; valaddr_reg:x3; val_offset:69744*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69744*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637ffe00; valaddr_reg:x3; val_offset:69747*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69747*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637fff00; valaddr_reg:x3; val_offset:69750*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69750*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637fff80; valaddr_reg:x3; val_offset:69753*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69753*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637fffc0; valaddr_reg:x3; val_offset:69756*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69756*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637fffe0; valaddr_reg:x3; val_offset:69759*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69759*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637ffff0; valaddr_reg:x3; val_offset:69762*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69762*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637ffff8; valaddr_reg:x3; val_offset:69765*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69765*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637ffffc; valaddr_reg:x3; val_offset:69768*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69768*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637ffffe; valaddr_reg:x3; val_offset:69771*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69771*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x637fffff; valaddr_reg:x3; val_offset:69774*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69774*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x7f000001; valaddr_reg:x3; val_offset:69777*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69777*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x7f000003; valaddr_reg:x3; val_offset:69780*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69780*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x7f000007; valaddr_reg:x3; val_offset:69783*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69783*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x7f199999; valaddr_reg:x3; val_offset:69786*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69786*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x7f249249; valaddr_reg:x3; val_offset:69789*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69789*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x7f333333; valaddr_reg:x3; val_offset:69792*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69792*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:69795*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69795*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:69798*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69798*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x7f444444; valaddr_reg:x3; val_offset:69801*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69801*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:69804*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69804*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:69807*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69807*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x7f666666; valaddr_reg:x3; val_offset:69810*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69810*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:69813*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69813*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:69816*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69816*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:69819*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69819*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09bfa8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eede1eb; op2val:0x4009bfa8;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:69822*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69822*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b000000; valaddr_reg:x3; val_offset:69825*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69825*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b000001; valaddr_reg:x3; val_offset:69828*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69828*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b000003; valaddr_reg:x3; val_offset:69831*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69831*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b000007; valaddr_reg:x3; val_offset:69834*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69834*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b00000f; valaddr_reg:x3; val_offset:69837*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69837*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b00001f; valaddr_reg:x3; val_offset:69840*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69840*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b00003f; valaddr_reg:x3; val_offset:69843*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69843*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b00007f; valaddr_reg:x3; val_offset:69846*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69846*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b0000ff; valaddr_reg:x3; val_offset:69849*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69849*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b0001ff; valaddr_reg:x3; val_offset:69852*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69852*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b0003ff; valaddr_reg:x3; val_offset:69855*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69855*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b0007ff; valaddr_reg:x3; val_offset:69858*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69858*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b000fff; valaddr_reg:x3; val_offset:69861*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69861*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b001fff; valaddr_reg:x3; val_offset:69864*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69864*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b003fff; valaddr_reg:x3; val_offset:69867*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69867*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b007fff; valaddr_reg:x3; val_offset:69870*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69870*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b00ffff; valaddr_reg:x3; val_offset:69873*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69873*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b01ffff; valaddr_reg:x3; val_offset:69876*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69876*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b03ffff; valaddr_reg:x3; val_offset:69879*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69879*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b07ffff; valaddr_reg:x3; val_offset:69882*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69882*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6eb148 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44a3fe and fs3 == 0 and fe3 == 0x76 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeeb148; op2val:0x44a3fe;
op3val:0x3b0fffff; valaddr_reg:x3; val_offset:69885*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69885*0 + 3*181*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3171024895,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3171155967,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3171418111,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3171942399,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3172990975,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3175088127,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3175088128,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3177185280,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3178233856,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3178758144,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179020288,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179151360,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179216896,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179249664,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179266048,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179274240,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179278336,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179280384,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179281408,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179281920,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179282176,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179282304,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179282368,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179282400,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179282416,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179282424,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179282428,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179282430,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3179282431,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2129486274,32,FLEN)
NAN_BOXED(2152006916,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1660944384,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1660944385,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1660944387,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1660944391,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1660944399,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1660944415,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1660944447,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1660944511,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1660944639,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1660944895,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1660945407,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1660946431,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1660948479,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1660952575,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1660960767,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1660977151,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1661009919,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1661075455,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1661206527,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1661468671,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1661992959,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1663041535,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1665138687,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1665138688,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1667235840,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1668284416,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1668808704,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669070848,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669201920,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669267456,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669300224,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669316608,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669324800,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669328896,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669330944,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669331968,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669332480,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669332736,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669332864,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669332928,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669332960,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669332976,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669332984,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669332988,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669332990,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(1669332991,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2129519083,32,FLEN)
NAN_BOXED(1074380712,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989855744,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989855745,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989855747,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989855751,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989855759,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989855775,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989855807,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989855871,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989855999,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989856255,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989856767,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989857791,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989859839,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989863935,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989872127,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989888511,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989921279,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(989986815,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(990117887,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(990380031,32,FLEN)
NAN_BOXED(2129572168,32,FLEN)
NAN_BOXED(4498430,32,FLEN)
NAN_BOXED(990904319,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
