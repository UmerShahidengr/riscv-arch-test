
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_23936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdf00000; valaddr_reg:x3; val_offset:71808*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71808*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdf80000; valaddr_reg:x3; val_offset:71811*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71811*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdfc0000; valaddr_reg:x3; val_offset:71814*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71814*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdfe0000; valaddr_reg:x3; val_offset:71817*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71817*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdff0000; valaddr_reg:x3; val_offset:71820*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71820*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdff8000; valaddr_reg:x3; val_offset:71823*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71823*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdffc000; valaddr_reg:x3; val_offset:71826*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71826*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdffe000; valaddr_reg:x3; val_offset:71829*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71829*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdfff000; valaddr_reg:x3; val_offset:71832*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71832*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdfff800; valaddr_reg:x3; val_offset:71835*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71835*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdfffc00; valaddr_reg:x3; val_offset:71838*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71838*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdfffe00; valaddr_reg:x3; val_offset:71841*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71841*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdffff00; valaddr_reg:x3; val_offset:71844*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71844*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdffff80; valaddr_reg:x3; val_offset:71847*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71847*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdffffc0; valaddr_reg:x3; val_offset:71850*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71850*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdffffe0; valaddr_reg:x3; val_offset:71853*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71853*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdfffff0; valaddr_reg:x3; val_offset:71856*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71856*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdfffff8; valaddr_reg:x3; val_offset:71859*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71859*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdfffffc; valaddr_reg:x3; val_offset:71862*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71862*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdfffffe; valaddr_reg:x3; val_offset:71865*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71865*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x749afd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef49afd; op2val:0x0;
op3val:0xdffffff; valaddr_reg:x3; val_offset:71868*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71868*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1800000; valaddr_reg:x3; val_offset:71871*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71871*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1800001; valaddr_reg:x3; val_offset:71874*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71874*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1800003; valaddr_reg:x3; val_offset:71877*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71877*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1800007; valaddr_reg:x3; val_offset:71880*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71880*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb180000f; valaddr_reg:x3; val_offset:71883*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71883*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb180001f; valaddr_reg:x3; val_offset:71886*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71886*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb180003f; valaddr_reg:x3; val_offset:71889*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71889*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb180007f; valaddr_reg:x3; val_offset:71892*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71892*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb18000ff; valaddr_reg:x3; val_offset:71895*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71895*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb18001ff; valaddr_reg:x3; val_offset:71898*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71898*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb18003ff; valaddr_reg:x3; val_offset:71901*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71901*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb18007ff; valaddr_reg:x3; val_offset:71904*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71904*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1800fff; valaddr_reg:x3; val_offset:71907*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71907*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1801fff; valaddr_reg:x3; val_offset:71910*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71910*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1803fff; valaddr_reg:x3; val_offset:71913*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71913*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1807fff; valaddr_reg:x3; val_offset:71916*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71916*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb180ffff; valaddr_reg:x3; val_offset:71919*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71919*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb181ffff; valaddr_reg:x3; val_offset:71922*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71922*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb183ffff; valaddr_reg:x3; val_offset:71925*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71925*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb187ffff; valaddr_reg:x3; val_offset:71928*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71928*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb18fffff; valaddr_reg:x3; val_offset:71931*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71931*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb19fffff; valaddr_reg:x3; val_offset:71934*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71934*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1bfffff; valaddr_reg:x3; val_offset:71937*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71937*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1c00000; valaddr_reg:x3; val_offset:71940*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71940*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1e00000; valaddr_reg:x3; val_offset:71943*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71943*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1f00000; valaddr_reg:x3; val_offset:71946*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71946*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1f80000; valaddr_reg:x3; val_offset:71949*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71949*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1fc0000; valaddr_reg:x3; val_offset:71952*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71952*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1fe0000; valaddr_reg:x3; val_offset:71955*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71955*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1ff0000; valaddr_reg:x3; val_offset:71958*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71958*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1ff8000; valaddr_reg:x3; val_offset:71961*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71961*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1ffc000; valaddr_reg:x3; val_offset:71964*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71964*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1ffe000; valaddr_reg:x3; val_offset:71967*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71967*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1fff000; valaddr_reg:x3; val_offset:71970*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71970*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1fff800; valaddr_reg:x3; val_offset:71973*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71973*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1fffc00; valaddr_reg:x3; val_offset:71976*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71976*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1fffe00; valaddr_reg:x3; val_offset:71979*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71979*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1ffff00; valaddr_reg:x3; val_offset:71982*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71982*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1ffff80; valaddr_reg:x3; val_offset:71985*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71985*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1ffffc0; valaddr_reg:x3; val_offset:71988*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71988*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1ffffe0; valaddr_reg:x3; val_offset:71991*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71991*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1fffff0; valaddr_reg:x3; val_offset:71994*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71994*0 + 3*187*FLEN/8, x4, x1, x2)

inst_23999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1fffff8; valaddr_reg:x3; val_offset:71997*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71997*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1fffffc; valaddr_reg:x3; val_offset:72000*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72000*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1fffffe; valaddr_reg:x3; val_offset:72003*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72003*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xb1ffffff; valaddr_reg:x3; val_offset:72006*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72006*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xbf800001; valaddr_reg:x3; val_offset:72009*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72009*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xbf800003; valaddr_reg:x3; val_offset:72012*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72012*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xbf800007; valaddr_reg:x3; val_offset:72015*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72015*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xbf999999; valaddr_reg:x3; val_offset:72018*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72018*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:72021*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72021*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:72024*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72024*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:72027*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72027*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:72030*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72030*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:72033*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72033*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:72036*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72036*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:72039*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72039*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:72042*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72042*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:72045*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72045*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:72048*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72048*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:72051*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72051*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b8a0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x42f31c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b8a0; op2val:0x8042f31c;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:72054*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72054*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:72057*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72057*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:72060*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72060*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:72063*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72063*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:72066*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72066*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:72069*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72069*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:72072*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72072*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:72075*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72075*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:72078*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72078*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:72081*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72081*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:72084*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72084*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:72087*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72087*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:72090*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72090*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:72093*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72093*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:72096*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72096*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:72099*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72099*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:72102*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72102*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81800000; valaddr_reg:x3; val_offset:72105*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72105*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81800001; valaddr_reg:x3; val_offset:72108*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72108*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81800003; valaddr_reg:x3; val_offset:72111*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72111*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81800007; valaddr_reg:x3; val_offset:72114*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72114*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x8180000f; valaddr_reg:x3; val_offset:72117*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72117*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x8180001f; valaddr_reg:x3; val_offset:72120*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72120*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x8180003f; valaddr_reg:x3; val_offset:72123*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72123*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x8180007f; valaddr_reg:x3; val_offset:72126*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72126*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x818000ff; valaddr_reg:x3; val_offset:72129*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72129*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x818001ff; valaddr_reg:x3; val_offset:72132*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72132*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x818003ff; valaddr_reg:x3; val_offset:72135*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72135*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x818007ff; valaddr_reg:x3; val_offset:72138*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72138*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81800fff; valaddr_reg:x3; val_offset:72141*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72141*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81801fff; valaddr_reg:x3; val_offset:72144*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72144*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81803fff; valaddr_reg:x3; val_offset:72147*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72147*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81807fff; valaddr_reg:x3; val_offset:72150*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72150*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x8180ffff; valaddr_reg:x3; val_offset:72153*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72153*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x8181ffff; valaddr_reg:x3; val_offset:72156*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72156*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x8183ffff; valaddr_reg:x3; val_offset:72159*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72159*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x8187ffff; valaddr_reg:x3; val_offset:72162*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72162*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x818fffff; valaddr_reg:x3; val_offset:72165*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72165*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x819fffff; valaddr_reg:x3; val_offset:72168*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72168*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81bfffff; valaddr_reg:x3; val_offset:72171*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72171*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81c00000; valaddr_reg:x3; val_offset:72174*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72174*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81e00000; valaddr_reg:x3; val_offset:72177*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72177*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81f00000; valaddr_reg:x3; val_offset:72180*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72180*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81f80000; valaddr_reg:x3; val_offset:72183*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72183*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81fc0000; valaddr_reg:x3; val_offset:72186*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72186*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81fe0000; valaddr_reg:x3; val_offset:72189*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72189*0 + 3*187*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(233832448,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234356736,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234618880,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234749952,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234815488,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234848256,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234864640,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234872832,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234876928,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234878976,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880000,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880512,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880768,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880896,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880960,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880992,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881008,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881016,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881020,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881022,32,FLEN)
NAN_BOXED(2129959677,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881023,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2977955840,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2977955841,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2977955843,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2977955847,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2977955855,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2977955871,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2977955903,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2977955967,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2977956095,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2977956351,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2977956863,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2977957887,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2977959935,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2977964031,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2977972223,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2977988607,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2978021375,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2978086911,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2978217983,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2978480127,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2979004415,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2980052991,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2982150143,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2982150144,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2984247296,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2985295872,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2985820160,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986082304,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986213376,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986278912,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986311680,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986328064,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986336256,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986340352,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986342400,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986343424,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986343936,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986344192,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986344320,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986344384,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986344416,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986344432,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986344440,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986344444,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986344446,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(2986344447,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2129967264,32,FLEN)
NAN_BOXED(2151871260,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649472,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649473,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649475,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649479,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649487,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649503,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649535,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649599,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649727,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649983,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172650495,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172651519,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172653567,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172657663,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172665855,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172682239,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172715007,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172780543,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172911615,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2173173759,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2173698047,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2174746623,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2176843775,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2176843776,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2178940928,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2179989504,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180513792,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180775936,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180907008,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
