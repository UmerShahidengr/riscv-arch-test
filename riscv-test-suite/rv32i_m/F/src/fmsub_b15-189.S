
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_24064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81ff0000; valaddr_reg:x3; val_offset:72192*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72192*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81ff8000; valaddr_reg:x3; val_offset:72195*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72195*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81ffc000; valaddr_reg:x3; val_offset:72198*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72198*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81ffe000; valaddr_reg:x3; val_offset:72201*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72201*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81fff000; valaddr_reg:x3; val_offset:72204*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72204*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81fff800; valaddr_reg:x3; val_offset:72207*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72207*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81fffc00; valaddr_reg:x3; val_offset:72210*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72210*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81fffe00; valaddr_reg:x3; val_offset:72213*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72213*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81ffff00; valaddr_reg:x3; val_offset:72216*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72216*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81ffff80; valaddr_reg:x3; val_offset:72219*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72219*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81ffffc0; valaddr_reg:x3; val_offset:72222*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72222*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81ffffe0; valaddr_reg:x3; val_offset:72225*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72225*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81fffff0; valaddr_reg:x3; val_offset:72228*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72228*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81fffff8; valaddr_reg:x3; val_offset:72231*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72231*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81fffffc; valaddr_reg:x3; val_offset:72234*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72234*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81fffffe; valaddr_reg:x3; val_offset:72237*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72237*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x782eaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef82eaf; op2val:0x80000000;
op3val:0x81ffffff; valaddr_reg:x3; val_offset:72240*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72240*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:72243*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72243*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:72246*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72246*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:72249*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72249*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:72252*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72252*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:72255*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72255*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:72258*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72258*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:72261*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72261*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:72264*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72264*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:72267*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72267*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:72270*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72270*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:72273*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72273*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:72276*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72276*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:72279*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72279*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:72282*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72282*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:72285*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72285*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:72288*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72288*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e800000; valaddr_reg:x3; val_offset:72291*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72291*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e800001; valaddr_reg:x3; val_offset:72294*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72294*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e800003; valaddr_reg:x3; val_offset:72297*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72297*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e800007; valaddr_reg:x3; val_offset:72300*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72300*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e80000f; valaddr_reg:x3; val_offset:72303*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72303*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e80001f; valaddr_reg:x3; val_offset:72306*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72306*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e80003f; valaddr_reg:x3; val_offset:72309*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72309*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e80007f; valaddr_reg:x3; val_offset:72312*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72312*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e8000ff; valaddr_reg:x3; val_offset:72315*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72315*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e8001ff; valaddr_reg:x3; val_offset:72318*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72318*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e8003ff; valaddr_reg:x3; val_offset:72321*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72321*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e8007ff; valaddr_reg:x3; val_offset:72324*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72324*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e800fff; valaddr_reg:x3; val_offset:72327*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72327*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e801fff; valaddr_reg:x3; val_offset:72330*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72330*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e803fff; valaddr_reg:x3; val_offset:72333*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72333*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e807fff; valaddr_reg:x3; val_offset:72336*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72336*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e80ffff; valaddr_reg:x3; val_offset:72339*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72339*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e81ffff; valaddr_reg:x3; val_offset:72342*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72342*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e83ffff; valaddr_reg:x3; val_offset:72345*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72345*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e87ffff; valaddr_reg:x3; val_offset:72348*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72348*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e8fffff; valaddr_reg:x3; val_offset:72351*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72351*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8e9fffff; valaddr_reg:x3; val_offset:72354*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72354*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8ebfffff; valaddr_reg:x3; val_offset:72357*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72357*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8ec00000; valaddr_reg:x3; val_offset:72360*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72360*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8ee00000; valaddr_reg:x3; val_offset:72363*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72363*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8ef00000; valaddr_reg:x3; val_offset:72366*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72366*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8ef80000; valaddr_reg:x3; val_offset:72369*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72369*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8efc0000; valaddr_reg:x3; val_offset:72372*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72372*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8efe0000; valaddr_reg:x3; val_offset:72375*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72375*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8eff0000; valaddr_reg:x3; val_offset:72378*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72378*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8eff8000; valaddr_reg:x3; val_offset:72381*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72381*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8effc000; valaddr_reg:x3; val_offset:72384*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72384*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8effe000; valaddr_reg:x3; val_offset:72387*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72387*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8efff000; valaddr_reg:x3; val_offset:72390*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72390*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8efff800; valaddr_reg:x3; val_offset:72393*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72393*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8efffc00; valaddr_reg:x3; val_offset:72396*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72396*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8efffe00; valaddr_reg:x3; val_offset:72399*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72399*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8effff00; valaddr_reg:x3; val_offset:72402*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72402*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8effff80; valaddr_reg:x3; val_offset:72405*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72405*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8effffc0; valaddr_reg:x3; val_offset:72408*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72408*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8effffe0; valaddr_reg:x3; val_offset:72411*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72411*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8efffff0; valaddr_reg:x3; val_offset:72414*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72414*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8efffff8; valaddr_reg:x3; val_offset:72417*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72417*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8efffffc; valaddr_reg:x3; val_offset:72420*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72420*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8efffffe; valaddr_reg:x3; val_offset:72423*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72423*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78d277 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8d277; op2val:0x80000000;
op3val:0x8effffff; valaddr_reg:x3; val_offset:72426*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72426*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x72000000; valaddr_reg:x3; val_offset:72429*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72429*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x72000001; valaddr_reg:x3; val_offset:72432*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72432*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x72000003; valaddr_reg:x3; val_offset:72435*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72435*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x72000007; valaddr_reg:x3; val_offset:72438*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72438*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x7200000f; valaddr_reg:x3; val_offset:72441*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72441*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x7200001f; valaddr_reg:x3; val_offset:72444*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72444*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x7200003f; valaddr_reg:x3; val_offset:72447*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72447*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x7200007f; valaddr_reg:x3; val_offset:72450*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72450*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x720000ff; valaddr_reg:x3; val_offset:72453*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72453*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x720001ff; valaddr_reg:x3; val_offset:72456*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72456*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x720003ff; valaddr_reg:x3; val_offset:72459*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72459*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x720007ff; valaddr_reg:x3; val_offset:72462*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72462*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x72000fff; valaddr_reg:x3; val_offset:72465*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72465*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x72001fff; valaddr_reg:x3; val_offset:72468*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72468*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x72003fff; valaddr_reg:x3; val_offset:72471*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72471*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x72007fff; valaddr_reg:x3; val_offset:72474*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72474*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x7200ffff; valaddr_reg:x3; val_offset:72477*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72477*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x7201ffff; valaddr_reg:x3; val_offset:72480*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72480*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x7203ffff; valaddr_reg:x3; val_offset:72483*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72483*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x7207ffff; valaddr_reg:x3; val_offset:72486*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72486*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x720fffff; valaddr_reg:x3; val_offset:72489*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72489*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x721fffff; valaddr_reg:x3; val_offset:72492*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72492*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x723fffff; valaddr_reg:x3; val_offset:72495*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72495*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x72400000; valaddr_reg:x3; val_offset:72498*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72498*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x72600000; valaddr_reg:x3; val_offset:72501*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72501*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x72700000; valaddr_reg:x3; val_offset:72504*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72504*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x72780000; valaddr_reg:x3; val_offset:72507*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72507*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727c0000; valaddr_reg:x3; val_offset:72510*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72510*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727e0000; valaddr_reg:x3; val_offset:72513*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72513*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727f0000; valaddr_reg:x3; val_offset:72516*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72516*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727f8000; valaddr_reg:x3; val_offset:72519*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72519*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727fc000; valaddr_reg:x3; val_offset:72522*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72522*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727fe000; valaddr_reg:x3; val_offset:72525*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72525*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727ff000; valaddr_reg:x3; val_offset:72528*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72528*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727ff800; valaddr_reg:x3; val_offset:72531*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72531*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727ffc00; valaddr_reg:x3; val_offset:72534*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72534*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727ffe00; valaddr_reg:x3; val_offset:72537*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72537*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727fff00; valaddr_reg:x3; val_offset:72540*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72540*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727fff80; valaddr_reg:x3; val_offset:72543*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72543*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727fffc0; valaddr_reg:x3; val_offset:72546*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72546*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727fffe0; valaddr_reg:x3; val_offset:72549*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72549*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727ffff0; valaddr_reg:x3; val_offset:72552*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72552*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727ffff8; valaddr_reg:x3; val_offset:72555*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72555*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727ffffc; valaddr_reg:x3; val_offset:72558*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72558*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727ffffe; valaddr_reg:x3; val_offset:72561*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72561*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x727fffff; valaddr_reg:x3; val_offset:72564*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72564*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x7f000001; valaddr_reg:x3; val_offset:72567*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72567*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x7f000003; valaddr_reg:x3; val_offset:72570*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72570*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x036940 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef95ad3; op2val:0x40036940;
op3val:0x7f000007; valaddr_reg:x3; val_offset:72573*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72573*0 + 3*188*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180972544,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181005312,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181021696,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181029888,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181033984,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181036032,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037056,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037568,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037824,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037952,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038016,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038048,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038064,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038072,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038076,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038078,32,FLEN)
NAN_BOXED(2130194095,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038079,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753280,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753281,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753283,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753287,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753295,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753311,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753343,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753407,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753535,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753791,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390754303,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390755327,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390757375,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390761471,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390769663,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390786047,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390818815,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390884351,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2391015423,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2391277567,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2391801855,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2392850431,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2394947583,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2394947584,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2397044736,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2398093312,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2398617600,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2398879744,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399010816,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399076352,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399109120,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399125504,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399133696,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399137792,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399139840,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399140864,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141376,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141632,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141760,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141824,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141856,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141872,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141880,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141884,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141886,32,FLEN)
NAN_BOXED(2130236023,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141887,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912602624,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912602625,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912602627,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912602631,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912602639,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912602655,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912602687,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912602751,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912602879,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912603135,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912603647,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912604671,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912606719,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912610815,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912619007,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912635391,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912668159,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912733695,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1912864767,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1913126911,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1913651199,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1914699775,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1916796927,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1916796928,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1918894080,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1919942656,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920466944,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920729088,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920860160,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920925696,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920958464,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920974848,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920983040,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920987136,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920989184,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920990208,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920990720,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920990976,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920991104,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920991168,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920991200,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920991216,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920991224,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920991228,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920991230,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(1920991231,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2130270931,32,FLEN)
NAN_BOXED(1073965376,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
