
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_24320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7adf70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x414ed8 and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efadf70; op2val:0x414ed8;
op3val:0x43ffff00; valaddr_reg:x3; val_offset:72960*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72960*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7adf70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x414ed8 and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efadf70; op2val:0x414ed8;
op3val:0x43ffff80; valaddr_reg:x3; val_offset:72963*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72963*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7adf70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x414ed8 and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efadf70; op2val:0x414ed8;
op3val:0x43ffffc0; valaddr_reg:x3; val_offset:72966*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72966*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7adf70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x414ed8 and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efadf70; op2val:0x414ed8;
op3val:0x43ffffe0; valaddr_reg:x3; val_offset:72969*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72969*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7adf70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x414ed8 and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efadf70; op2val:0x414ed8;
op3val:0x43fffff0; valaddr_reg:x3; val_offset:72972*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72972*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7adf70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x414ed8 and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efadf70; op2val:0x414ed8;
op3val:0x43fffff8; valaddr_reg:x3; val_offset:72975*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72975*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7adf70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x414ed8 and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efadf70; op2val:0x414ed8;
op3val:0x43fffffc; valaddr_reg:x3; val_offset:72978*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72978*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7adf70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x414ed8 and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efadf70; op2val:0x414ed8;
op3val:0x43fffffe; valaddr_reg:x3; val_offset:72981*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72981*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7adf70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x414ed8 and fs3 == 0 and fe3 == 0x87 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efadf70; op2val:0x414ed8;
op3val:0x43ffffff; valaddr_reg:x3; val_offset:72984*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72984*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:72987*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72987*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:72990*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72990*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:72993*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72993*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:72996*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72996*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:72999*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72999*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:73002*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73002*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:73005*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73005*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:73008*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73008*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:73011*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73011*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:73014*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73014*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:73017*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73017*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:73020*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73020*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:73023*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73023*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:73026*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73026*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:73029*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73029*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:73032*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73032*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82800000; valaddr_reg:x3; val_offset:73035*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73035*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82800001; valaddr_reg:x3; val_offset:73038*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73038*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82800003; valaddr_reg:x3; val_offset:73041*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73041*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82800007; valaddr_reg:x3; val_offset:73044*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73044*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x8280000f; valaddr_reg:x3; val_offset:73047*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73047*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x8280001f; valaddr_reg:x3; val_offset:73050*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73050*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x8280003f; valaddr_reg:x3; val_offset:73053*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73053*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x8280007f; valaddr_reg:x3; val_offset:73056*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73056*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x828000ff; valaddr_reg:x3; val_offset:73059*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73059*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x828001ff; valaddr_reg:x3; val_offset:73062*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73062*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x828003ff; valaddr_reg:x3; val_offset:73065*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73065*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x828007ff; valaddr_reg:x3; val_offset:73068*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73068*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82800fff; valaddr_reg:x3; val_offset:73071*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73071*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82801fff; valaddr_reg:x3; val_offset:73074*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73074*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82803fff; valaddr_reg:x3; val_offset:73077*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73077*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82807fff; valaddr_reg:x3; val_offset:73080*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73080*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x8280ffff; valaddr_reg:x3; val_offset:73083*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73083*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x8281ffff; valaddr_reg:x3; val_offset:73086*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73086*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x8283ffff; valaddr_reg:x3; val_offset:73089*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73089*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x8287ffff; valaddr_reg:x3; val_offset:73092*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73092*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x828fffff; valaddr_reg:x3; val_offset:73095*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73095*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x829fffff; valaddr_reg:x3; val_offset:73098*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73098*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82bfffff; valaddr_reg:x3; val_offset:73101*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73101*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82c00000; valaddr_reg:x3; val_offset:73104*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73104*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82e00000; valaddr_reg:x3; val_offset:73107*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73107*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82f00000; valaddr_reg:x3; val_offset:73110*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73110*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82f80000; valaddr_reg:x3; val_offset:73113*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73113*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82fc0000; valaddr_reg:x3; val_offset:73116*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73116*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82fe0000; valaddr_reg:x3; val_offset:73119*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73119*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82ff0000; valaddr_reg:x3; val_offset:73122*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73122*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82ff8000; valaddr_reg:x3; val_offset:73125*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73125*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82ffc000; valaddr_reg:x3; val_offset:73128*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73128*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82ffe000; valaddr_reg:x3; val_offset:73131*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73131*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82fff000; valaddr_reg:x3; val_offset:73134*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73134*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82fff800; valaddr_reg:x3; val_offset:73137*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73137*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82fffc00; valaddr_reg:x3; val_offset:73140*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73140*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82fffe00; valaddr_reg:x3; val_offset:73143*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73143*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82ffff00; valaddr_reg:x3; val_offset:73146*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73146*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82ffff80; valaddr_reg:x3; val_offset:73149*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73149*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82ffffc0; valaddr_reg:x3; val_offset:73152*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73152*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82ffffe0; valaddr_reg:x3; val_offset:73155*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73155*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82fffff0; valaddr_reg:x3; val_offset:73158*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73158*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82fffff8; valaddr_reg:x3; val_offset:73161*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73161*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82fffffc; valaddr_reg:x3; val_offset:73164*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73164*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82fffffe; valaddr_reg:x3; val_offset:73167*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73167*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae8c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae8c2; op2val:0x80000000;
op3val:0x82ffffff; valaddr_reg:x3; val_offset:73170*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73170*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:73173*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73173*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:73176*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73176*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:73179*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73179*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:73182*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73182*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:73185*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73185*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:73188*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73188*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:73191*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73191*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:73194*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73194*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:73197*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73197*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:73200*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73200*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:73203*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73203*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:73206*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73206*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:73209*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73209*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:73212*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73212*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:73215*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73215*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:73218*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73218*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x85000000; valaddr_reg:x3; val_offset:73221*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73221*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x85000001; valaddr_reg:x3; val_offset:73224*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73224*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x85000003; valaddr_reg:x3; val_offset:73227*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73227*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x85000007; valaddr_reg:x3; val_offset:73230*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73230*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x8500000f; valaddr_reg:x3; val_offset:73233*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73233*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x8500001f; valaddr_reg:x3; val_offset:73236*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73236*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x8500003f; valaddr_reg:x3; val_offset:73239*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73239*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x8500007f; valaddr_reg:x3; val_offset:73242*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73242*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x850000ff; valaddr_reg:x3; val_offset:73245*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73245*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x850001ff; valaddr_reg:x3; val_offset:73248*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73248*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x850003ff; valaddr_reg:x3; val_offset:73251*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73251*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x850007ff; valaddr_reg:x3; val_offset:73254*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73254*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x85000fff; valaddr_reg:x3; val_offset:73257*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73257*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x85001fff; valaddr_reg:x3; val_offset:73260*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73260*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x85003fff; valaddr_reg:x3; val_offset:73263*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73263*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x85007fff; valaddr_reg:x3; val_offset:73266*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73266*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x8500ffff; valaddr_reg:x3; val_offset:73269*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73269*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x8501ffff; valaddr_reg:x3; val_offset:73272*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73272*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x8503ffff; valaddr_reg:x3; val_offset:73275*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73275*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x8507ffff; valaddr_reg:x3; val_offset:73278*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73278*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x850fffff; valaddr_reg:x3; val_offset:73281*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73281*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x851fffff; valaddr_reg:x3; val_offset:73284*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73284*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x853fffff; valaddr_reg:x3; val_offset:73287*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73287*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x85400000; valaddr_reg:x3; val_offset:73290*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73290*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x85600000; valaddr_reg:x3; val_offset:73293*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73293*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x85700000; valaddr_reg:x3; val_offset:73296*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73296*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x85780000; valaddr_reg:x3; val_offset:73299*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73299*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x857c0000; valaddr_reg:x3; val_offset:73302*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73302*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x857e0000; valaddr_reg:x3; val_offset:73305*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73305*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x857f0000; valaddr_reg:x3; val_offset:73308*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73308*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x857f8000; valaddr_reg:x3; val_offset:73311*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73311*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x857fc000; valaddr_reg:x3; val_offset:73314*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73314*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x857fe000; valaddr_reg:x3; val_offset:73317*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73317*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x857ff000; valaddr_reg:x3; val_offset:73320*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73320*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x857ff800; valaddr_reg:x3; val_offset:73323*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73323*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x857ffc00; valaddr_reg:x3; val_offset:73326*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73326*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x857ffe00; valaddr_reg:x3; val_offset:73329*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73329*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x857fff00; valaddr_reg:x3; val_offset:73332*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73332*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x857fff80; valaddr_reg:x3; val_offset:73335*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73335*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x857fffc0; valaddr_reg:x3; val_offset:73338*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73338*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b7c5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb7c5d; op2val:0x80000000;
op3val:0x857fffe0; valaddr_reg:x3; val_offset:73341*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73341*0 + 3*190*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130370416,32,FLEN)
NAN_BOXED(4280024,32,FLEN)
NAN_BOXED(1140850432,32,FLEN)
NAN_BOXED(2130370416,32,FLEN)
NAN_BOXED(4280024,32,FLEN)
NAN_BOXED(1140850560,32,FLEN)
NAN_BOXED(2130370416,32,FLEN)
NAN_BOXED(4280024,32,FLEN)
NAN_BOXED(1140850624,32,FLEN)
NAN_BOXED(2130370416,32,FLEN)
NAN_BOXED(4280024,32,FLEN)
NAN_BOXED(1140850656,32,FLEN)
NAN_BOXED(2130370416,32,FLEN)
NAN_BOXED(4280024,32,FLEN)
NAN_BOXED(1140850672,32,FLEN)
NAN_BOXED(2130370416,32,FLEN)
NAN_BOXED(4280024,32,FLEN)
NAN_BOXED(1140850680,32,FLEN)
NAN_BOXED(2130370416,32,FLEN)
NAN_BOXED(4280024,32,FLEN)
NAN_BOXED(1140850684,32,FLEN)
NAN_BOXED(2130370416,32,FLEN)
NAN_BOXED(4280024,32,FLEN)
NAN_BOXED(1140850686,32,FLEN)
NAN_BOXED(2130370416,32,FLEN)
NAN_BOXED(4280024,32,FLEN)
NAN_BOXED(1140850687,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426688,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426689,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426691,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426695,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426703,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426719,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426751,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426815,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426943,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189427199,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189427711,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189428735,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189430783,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189434879,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189443071,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189459455,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189492223,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189557759,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189688831,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189950975,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2190475263,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2191523839,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2193620991,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2193620992,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2195718144,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2196766720,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197291008,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197553152,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197684224,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197749760,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197782528,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197798912,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197807104,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197811200,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197813248,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197814272,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197814784,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815040,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815168,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815232,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815264,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815280,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815288,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815292,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815294,32,FLEN)
NAN_BOXED(2130372802,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815295,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369728,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369729,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369731,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369735,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369743,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369759,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369791,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369855,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369983,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231370239,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231370751,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231371775,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231373823,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231377919,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231386111,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231402495,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231435263,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231500799,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231631871,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231894015,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2232418303,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2233466879,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2235564031,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2235564032,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2237661184,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2238709760,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239234048,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239496192,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239627264,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239692800,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239725568,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239741952,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239750144,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239754240,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239756288,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239757312,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239757824,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758080,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758208,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758272,32,FLEN)
NAN_BOXED(2130410589,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758304,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
