
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_24576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d030e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd030e; op2val:0x80000000;
op3val:0x8bffffff; valaddr_reg:x3; val_offset:73728*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73728*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:73731*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73731*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:73734*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73734*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:73737*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73737*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:73740*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73740*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:73743*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73743*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:73746*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73746*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:73749*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73749*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:73752*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73752*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:73755*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73755*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:73758*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73758*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:73761*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73761*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:73764*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73764*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:73767*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73767*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:73770*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73770*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:73773*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73773*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:73776*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73776*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x88000000; valaddr_reg:x3; val_offset:73779*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73779*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x88000001; valaddr_reg:x3; val_offset:73782*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73782*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x88000003; valaddr_reg:x3; val_offset:73785*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73785*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x88000007; valaddr_reg:x3; val_offset:73788*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73788*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x8800000f; valaddr_reg:x3; val_offset:73791*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73791*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x8800001f; valaddr_reg:x3; val_offset:73794*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73794*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x8800003f; valaddr_reg:x3; val_offset:73797*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73797*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x8800007f; valaddr_reg:x3; val_offset:73800*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73800*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x880000ff; valaddr_reg:x3; val_offset:73803*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73803*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x880001ff; valaddr_reg:x3; val_offset:73806*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73806*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x880003ff; valaddr_reg:x3; val_offset:73809*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73809*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x880007ff; valaddr_reg:x3; val_offset:73812*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73812*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x88000fff; valaddr_reg:x3; val_offset:73815*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73815*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x88001fff; valaddr_reg:x3; val_offset:73818*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73818*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x88003fff; valaddr_reg:x3; val_offset:73821*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73821*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x88007fff; valaddr_reg:x3; val_offset:73824*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73824*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x8800ffff; valaddr_reg:x3; val_offset:73827*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73827*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x8801ffff; valaddr_reg:x3; val_offset:73830*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73830*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x8803ffff; valaddr_reg:x3; val_offset:73833*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73833*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x8807ffff; valaddr_reg:x3; val_offset:73836*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73836*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x880fffff; valaddr_reg:x3; val_offset:73839*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73839*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x881fffff; valaddr_reg:x3; val_offset:73842*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73842*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x883fffff; valaddr_reg:x3; val_offset:73845*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73845*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x88400000; valaddr_reg:x3; val_offset:73848*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73848*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x88600000; valaddr_reg:x3; val_offset:73851*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73851*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x88700000; valaddr_reg:x3; val_offset:73854*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73854*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x88780000; valaddr_reg:x3; val_offset:73857*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73857*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887c0000; valaddr_reg:x3; val_offset:73860*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73860*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887e0000; valaddr_reg:x3; val_offset:73863*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73863*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887f0000; valaddr_reg:x3; val_offset:73866*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73866*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887f8000; valaddr_reg:x3; val_offset:73869*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73869*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887fc000; valaddr_reg:x3; val_offset:73872*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73872*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887fe000; valaddr_reg:x3; val_offset:73875*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73875*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887ff000; valaddr_reg:x3; val_offset:73878*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73878*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887ff800; valaddr_reg:x3; val_offset:73881*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73881*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887ffc00; valaddr_reg:x3; val_offset:73884*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73884*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887ffe00; valaddr_reg:x3; val_offset:73887*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73887*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887fff00; valaddr_reg:x3; val_offset:73890*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73890*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887fff80; valaddr_reg:x3; val_offset:73893*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73893*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887fffc0; valaddr_reg:x3; val_offset:73896*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73896*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887fffe0; valaddr_reg:x3; val_offset:73899*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73899*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887ffff0; valaddr_reg:x3; val_offset:73902*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73902*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887ffff8; valaddr_reg:x3; val_offset:73905*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73905*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887ffffc; valaddr_reg:x3; val_offset:73908*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73908*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887ffffe; valaddr_reg:x3; val_offset:73911*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73911*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e1656 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe1656; op2val:0x80000000;
op3val:0x887fffff; valaddr_reg:x3; val_offset:73914*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73914*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa9000000; valaddr_reg:x3; val_offset:73917*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73917*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa9000001; valaddr_reg:x3; val_offset:73920*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73920*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa9000003; valaddr_reg:x3; val_offset:73923*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73923*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa9000007; valaddr_reg:x3; val_offset:73926*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73926*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa900000f; valaddr_reg:x3; val_offset:73929*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73929*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa900001f; valaddr_reg:x3; val_offset:73932*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73932*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa900003f; valaddr_reg:x3; val_offset:73935*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73935*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa900007f; valaddr_reg:x3; val_offset:73938*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73938*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa90000ff; valaddr_reg:x3; val_offset:73941*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73941*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa90001ff; valaddr_reg:x3; val_offset:73944*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73944*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa90003ff; valaddr_reg:x3; val_offset:73947*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73947*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa90007ff; valaddr_reg:x3; val_offset:73950*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73950*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa9000fff; valaddr_reg:x3; val_offset:73953*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73953*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa9001fff; valaddr_reg:x3; val_offset:73956*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73956*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa9003fff; valaddr_reg:x3; val_offset:73959*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73959*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa9007fff; valaddr_reg:x3; val_offset:73962*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73962*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa900ffff; valaddr_reg:x3; val_offset:73965*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73965*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa901ffff; valaddr_reg:x3; val_offset:73968*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73968*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa903ffff; valaddr_reg:x3; val_offset:73971*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73971*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa907ffff; valaddr_reg:x3; val_offset:73974*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73974*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa90fffff; valaddr_reg:x3; val_offset:73977*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73977*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa91fffff; valaddr_reg:x3; val_offset:73980*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73980*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa93fffff; valaddr_reg:x3; val_offset:73983*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73983*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa9400000; valaddr_reg:x3; val_offset:73986*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73986*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa9600000; valaddr_reg:x3; val_offset:73989*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73989*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa9700000; valaddr_reg:x3; val_offset:73992*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73992*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa9780000; valaddr_reg:x3; val_offset:73995*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73995*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97c0000; valaddr_reg:x3; val_offset:73998*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73998*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97e0000; valaddr_reg:x3; val_offset:74001*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74001*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97f0000; valaddr_reg:x3; val_offset:74004*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74004*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97f8000; valaddr_reg:x3; val_offset:74007*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74007*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97fc000; valaddr_reg:x3; val_offset:74010*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74010*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97fe000; valaddr_reg:x3; val_offset:74013*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74013*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97ff000; valaddr_reg:x3; val_offset:74016*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74016*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97ff800; valaddr_reg:x3; val_offset:74019*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74019*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97ffc00; valaddr_reg:x3; val_offset:74022*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74022*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97ffe00; valaddr_reg:x3; val_offset:74025*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74025*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97fff00; valaddr_reg:x3; val_offset:74028*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74028*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97fff80; valaddr_reg:x3; val_offset:74031*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74031*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97fffc0; valaddr_reg:x3; val_offset:74034*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74034*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97fffe0; valaddr_reg:x3; val_offset:74037*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74037*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97ffff0; valaddr_reg:x3; val_offset:74040*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74040*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97ffff8; valaddr_reg:x3; val_offset:74043*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74043*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97ffffc; valaddr_reg:x3; val_offset:74046*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74046*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97ffffe; valaddr_reg:x3; val_offset:74049*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74049*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x52 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xa97fffff; valaddr_reg:x3; val_offset:74052*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74052*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xbf800001; valaddr_reg:x3; val_offset:74055*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74055*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xbf800003; valaddr_reg:x3; val_offset:74058*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74058*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xbf800007; valaddr_reg:x3; val_offset:74061*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74061*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xbf999999; valaddr_reg:x3; val_offset:74064*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74064*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:74067*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74067*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:74070*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74070*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:74073*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74073*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:74076*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74076*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:74079*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74079*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:74082*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74082*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:74085*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74085*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:74088*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74088*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:74091*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74091*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:74094*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74094*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:74097*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74097*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7eb443 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40535b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efeb443; op2val:0x8040535b;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:74100*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74100*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00361b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7f93f6 and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00361b; op2val:0xbfff93f6;
op3val:0xfa000000; valaddr_reg:x3; val_offset:74103*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74103*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00361b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7f93f6 and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00361b; op2val:0xbfff93f6;
op3val:0xfa000001; valaddr_reg:x3; val_offset:74106*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74106*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00361b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7f93f6 and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00361b; op2val:0xbfff93f6;
op3val:0xfa000003; valaddr_reg:x3; val_offset:74109*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74109*0 + 3*192*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130510606,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810239,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701376,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701377,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701379,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701383,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701391,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701407,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701439,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701503,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701631,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701887,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281702399,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281703423,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281705471,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281709567,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281717759,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281734143,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281766911,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281832447,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281963519,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282225663,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282749951,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2283798527,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895679,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895680,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2287992832,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289041408,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289565696,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289827840,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289958912,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290024448,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290057216,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290073600,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290081792,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290085888,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290087936,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290088960,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089472,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089728,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089856,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089920,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089952,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089968,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089976,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089980,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089982,32,FLEN)
NAN_BOXED(2130581078,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089983,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835349504,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835349505,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835349507,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835349511,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835349519,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835349535,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835349567,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835349631,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835349759,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835350015,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835350527,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835351551,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835353599,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835357695,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835365887,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835382271,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835415039,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835480575,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835611647,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2835873791,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2836398079,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2837446655,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2839543807,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2839543808,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2841640960,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2842689536,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843213824,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843475968,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843607040,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843672576,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843705344,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843721728,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843729920,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843734016,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843736064,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843737088,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843737600,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843737856,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843737984,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843738048,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843738080,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843738096,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843738104,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843738108,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843738110,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(2843738111,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2130621507,32,FLEN)
NAN_BOXED(2151699291,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2130720283,32,FLEN)
NAN_BOXED(3221197814,32,FLEN)
NAN_BOXED(4194304000,32,FLEN)
NAN_BOXED(2130720283,32,FLEN)
NAN_BOXED(3221197814,32,FLEN)
NAN_BOXED(4194304001,32,FLEN)
NAN_BOXED(2130720283,32,FLEN)
NAN_BOXED(3221197814,32,FLEN)
NAN_BOXED(4194304003,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
