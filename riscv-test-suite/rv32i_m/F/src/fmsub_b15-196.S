
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_24960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7081ffff; valaddr_reg:x3; val_offset:74880*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74880*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7083ffff; valaddr_reg:x3; val_offset:74883*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74883*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7087ffff; valaddr_reg:x3; val_offset:74886*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74886*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x708fffff; valaddr_reg:x3; val_offset:74889*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74889*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x709fffff; valaddr_reg:x3; val_offset:74892*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74892*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70bfffff; valaddr_reg:x3; val_offset:74895*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74895*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70c00000; valaddr_reg:x3; val_offset:74898*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74898*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70e00000; valaddr_reg:x3; val_offset:74901*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74901*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70f00000; valaddr_reg:x3; val_offset:74904*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74904*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70f80000; valaddr_reg:x3; val_offset:74907*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74907*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70fc0000; valaddr_reg:x3; val_offset:74910*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74910*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70fe0000; valaddr_reg:x3; val_offset:74913*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74913*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70ff0000; valaddr_reg:x3; val_offset:74916*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74916*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70ff8000; valaddr_reg:x3; val_offset:74919*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74919*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70ffc000; valaddr_reg:x3; val_offset:74922*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74922*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70ffe000; valaddr_reg:x3; val_offset:74925*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74925*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70fff000; valaddr_reg:x3; val_offset:74928*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74928*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70fff800; valaddr_reg:x3; val_offset:74931*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74931*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70fffc00; valaddr_reg:x3; val_offset:74934*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74934*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70fffe00; valaddr_reg:x3; val_offset:74937*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74937*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70ffff00; valaddr_reg:x3; val_offset:74940*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74940*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70ffff80; valaddr_reg:x3; val_offset:74943*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74943*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70ffffc0; valaddr_reg:x3; val_offset:74946*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74946*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70ffffe0; valaddr_reg:x3; val_offset:74949*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74949*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70fffff0; valaddr_reg:x3; val_offset:74952*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74952*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70fffff8; valaddr_reg:x3; val_offset:74955*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74955*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70fffffc; valaddr_reg:x3; val_offset:74958*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74958*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70fffffe; valaddr_reg:x3; val_offset:74961*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74961*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xe1 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x70ffffff; valaddr_reg:x3; val_offset:74964*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74964*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7f000001; valaddr_reg:x3; val_offset:74967*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74967*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7f000003; valaddr_reg:x3; val_offset:74970*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74970*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7f000007; valaddr_reg:x3; val_offset:74973*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74973*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7f199999; valaddr_reg:x3; val_offset:74976*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74976*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7f249249; valaddr_reg:x3; val_offset:74979*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74979*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7f333333; valaddr_reg:x3; val_offset:74982*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74982*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:74985*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74985*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:74988*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74988*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7f444444; valaddr_reg:x3; val_offset:74991*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74991*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:74994*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74994*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:74997*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74997*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7f666666; valaddr_reg:x3; val_offset:75000*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75000*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:75003*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75003*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:75006*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75006*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:75009*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75009*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ed0e4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f009841; op2val:0x3ffed0e4;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:75012*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75012*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x3f800001; valaddr_reg:x3; val_offset:75015*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75015*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x3f800003; valaddr_reg:x3; val_offset:75018*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75018*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x3f800007; valaddr_reg:x3; val_offset:75021*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75021*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x3f999999; valaddr_reg:x3; val_offset:75024*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75024*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:75027*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75027*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:75030*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75030*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:75033*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75033*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:75036*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75036*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:75039*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75039*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:75042*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75042*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:75045*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75045*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:75048*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75048*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:75051*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75051*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:75054*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75054*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:75057*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75057*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:75060*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75060*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x45000000; valaddr_reg:x3; val_offset:75063*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75063*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x45000001; valaddr_reg:x3; val_offset:75066*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75066*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x45000003; valaddr_reg:x3; val_offset:75069*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75069*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x45000007; valaddr_reg:x3; val_offset:75072*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75072*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x4500000f; valaddr_reg:x3; val_offset:75075*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75075*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x4500001f; valaddr_reg:x3; val_offset:75078*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75078*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x4500003f; valaddr_reg:x3; val_offset:75081*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75081*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x4500007f; valaddr_reg:x3; val_offset:75084*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75084*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x450000ff; valaddr_reg:x3; val_offset:75087*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75087*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x450001ff; valaddr_reg:x3; val_offset:75090*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75090*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x450003ff; valaddr_reg:x3; val_offset:75093*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75093*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x450007ff; valaddr_reg:x3; val_offset:75096*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75096*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x45000fff; valaddr_reg:x3; val_offset:75099*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75099*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x45001fff; valaddr_reg:x3; val_offset:75102*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75102*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x45003fff; valaddr_reg:x3; val_offset:75105*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75105*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x45007fff; valaddr_reg:x3; val_offset:75108*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75108*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x4500ffff; valaddr_reg:x3; val_offset:75111*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75111*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x4501ffff; valaddr_reg:x3; val_offset:75114*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75114*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x4503ffff; valaddr_reg:x3; val_offset:75117*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75117*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x4507ffff; valaddr_reg:x3; val_offset:75120*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75120*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x450fffff; valaddr_reg:x3; val_offset:75123*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75123*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x451fffff; valaddr_reg:x3; val_offset:75126*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75126*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x453fffff; valaddr_reg:x3; val_offset:75129*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75129*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x45400000; valaddr_reg:x3; val_offset:75132*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75132*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x45600000; valaddr_reg:x3; val_offset:75135*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75135*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x45700000; valaddr_reg:x3; val_offset:75138*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75138*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x45780000; valaddr_reg:x3; val_offset:75141*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75141*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457c0000; valaddr_reg:x3; val_offset:75144*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75144*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457e0000; valaddr_reg:x3; val_offset:75147*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75147*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457f0000; valaddr_reg:x3; val_offset:75150*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75150*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457f8000; valaddr_reg:x3; val_offset:75153*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75153*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457fc000; valaddr_reg:x3; val_offset:75156*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75156*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457fe000; valaddr_reg:x3; val_offset:75159*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75159*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457ff000; valaddr_reg:x3; val_offset:75162*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75162*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457ff800; valaddr_reg:x3; val_offset:75165*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75165*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457ffc00; valaddr_reg:x3; val_offset:75168*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75168*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457ffe00; valaddr_reg:x3; val_offset:75171*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75171*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457fff00; valaddr_reg:x3; val_offset:75174*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75174*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457fff80; valaddr_reg:x3; val_offset:75177*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75177*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457fffc0; valaddr_reg:x3; val_offset:75180*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75180*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457fffe0; valaddr_reg:x3; val_offset:75183*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75183*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457ffff0; valaddr_reg:x3; val_offset:75186*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75186*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457ffff8; valaddr_reg:x3; val_offset:75189*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75189*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457ffffc; valaddr_reg:x3; val_offset:75192*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75192*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457ffffe; valaddr_reg:x3; val_offset:75195*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75195*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00bf6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fa0d7 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00bf6d; op2val:0x3fa0d7;
op3val:0x457fffff; valaddr_reg:x3; val_offset:75198*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75198*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:75201*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75201*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:75204*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75204*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:75207*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75207*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:75210*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75210*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:75213*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75213*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:75216*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75216*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:75219*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75219*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:75222*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75222*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:75225*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75225*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:75228*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75228*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:75231*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75231*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:75234*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75234*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:75237*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75237*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:75240*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75240*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:75243*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75243*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:75246*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75246*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf800000; valaddr_reg:x3; val_offset:75249*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75249*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf800001; valaddr_reg:x3; val_offset:75252*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75252*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf800003; valaddr_reg:x3; val_offset:75255*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75255*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf800007; valaddr_reg:x3; val_offset:75258*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75258*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf80000f; valaddr_reg:x3; val_offset:75261*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75261*0 + 3*195*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1887567871,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1887698943,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1887961087,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1888485375,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1889533951,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1891631103,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1891631104,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1893728256,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1894776832,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895301120,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895563264,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895694336,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895759872,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895792640,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895809024,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895817216,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895821312,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895823360,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895824384,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895824896,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895825152,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895825280,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895825344,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895825376,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895825392,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895825400,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895825404,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895825406,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(1895825407,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2130745409,32,FLEN)
NAN_BOXED(1073664228,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157627904,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157627905,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157627907,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157627911,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157627919,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157627935,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157627967,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157628031,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157628159,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157628415,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157628927,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157629951,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157631999,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157636095,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157644287,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157660671,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157693439,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157758975,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1157890047,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1158152191,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1158676479,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1159725055,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1161822207,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1161822208,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1163919360,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1164967936,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1165492224,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1165754368,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1165885440,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1165950976,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1165983744,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1166000128,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1166008320,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1166012416,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1166014464,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1166015488,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1166016000,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1166016256,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1166016384,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1166016448,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1166016480,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1166016496,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1166016504,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1166016508,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1166016510,32,FLEN)
NAN_BOXED(2130755437,32,FLEN)
NAN_BOXED(4169943,32,FLEN)
NAN_BOXED(1166016511,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046848,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046849,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046851,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046855,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046863,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
