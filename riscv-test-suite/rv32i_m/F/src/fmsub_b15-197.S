
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_25088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf80001f; valaddr_reg:x3; val_offset:75264*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75264*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf80003f; valaddr_reg:x3; val_offset:75267*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75267*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf80007f; valaddr_reg:x3; val_offset:75270*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75270*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf8000ff; valaddr_reg:x3; val_offset:75273*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75273*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf8001ff; valaddr_reg:x3; val_offset:75276*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75276*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf8003ff; valaddr_reg:x3; val_offset:75279*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75279*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf8007ff; valaddr_reg:x3; val_offset:75282*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75282*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf800fff; valaddr_reg:x3; val_offset:75285*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75285*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf801fff; valaddr_reg:x3; val_offset:75288*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75288*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf803fff; valaddr_reg:x3; val_offset:75291*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75291*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf807fff; valaddr_reg:x3; val_offset:75294*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75294*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf80ffff; valaddr_reg:x3; val_offset:75297*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75297*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf81ffff; valaddr_reg:x3; val_offset:75300*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75300*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf83ffff; valaddr_reg:x3; val_offset:75303*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75303*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf87ffff; valaddr_reg:x3; val_offset:75306*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75306*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf8fffff; valaddr_reg:x3; val_offset:75309*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75309*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xf9fffff; valaddr_reg:x3; val_offset:75312*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75312*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xfbfffff; valaddr_reg:x3; val_offset:75315*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75315*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xfc00000; valaddr_reg:x3; val_offset:75318*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75318*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xfe00000; valaddr_reg:x3; val_offset:75321*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75321*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xff00000; valaddr_reg:x3; val_offset:75324*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75324*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xff80000; valaddr_reg:x3; val_offset:75327*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75327*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xffc0000; valaddr_reg:x3; val_offset:75330*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75330*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xffe0000; valaddr_reg:x3; val_offset:75333*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75333*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xfff0000; valaddr_reg:x3; val_offset:75336*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75336*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xfff8000; valaddr_reg:x3; val_offset:75339*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75339*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xfffc000; valaddr_reg:x3; val_offset:75342*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75342*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xfffe000; valaddr_reg:x3; val_offset:75345*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75345*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xffff000; valaddr_reg:x3; val_offset:75348*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75348*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xffff800; valaddr_reg:x3; val_offset:75351*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75351*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xffffc00; valaddr_reg:x3; val_offset:75354*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75354*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xffffe00; valaddr_reg:x3; val_offset:75357*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75357*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xfffff00; valaddr_reg:x3; val_offset:75360*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75360*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xfffff80; valaddr_reg:x3; val_offset:75363*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75363*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xfffffc0; valaddr_reg:x3; val_offset:75366*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75366*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xfffffe0; valaddr_reg:x3; val_offset:75369*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75369*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xffffff0; valaddr_reg:x3; val_offset:75372*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75372*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xffffff8; valaddr_reg:x3; val_offset:75375*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75375*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xffffffc; valaddr_reg:x3; val_offset:75378*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75378*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xffffffe; valaddr_reg:x3; val_offset:75381*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75381*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f018006; op2val:0x0;
op3val:0xfffffff; valaddr_reg:x3; val_offset:75384*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75384*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde800000; valaddr_reg:x3; val_offset:75387*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75387*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde800001; valaddr_reg:x3; val_offset:75390*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75390*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde800003; valaddr_reg:x3; val_offset:75393*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75393*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde800007; valaddr_reg:x3; val_offset:75396*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75396*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde80000f; valaddr_reg:x3; val_offset:75399*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75399*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde80001f; valaddr_reg:x3; val_offset:75402*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75402*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde80003f; valaddr_reg:x3; val_offset:75405*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75405*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde80007f; valaddr_reg:x3; val_offset:75408*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75408*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde8000ff; valaddr_reg:x3; val_offset:75411*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75411*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde8001ff; valaddr_reg:x3; val_offset:75414*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75414*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde8003ff; valaddr_reg:x3; val_offset:75417*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75417*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde8007ff; valaddr_reg:x3; val_offset:75420*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75420*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde800fff; valaddr_reg:x3; val_offset:75423*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75423*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde801fff; valaddr_reg:x3; val_offset:75426*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75426*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde803fff; valaddr_reg:x3; val_offset:75429*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75429*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde807fff; valaddr_reg:x3; val_offset:75432*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75432*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde80ffff; valaddr_reg:x3; val_offset:75435*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75435*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde81ffff; valaddr_reg:x3; val_offset:75438*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75438*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde83ffff; valaddr_reg:x3; val_offset:75441*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75441*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde87ffff; valaddr_reg:x3; val_offset:75444*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75444*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde8fffff; valaddr_reg:x3; val_offset:75447*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75447*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xde9fffff; valaddr_reg:x3; val_offset:75450*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75450*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdebfffff; valaddr_reg:x3; val_offset:75453*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75453*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdec00000; valaddr_reg:x3; val_offset:75456*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75456*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdee00000; valaddr_reg:x3; val_offset:75459*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75459*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdef00000; valaddr_reg:x3; val_offset:75462*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75462*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdef80000; valaddr_reg:x3; val_offset:75465*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75465*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdefc0000; valaddr_reg:x3; val_offset:75468*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75468*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdefe0000; valaddr_reg:x3; val_offset:75471*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75471*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdeff0000; valaddr_reg:x3; val_offset:75474*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75474*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdeff8000; valaddr_reg:x3; val_offset:75477*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75477*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdeffc000; valaddr_reg:x3; val_offset:75480*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75480*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdeffe000; valaddr_reg:x3; val_offset:75483*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75483*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdefff000; valaddr_reg:x3; val_offset:75486*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75486*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdefff800; valaddr_reg:x3; val_offset:75489*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75489*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdefffc00; valaddr_reg:x3; val_offset:75492*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75492*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdefffe00; valaddr_reg:x3; val_offset:75495*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75495*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdeffff00; valaddr_reg:x3; val_offset:75498*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75498*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdeffff80; valaddr_reg:x3; val_offset:75501*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75501*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdeffffc0; valaddr_reg:x3; val_offset:75504*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75504*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdeffffe0; valaddr_reg:x3; val_offset:75507*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75507*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdefffff0; valaddr_reg:x3; val_offset:75510*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75510*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdefffff8; valaddr_reg:x3; val_offset:75513*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75513*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdefffffc; valaddr_reg:x3; val_offset:75516*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75516*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdefffffe; valaddr_reg:x3; val_offset:75519*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75519*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xdeffffff; valaddr_reg:x3; val_offset:75522*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75522*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xff000001; valaddr_reg:x3; val_offset:75525*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75525*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xff000003; valaddr_reg:x3; val_offset:75528*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75528*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xff000007; valaddr_reg:x3; val_offset:75531*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75531*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xff199999; valaddr_reg:x3; val_offset:75534*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75534*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xff249249; valaddr_reg:x3; val_offset:75537*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75537*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xff333333; valaddr_reg:x3; val_offset:75540*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75540*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:75543*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75543*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:75546*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75546*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xff444444; valaddr_reg:x3; val_offset:75549*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75549*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:75552*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75552*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:75555*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75555*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xff666666; valaddr_reg:x3; val_offset:75558*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75558*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:75561*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75561*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:75564*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75564*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:75567*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75567*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ae60 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7cae66 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01ae60; op2val:0xbffcae66;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:75570*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75570*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:75573*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75573*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:75576*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75576*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:75579*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75579*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:75582*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75582*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:75585*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75585*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:75588*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75588*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:75591*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75591*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:75594*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75594*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:75597*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75597*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:75600*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75600*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:75603*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75603*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:75606*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75606*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:75609*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75609*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:75612*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75612*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:75615*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75615*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:75618*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75618*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0xa800000; valaddr_reg:x3; val_offset:75621*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75621*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0xa800001; valaddr_reg:x3; val_offset:75624*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75624*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0xa800003; valaddr_reg:x3; val_offset:75627*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75627*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0xa800007; valaddr_reg:x3; val_offset:75630*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75630*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0xa80000f; valaddr_reg:x3; val_offset:75633*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75633*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0xa80001f; valaddr_reg:x3; val_offset:75636*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75636*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0xa80003f; valaddr_reg:x3; val_offset:75639*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75639*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0xa80007f; valaddr_reg:x3; val_offset:75642*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75642*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01bae6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01bae6; op2val:0x0;
op3val:0xa8000ff; valaddr_reg:x3; val_offset:75645*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75645*0 + 3*196*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046879,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046911,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046975,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047103,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047359,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047871,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260048895,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260050943,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260055039,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260063231,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260079615,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260112383,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260177919,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260308991,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260571135,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(261095423,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262143999,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(264241151,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(264241152,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(266338304,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(267386880,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(267911168,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268173312,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268304384,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268369920,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268402688,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268419072,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268427264,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268431360,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268433408,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268434432,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268434944,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435200,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435328,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435392,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435424,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435440,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435448,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435452,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435454,32,FLEN)
NAN_BOXED(2130804742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435455,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3732930560,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3732930561,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3732930563,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3732930567,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3732930575,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3732930591,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3732930623,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3732930687,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3732930815,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3732931071,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3732931583,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3732932607,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3732934655,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3732938751,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3732946943,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3732963327,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3732996095,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3733061631,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3733192703,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3733454847,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3733979135,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3735027711,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3737124863,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3737124864,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3739222016,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3740270592,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3740794880,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741057024,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741188096,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741253632,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741286400,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741302784,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741310976,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741315072,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741317120,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741318144,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741318656,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741318912,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741319040,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741319104,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741319136,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741319152,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741319160,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741319164,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741319166,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(3741319167,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2130816608,32,FLEN)
NAN_BOXED(3221007974,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160768,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160769,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160771,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160775,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160783,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160799,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160831,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160895,32,FLEN)
NAN_BOXED(2130819814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176161023,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
