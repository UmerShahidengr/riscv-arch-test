
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_25344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d001fff; valaddr_reg:x3; val_offset:76032*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76032*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d003fff; valaddr_reg:x3; val_offset:76035*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76035*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d007fff; valaddr_reg:x3; val_offset:76038*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76038*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d00ffff; valaddr_reg:x3; val_offset:76041*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76041*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d01ffff; valaddr_reg:x3; val_offset:76044*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76044*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d03ffff; valaddr_reg:x3; val_offset:76047*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76047*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d07ffff; valaddr_reg:x3; val_offset:76050*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76050*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d0fffff; valaddr_reg:x3; val_offset:76053*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76053*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d1fffff; valaddr_reg:x3; val_offset:76056*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76056*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d3fffff; valaddr_reg:x3; val_offset:76059*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76059*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d400000; valaddr_reg:x3; val_offset:76062*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76062*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d600000; valaddr_reg:x3; val_offset:76065*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76065*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d700000; valaddr_reg:x3; val_offset:76068*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76068*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d780000; valaddr_reg:x3; val_offset:76071*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76071*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7c0000; valaddr_reg:x3; val_offset:76074*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76074*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7e0000; valaddr_reg:x3; val_offset:76077*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76077*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7f0000; valaddr_reg:x3; val_offset:76080*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76080*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7f8000; valaddr_reg:x3; val_offset:76083*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76083*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7fc000; valaddr_reg:x3; val_offset:76086*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76086*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7fe000; valaddr_reg:x3; val_offset:76089*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76089*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7ff000; valaddr_reg:x3; val_offset:76092*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76092*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7ff800; valaddr_reg:x3; val_offset:76095*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76095*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7ffc00; valaddr_reg:x3; val_offset:76098*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76098*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7ffe00; valaddr_reg:x3; val_offset:76101*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76101*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7fff00; valaddr_reg:x3; val_offset:76104*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76104*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7fff80; valaddr_reg:x3; val_offset:76107*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76107*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7fffc0; valaddr_reg:x3; val_offset:76110*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76110*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7fffe0; valaddr_reg:x3; val_offset:76113*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76113*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7ffff0; valaddr_reg:x3; val_offset:76116*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76116*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7ffff8; valaddr_reg:x3; val_offset:76119*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76119*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7ffffc; valaddr_reg:x3; val_offset:76122*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76122*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7ffffe; valaddr_reg:x3; val_offset:76125*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76125*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024f42 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f024f42; op2val:0x80000000;
op3val:0x8d7fffff; valaddr_reg:x3; val_offset:76128*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76128*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b800000; valaddr_reg:x3; val_offset:76131*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76131*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b800001; valaddr_reg:x3; val_offset:76134*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76134*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b800003; valaddr_reg:x3; val_offset:76137*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76137*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b800007; valaddr_reg:x3; val_offset:76140*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76140*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b80000f; valaddr_reg:x3; val_offset:76143*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76143*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b80001f; valaddr_reg:x3; val_offset:76146*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76146*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b80003f; valaddr_reg:x3; val_offset:76149*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76149*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b80007f; valaddr_reg:x3; val_offset:76152*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76152*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b8000ff; valaddr_reg:x3; val_offset:76155*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76155*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b8001ff; valaddr_reg:x3; val_offset:76158*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76158*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b8003ff; valaddr_reg:x3; val_offset:76161*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76161*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b8007ff; valaddr_reg:x3; val_offset:76164*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76164*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b800fff; valaddr_reg:x3; val_offset:76167*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76167*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b801fff; valaddr_reg:x3; val_offset:76170*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76170*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b803fff; valaddr_reg:x3; val_offset:76173*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76173*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b807fff; valaddr_reg:x3; val_offset:76176*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76176*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b80ffff; valaddr_reg:x3; val_offset:76179*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76179*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b81ffff; valaddr_reg:x3; val_offset:76182*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76182*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b83ffff; valaddr_reg:x3; val_offset:76185*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76185*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b87ffff; valaddr_reg:x3; val_offset:76188*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76188*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b8fffff; valaddr_reg:x3; val_offset:76191*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76191*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6b9fffff; valaddr_reg:x3; val_offset:76194*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76194*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bbfffff; valaddr_reg:x3; val_offset:76197*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76197*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bc00000; valaddr_reg:x3; val_offset:76200*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76200*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6be00000; valaddr_reg:x3; val_offset:76203*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76203*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bf00000; valaddr_reg:x3; val_offset:76206*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76206*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bf80000; valaddr_reg:x3; val_offset:76209*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76209*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bfc0000; valaddr_reg:x3; val_offset:76212*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76212*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bfe0000; valaddr_reg:x3; val_offset:76215*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76215*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bff0000; valaddr_reg:x3; val_offset:76218*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76218*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bff8000; valaddr_reg:x3; val_offset:76221*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76221*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bffc000; valaddr_reg:x3; val_offset:76224*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76224*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bffe000; valaddr_reg:x3; val_offset:76227*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76227*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bfff000; valaddr_reg:x3; val_offset:76230*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76230*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bfff800; valaddr_reg:x3; val_offset:76233*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76233*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bfffc00; valaddr_reg:x3; val_offset:76236*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76236*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bfffe00; valaddr_reg:x3; val_offset:76239*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76239*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bffff00; valaddr_reg:x3; val_offset:76242*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76242*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bffff80; valaddr_reg:x3; val_offset:76245*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76245*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bffffc0; valaddr_reg:x3; val_offset:76248*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76248*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bffffe0; valaddr_reg:x3; val_offset:76251*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76251*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bfffff0; valaddr_reg:x3; val_offset:76254*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76254*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bfffff8; valaddr_reg:x3; val_offset:76257*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76257*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bfffffc; valaddr_reg:x3; val_offset:76260*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76260*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bfffffe; valaddr_reg:x3; val_offset:76263*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76263*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x6bffffff; valaddr_reg:x3; val_offset:76266*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76266*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x7f000001; valaddr_reg:x3; val_offset:76269*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76269*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x7f000003; valaddr_reg:x3; val_offset:76272*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76272*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x7f000007; valaddr_reg:x3; val_offset:76275*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76275*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x7f199999; valaddr_reg:x3; val_offset:76278*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76278*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x7f249249; valaddr_reg:x3; val_offset:76281*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76281*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x7f333333; valaddr_reg:x3; val_offset:76284*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76284*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:76287*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76287*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:76290*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76290*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x7f444444; valaddr_reg:x3; val_offset:76293*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76293*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:76296*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76296*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:76299*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76299*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x7f666666; valaddr_reg:x3; val_offset:76302*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76302*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:76305*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76305*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:76308*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76308*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:76311*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76311*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02820b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7b1494 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02820b; op2val:0x3ffb1494;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:76314*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76314*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xbf800001; valaddr_reg:x3; val_offset:76317*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76317*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xbf800003; valaddr_reg:x3; val_offset:76320*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76320*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xbf800007; valaddr_reg:x3; val_offset:76323*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76323*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xbf999999; valaddr_reg:x3; val_offset:76326*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76326*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:76329*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76329*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:76332*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76332*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:76335*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76335*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:76338*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76338*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:76341*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76341*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:76344*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76344*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:76347*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76347*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:76350*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76350*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:76353*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76353*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:76356*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76356*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:76359*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76359*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:76362*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76362*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xc4000000; valaddr_reg:x3; val_offset:76365*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76365*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xc4000001; valaddr_reg:x3; val_offset:76368*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76368*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xc4000003; valaddr_reg:x3; val_offset:76371*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76371*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xc4000007; valaddr_reg:x3; val_offset:76374*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76374*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xc400000f; valaddr_reg:x3; val_offset:76377*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76377*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xc400001f; valaddr_reg:x3; val_offset:76380*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76380*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xc400003f; valaddr_reg:x3; val_offset:76383*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76383*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xc400007f; valaddr_reg:x3; val_offset:76386*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76386*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xc40000ff; valaddr_reg:x3; val_offset:76389*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76389*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xc40001ff; valaddr_reg:x3; val_offset:76392*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76392*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xc40003ff; valaddr_reg:x3; val_offset:76395*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76395*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xc40007ff; valaddr_reg:x3; val_offset:76398*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76398*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xc4000fff; valaddr_reg:x3; val_offset:76401*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76401*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xc4001fff; valaddr_reg:x3; val_offset:76404*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76404*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xc4003fff; valaddr_reg:x3; val_offset:76407*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76407*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xc4007fff; valaddr_reg:x3; val_offset:76410*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76410*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x029a59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3eb977 and fs3 == 1 and fe3 == 0x88 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f029a59; op2val:0x803eb977;
op3val:0xc400ffff; valaddr_reg:x3; val_offset:76413*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76413*0 + 3*198*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365595647,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365603839,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365620223,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365652991,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365718527,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365849599,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2366111743,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2366636031,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2367684607,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2369781759,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2369781760,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2371878912,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2372927488,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373451776,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373713920,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373844992,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373910528,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373943296,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373959680,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373967872,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373971968,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373974016,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975040,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975552,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975808,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975936,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976000,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976032,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976048,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976056,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976060,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976062,32,FLEN)
NAN_BOXED(2130857794,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976063,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803550720,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803550721,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803550723,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803550727,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803550735,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803550751,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803550783,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803550847,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803550975,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803551231,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803551743,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803552767,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803554815,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803558911,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803567103,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803583487,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803616255,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803681791,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1803812863,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1804075007,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1804599295,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1805647871,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1807745023,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1807745024,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1809842176,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1810890752,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811415040,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811677184,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811808256,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811873792,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811906560,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811922944,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811931136,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811935232,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811937280,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811938304,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811938816,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811939072,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811939200,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811939264,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811939296,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811939312,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811939320,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811939324,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811939326,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(1811939327,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2130870795,32,FLEN)
NAN_BOXED(1073419412,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3288334336,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3288334337,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3288334339,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3288334343,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3288334351,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3288334367,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3288334399,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3288334463,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3288334591,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3288334847,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3288335359,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3288336383,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3288338431,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3288342527,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3288350719,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3288367103,32,FLEN)
NAN_BOXED(2130877017,32,FLEN)
NAN_BOXED(2151594359,32,FLEN)
NAN_BOXED(3288399871,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
