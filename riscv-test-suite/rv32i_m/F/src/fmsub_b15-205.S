
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_26112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x046894 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f046894; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:78336*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78336*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x046894 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f046894; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:78339*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78339*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x046894 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f046894; op2val:0x80000000;
op3val:0x807fffff; valaddr_reg:x3; val_offset:78342*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78342*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac000000; valaddr_reg:x3; val_offset:78345*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78345*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac000001; valaddr_reg:x3; val_offset:78348*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78348*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac000003; valaddr_reg:x3; val_offset:78351*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78351*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac000007; valaddr_reg:x3; val_offset:78354*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78354*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac00000f; valaddr_reg:x3; val_offset:78357*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78357*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac00001f; valaddr_reg:x3; val_offset:78360*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78360*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac00003f; valaddr_reg:x3; val_offset:78363*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78363*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac00007f; valaddr_reg:x3; val_offset:78366*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78366*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac0000ff; valaddr_reg:x3; val_offset:78369*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78369*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac0001ff; valaddr_reg:x3; val_offset:78372*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78372*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac0003ff; valaddr_reg:x3; val_offset:78375*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78375*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac0007ff; valaddr_reg:x3; val_offset:78378*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78378*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac000fff; valaddr_reg:x3; val_offset:78381*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78381*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac001fff; valaddr_reg:x3; val_offset:78384*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78384*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac003fff; valaddr_reg:x3; val_offset:78387*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78387*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac007fff; valaddr_reg:x3; val_offset:78390*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78390*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac00ffff; valaddr_reg:x3; val_offset:78393*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78393*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac01ffff; valaddr_reg:x3; val_offset:78396*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78396*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac03ffff; valaddr_reg:x3; val_offset:78399*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78399*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac07ffff; valaddr_reg:x3; val_offset:78402*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78402*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac0fffff; valaddr_reg:x3; val_offset:78405*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78405*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac1fffff; valaddr_reg:x3; val_offset:78408*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78408*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac3fffff; valaddr_reg:x3; val_offset:78411*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78411*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac400000; valaddr_reg:x3; val_offset:78414*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78414*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac600000; valaddr_reg:x3; val_offset:78417*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78417*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac700000; valaddr_reg:x3; val_offset:78420*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78420*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac780000; valaddr_reg:x3; val_offset:78423*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78423*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7c0000; valaddr_reg:x3; val_offset:78426*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78426*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7e0000; valaddr_reg:x3; val_offset:78429*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78429*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7f0000; valaddr_reg:x3; val_offset:78432*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78432*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7f8000; valaddr_reg:x3; val_offset:78435*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78435*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7fc000; valaddr_reg:x3; val_offset:78438*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78438*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7fe000; valaddr_reg:x3; val_offset:78441*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78441*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7ff000; valaddr_reg:x3; val_offset:78444*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78444*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7ff800; valaddr_reg:x3; val_offset:78447*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78447*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7ffc00; valaddr_reg:x3; val_offset:78450*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78450*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7ffe00; valaddr_reg:x3; val_offset:78453*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78453*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7fff00; valaddr_reg:x3; val_offset:78456*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78456*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7fff80; valaddr_reg:x3; val_offset:78459*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78459*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7fffc0; valaddr_reg:x3; val_offset:78462*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78462*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7fffe0; valaddr_reg:x3; val_offset:78465*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78465*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7ffff0; valaddr_reg:x3; val_offset:78468*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78468*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7ffff8; valaddr_reg:x3; val_offset:78471*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78471*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7ffffc; valaddr_reg:x3; val_offset:78474*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78474*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7ffffe; valaddr_reg:x3; val_offset:78477*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78477*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xac7fffff; valaddr_reg:x3; val_offset:78480*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78480*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xbf800001; valaddr_reg:x3; val_offset:78483*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78483*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xbf800003; valaddr_reg:x3; val_offset:78486*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78486*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xbf800007; valaddr_reg:x3; val_offset:78489*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78489*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xbf999999; valaddr_reg:x3; val_offset:78492*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78492*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:78495*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78495*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:78498*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78498*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:78501*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78501*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:78504*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78504*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:78507*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78507*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:78510*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78510*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:78513*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78513*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:78516*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78516*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:78519*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78519*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:78522*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78522*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:78525*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78525*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x048e47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3dcce6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f048e47; op2val:0x803dcce6;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:78528*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78528*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2800000; valaddr_reg:x3; val_offset:78531*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78531*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2800001; valaddr_reg:x3; val_offset:78534*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78534*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2800003; valaddr_reg:x3; val_offset:78537*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78537*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2800007; valaddr_reg:x3; val_offset:78540*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78540*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf280000f; valaddr_reg:x3; val_offset:78543*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78543*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf280001f; valaddr_reg:x3; val_offset:78546*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78546*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf280003f; valaddr_reg:x3; val_offset:78549*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78549*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf280007f; valaddr_reg:x3; val_offset:78552*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78552*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf28000ff; valaddr_reg:x3; val_offset:78555*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78555*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf28001ff; valaddr_reg:x3; val_offset:78558*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78558*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf28003ff; valaddr_reg:x3; val_offset:78561*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78561*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf28007ff; valaddr_reg:x3; val_offset:78564*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78564*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2800fff; valaddr_reg:x3; val_offset:78567*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78567*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2801fff; valaddr_reg:x3; val_offset:78570*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78570*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2803fff; valaddr_reg:x3; val_offset:78573*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78573*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2807fff; valaddr_reg:x3; val_offset:78576*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78576*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf280ffff; valaddr_reg:x3; val_offset:78579*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78579*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf281ffff; valaddr_reg:x3; val_offset:78582*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78582*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf283ffff; valaddr_reg:x3; val_offset:78585*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78585*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf287ffff; valaddr_reg:x3; val_offset:78588*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78588*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf28fffff; valaddr_reg:x3; val_offset:78591*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78591*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf29fffff; valaddr_reg:x3; val_offset:78594*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78594*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2bfffff; valaddr_reg:x3; val_offset:78597*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78597*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2c00000; valaddr_reg:x3; val_offset:78600*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78600*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2e00000; valaddr_reg:x3; val_offset:78603*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78603*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2f00000; valaddr_reg:x3; val_offset:78606*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78606*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2f80000; valaddr_reg:x3; val_offset:78609*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78609*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2fc0000; valaddr_reg:x3; val_offset:78612*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78612*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2fe0000; valaddr_reg:x3; val_offset:78615*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78615*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2ff0000; valaddr_reg:x3; val_offset:78618*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78618*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2ff8000; valaddr_reg:x3; val_offset:78621*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78621*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2ffc000; valaddr_reg:x3; val_offset:78624*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78624*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2ffe000; valaddr_reg:x3; val_offset:78627*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78627*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2fff000; valaddr_reg:x3; val_offset:78630*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78630*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2fff800; valaddr_reg:x3; val_offset:78633*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78633*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2fffc00; valaddr_reg:x3; val_offset:78636*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78636*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2fffe00; valaddr_reg:x3; val_offset:78639*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78639*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2ffff00; valaddr_reg:x3; val_offset:78642*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78642*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2ffff80; valaddr_reg:x3; val_offset:78645*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78645*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2ffffc0; valaddr_reg:x3; val_offset:78648*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78648*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2ffffe0; valaddr_reg:x3; val_offset:78651*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78651*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2fffff0; valaddr_reg:x3; val_offset:78654*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78654*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2fffff8; valaddr_reg:x3; val_offset:78657*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78657*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2fffffc; valaddr_reg:x3; val_offset:78660*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78660*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2fffffe; valaddr_reg:x3; val_offset:78663*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78663*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xf2ffffff; valaddr_reg:x3; val_offset:78666*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78666*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xff000001; valaddr_reg:x3; val_offset:78669*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78669*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xff000003; valaddr_reg:x3; val_offset:78672*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78672*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xff000007; valaddr_reg:x3; val_offset:78675*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78675*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xff199999; valaddr_reg:x3; val_offset:78678*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78678*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xff249249; valaddr_reg:x3; val_offset:78681*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78681*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xff333333; valaddr_reg:x3; val_offset:78684*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78684*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:78687*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78687*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:78690*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78690*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xff444444; valaddr_reg:x3; val_offset:78693*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78693*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:78696*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78696*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:78699*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78699*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xff666666; valaddr_reg:x3; val_offset:78702*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78702*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:78705*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78705*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:78708*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78708*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:78711*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78711*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05391a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x75f6a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05391a; op2val:0xbff5f6a1;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:78714*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78714*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x058f0a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d5617 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f058f0a; op2val:0x803d5617;
op3val:0xbf800001; valaddr_reg:x3; val_offset:78717*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78717*0 + 3*204*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130995348,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2130995348,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2130995348,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885681152,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885681153,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885681155,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885681159,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885681167,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885681183,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885681215,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885681279,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885681407,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885681663,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885682175,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885683199,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885685247,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885689343,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885697535,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885713919,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885746687,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885812223,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2885943295,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2886205439,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2886729727,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2887778303,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2889875455,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2889875456,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2891972608,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2893021184,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2893545472,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2893807616,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2893938688,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2894004224,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2894036992,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2894053376,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2894061568,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2894065664,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2894067712,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2894068736,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2894069248,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2894069504,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2894069632,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2894069696,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2894069728,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2894069744,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2894069752,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2894069756,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2894069758,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(2894069759,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2131004999,32,FLEN)
NAN_BOXED(2151533798,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068474880,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068474881,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068474883,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068474887,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068474895,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068474911,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068474943,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068475007,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068475135,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068475391,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068475903,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068476927,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068478975,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068483071,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068491263,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068507647,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068540415,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068605951,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068737023,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4068999167,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4069523455,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4070572031,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4072669183,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4072669184,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4074766336,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4075814912,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076339200,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076601344,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076732416,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076797952,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076830720,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076847104,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076855296,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076859392,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076861440,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076862464,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076862976,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076863232,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076863360,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076863424,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076863456,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076863472,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076863480,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076863484,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076863486,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4076863487,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2131048730,32,FLEN)
NAN_BOXED(3220567713,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2131070730,32,FLEN)
NAN_BOXED(2151503383,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
