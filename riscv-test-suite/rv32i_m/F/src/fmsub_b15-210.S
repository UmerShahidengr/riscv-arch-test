
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_26752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48800001; valaddr_reg:x3; val_offset:80256*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80256*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48800003; valaddr_reg:x3; val_offset:80259*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80259*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48800007; valaddr_reg:x3; val_offset:80262*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80262*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x4880000f; valaddr_reg:x3; val_offset:80265*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80265*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x4880001f; valaddr_reg:x3; val_offset:80268*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80268*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x4880003f; valaddr_reg:x3; val_offset:80271*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80271*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x4880007f; valaddr_reg:x3; val_offset:80274*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80274*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x488000ff; valaddr_reg:x3; val_offset:80277*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80277*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x488001ff; valaddr_reg:x3; val_offset:80280*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80280*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x488003ff; valaddr_reg:x3; val_offset:80283*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80283*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x488007ff; valaddr_reg:x3; val_offset:80286*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80286*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48800fff; valaddr_reg:x3; val_offset:80289*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80289*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48801fff; valaddr_reg:x3; val_offset:80292*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80292*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48803fff; valaddr_reg:x3; val_offset:80295*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80295*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48807fff; valaddr_reg:x3; val_offset:80298*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80298*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x4880ffff; valaddr_reg:x3; val_offset:80301*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80301*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x4881ffff; valaddr_reg:x3; val_offset:80304*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80304*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x4883ffff; valaddr_reg:x3; val_offset:80307*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80307*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x4887ffff; valaddr_reg:x3; val_offset:80310*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80310*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x488fffff; valaddr_reg:x3; val_offset:80313*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80313*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x489fffff; valaddr_reg:x3; val_offset:80316*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80316*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48bfffff; valaddr_reg:x3; val_offset:80319*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80319*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48c00000; valaddr_reg:x3; val_offset:80322*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80322*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48e00000; valaddr_reg:x3; val_offset:80325*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80325*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48f00000; valaddr_reg:x3; val_offset:80328*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80328*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48f80000; valaddr_reg:x3; val_offset:80331*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80331*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48fc0000; valaddr_reg:x3; val_offset:80334*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80334*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48fe0000; valaddr_reg:x3; val_offset:80337*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80337*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48ff0000; valaddr_reg:x3; val_offset:80340*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80340*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48ff8000; valaddr_reg:x3; val_offset:80343*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80343*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48ffc000; valaddr_reg:x3; val_offset:80346*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80346*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48ffe000; valaddr_reg:x3; val_offset:80349*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80349*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48fff000; valaddr_reg:x3; val_offset:80352*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80352*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48fff800; valaddr_reg:x3; val_offset:80355*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80355*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48fffc00; valaddr_reg:x3; val_offset:80358*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80358*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48fffe00; valaddr_reg:x3; val_offset:80361*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80361*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48ffff00; valaddr_reg:x3; val_offset:80364*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80364*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48ffff80; valaddr_reg:x3; val_offset:80367*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80367*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48ffffc0; valaddr_reg:x3; val_offset:80370*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80370*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48ffffe0; valaddr_reg:x3; val_offset:80373*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80373*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48fffff0; valaddr_reg:x3; val_offset:80376*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80376*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48fffff8; valaddr_reg:x3; val_offset:80379*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80379*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48fffffc; valaddr_reg:x3; val_offset:80382*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80382*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48fffffe; valaddr_reg:x3; val_offset:80385*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80385*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f435 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c4175 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07f435; op2val:0x3c4175;
op3val:0x48ffffff; valaddr_reg:x3; val_offset:80388*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80388*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xbf800001; valaddr_reg:x3; val_offset:80391*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80391*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xbf800003; valaddr_reg:x3; val_offset:80394*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80394*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xbf800007; valaddr_reg:x3; val_offset:80397*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80397*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xbf999999; valaddr_reg:x3; val_offset:80400*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80400*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:80403*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80403*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:80406*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80406*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:80409*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80409*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:80412*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80412*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:80415*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80415*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:80418*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80418*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:80421*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80421*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:80424*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80424*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:80427*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80427*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:80430*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80430*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:80433*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80433*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:80436*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80436*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf000000; valaddr_reg:x3; val_offset:80439*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80439*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf000001; valaddr_reg:x3; val_offset:80442*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80442*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf000003; valaddr_reg:x3; val_offset:80445*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80445*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf000007; valaddr_reg:x3; val_offset:80448*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80448*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf00000f; valaddr_reg:x3; val_offset:80451*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80451*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf00001f; valaddr_reg:x3; val_offset:80454*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80454*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf00003f; valaddr_reg:x3; val_offset:80457*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80457*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf00007f; valaddr_reg:x3; val_offset:80460*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80460*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf0000ff; valaddr_reg:x3; val_offset:80463*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80463*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf0001ff; valaddr_reg:x3; val_offset:80466*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80466*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf0003ff; valaddr_reg:x3; val_offset:80469*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80469*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf0007ff; valaddr_reg:x3; val_offset:80472*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80472*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf000fff; valaddr_reg:x3; val_offset:80475*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80475*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf001fff; valaddr_reg:x3; val_offset:80478*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80478*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf003fff; valaddr_reg:x3; val_offset:80481*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80481*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf007fff; valaddr_reg:x3; val_offset:80484*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80484*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf00ffff; valaddr_reg:x3; val_offset:80487*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80487*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf01ffff; valaddr_reg:x3; val_offset:80490*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80490*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf03ffff; valaddr_reg:x3; val_offset:80493*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80493*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf07ffff; valaddr_reg:x3; val_offset:80496*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80496*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf0fffff; valaddr_reg:x3; val_offset:80499*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80499*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf1fffff; valaddr_reg:x3; val_offset:80502*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80502*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf3fffff; valaddr_reg:x3; val_offset:80505*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80505*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf400000; valaddr_reg:x3; val_offset:80508*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80508*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf600000; valaddr_reg:x3; val_offset:80511*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80511*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf700000; valaddr_reg:x3; val_offset:80514*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80514*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf780000; valaddr_reg:x3; val_offset:80517*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80517*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7c0000; valaddr_reg:x3; val_offset:80520*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80520*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7e0000; valaddr_reg:x3; val_offset:80523*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80523*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7f0000; valaddr_reg:x3; val_offset:80526*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80526*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7f8000; valaddr_reg:x3; val_offset:80529*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80529*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7fc000; valaddr_reg:x3; val_offset:80532*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80532*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7fe000; valaddr_reg:x3; val_offset:80535*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80535*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7ff000; valaddr_reg:x3; val_offset:80538*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80538*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7ff800; valaddr_reg:x3; val_offset:80541*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80541*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7ffc00; valaddr_reg:x3; val_offset:80544*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80544*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7ffe00; valaddr_reg:x3; val_offset:80547*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80547*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7fff00; valaddr_reg:x3; val_offset:80550*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80550*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7fff80; valaddr_reg:x3; val_offset:80553*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80553*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7fffc0; valaddr_reg:x3; val_offset:80556*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80556*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7fffe0; valaddr_reg:x3; val_offset:80559*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80559*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7ffff0; valaddr_reg:x3; val_offset:80562*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80562*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7ffff8; valaddr_reg:x3; val_offset:80565*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80565*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7ffffc; valaddr_reg:x3; val_offset:80568*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80568*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7ffffe; valaddr_reg:x3; val_offset:80571*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80571*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08036e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3c3ab7 and fs3 == 1 and fe3 == 0x9e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08036e; op2val:0x803c3ab7;
op3val:0xcf7fffff; valaddr_reg:x3; val_offset:80574*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80574*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:80577*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80577*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:80580*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80580*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:80583*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80583*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:80586*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80586*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:80589*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80589*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:80592*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80592*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:80595*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80595*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:80598*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80598*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:80601*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80601*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:80604*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80604*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:80607*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80607*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:80610*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80610*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:80613*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80613*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:80616*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80616*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:80619*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80619*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:80622*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80622*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc000000; valaddr_reg:x3; val_offset:80625*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80625*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc000001; valaddr_reg:x3; val_offset:80628*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80628*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc000003; valaddr_reg:x3; val_offset:80631*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80631*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc000007; valaddr_reg:x3; val_offset:80634*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80634*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc00000f; valaddr_reg:x3; val_offset:80637*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80637*0 + 3*209*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216348161,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216348163,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216348167,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216348175,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216348191,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216348223,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216348287,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216348415,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216348671,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216349183,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216350207,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216352255,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216356351,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216364543,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216380927,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216413695,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216479231,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216610303,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1216872447,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1217396735,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1218445311,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1220542463,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1220542464,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1222639616,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1223688192,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224212480,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224474624,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224605696,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224671232,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224704000,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224720384,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224728576,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224732672,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224734720,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224735744,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224736256,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224736512,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224736640,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224736704,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224736736,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224736752,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224736760,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224736764,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224736766,32,FLEN)
NAN_BOXED(2131227701,32,FLEN)
NAN_BOXED(3948917,32,FLEN)
NAN_BOXED(1224736767,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3472883712,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3472883713,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3472883715,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3472883719,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3472883727,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3472883743,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3472883775,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3472883839,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3472883967,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3472884223,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3472884735,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3472885759,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3472887807,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3472891903,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3472900095,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3472916479,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3472949247,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3473014783,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3473145855,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3473407999,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3473932287,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3474980863,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3477078015,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3477078016,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3479175168,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3480223744,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3480748032,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481010176,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481141248,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481206784,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481239552,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481255936,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481264128,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481268224,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481270272,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481271296,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481271808,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481272064,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481272192,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481272256,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481272288,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481272304,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481272312,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481272316,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481272318,32,FLEN)
NAN_BOXED(2131231598,32,FLEN)
NAN_BOXED(2151430839,32,FLEN)
NAN_BOXED(3481272319,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326592,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326593,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326595,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326599,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326607,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
