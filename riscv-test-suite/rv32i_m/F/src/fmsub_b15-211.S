
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_26880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc00001f; valaddr_reg:x3; val_offset:80640*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80640*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc00003f; valaddr_reg:x3; val_offset:80643*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80643*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc00007f; valaddr_reg:x3; val_offset:80646*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80646*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc0000ff; valaddr_reg:x3; val_offset:80649*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80649*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc0001ff; valaddr_reg:x3; val_offset:80652*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80652*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc0003ff; valaddr_reg:x3; val_offset:80655*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80655*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc0007ff; valaddr_reg:x3; val_offset:80658*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80658*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc000fff; valaddr_reg:x3; val_offset:80661*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80661*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc001fff; valaddr_reg:x3; val_offset:80664*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80664*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc003fff; valaddr_reg:x3; val_offset:80667*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80667*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc007fff; valaddr_reg:x3; val_offset:80670*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80670*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc00ffff; valaddr_reg:x3; val_offset:80673*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80673*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc01ffff; valaddr_reg:x3; val_offset:80676*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80676*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc03ffff; valaddr_reg:x3; val_offset:80679*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80679*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc07ffff; valaddr_reg:x3; val_offset:80682*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80682*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc0fffff; valaddr_reg:x3; val_offset:80685*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80685*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc1fffff; valaddr_reg:x3; val_offset:80688*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80688*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc3fffff; valaddr_reg:x3; val_offset:80691*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80691*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc400000; valaddr_reg:x3; val_offset:80694*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80694*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc600000; valaddr_reg:x3; val_offset:80697*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80697*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc700000; valaddr_reg:x3; val_offset:80700*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80700*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc780000; valaddr_reg:x3; val_offset:80703*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80703*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7c0000; valaddr_reg:x3; val_offset:80706*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80706*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7e0000; valaddr_reg:x3; val_offset:80709*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80709*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7f0000; valaddr_reg:x3; val_offset:80712*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80712*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7f8000; valaddr_reg:x3; val_offset:80715*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80715*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7fc000; valaddr_reg:x3; val_offset:80718*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80718*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7fe000; valaddr_reg:x3; val_offset:80721*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80721*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7ff000; valaddr_reg:x3; val_offset:80724*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80724*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7ff800; valaddr_reg:x3; val_offset:80727*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80727*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7ffc00; valaddr_reg:x3; val_offset:80730*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80730*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7ffe00; valaddr_reg:x3; val_offset:80733*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80733*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7fff00; valaddr_reg:x3; val_offset:80736*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80736*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7fff80; valaddr_reg:x3; val_offset:80739*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80739*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7fffc0; valaddr_reg:x3; val_offset:80742*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80742*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7fffe0; valaddr_reg:x3; val_offset:80745*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80745*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7ffff0; valaddr_reg:x3; val_offset:80748*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80748*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7ffff8; valaddr_reg:x3; val_offset:80751*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80751*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7ffffc; valaddr_reg:x3; val_offset:80754*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80754*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7ffffe; valaddr_reg:x3; val_offset:80757*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80757*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f086888; op2val:0x0;
op3val:0xc7fffff; valaddr_reg:x3; val_offset:80760*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80760*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:80763*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80763*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:80766*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80766*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:80769*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80769*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:80772*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80772*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:80775*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80775*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:80778*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80778*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:80781*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80781*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:80784*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80784*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:80787*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80787*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:80790*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80790*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:80793*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80793*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:80796*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80796*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:80799*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80799*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:80802*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80802*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:80805*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80805*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:80808*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80808*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f000000; valaddr_reg:x3; val_offset:80811*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80811*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f000001; valaddr_reg:x3; val_offset:80814*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80814*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f000003; valaddr_reg:x3; val_offset:80817*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80817*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f000007; valaddr_reg:x3; val_offset:80820*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80820*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f00000f; valaddr_reg:x3; val_offset:80823*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80823*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f00001f; valaddr_reg:x3; val_offset:80826*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80826*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f00003f; valaddr_reg:x3; val_offset:80829*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80829*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f00007f; valaddr_reg:x3; val_offset:80832*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80832*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f0000ff; valaddr_reg:x3; val_offset:80835*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80835*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f0001ff; valaddr_reg:x3; val_offset:80838*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80838*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f0003ff; valaddr_reg:x3; val_offset:80841*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80841*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f0007ff; valaddr_reg:x3; val_offset:80844*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80844*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f000fff; valaddr_reg:x3; val_offset:80847*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80847*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f001fff; valaddr_reg:x3; val_offset:80850*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80850*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f003fff; valaddr_reg:x3; val_offset:80853*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80853*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f007fff; valaddr_reg:x3; val_offset:80856*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80856*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f00ffff; valaddr_reg:x3; val_offset:80859*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80859*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f01ffff; valaddr_reg:x3; val_offset:80862*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80862*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f03ffff; valaddr_reg:x3; val_offset:80865*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80865*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f07ffff; valaddr_reg:x3; val_offset:80868*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80868*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f0fffff; valaddr_reg:x3; val_offset:80871*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80871*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f1fffff; valaddr_reg:x3; val_offset:80874*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80874*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f3fffff; valaddr_reg:x3; val_offset:80877*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80877*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f400000; valaddr_reg:x3; val_offset:80880*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80880*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f600000; valaddr_reg:x3; val_offset:80883*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80883*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f700000; valaddr_reg:x3; val_offset:80886*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80886*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f780000; valaddr_reg:x3; val_offset:80889*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80889*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7c0000; valaddr_reg:x3; val_offset:80892*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80892*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7e0000; valaddr_reg:x3; val_offset:80895*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80895*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7f0000; valaddr_reg:x3; val_offset:80898*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80898*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7f8000; valaddr_reg:x3; val_offset:80901*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80901*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7fc000; valaddr_reg:x3; val_offset:80904*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80904*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7fe000; valaddr_reg:x3; val_offset:80907*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80907*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7ff000; valaddr_reg:x3; val_offset:80910*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80910*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7ff800; valaddr_reg:x3; val_offset:80913*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80913*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7ffc00; valaddr_reg:x3; val_offset:80916*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80916*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7ffe00; valaddr_reg:x3; val_offset:80919*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80919*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7fff00; valaddr_reg:x3; val_offset:80922*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80922*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7fff80; valaddr_reg:x3; val_offset:80925*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80925*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7fffc0; valaddr_reg:x3; val_offset:80928*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80928*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7fffe0; valaddr_reg:x3; val_offset:80931*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80931*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7ffff0; valaddr_reg:x3; val_offset:80934*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80934*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7ffff8; valaddr_reg:x3; val_offset:80937*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80937*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7ffffc; valaddr_reg:x3; val_offset:80940*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80940*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7ffffe; valaddr_reg:x3; val_offset:80943*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80943*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08d74e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08d74e; op2val:0x80000000;
op3val:0x8f7fffff; valaddr_reg:x3; val_offset:80946*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80946*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:80949*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80949*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:80952*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80952*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:80955*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80955*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:80958*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80958*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:80961*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80961*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:80964*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80964*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:80967*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80967*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:80970*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80970*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:80973*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80973*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:80976*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80976*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:80979*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80979*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:80982*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80982*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:80985*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80985*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:80988*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80988*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:80991*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80991*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:80994*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80994*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xa800000; valaddr_reg:x3; val_offset:80997*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80997*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xa800001; valaddr_reg:x3; val_offset:81000*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81000*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xa800003; valaddr_reg:x3; val_offset:81003*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81003*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xa800007; valaddr_reg:x3; val_offset:81006*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81006*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xa80000f; valaddr_reg:x3; val_offset:81009*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81009*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xa80001f; valaddr_reg:x3; val_offset:81012*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81012*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xa80003f; valaddr_reg:x3; val_offset:81015*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81015*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xa80007f; valaddr_reg:x3; val_offset:81018*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81018*0 + 3*210*FLEN/8, x4, x1, x2)

inst_27007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090db7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090db7; op2val:0x0;
op3val:0xa8000ff; valaddr_reg:x3; val_offset:81021*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81021*0 + 3*210*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326623,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326655,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326719,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326847,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201327103,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201327615,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201328639,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201330687,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201334783,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201342975,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201359359,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201392127,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201457663,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201588735,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201850879,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(202375167,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(203423743,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(205520895,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(205520896,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(207618048,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(208666624,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209190912,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209453056,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209584128,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209649664,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209682432,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209698816,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209707008,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209711104,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209713152,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714176,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714688,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714944,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715072,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715136,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715168,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715184,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715192,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715196,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715198,32,FLEN)
NAN_BOXED(2131257480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715199,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141888,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141889,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141891,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141895,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141903,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141919,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141951,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142015,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142143,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142399,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142911,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399143935,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399145983,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399150079,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399158271,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399174655,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399207423,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399272959,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399404031,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399666175,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2400190463,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2401239039,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336191,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336192,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2405433344,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2406481920,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407006208,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407268352,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407399424,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407464960,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407497728,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407514112,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407522304,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407526400,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407528448,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407529472,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407529984,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530240,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530368,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530432,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530464,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530480,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530488,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530492,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530494,32,FLEN)
NAN_BOXED(2131285838,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530495,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160768,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160769,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160771,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160775,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160783,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160799,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160831,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160895,32,FLEN)
NAN_BOXED(2131299767,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176161023,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
