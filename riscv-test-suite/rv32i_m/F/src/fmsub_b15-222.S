
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_28288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:84864*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84864*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:84867*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84867*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:84870*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84870*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:84873*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84873*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:84876*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84876*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:84879*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84879*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:84882*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84882*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x1000000; valaddr_reg:x3; val_offset:84885*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84885*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x1000001; valaddr_reg:x3; val_offset:84888*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84888*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x1000003; valaddr_reg:x3; val_offset:84891*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84891*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x1000007; valaddr_reg:x3; val_offset:84894*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84894*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x100000f; valaddr_reg:x3; val_offset:84897*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84897*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x100001f; valaddr_reg:x3; val_offset:84900*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84900*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x100003f; valaddr_reg:x3; val_offset:84903*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84903*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x100007f; valaddr_reg:x3; val_offset:84906*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84906*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x10000ff; valaddr_reg:x3; val_offset:84909*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84909*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x10001ff; valaddr_reg:x3; val_offset:84912*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84912*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x10003ff; valaddr_reg:x3; val_offset:84915*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84915*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x10007ff; valaddr_reg:x3; val_offset:84918*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84918*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x1000fff; valaddr_reg:x3; val_offset:84921*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84921*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x1001fff; valaddr_reg:x3; val_offset:84924*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84924*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x1003fff; valaddr_reg:x3; val_offset:84927*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84927*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x1007fff; valaddr_reg:x3; val_offset:84930*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84930*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x100ffff; valaddr_reg:x3; val_offset:84933*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84933*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x101ffff; valaddr_reg:x3; val_offset:84936*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84936*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x103ffff; valaddr_reg:x3; val_offset:84939*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84939*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x107ffff; valaddr_reg:x3; val_offset:84942*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84942*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x10fffff; valaddr_reg:x3; val_offset:84945*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84945*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x11fffff; valaddr_reg:x3; val_offset:84948*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84948*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x13fffff; valaddr_reg:x3; val_offset:84951*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84951*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x1400000; valaddr_reg:x3; val_offset:84954*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84954*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x1600000; valaddr_reg:x3; val_offset:84957*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84957*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x1700000; valaddr_reg:x3; val_offset:84960*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84960*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x1780000; valaddr_reg:x3; val_offset:84963*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84963*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17c0000; valaddr_reg:x3; val_offset:84966*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84966*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17e0000; valaddr_reg:x3; val_offset:84969*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84969*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17f0000; valaddr_reg:x3; val_offset:84972*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84972*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17f8000; valaddr_reg:x3; val_offset:84975*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84975*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17fc000; valaddr_reg:x3; val_offset:84978*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84978*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17fe000; valaddr_reg:x3; val_offset:84981*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84981*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17ff000; valaddr_reg:x3; val_offset:84984*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84984*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17ff800; valaddr_reg:x3; val_offset:84987*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84987*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17ffc00; valaddr_reg:x3; val_offset:84990*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84990*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17ffe00; valaddr_reg:x3; val_offset:84993*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84993*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17fff00; valaddr_reg:x3; val_offset:84996*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84996*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17fff80; valaddr_reg:x3; val_offset:84999*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84999*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17fffc0; valaddr_reg:x3; val_offset:85002*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85002*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17fffe0; valaddr_reg:x3; val_offset:85005*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85005*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17ffff0; valaddr_reg:x3; val_offset:85008*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85008*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17ffff8; valaddr_reg:x3; val_offset:85011*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85011*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17ffffc; valaddr_reg:x3; val_offset:85014*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85014*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17ffffe; valaddr_reg:x3; val_offset:85017*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85017*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d4e65 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d4e65; op2val:0x0;
op3val:0x17fffff; valaddr_reg:x3; val_offset:85020*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85020*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee800000; valaddr_reg:x3; val_offset:85023*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85023*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee800001; valaddr_reg:x3; val_offset:85026*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85026*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee800003; valaddr_reg:x3; val_offset:85029*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85029*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee800007; valaddr_reg:x3; val_offset:85032*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85032*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee80000f; valaddr_reg:x3; val_offset:85035*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85035*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee80001f; valaddr_reg:x3; val_offset:85038*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85038*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee80003f; valaddr_reg:x3; val_offset:85041*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85041*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee80007f; valaddr_reg:x3; val_offset:85044*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85044*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee8000ff; valaddr_reg:x3; val_offset:85047*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85047*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee8001ff; valaddr_reg:x3; val_offset:85050*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85050*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee8003ff; valaddr_reg:x3; val_offset:85053*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85053*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee8007ff; valaddr_reg:x3; val_offset:85056*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85056*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee800fff; valaddr_reg:x3; val_offset:85059*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85059*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee801fff; valaddr_reg:x3; val_offset:85062*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85062*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee803fff; valaddr_reg:x3; val_offset:85065*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85065*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee807fff; valaddr_reg:x3; val_offset:85068*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85068*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee80ffff; valaddr_reg:x3; val_offset:85071*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85071*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee81ffff; valaddr_reg:x3; val_offset:85074*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85074*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee83ffff; valaddr_reg:x3; val_offset:85077*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85077*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee87ffff; valaddr_reg:x3; val_offset:85080*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85080*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee8fffff; valaddr_reg:x3; val_offset:85083*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85083*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xee9fffff; valaddr_reg:x3; val_offset:85086*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85086*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeebfffff; valaddr_reg:x3; val_offset:85089*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85089*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeec00000; valaddr_reg:x3; val_offset:85092*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85092*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeee00000; valaddr_reg:x3; val_offset:85095*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85095*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeef00000; valaddr_reg:x3; val_offset:85098*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85098*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeef80000; valaddr_reg:x3; val_offset:85101*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85101*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeefc0000; valaddr_reg:x3; val_offset:85104*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85104*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeefe0000; valaddr_reg:x3; val_offset:85107*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85107*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeeff0000; valaddr_reg:x3; val_offset:85110*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85110*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeeff8000; valaddr_reg:x3; val_offset:85113*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85113*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeeffc000; valaddr_reg:x3; val_offset:85116*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85116*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeeffe000; valaddr_reg:x3; val_offset:85119*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85119*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeefff000; valaddr_reg:x3; val_offset:85122*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85122*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeefff800; valaddr_reg:x3; val_offset:85125*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85125*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeefffc00; valaddr_reg:x3; val_offset:85128*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85128*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeefffe00; valaddr_reg:x3; val_offset:85131*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85131*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeeffff00; valaddr_reg:x3; val_offset:85134*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85134*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeeffff80; valaddr_reg:x3; val_offset:85137*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85137*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeeffffc0; valaddr_reg:x3; val_offset:85140*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85140*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeeffffe0; valaddr_reg:x3; val_offset:85143*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85143*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeefffff0; valaddr_reg:x3; val_offset:85146*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85146*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeefffff8; valaddr_reg:x3; val_offset:85149*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85149*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeefffffc; valaddr_reg:x3; val_offset:85152*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85152*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeefffffe; valaddr_reg:x3; val_offset:85155*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85155*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xeeffffff; valaddr_reg:x3; val_offset:85158*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85158*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xff000001; valaddr_reg:x3; val_offset:85161*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85161*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xff000003; valaddr_reg:x3; val_offset:85164*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85164*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xff000007; valaddr_reg:x3; val_offset:85167*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85167*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xff199999; valaddr_reg:x3; val_offset:85170*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85170*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xff249249; valaddr_reg:x3; val_offset:85173*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85173*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xff333333; valaddr_reg:x3; val_offset:85176*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85176*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:85179*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85179*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:85182*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85182*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xff444444; valaddr_reg:x3; val_offset:85185*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85185*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:85188*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85188*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:85191*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85191*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xff666666; valaddr_reg:x3; val_offset:85194*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85194*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:85197*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85197*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:85200*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85200*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:85203*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85203*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d694a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x67b8a2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d694a; op2val:0xbfe7b8a2;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:85206*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85206*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dcf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dcf2f; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:85209*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85209*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dcf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dcf2f; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:85212*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85212*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dcf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dcf2f; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:85215*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85215*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dcf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dcf2f; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:85218*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85218*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dcf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dcf2f; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:85221*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85221*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dcf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dcf2f; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:85224*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85224*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dcf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dcf2f; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:85227*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85227*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dcf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dcf2f; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:85230*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85230*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dcf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dcf2f; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:85233*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85233*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dcf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dcf2f; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:85236*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85236*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dcf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dcf2f; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:85239*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85239*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dcf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dcf2f; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:85242*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85242*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dcf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dcf2f; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:85245*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85245*0 + 3*221*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777216,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777217,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777219,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777223,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777231,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777247,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777279,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777343,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777471,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777727,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16778239,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16779263,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16781311,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16785407,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16793599,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16809983,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16842751,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16908287,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17039359,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17301503,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17825791,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(18874367,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971519,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971520,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(23068672,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24117248,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24641536,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24903680,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25034752,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25100288,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25133056,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25149440,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25157632,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25161728,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25163776,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25164800,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165312,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165568,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165696,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165760,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165792,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165808,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165816,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165820,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165822,32,FLEN)
NAN_BOXED(2131578469,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165823,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001366016,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001366017,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001366019,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001366023,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001366031,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001366047,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001366079,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001366143,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001366271,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001366527,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001367039,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001368063,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001370111,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001374207,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001382399,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001398783,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001431551,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001497087,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001628159,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4001890303,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4002414591,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4003463167,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4005560319,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4005560320,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4007657472,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4008706048,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009230336,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009492480,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009623552,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009689088,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009721856,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009738240,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009746432,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009750528,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009752576,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009753600,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009754112,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009754368,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009754496,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009754560,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009754592,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009754608,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009754616,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009754620,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009754622,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4009754623,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2131585354,32,FLEN)
NAN_BOXED(3219634338,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2131611439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2131611439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2131611439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2131611439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2131611439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2131611439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2131611439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2131611439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2131611439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2131611439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2131611439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2131611439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2131611439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
