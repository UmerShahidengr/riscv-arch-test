
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_28672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa01fffff; valaddr_reg:x3; val_offset:86016*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86016*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa03fffff; valaddr_reg:x3; val_offset:86019*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86019*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa0400000; valaddr_reg:x3; val_offset:86022*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86022*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa0600000; valaddr_reg:x3; val_offset:86025*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86025*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa0700000; valaddr_reg:x3; val_offset:86028*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86028*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa0780000; valaddr_reg:x3; val_offset:86031*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86031*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07c0000; valaddr_reg:x3; val_offset:86034*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86034*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07e0000; valaddr_reg:x3; val_offset:86037*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86037*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07f0000; valaddr_reg:x3; val_offset:86040*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86040*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07f8000; valaddr_reg:x3; val_offset:86043*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86043*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07fc000; valaddr_reg:x3; val_offset:86046*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86046*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07fe000; valaddr_reg:x3; val_offset:86049*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86049*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07ff000; valaddr_reg:x3; val_offset:86052*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86052*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07ff800; valaddr_reg:x3; val_offset:86055*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86055*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07ffc00; valaddr_reg:x3; val_offset:86058*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86058*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07ffe00; valaddr_reg:x3; val_offset:86061*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86061*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07fff00; valaddr_reg:x3; val_offset:86064*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86064*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07fff80; valaddr_reg:x3; val_offset:86067*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86067*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07fffc0; valaddr_reg:x3; val_offset:86070*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86070*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07fffe0; valaddr_reg:x3; val_offset:86073*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86073*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07ffff0; valaddr_reg:x3; val_offset:86076*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86076*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07ffff8; valaddr_reg:x3; val_offset:86079*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86079*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07ffffc; valaddr_reg:x3; val_offset:86082*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86082*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07ffffe; valaddr_reg:x3; val_offset:86085*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86085*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xa07fffff; valaddr_reg:x3; val_offset:86088*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86088*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xbf800001; valaddr_reg:x3; val_offset:86091*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86091*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xbf800003; valaddr_reg:x3; val_offset:86094*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86094*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xbf800007; valaddr_reg:x3; val_offset:86097*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86097*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xbf999999; valaddr_reg:x3; val_offset:86100*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86100*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:86103*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86103*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:86106*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86106*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:86109*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86109*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:86112*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86112*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:86115*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86115*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:86118*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86118*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:86121*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86121*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:86124*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86124*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:86127*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86127*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:86130*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86130*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:86133*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86133*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x101cc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x38d833 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f101cc3; op2val:0x8038d833;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:86136*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86136*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x3f800001; valaddr_reg:x3; val_offset:86139*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86139*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x3f800003; valaddr_reg:x3; val_offset:86142*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86142*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x3f800007; valaddr_reg:x3; val_offset:86145*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86145*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x3f999999; valaddr_reg:x3; val_offset:86148*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86148*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:86151*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86151*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:86154*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86154*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:86157*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86157*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:86160*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86160*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:86163*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86163*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:86166*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86166*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:86169*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86169*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:86172*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86172*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:86175*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86175*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:86178*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86178*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:86181*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86181*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:86184*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86184*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e800000; valaddr_reg:x3; val_offset:86187*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86187*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e800001; valaddr_reg:x3; val_offset:86190*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86190*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e800003; valaddr_reg:x3; val_offset:86193*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86193*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e800007; valaddr_reg:x3; val_offset:86196*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86196*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e80000f; valaddr_reg:x3; val_offset:86199*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86199*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e80001f; valaddr_reg:x3; val_offset:86202*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86202*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e80003f; valaddr_reg:x3; val_offset:86205*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86205*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e80007f; valaddr_reg:x3; val_offset:86208*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86208*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e8000ff; valaddr_reg:x3; val_offset:86211*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86211*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e8001ff; valaddr_reg:x3; val_offset:86214*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86214*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e8003ff; valaddr_reg:x3; val_offset:86217*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86217*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e8007ff; valaddr_reg:x3; val_offset:86220*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86220*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e800fff; valaddr_reg:x3; val_offset:86223*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86223*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e801fff; valaddr_reg:x3; val_offset:86226*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86226*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e803fff; valaddr_reg:x3; val_offset:86229*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86229*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e807fff; valaddr_reg:x3; val_offset:86232*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86232*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e80ffff; valaddr_reg:x3; val_offset:86235*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86235*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e81ffff; valaddr_reg:x3; val_offset:86238*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86238*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e83ffff; valaddr_reg:x3; val_offset:86241*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86241*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e87ffff; valaddr_reg:x3; val_offset:86244*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86244*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e8fffff; valaddr_reg:x3; val_offset:86247*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86247*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4e9fffff; valaddr_reg:x3; val_offset:86250*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86250*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4ebfffff; valaddr_reg:x3; val_offset:86253*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86253*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4ec00000; valaddr_reg:x3; val_offset:86256*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86256*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4ee00000; valaddr_reg:x3; val_offset:86259*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86259*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4ef00000; valaddr_reg:x3; val_offset:86262*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86262*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4ef80000; valaddr_reg:x3; val_offset:86265*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86265*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4efc0000; valaddr_reg:x3; val_offset:86268*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86268*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4efe0000; valaddr_reg:x3; val_offset:86271*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86271*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4eff0000; valaddr_reg:x3; val_offset:86274*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86274*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4eff8000; valaddr_reg:x3; val_offset:86277*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86277*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4effc000; valaddr_reg:x3; val_offset:86280*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86280*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4effe000; valaddr_reg:x3; val_offset:86283*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86283*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4efff000; valaddr_reg:x3; val_offset:86286*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86286*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4efff800; valaddr_reg:x3; val_offset:86289*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86289*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4efffc00; valaddr_reg:x3; val_offset:86292*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86292*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4efffe00; valaddr_reg:x3; val_offset:86295*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86295*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4effff00; valaddr_reg:x3; val_offset:86298*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86298*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4effff80; valaddr_reg:x3; val_offset:86301*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86301*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4effffc0; valaddr_reg:x3; val_offset:86304*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86304*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4effffe0; valaddr_reg:x3; val_offset:86307*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86307*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4efffff0; valaddr_reg:x3; val_offset:86310*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86310*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4efffff8; valaddr_reg:x3; val_offset:86313*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86313*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4efffffc; valaddr_reg:x3; val_offset:86316*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86316*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4efffffe; valaddr_reg:x3; val_offset:86319*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86319*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x102150 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x38d668 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f102150; op2val:0x38d668;
op3val:0x4effffff; valaddr_reg:x3; val_offset:86322*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86322*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea000000; valaddr_reg:x3; val_offset:86325*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86325*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea000001; valaddr_reg:x3; val_offset:86328*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86328*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea000003; valaddr_reg:x3; val_offset:86331*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86331*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea000007; valaddr_reg:x3; val_offset:86334*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86334*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea00000f; valaddr_reg:x3; val_offset:86337*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86337*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea00001f; valaddr_reg:x3; val_offset:86340*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86340*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea00003f; valaddr_reg:x3; val_offset:86343*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86343*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea00007f; valaddr_reg:x3; val_offset:86346*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86346*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea0000ff; valaddr_reg:x3; val_offset:86349*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86349*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea0001ff; valaddr_reg:x3; val_offset:86352*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86352*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea0003ff; valaddr_reg:x3; val_offset:86355*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86355*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea0007ff; valaddr_reg:x3; val_offset:86358*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86358*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea000fff; valaddr_reg:x3; val_offset:86361*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86361*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea001fff; valaddr_reg:x3; val_offset:86364*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86364*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea003fff; valaddr_reg:x3; val_offset:86367*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86367*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea007fff; valaddr_reg:x3; val_offset:86370*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86370*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea00ffff; valaddr_reg:x3; val_offset:86373*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86373*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea01ffff; valaddr_reg:x3; val_offset:86376*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86376*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea03ffff; valaddr_reg:x3; val_offset:86379*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86379*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea07ffff; valaddr_reg:x3; val_offset:86382*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86382*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea0fffff; valaddr_reg:x3; val_offset:86385*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86385*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea1fffff; valaddr_reg:x3; val_offset:86388*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86388*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea3fffff; valaddr_reg:x3; val_offset:86391*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86391*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea400000; valaddr_reg:x3; val_offset:86394*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86394*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1056c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x630570 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1056c2; op2val:0xbfe30570;
op3val:0xea600000; valaddr_reg:x3; val_offset:86397*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86397*0 + 3*224*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2686451711,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2688548863,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2688548864,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2690646016,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2691694592,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692218880,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692481024,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692612096,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692677632,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692710400,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692726784,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692734976,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692739072,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692741120,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692742144,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692742656,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692742912,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692743040,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692743104,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692743136,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692743152,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692743160,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692743164,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692743166,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(2692743167,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2131762371,32,FLEN)
NAN_BOXED(2151209011,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317011456,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317011457,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317011459,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317011463,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317011471,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317011487,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317011519,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317011583,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317011711,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317011967,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317012479,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317013503,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317015551,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317019647,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317027839,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317044223,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317076991,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317142527,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317273599,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1317535743,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1318060031,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1319108607,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1321205759,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1321205760,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1323302912,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1324351488,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1324875776,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325137920,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325268992,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325334528,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325367296,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325383680,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325391872,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325395968,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325398016,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325399040,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325399552,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325399808,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325399936,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325400000,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325400032,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325400048,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325400056,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325400060,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325400062,32,FLEN)
NAN_BOXED(2131763536,32,FLEN)
NAN_BOXED(3724904,32,FLEN)
NAN_BOXED(1325400063,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925868544,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925868545,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925868547,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925868551,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925868559,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925868575,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925868607,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925868671,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925868799,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925869055,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925869567,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925870591,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925872639,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925876735,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925884927,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925901311,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925934079,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3925999615,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3926130687,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3926392831,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3926917119,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3927965695,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3930062847,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3930062848,32,FLEN)
NAN_BOXED(2131777218,32,FLEN)
NAN_BOXED(3219326320,32,FLEN)
NAN_BOXED(3932160000,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
