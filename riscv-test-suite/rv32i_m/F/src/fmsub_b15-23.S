
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_2816:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe0003ff; valaddr_reg:x3; val_offset:8448*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8448*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2817:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe0007ff; valaddr_reg:x3; val_offset:8451*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8451*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2818:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe000fff; valaddr_reg:x3; val_offset:8454*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8454*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2819:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe001fff; valaddr_reg:x3; val_offset:8457*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8457*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2820:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe003fff; valaddr_reg:x3; val_offset:8460*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8460*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2821:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe007fff; valaddr_reg:x3; val_offset:8463*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8463*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2822:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe00ffff; valaddr_reg:x3; val_offset:8466*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8466*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2823:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe01ffff; valaddr_reg:x3; val_offset:8469*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8469*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2824:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe03ffff; valaddr_reg:x3; val_offset:8472*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8472*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2825:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe07ffff; valaddr_reg:x3; val_offset:8475*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8475*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2826:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe0fffff; valaddr_reg:x3; val_offset:8478*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8478*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2827:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe1fffff; valaddr_reg:x3; val_offset:8481*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8481*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2828:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe3fffff; valaddr_reg:x3; val_offset:8484*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8484*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2829:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe400000; valaddr_reg:x3; val_offset:8487*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8487*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2830:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe600000; valaddr_reg:x3; val_offset:8490*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8490*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2831:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe700000; valaddr_reg:x3; val_offset:8493*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8493*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2832:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe780000; valaddr_reg:x3; val_offset:8496*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8496*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2833:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7c0000; valaddr_reg:x3; val_offset:8499*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8499*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2834:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7e0000; valaddr_reg:x3; val_offset:8502*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8502*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2835:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7f0000; valaddr_reg:x3; val_offset:8505*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8505*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2836:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7f8000; valaddr_reg:x3; val_offset:8508*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8508*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2837:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7fc000; valaddr_reg:x3; val_offset:8511*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8511*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2838:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7fe000; valaddr_reg:x3; val_offset:8514*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8514*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2839:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7ff000; valaddr_reg:x3; val_offset:8517*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8517*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2840:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7ff800; valaddr_reg:x3; val_offset:8520*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8520*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2841:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7ffc00; valaddr_reg:x3; val_offset:8523*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8523*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2842:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7ffe00; valaddr_reg:x3; val_offset:8526*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8526*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2843:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7fff00; valaddr_reg:x3; val_offset:8529*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8529*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2844:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7fff80; valaddr_reg:x3; val_offset:8532*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8532*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2845:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7fffc0; valaddr_reg:x3; val_offset:8535*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8535*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2846:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7fffe0; valaddr_reg:x3; val_offset:8538*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8538*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2847:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7ffff0; valaddr_reg:x3; val_offset:8541*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8541*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2848:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7ffff8; valaddr_reg:x3; val_offset:8544*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8544*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2849:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7ffffc; valaddr_reg:x3; val_offset:8547*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8547*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2850:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7ffffe; valaddr_reg:x3; val_offset:8550*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8550*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2851:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5f3d4a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5f3d4a; op2val:0x0;
op3val:0xe7fffff; valaddr_reg:x3; val_offset:8553*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8553*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2852:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x3f800001; valaddr_reg:x3; val_offset:8556*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8556*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2853:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x3f800003; valaddr_reg:x3; val_offset:8559*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8559*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2854:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x3f800007; valaddr_reg:x3; val_offset:8562*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8562*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2855:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x3f999999; valaddr_reg:x3; val_offset:8565*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8565*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2856:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:8568*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8568*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2857:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:8571*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8571*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2858:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:8574*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8574*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2859:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:8577*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8577*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2860:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:8580*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8580*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2861:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:8583*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8583*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2862:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:8586*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8586*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2863:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:8589*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8589*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2864:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:8592*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8592*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2865:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:8595*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8595*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2866:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:8598*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8598*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2867:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:8601*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8601*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2868:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a800000; valaddr_reg:x3; val_offset:8604*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8604*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2869:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a800001; valaddr_reg:x3; val_offset:8607*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8607*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2870:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a800003; valaddr_reg:x3; val_offset:8610*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8610*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2871:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a800007; valaddr_reg:x3; val_offset:8613*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8613*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2872:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a80000f; valaddr_reg:x3; val_offset:8616*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8616*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2873:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a80001f; valaddr_reg:x3; val_offset:8619*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8619*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2874:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a80003f; valaddr_reg:x3; val_offset:8622*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8622*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2875:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a80007f; valaddr_reg:x3; val_offset:8625*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8625*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2876:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a8000ff; valaddr_reg:x3; val_offset:8628*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8628*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2877:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a8001ff; valaddr_reg:x3; val_offset:8631*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8631*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2878:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a8003ff; valaddr_reg:x3; val_offset:8634*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8634*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2879:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a8007ff; valaddr_reg:x3; val_offset:8637*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8637*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2880:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a800fff; valaddr_reg:x3; val_offset:8640*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8640*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2881:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a801fff; valaddr_reg:x3; val_offset:8643*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8643*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2882:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a803fff; valaddr_reg:x3; val_offset:8646*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8646*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2883:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a807fff; valaddr_reg:x3; val_offset:8649*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8649*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2884:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a80ffff; valaddr_reg:x3; val_offset:8652*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8652*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2885:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a81ffff; valaddr_reg:x3; val_offset:8655*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8655*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2886:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a83ffff; valaddr_reg:x3; val_offset:8658*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8658*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2887:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a87ffff; valaddr_reg:x3; val_offset:8661*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8661*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2888:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a8fffff; valaddr_reg:x3; val_offset:8664*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8664*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2889:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4a9fffff; valaddr_reg:x3; val_offset:8667*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8667*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2890:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4abfffff; valaddr_reg:x3; val_offset:8670*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8670*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2891:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4ac00000; valaddr_reg:x3; val_offset:8673*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8673*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2892:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4ae00000; valaddr_reg:x3; val_offset:8676*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8676*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2893:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4af00000; valaddr_reg:x3; val_offset:8679*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8679*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2894:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4af80000; valaddr_reg:x3; val_offset:8682*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8682*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2895:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4afc0000; valaddr_reg:x3; val_offset:8685*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8685*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2896:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4afe0000; valaddr_reg:x3; val_offset:8688*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8688*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2897:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4aff0000; valaddr_reg:x3; val_offset:8691*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8691*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2898:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4aff8000; valaddr_reg:x3; val_offset:8694*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8694*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2899:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4affc000; valaddr_reg:x3; val_offset:8697*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8697*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2900:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4affe000; valaddr_reg:x3; val_offset:8700*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8700*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2901:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4afff000; valaddr_reg:x3; val_offset:8703*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8703*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2902:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4afff800; valaddr_reg:x3; val_offset:8706*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8706*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2903:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4afffc00; valaddr_reg:x3; val_offset:8709*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8709*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2904:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4afffe00; valaddr_reg:x3; val_offset:8712*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8712*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2905:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4affff00; valaddr_reg:x3; val_offset:8715*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8715*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2906:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4affff80; valaddr_reg:x3; val_offset:8718*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8718*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2907:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4affffc0; valaddr_reg:x3; val_offset:8721*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8721*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2908:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4affffe0; valaddr_reg:x3; val_offset:8724*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8724*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2909:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4afffff0; valaddr_reg:x3; val_offset:8727*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8727*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2910:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4afffff8; valaddr_reg:x3; val_offset:8730*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8730*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2911:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4afffffc; valaddr_reg:x3; val_offset:8733*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8733*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2912:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4afffffe; valaddr_reg:x3; val_offset:8736*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8736*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2913:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x61f03b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1107da and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d61f03b; op2val:0x19107da;
op3val:0x4affffff; valaddr_reg:x3; val_offset:8739*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8739*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2914:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x80000000; valaddr_reg:x3; val_offset:8742*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8742*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2915:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:8745*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8745*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2916:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:8748*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8748*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2917:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:8751*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8751*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2918:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x8000000f; valaddr_reg:x3; val_offset:8754*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8754*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2919:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x8000001f; valaddr_reg:x3; val_offset:8757*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8757*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2920:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x8000003f; valaddr_reg:x3; val_offset:8760*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8760*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2921:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x8000007f; valaddr_reg:x3; val_offset:8763*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8763*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2922:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x800000ff; valaddr_reg:x3; val_offset:8766*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8766*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2923:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x800001ff; valaddr_reg:x3; val_offset:8769*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8769*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2924:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x800003ff; valaddr_reg:x3; val_offset:8772*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8772*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2925:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x800007ff; valaddr_reg:x3; val_offset:8775*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8775*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2926:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x80000fff; valaddr_reg:x3; val_offset:8778*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8778*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2927:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x80001fff; valaddr_reg:x3; val_offset:8781*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8781*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2928:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x80003fff; valaddr_reg:x3; val_offset:8784*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8784*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2929:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x80007fff; valaddr_reg:x3; val_offset:8787*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8787*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2930:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x8000ffff; valaddr_reg:x3; val_offset:8790*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8790*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2931:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x8001ffff; valaddr_reg:x3; val_offset:8793*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8793*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2932:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x8003ffff; valaddr_reg:x3; val_offset:8796*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8796*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2933:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x8007ffff; valaddr_reg:x3; val_offset:8799*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8799*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2934:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x800fffff; valaddr_reg:x3; val_offset:8802*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8802*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2935:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:8805*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8805*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2936:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x801fffff; valaddr_reg:x3; val_offset:8808*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8808*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2937:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:8811*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8811*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2938:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:8814*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8814*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2939:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:8817*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8817*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2940:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:8820*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8820*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2941:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x803fffff; valaddr_reg:x3; val_offset:8823*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8823*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2942:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x80400000; valaddr_reg:x3; val_offset:8826*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8826*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2943:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6baa59 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6baa59; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:8829*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8829*0 + 3*22*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234882047,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234883071,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234885119,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234889215,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234897407,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234913791,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234946559,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235012095,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235143167,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235405311,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235929599,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(236978175,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(239075327,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(239075328,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(241172480,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(242221056,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(242745344,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243007488,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243138560,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243204096,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243236864,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243253248,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243261440,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243265536,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243267584,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243268608,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269120,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269376,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269504,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269568,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269600,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269616,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269624,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269628,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269630,32,FLEN)
NAN_BOXED(2103393610,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269631,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1249902592,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1249902593,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1249902595,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1249902599,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1249902607,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1249902623,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1249902655,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1249902719,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1249902847,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1249903103,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1249903615,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1249904639,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1249906687,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1249910783,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1249918975,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1249935359,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1249968127,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1250033663,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1250164735,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1250426879,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1250951167,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1251999743,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1254096895,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1254096896,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1256194048,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1257242624,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1257766912,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258029056,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258160128,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258225664,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258258432,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258274816,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258283008,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258287104,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258289152,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258290176,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258290688,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258290944,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258291072,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258291136,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258291168,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258291184,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258291192,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258291196,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258291198,32,FLEN)
NAN_BOXED(2103570491,32,FLEN)
NAN_BOXED(26281946,32,FLEN)
NAN_BOXED(1258291199,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483663,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483679,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483711,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483775,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483903,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484159,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484671,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147485695,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147487743,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147491839,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147500031,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147516415,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147549183,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147614719,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147745791,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148007935,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148532223,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149580799,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677951,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677952,32,FLEN)
NAN_BOXED(2104207961,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
