
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_29440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e2ba8 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f137d83; op2val:0x3fde2ba8;
op3val:0x607fffff; valaddr_reg:x3; val_offset:88320*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88320*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e2ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f137d83; op2val:0x3fde2ba8;
op3val:0x7f000001; valaddr_reg:x3; val_offset:88323*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88323*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e2ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f137d83; op2val:0x3fde2ba8;
op3val:0x7f000003; valaddr_reg:x3; val_offset:88326*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88326*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e2ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f137d83; op2val:0x3fde2ba8;
op3val:0x7f000007; valaddr_reg:x3; val_offset:88329*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88329*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e2ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f137d83; op2val:0x3fde2ba8;
op3val:0x7f199999; valaddr_reg:x3; val_offset:88332*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88332*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e2ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f137d83; op2val:0x3fde2ba8;
op3val:0x7f249249; valaddr_reg:x3; val_offset:88335*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88335*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e2ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f137d83; op2val:0x3fde2ba8;
op3val:0x7f333333; valaddr_reg:x3; val_offset:88338*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88338*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e2ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f137d83; op2val:0x3fde2ba8;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:88341*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88341*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e2ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f137d83; op2val:0x3fde2ba8;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:88344*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88344*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e2ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f137d83; op2val:0x3fde2ba8;
op3val:0x7f444444; valaddr_reg:x3; val_offset:88347*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88347*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e2ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f137d83; op2val:0x3fde2ba8;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:88350*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88350*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e2ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f137d83; op2val:0x3fde2ba8;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:88353*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88353*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e2ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f137d83; op2val:0x3fde2ba8;
op3val:0x7f666666; valaddr_reg:x3; val_offset:88356*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88356*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e2ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f137d83; op2val:0x3fde2ba8;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:88359*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88359*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e2ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f137d83; op2val:0x3fde2ba8;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:88362*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88362*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e2ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f137d83; op2val:0x3fde2ba8;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:88365*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88365*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e2ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f137d83; op2val:0x3fde2ba8;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:88368*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88368*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:88371*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88371*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:88374*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88374*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:88377*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88377*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:88380*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88380*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:88383*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88383*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:88386*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88386*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:88389*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88389*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:88392*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88392*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:88395*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88395*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:88398*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88398*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:88401*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88401*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:88404*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88404*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:88407*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88407*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:88410*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88410*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:88413*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88413*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:88416*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88416*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e800000; valaddr_reg:x3; val_offset:88419*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88419*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e800001; valaddr_reg:x3; val_offset:88422*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88422*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e800003; valaddr_reg:x3; val_offset:88425*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88425*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e800007; valaddr_reg:x3; val_offset:88428*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88428*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e80000f; valaddr_reg:x3; val_offset:88431*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88431*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e80001f; valaddr_reg:x3; val_offset:88434*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88434*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e80003f; valaddr_reg:x3; val_offset:88437*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88437*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e80007f; valaddr_reg:x3; val_offset:88440*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88440*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e8000ff; valaddr_reg:x3; val_offset:88443*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88443*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e8001ff; valaddr_reg:x3; val_offset:88446*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88446*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e8003ff; valaddr_reg:x3; val_offset:88449*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88449*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e8007ff; valaddr_reg:x3; val_offset:88452*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88452*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e800fff; valaddr_reg:x3; val_offset:88455*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88455*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e801fff; valaddr_reg:x3; val_offset:88458*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88458*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e803fff; valaddr_reg:x3; val_offset:88461*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88461*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e807fff; valaddr_reg:x3; val_offset:88464*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88464*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e80ffff; valaddr_reg:x3; val_offset:88467*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88467*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e81ffff; valaddr_reg:x3; val_offset:88470*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88470*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e83ffff; valaddr_reg:x3; val_offset:88473*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88473*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e87ffff; valaddr_reg:x3; val_offset:88476*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88476*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e8fffff; valaddr_reg:x3; val_offset:88479*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88479*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8e9fffff; valaddr_reg:x3; val_offset:88482*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88482*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8ebfffff; valaddr_reg:x3; val_offset:88485*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88485*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8ec00000; valaddr_reg:x3; val_offset:88488*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88488*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8ee00000; valaddr_reg:x3; val_offset:88491*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88491*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8ef00000; valaddr_reg:x3; val_offset:88494*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88494*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8ef80000; valaddr_reg:x3; val_offset:88497*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88497*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8efc0000; valaddr_reg:x3; val_offset:88500*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88500*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8efe0000; valaddr_reg:x3; val_offset:88503*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88503*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8eff0000; valaddr_reg:x3; val_offset:88506*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88506*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8eff8000; valaddr_reg:x3; val_offset:88509*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88509*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8effc000; valaddr_reg:x3; val_offset:88512*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88512*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8effe000; valaddr_reg:x3; val_offset:88515*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88515*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8efff000; valaddr_reg:x3; val_offset:88518*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88518*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8efff800; valaddr_reg:x3; val_offset:88521*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88521*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8efffc00; valaddr_reg:x3; val_offset:88524*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88524*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8efffe00; valaddr_reg:x3; val_offset:88527*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88527*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8effff00; valaddr_reg:x3; val_offset:88530*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88530*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8effff80; valaddr_reg:x3; val_offset:88533*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88533*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8effffc0; valaddr_reg:x3; val_offset:88536*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88536*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8effffe0; valaddr_reg:x3; val_offset:88539*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88539*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8efffff0; valaddr_reg:x3; val_offset:88542*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88542*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8efffff8; valaddr_reg:x3; val_offset:88545*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88545*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8efffffc; valaddr_reg:x3; val_offset:88548*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88548*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8efffffe; valaddr_reg:x3; val_offset:88551*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88551*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1469b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1469b5; op2val:0x80000000;
op3val:0x8effffff; valaddr_reg:x3; val_offset:88554*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88554*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf800000; valaddr_reg:x3; val_offset:88557*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88557*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf800001; valaddr_reg:x3; val_offset:88560*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88560*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf800003; valaddr_reg:x3; val_offset:88563*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88563*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf800007; valaddr_reg:x3; val_offset:88566*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88566*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf80000f; valaddr_reg:x3; val_offset:88569*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88569*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf80001f; valaddr_reg:x3; val_offset:88572*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88572*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf80003f; valaddr_reg:x3; val_offset:88575*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88575*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf80007f; valaddr_reg:x3; val_offset:88578*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88578*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf8000ff; valaddr_reg:x3; val_offset:88581*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88581*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf8001ff; valaddr_reg:x3; val_offset:88584*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88584*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf8003ff; valaddr_reg:x3; val_offset:88587*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88587*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf8007ff; valaddr_reg:x3; val_offset:88590*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88590*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf800fff; valaddr_reg:x3; val_offset:88593*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88593*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf801fff; valaddr_reg:x3; val_offset:88596*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88596*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf803fff; valaddr_reg:x3; val_offset:88599*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88599*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf807fff; valaddr_reg:x3; val_offset:88602*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88602*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf80ffff; valaddr_reg:x3; val_offset:88605*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88605*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf81ffff; valaddr_reg:x3; val_offset:88608*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88608*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf83ffff; valaddr_reg:x3; val_offset:88611*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88611*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf87ffff; valaddr_reg:x3; val_offset:88614*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88614*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf8fffff; valaddr_reg:x3; val_offset:88617*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88617*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaf9fffff; valaddr_reg:x3; val_offset:88620*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88620*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xafbfffff; valaddr_reg:x3; val_offset:88623*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88623*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xafc00000; valaddr_reg:x3; val_offset:88626*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88626*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xafe00000; valaddr_reg:x3; val_offset:88629*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88629*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaff00000; valaddr_reg:x3; val_offset:88632*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88632*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaff80000; valaddr_reg:x3; val_offset:88635*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88635*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaffc0000; valaddr_reg:x3; val_offset:88638*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88638*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaffe0000; valaddr_reg:x3; val_offset:88641*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88641*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xafff0000; valaddr_reg:x3; val_offset:88644*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88644*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xafff8000; valaddr_reg:x3; val_offset:88647*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88647*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xafffc000; valaddr_reg:x3; val_offset:88650*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88650*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xafffe000; valaddr_reg:x3; val_offset:88653*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88653*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaffff000; valaddr_reg:x3; val_offset:88656*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88656*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaffff800; valaddr_reg:x3; val_offset:88659*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88659*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaffffc00; valaddr_reg:x3; val_offset:88662*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88662*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaffffe00; valaddr_reg:x3; val_offset:88665*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88665*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xafffff00; valaddr_reg:x3; val_offset:88668*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88668*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xafffff80; valaddr_reg:x3; val_offset:88671*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88671*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xafffffc0; valaddr_reg:x3; val_offset:88674*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88674*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xafffffe0; valaddr_reg:x3; val_offset:88677*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88677*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaffffff0; valaddr_reg:x3; val_offset:88680*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88680*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaffffff8; valaddr_reg:x3; val_offset:88683*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88683*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaffffffc; valaddr_reg:x3; val_offset:88686*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88686*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xaffffffe; valaddr_reg:x3; val_offset:88689*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88689*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xafffffff; valaddr_reg:x3; val_offset:88692*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88692*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xbf800001; valaddr_reg:x3; val_offset:88695*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88695*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xbf800003; valaddr_reg:x3; val_offset:88698*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88698*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xbf800007; valaddr_reg:x3; val_offset:88701*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88701*0 + 3*230*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131983747,32,FLEN)
NAN_BOXED(1071524776,32,FLEN)
NAN_BOXED(1619001343,32,FLEN)
NAN_BOXED(2131983747,32,FLEN)
NAN_BOXED(1071524776,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2131983747,32,FLEN)
NAN_BOXED(1071524776,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2131983747,32,FLEN)
NAN_BOXED(1071524776,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2131983747,32,FLEN)
NAN_BOXED(1071524776,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2131983747,32,FLEN)
NAN_BOXED(1071524776,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2131983747,32,FLEN)
NAN_BOXED(1071524776,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2131983747,32,FLEN)
NAN_BOXED(1071524776,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2131983747,32,FLEN)
NAN_BOXED(1071524776,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2131983747,32,FLEN)
NAN_BOXED(1071524776,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2131983747,32,FLEN)
NAN_BOXED(1071524776,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2131983747,32,FLEN)
NAN_BOXED(1071524776,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2131983747,32,FLEN)
NAN_BOXED(1071524776,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2131983747,32,FLEN)
NAN_BOXED(1071524776,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2131983747,32,FLEN)
NAN_BOXED(1071524776,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2131983747,32,FLEN)
NAN_BOXED(1071524776,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2131983747,32,FLEN)
NAN_BOXED(1071524776,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753280,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753281,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753283,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753287,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753295,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753311,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753343,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753407,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753535,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753791,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390754303,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390755327,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390757375,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390761471,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390769663,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390786047,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390818815,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390884351,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2391015423,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2391277567,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2391801855,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2392850431,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2394947583,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2394947584,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2397044736,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2398093312,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2398617600,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2398879744,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399010816,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399076352,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399109120,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399125504,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399133696,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399137792,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399139840,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399140864,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141376,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141632,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141760,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141824,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141856,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141872,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141880,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141884,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141886,32,FLEN)
NAN_BOXED(2132044213,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141887,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944401408,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944401409,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944401411,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944401415,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944401423,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944401439,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944401471,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944401535,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944401663,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944401919,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944402431,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944403455,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944405503,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944409599,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944417791,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944434175,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944466943,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944532479,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944663551,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2944925695,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2945449983,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2946498559,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2948595711,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2948595712,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2950692864,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2951741440,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952265728,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952527872,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952658944,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952724480,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952757248,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952773632,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952781824,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952785920,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952787968,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952788992,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952789504,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952789760,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952789888,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952789952,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952789984,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952790000,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952790008,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952790012,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952790014,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(2952790015,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
