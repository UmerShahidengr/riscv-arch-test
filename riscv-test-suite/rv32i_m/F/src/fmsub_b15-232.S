
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_29568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xbf999999; valaddr_reg:x3; val_offset:88704*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88704*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:88707*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88707*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:88710*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88710*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:88713*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88713*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:88716*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88716*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:88719*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88719*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:88722*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88722*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:88725*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88725*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:88728*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88728*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:88731*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88731*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:88734*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88734*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:88737*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88737*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14dd65 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3707a0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14dd65; op2val:0x803707a0;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:88740*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88740*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38800000; valaddr_reg:x3; val_offset:88743*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88743*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38800001; valaddr_reg:x3; val_offset:88746*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88746*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38800003; valaddr_reg:x3; val_offset:88749*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88749*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38800007; valaddr_reg:x3; val_offset:88752*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88752*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x3880000f; valaddr_reg:x3; val_offset:88755*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88755*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x3880001f; valaddr_reg:x3; val_offset:88758*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88758*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x3880003f; valaddr_reg:x3; val_offset:88761*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88761*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x3880007f; valaddr_reg:x3; val_offset:88764*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88764*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x388000ff; valaddr_reg:x3; val_offset:88767*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88767*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x388001ff; valaddr_reg:x3; val_offset:88770*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88770*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x388003ff; valaddr_reg:x3; val_offset:88773*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88773*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x388007ff; valaddr_reg:x3; val_offset:88776*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88776*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38800fff; valaddr_reg:x3; val_offset:88779*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88779*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38801fff; valaddr_reg:x3; val_offset:88782*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88782*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38803fff; valaddr_reg:x3; val_offset:88785*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88785*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38807fff; valaddr_reg:x3; val_offset:88788*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88788*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x3880ffff; valaddr_reg:x3; val_offset:88791*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88791*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x3881ffff; valaddr_reg:x3; val_offset:88794*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88794*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x3883ffff; valaddr_reg:x3; val_offset:88797*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88797*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x3887ffff; valaddr_reg:x3; val_offset:88800*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88800*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x388fffff; valaddr_reg:x3; val_offset:88803*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88803*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x389fffff; valaddr_reg:x3; val_offset:88806*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88806*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38bfffff; valaddr_reg:x3; val_offset:88809*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88809*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38c00000; valaddr_reg:x3; val_offset:88812*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88812*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38e00000; valaddr_reg:x3; val_offset:88815*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88815*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38f00000; valaddr_reg:x3; val_offset:88818*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88818*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38f80000; valaddr_reg:x3; val_offset:88821*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88821*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38fc0000; valaddr_reg:x3; val_offset:88824*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88824*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38fe0000; valaddr_reg:x3; val_offset:88827*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88827*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38ff0000; valaddr_reg:x3; val_offset:88830*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88830*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38ff8000; valaddr_reg:x3; val_offset:88833*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88833*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38ffc000; valaddr_reg:x3; val_offset:88836*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88836*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38ffe000; valaddr_reg:x3; val_offset:88839*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88839*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38fff000; valaddr_reg:x3; val_offset:88842*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88842*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38fff800; valaddr_reg:x3; val_offset:88845*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88845*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38fffc00; valaddr_reg:x3; val_offset:88848*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88848*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38fffe00; valaddr_reg:x3; val_offset:88851*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88851*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38ffff00; valaddr_reg:x3; val_offset:88854*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88854*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38ffff80; valaddr_reg:x3; val_offset:88857*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88857*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38ffffc0; valaddr_reg:x3; val_offset:88860*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88860*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38ffffe0; valaddr_reg:x3; val_offset:88863*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88863*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38fffff0; valaddr_reg:x3; val_offset:88866*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88866*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38fffff8; valaddr_reg:x3; val_offset:88869*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88869*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38fffffc; valaddr_reg:x3; val_offset:88872*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88872*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38fffffe; valaddr_reg:x3; val_offset:88875*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88875*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x38ffffff; valaddr_reg:x3; val_offset:88878*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88878*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x7f000001; valaddr_reg:x3; val_offset:88881*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88881*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x7f000003; valaddr_reg:x3; val_offset:88884*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88884*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x7f000007; valaddr_reg:x3; val_offset:88887*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88887*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x7f199999; valaddr_reg:x3; val_offset:88890*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88890*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x7f249249; valaddr_reg:x3; val_offset:88893*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88893*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x7f333333; valaddr_reg:x3; val_offset:88896*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88896*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:88899*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88899*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:88902*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88902*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x7f444444; valaddr_reg:x3; val_offset:88905*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88905*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:88908*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88908*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:88911*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88911*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x7f666666; valaddr_reg:x3; val_offset:88914*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88914*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:88917*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88917*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:88920*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88920*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:88923*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88923*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1587bf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b23ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1587bf; op2val:0x3fdb23ba;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:88926*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88926*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f124 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5a89b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f124; op2val:0xbfda89b2;
op3val:0xff000001; valaddr_reg:x3; val_offset:88929*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88929*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f124 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5a89b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f124; op2val:0xbfda89b2;
op3val:0xff000003; valaddr_reg:x3; val_offset:88932*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88932*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f124 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5a89b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f124; op2val:0xbfda89b2;
op3val:0xff000007; valaddr_reg:x3; val_offset:88935*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88935*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f124 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5a89b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f124; op2val:0xbfda89b2;
op3val:0xff199999; valaddr_reg:x3; val_offset:88938*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88938*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f124 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5a89b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f124; op2val:0xbfda89b2;
op3val:0xff249249; valaddr_reg:x3; val_offset:88941*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88941*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f124 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5a89b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f124; op2val:0xbfda89b2;
op3val:0xff333333; valaddr_reg:x3; val_offset:88944*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88944*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f124 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5a89b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f124; op2val:0xbfda89b2;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:88947*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88947*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f124 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5a89b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f124; op2val:0xbfda89b2;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:88950*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88950*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f124 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5a89b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f124; op2val:0xbfda89b2;
op3val:0xff444444; valaddr_reg:x3; val_offset:88953*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88953*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f124 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5a89b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f124; op2val:0xbfda89b2;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:88956*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88956*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f124 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5a89b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f124; op2val:0xbfda89b2;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:88959*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88959*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f124 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5a89b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f124; op2val:0xbfda89b2;
op3val:0xff666666; valaddr_reg:x3; val_offset:88962*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88962*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f124 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5a89b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f124; op2val:0xbfda89b2;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:88965*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88965*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f124 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5a89b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f124; op2val:0xbfda89b2;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:88968*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88968*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f124 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5a89b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f124; op2val:0xbfda89b2;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:88971*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88971*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f124 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5a89b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f124; op2val:0xbfda89b2;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:88974*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88974*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f124 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5a89b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f124; op2val:0xbfda89b2;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:88977*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88977*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x3f800001; valaddr_reg:x3; val_offset:88980*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88980*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x3f800003; valaddr_reg:x3; val_offset:88983*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88983*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x3f800007; valaddr_reg:x3; val_offset:88986*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88986*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x3f999999; valaddr_reg:x3; val_offset:88989*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88989*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:88992*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88992*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:88995*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88995*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:88998*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88998*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:89001*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89001*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:89004*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89004*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:89007*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89007*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:89010*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89010*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:89013*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89013*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:89016*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89016*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:89019*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89019*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:89022*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89022*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:89025*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89025*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x40000000; valaddr_reg:x3; val_offset:89028*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89028*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x40000001; valaddr_reg:x3; val_offset:89031*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89031*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x40000003; valaddr_reg:x3; val_offset:89034*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89034*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x40000007; valaddr_reg:x3; val_offset:89037*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89037*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x4000000f; valaddr_reg:x3; val_offset:89040*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89040*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x4000001f; valaddr_reg:x3; val_offset:89043*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89043*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x4000003f; valaddr_reg:x3; val_offset:89046*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89046*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x4000007f; valaddr_reg:x3; val_offset:89049*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89049*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x400000ff; valaddr_reg:x3; val_offset:89052*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89052*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x400001ff; valaddr_reg:x3; val_offset:89055*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89055*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x400003ff; valaddr_reg:x3; val_offset:89058*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89058*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x400007ff; valaddr_reg:x3; val_offset:89061*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89061*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x40000fff; valaddr_reg:x3; val_offset:89064*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89064*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x40001fff; valaddr_reg:x3; val_offset:89067*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89067*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x40003fff; valaddr_reg:x3; val_offset:89070*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89070*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x40007fff; valaddr_reg:x3; val_offset:89073*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89073*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x4000ffff; valaddr_reg:x3; val_offset:89076*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89076*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x4001ffff; valaddr_reg:x3; val_offset:89079*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89079*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x4003ffff; valaddr_reg:x3; val_offset:89082*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89082*0 + 3*231*FLEN/8, x4, x1, x2)

inst_29695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15f6a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36a06b and fs3 == 0 and fe3 == 0x80 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15f6a4; op2val:0x36a06b;
op3val:0x4007ffff; valaddr_reg:x3; val_offset:89085*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89085*0 + 3*231*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2132073829,32,FLEN)
NAN_BOXED(2151090080,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(947912704,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(947912705,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(947912707,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(947912711,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(947912719,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(947912735,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(947912767,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(947912831,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(947912959,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(947913215,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(947913727,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(947914751,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(947916799,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(947920895,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(947929087,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(947945471,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(947978239,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(948043775,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(948174847,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(948436991,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(948961279,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(950009855,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(952107007,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(952107008,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(954204160,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(955252736,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(955777024,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956039168,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956170240,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956235776,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956268544,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956284928,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956293120,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956297216,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956299264,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956300288,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956300800,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956301056,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956301184,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956301248,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956301280,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956301296,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956301304,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956301308,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956301310,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(956301311,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2132117439,32,FLEN)
NAN_BOXED(1071326138,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132144420,32,FLEN)
NAN_BOXED(3218770354,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2132144420,32,FLEN)
NAN_BOXED(3218770354,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2132144420,32,FLEN)
NAN_BOXED(3218770354,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2132144420,32,FLEN)
NAN_BOXED(3218770354,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2132144420,32,FLEN)
NAN_BOXED(3218770354,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2132144420,32,FLEN)
NAN_BOXED(3218770354,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2132144420,32,FLEN)
NAN_BOXED(3218770354,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2132144420,32,FLEN)
NAN_BOXED(3218770354,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2132144420,32,FLEN)
NAN_BOXED(3218770354,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2132144420,32,FLEN)
NAN_BOXED(3218770354,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2132144420,32,FLEN)
NAN_BOXED(3218770354,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2132144420,32,FLEN)
NAN_BOXED(3218770354,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2132144420,32,FLEN)
NAN_BOXED(3218770354,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2132144420,32,FLEN)
NAN_BOXED(3218770354,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2132144420,32,FLEN)
NAN_BOXED(3218770354,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2132144420,32,FLEN)
NAN_BOXED(3218770354,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2132144420,32,FLEN)
NAN_BOXED(3218770354,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073741824,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073741825,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073741827,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073741831,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073741839,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073741855,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073741887,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073741951,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073742079,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073742335,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073742847,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073743871,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073745919,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073750015,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073758207,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073774591,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073807359,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1073872895,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1074003967,32,FLEN)
NAN_BOXED(2132145828,32,FLEN)
NAN_BOXED(3580011,32,FLEN)
NAN_BOXED(1074266111,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
