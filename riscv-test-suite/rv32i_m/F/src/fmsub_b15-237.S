
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_30208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18df9e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18df9e; op2val:0x80000000;
op3val:0x87fffe00; valaddr_reg:x3; val_offset:90624*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90624*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18df9e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18df9e; op2val:0x80000000;
op3val:0x87ffff00; valaddr_reg:x3; val_offset:90627*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90627*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18df9e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18df9e; op2val:0x80000000;
op3val:0x87ffff80; valaddr_reg:x3; val_offset:90630*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90630*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18df9e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18df9e; op2val:0x80000000;
op3val:0x87ffffc0; valaddr_reg:x3; val_offset:90633*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90633*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18df9e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18df9e; op2val:0x80000000;
op3val:0x87ffffe0; valaddr_reg:x3; val_offset:90636*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90636*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18df9e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18df9e; op2val:0x80000000;
op3val:0x87fffff0; valaddr_reg:x3; val_offset:90639*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90639*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18df9e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18df9e; op2val:0x80000000;
op3val:0x87fffff8; valaddr_reg:x3; val_offset:90642*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90642*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18df9e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18df9e; op2val:0x80000000;
op3val:0x87fffffc; valaddr_reg:x3; val_offset:90645*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90645*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18df9e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18df9e; op2val:0x80000000;
op3val:0x87fffffe; valaddr_reg:x3; val_offset:90648*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90648*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18df9e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18df9e; op2val:0x80000000;
op3val:0x87ffffff; valaddr_reg:x3; val_offset:90651*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90651*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:90654*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90654*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:90657*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90657*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:90660*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90660*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:90663*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90663*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:90666*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90666*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:90669*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90669*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:90672*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90672*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:90675*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90675*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:90678*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90678*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:90681*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90681*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:90684*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90684*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:90687*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90687*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:90690*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90690*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:90693*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90693*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:90696*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90696*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:90699*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90699*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86800000; valaddr_reg:x3; val_offset:90702*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90702*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86800001; valaddr_reg:x3; val_offset:90705*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90705*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86800003; valaddr_reg:x3; val_offset:90708*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90708*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86800007; valaddr_reg:x3; val_offset:90711*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90711*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x8680000f; valaddr_reg:x3; val_offset:90714*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90714*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x8680001f; valaddr_reg:x3; val_offset:90717*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90717*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x8680003f; valaddr_reg:x3; val_offset:90720*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90720*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x8680007f; valaddr_reg:x3; val_offset:90723*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90723*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x868000ff; valaddr_reg:x3; val_offset:90726*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90726*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x868001ff; valaddr_reg:x3; val_offset:90729*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90729*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x868003ff; valaddr_reg:x3; val_offset:90732*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90732*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x868007ff; valaddr_reg:x3; val_offset:90735*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90735*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86800fff; valaddr_reg:x3; val_offset:90738*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90738*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86801fff; valaddr_reg:x3; val_offset:90741*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90741*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86803fff; valaddr_reg:x3; val_offset:90744*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90744*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86807fff; valaddr_reg:x3; val_offset:90747*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90747*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x8680ffff; valaddr_reg:x3; val_offset:90750*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90750*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x8681ffff; valaddr_reg:x3; val_offset:90753*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90753*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x8683ffff; valaddr_reg:x3; val_offset:90756*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90756*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x8687ffff; valaddr_reg:x3; val_offset:90759*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90759*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x868fffff; valaddr_reg:x3; val_offset:90762*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90762*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x869fffff; valaddr_reg:x3; val_offset:90765*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90765*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86bfffff; valaddr_reg:x3; val_offset:90768*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90768*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86c00000; valaddr_reg:x3; val_offset:90771*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90771*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86e00000; valaddr_reg:x3; val_offset:90774*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90774*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86f00000; valaddr_reg:x3; val_offset:90777*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90777*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86f80000; valaddr_reg:x3; val_offset:90780*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90780*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86fc0000; valaddr_reg:x3; val_offset:90783*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90783*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86fe0000; valaddr_reg:x3; val_offset:90786*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90786*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86ff0000; valaddr_reg:x3; val_offset:90789*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90789*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86ff8000; valaddr_reg:x3; val_offset:90792*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90792*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86ffc000; valaddr_reg:x3; val_offset:90795*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90795*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86ffe000; valaddr_reg:x3; val_offset:90798*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90798*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86fff000; valaddr_reg:x3; val_offset:90801*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90801*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86fff800; valaddr_reg:x3; val_offset:90804*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90804*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86fffc00; valaddr_reg:x3; val_offset:90807*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90807*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86fffe00; valaddr_reg:x3; val_offset:90810*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90810*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86ffff00; valaddr_reg:x3; val_offset:90813*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90813*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86ffff80; valaddr_reg:x3; val_offset:90816*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90816*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86ffffc0; valaddr_reg:x3; val_offset:90819*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90819*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86ffffe0; valaddr_reg:x3; val_offset:90822*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90822*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86fffff0; valaddr_reg:x3; val_offset:90825*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90825*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86fffff8; valaddr_reg:x3; val_offset:90828*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90828*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86fffffc; valaddr_reg:x3; val_offset:90831*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90831*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86fffffe; valaddr_reg:x3; val_offset:90834*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90834*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1930a7; op2val:0x80000000;
op3val:0x86ffffff; valaddr_reg:x3; val_offset:90837*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90837*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d800000; valaddr_reg:x3; val_offset:90840*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90840*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d800001; valaddr_reg:x3; val_offset:90843*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90843*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d800003; valaddr_reg:x3; val_offset:90846*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90846*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d800007; valaddr_reg:x3; val_offset:90849*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90849*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d80000f; valaddr_reg:x3; val_offset:90852*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90852*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d80001f; valaddr_reg:x3; val_offset:90855*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90855*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d80003f; valaddr_reg:x3; val_offset:90858*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90858*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d80007f; valaddr_reg:x3; val_offset:90861*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90861*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d8000ff; valaddr_reg:x3; val_offset:90864*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90864*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d8001ff; valaddr_reg:x3; val_offset:90867*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90867*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d8003ff; valaddr_reg:x3; val_offset:90870*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90870*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d8007ff; valaddr_reg:x3; val_offset:90873*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90873*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d800fff; valaddr_reg:x3; val_offset:90876*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90876*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d801fff; valaddr_reg:x3; val_offset:90879*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90879*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d803fff; valaddr_reg:x3; val_offset:90882*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90882*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d807fff; valaddr_reg:x3; val_offset:90885*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90885*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d80ffff; valaddr_reg:x3; val_offset:90888*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90888*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d81ffff; valaddr_reg:x3; val_offset:90891*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90891*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d83ffff; valaddr_reg:x3; val_offset:90894*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90894*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d87ffff; valaddr_reg:x3; val_offset:90897*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90897*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d8fffff; valaddr_reg:x3; val_offset:90900*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90900*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6d9fffff; valaddr_reg:x3; val_offset:90903*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90903*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dbfffff; valaddr_reg:x3; val_offset:90906*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90906*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dc00000; valaddr_reg:x3; val_offset:90909*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90909*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6de00000; valaddr_reg:x3; val_offset:90912*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90912*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6df00000; valaddr_reg:x3; val_offset:90915*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90915*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6df80000; valaddr_reg:x3; val_offset:90918*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90918*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dfc0000; valaddr_reg:x3; val_offset:90921*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90921*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dfe0000; valaddr_reg:x3; val_offset:90924*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90924*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dff0000; valaddr_reg:x3; val_offset:90927*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90927*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dff8000; valaddr_reg:x3; val_offset:90930*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90930*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dffc000; valaddr_reg:x3; val_offset:90933*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90933*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dffe000; valaddr_reg:x3; val_offset:90936*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90936*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dfff000; valaddr_reg:x3; val_offset:90939*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90939*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dfff800; valaddr_reg:x3; val_offset:90942*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90942*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dfffc00; valaddr_reg:x3; val_offset:90945*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90945*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dfffe00; valaddr_reg:x3; val_offset:90948*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90948*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dffff00; valaddr_reg:x3; val_offset:90951*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90951*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dffff80; valaddr_reg:x3; val_offset:90954*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90954*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dffffc0; valaddr_reg:x3; val_offset:90957*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90957*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dffffe0; valaddr_reg:x3; val_offset:90960*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90960*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dfffff0; valaddr_reg:x3; val_offset:90963*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90963*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dfffff8; valaddr_reg:x3; val_offset:90966*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90966*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dfffffc; valaddr_reg:x3; val_offset:90969*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90969*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dfffffe; valaddr_reg:x3; val_offset:90972*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90972*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x6dffffff; valaddr_reg:x3; val_offset:90975*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90975*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x7f000001; valaddr_reg:x3; val_offset:90978*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90978*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x7f000003; valaddr_reg:x3; val_offset:90981*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90981*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x7f000007; valaddr_reg:x3; val_offset:90984*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90984*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x7f199999; valaddr_reg:x3; val_offset:90987*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90987*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x7f249249; valaddr_reg:x3; val_offset:90990*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90990*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x7f333333; valaddr_reg:x3; val_offset:90993*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90993*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:90996*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90996*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:90999*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90999*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x7f444444; valaddr_reg:x3; val_offset:91002*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91002*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55e32a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1933be; op2val:0x3fd5e32a;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:91005*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91005*0 + 3*236*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132336542,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281700864,32,FLEN)
NAN_BOXED(2132336542,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701120,32,FLEN)
NAN_BOXED(2132336542,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701248,32,FLEN)
NAN_BOXED(2132336542,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701312,32,FLEN)
NAN_BOXED(2132336542,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701344,32,FLEN)
NAN_BOXED(2132336542,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701360,32,FLEN)
NAN_BOXED(2132336542,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701368,32,FLEN)
NAN_BOXED(2132336542,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701372,32,FLEN)
NAN_BOXED(2132336542,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701374,32,FLEN)
NAN_BOXED(2132336542,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701375,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535552,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535553,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535555,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535559,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535567,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535583,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535615,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535679,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535807,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256536063,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256536575,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256537599,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256539647,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256543743,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256551935,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256568319,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256601087,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256666623,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256797695,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2257059839,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2257584127,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2258632703,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2260729855,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2260729856,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2262827008,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2263875584,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264399872,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264662016,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264793088,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264858624,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264891392,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264907776,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264915968,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264920064,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264922112,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264923136,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264923648,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264923904,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924032,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924096,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924128,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924144,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924152,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924156,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924158,32,FLEN)
NAN_BOXED(2132357287,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924159,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837105152,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837105153,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837105155,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837105159,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837105167,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837105183,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837105215,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837105279,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837105407,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837105663,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837106175,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837107199,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837109247,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837113343,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837121535,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837137919,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837170687,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837236223,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837367295,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1837629439,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1838153727,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1839202303,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1841299455,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1841299456,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1843396608,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1844445184,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1844969472,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845231616,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845362688,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845428224,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845460992,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845477376,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845485568,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845489664,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845491712,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845492736,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845493248,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845493504,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845493632,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845493696,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845493728,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845493744,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845493752,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845493756,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845493758,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(1845493759,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132358078,32,FLEN)
NAN_BOXED(1070981930,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
