
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf783ffff; valaddr_reg:x3; val_offset:93312*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93312*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf787ffff; valaddr_reg:x3; val_offset:93315*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93315*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf78fffff; valaddr_reg:x3; val_offset:93318*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93318*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf79fffff; valaddr_reg:x3; val_offset:93321*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93321*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7bfffff; valaddr_reg:x3; val_offset:93324*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93324*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7c00000; valaddr_reg:x3; val_offset:93327*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93327*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7e00000; valaddr_reg:x3; val_offset:93330*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93330*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7f00000; valaddr_reg:x3; val_offset:93333*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93333*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7f80000; valaddr_reg:x3; val_offset:93336*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93336*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7fc0000; valaddr_reg:x3; val_offset:93339*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93339*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7fe0000; valaddr_reg:x3; val_offset:93342*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93342*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7ff0000; valaddr_reg:x3; val_offset:93345*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93345*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7ff8000; valaddr_reg:x3; val_offset:93348*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93348*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7ffc000; valaddr_reg:x3; val_offset:93351*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93351*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7ffe000; valaddr_reg:x3; val_offset:93354*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93354*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7fff000; valaddr_reg:x3; val_offset:93357*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93357*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7fff800; valaddr_reg:x3; val_offset:93360*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93360*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7fffc00; valaddr_reg:x3; val_offset:93363*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93363*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7fffe00; valaddr_reg:x3; val_offset:93366*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93366*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7ffff00; valaddr_reg:x3; val_offset:93369*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93369*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7ffff80; valaddr_reg:x3; val_offset:93372*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93372*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7ffffc0; valaddr_reg:x3; val_offset:93375*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93375*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7ffffe0; valaddr_reg:x3; val_offset:93378*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93378*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7fffff0; valaddr_reg:x3; val_offset:93381*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93381*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7fffff8; valaddr_reg:x3; val_offset:93384*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93384*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7fffffc; valaddr_reg:x3; val_offset:93387*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93387*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7fffffe; valaddr_reg:x3; val_offset:93390*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93390*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xf7ffffff; valaddr_reg:x3; val_offset:93393*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93393*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xff000001; valaddr_reg:x3; val_offset:93396*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93396*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xff000003; valaddr_reg:x3; val_offset:93399*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93399*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xff000007; valaddr_reg:x3; val_offset:93402*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93402*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xff199999; valaddr_reg:x3; val_offset:93405*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93405*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xff249249; valaddr_reg:x3; val_offset:93408*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93408*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xff333333; valaddr_reg:x3; val_offset:93411*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93411*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:93414*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93414*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:93417*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93417*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xff444444; valaddr_reg:x3; val_offset:93420*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93420*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:93423*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93423*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:93426*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93426*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xff666666; valaddr_reg:x3; val_offset:93429*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93429*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:93432*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93432*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:93435*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93435*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:93438*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93438*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d70d2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x50210d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d70d2; op2val:0xbfd0210d;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:93441*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93441*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77800000; valaddr_reg:x3; val_offset:93444*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93444*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77800001; valaddr_reg:x3; val_offset:93447*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93447*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77800003; valaddr_reg:x3; val_offset:93450*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93450*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77800007; valaddr_reg:x3; val_offset:93453*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93453*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7780000f; valaddr_reg:x3; val_offset:93456*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93456*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7780001f; valaddr_reg:x3; val_offset:93459*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93459*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7780003f; valaddr_reg:x3; val_offset:93462*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93462*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7780007f; valaddr_reg:x3; val_offset:93465*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93465*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x778000ff; valaddr_reg:x3; val_offset:93468*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93468*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x778001ff; valaddr_reg:x3; val_offset:93471*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93471*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x778003ff; valaddr_reg:x3; val_offset:93474*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93474*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x778007ff; valaddr_reg:x3; val_offset:93477*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93477*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77800fff; valaddr_reg:x3; val_offset:93480*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93480*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77801fff; valaddr_reg:x3; val_offset:93483*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93483*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77803fff; valaddr_reg:x3; val_offset:93486*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93486*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77807fff; valaddr_reg:x3; val_offset:93489*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93489*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7780ffff; valaddr_reg:x3; val_offset:93492*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93492*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7781ffff; valaddr_reg:x3; val_offset:93495*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93495*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7783ffff; valaddr_reg:x3; val_offset:93498*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93498*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7787ffff; valaddr_reg:x3; val_offset:93501*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93501*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x778fffff; valaddr_reg:x3; val_offset:93504*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93504*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x779fffff; valaddr_reg:x3; val_offset:93507*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93507*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77bfffff; valaddr_reg:x3; val_offset:93510*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93510*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77c00000; valaddr_reg:x3; val_offset:93513*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93513*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77e00000; valaddr_reg:x3; val_offset:93516*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93516*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77f00000; valaddr_reg:x3; val_offset:93519*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93519*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77f80000; valaddr_reg:x3; val_offset:93522*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93522*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77fc0000; valaddr_reg:x3; val_offset:93525*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93525*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77fe0000; valaddr_reg:x3; val_offset:93528*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93528*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77ff0000; valaddr_reg:x3; val_offset:93531*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93531*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77ff8000; valaddr_reg:x3; val_offset:93534*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93534*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77ffc000; valaddr_reg:x3; val_offset:93537*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93537*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77ffe000; valaddr_reg:x3; val_offset:93540*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93540*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77fff000; valaddr_reg:x3; val_offset:93543*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93543*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77fff800; valaddr_reg:x3; val_offset:93546*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93546*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77fffc00; valaddr_reg:x3; val_offset:93549*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93549*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77fffe00; valaddr_reg:x3; val_offset:93552*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93552*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77ffff00; valaddr_reg:x3; val_offset:93555*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93555*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77ffff80; valaddr_reg:x3; val_offset:93558*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93558*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77ffffc0; valaddr_reg:x3; val_offset:93561*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93561*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77ffffe0; valaddr_reg:x3; val_offset:93564*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93564*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77fffff0; valaddr_reg:x3; val_offset:93567*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93567*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77fffff8; valaddr_reg:x3; val_offset:93570*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93570*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77fffffc; valaddr_reg:x3; val_offset:93573*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93573*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77fffffe; valaddr_reg:x3; val_offset:93576*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93576*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x77ffffff; valaddr_reg:x3; val_offset:93579*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93579*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7f000001; valaddr_reg:x3; val_offset:93582*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93582*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7f000003; valaddr_reg:x3; val_offset:93585*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93585*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7f000007; valaddr_reg:x3; val_offset:93588*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93588*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7f199999; valaddr_reg:x3; val_offset:93591*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93591*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7f249249; valaddr_reg:x3; val_offset:93594*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93594*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7f333333; valaddr_reg:x3; val_offset:93597*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93597*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:93600*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93600*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:93603*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93603*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7f444444; valaddr_reg:x3; val_offset:93606*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93606*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:93609*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93609*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:93612*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93612*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7f666666; valaddr_reg:x3; val_offset:93615*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93615*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:93618*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93618*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:93621*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93621*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:93624*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93624*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dd554 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4f9c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dd554; op2val:0x3fcf9c85;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:93627*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93627*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:93630*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93630*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:93633*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93633*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:93636*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93636*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:93639*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93639*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:93642*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93642*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:93645*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93645*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:93648*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93648*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:93651*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93651*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:93654*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93654*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:93657*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93657*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:93660*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93660*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:93663*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93663*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:93666*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93666*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:93669*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93669*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:93672*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93672*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:93675*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93675*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x80800000; valaddr_reg:x3; val_offset:93678*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93678*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:93681*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93681*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:93684*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93684*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:93687*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93687*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x8080000f; valaddr_reg:x3; val_offset:93690*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93690*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e4774; op2val:0x80000000;
op3val:0x8080001f; valaddr_reg:x3; val_offset:93693*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93693*0 + 3*243*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4152623103,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4152885247,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4153409535,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4154458111,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4156555263,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4156555264,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4158652416,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4159700992,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160225280,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160487424,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160618496,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160684032,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160716800,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160733184,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160741376,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160745472,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160747520,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160748544,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160749056,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160749312,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160749440,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160749504,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160749536,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160749552,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160749560,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160749564,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160749566,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4160749567,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2132635858,32,FLEN)
NAN_BOXED(3218088205,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2004877312,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2004877313,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2004877315,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2004877319,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2004877327,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2004877343,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2004877375,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2004877439,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2004877567,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2004877823,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2004878335,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2004879359,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2004881407,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2004885503,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2004893695,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2004910079,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2004942847,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2005008383,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2005139455,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2005401599,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2005925887,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2006974463,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2009071615,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2009071616,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2011168768,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2012217344,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2012741632,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013003776,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013134848,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013200384,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013233152,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013249536,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013257728,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013261824,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013263872,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013264896,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013265408,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013265664,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013265792,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013265856,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013265888,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013265904,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013265912,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013265916,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013265918,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2013265919,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2132661588,32,FLEN)
NAN_BOXED(1070570629,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872271,32,FLEN)
NAN_BOXED(2132690804,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872287,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
