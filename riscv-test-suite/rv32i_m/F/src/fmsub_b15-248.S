
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d03ffff; valaddr_reg:x3; val_offset:94848*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94848*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d07ffff; valaddr_reg:x3; val_offset:94851*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94851*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d0fffff; valaddr_reg:x3; val_offset:94854*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94854*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d1fffff; valaddr_reg:x3; val_offset:94857*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94857*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d3fffff; valaddr_reg:x3; val_offset:94860*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94860*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d400000; valaddr_reg:x3; val_offset:94863*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94863*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d600000; valaddr_reg:x3; val_offset:94866*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94866*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d700000; valaddr_reg:x3; val_offset:94869*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94869*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d780000; valaddr_reg:x3; val_offset:94872*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94872*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7c0000; valaddr_reg:x3; val_offset:94875*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94875*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7e0000; valaddr_reg:x3; val_offset:94878*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94878*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7f0000; valaddr_reg:x3; val_offset:94881*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94881*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7f8000; valaddr_reg:x3; val_offset:94884*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94884*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7fc000; valaddr_reg:x3; val_offset:94887*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94887*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7fe000; valaddr_reg:x3; val_offset:94890*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94890*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7ff000; valaddr_reg:x3; val_offset:94893*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94893*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7ff800; valaddr_reg:x3; val_offset:94896*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94896*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7ffc00; valaddr_reg:x3; val_offset:94899*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94899*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7ffe00; valaddr_reg:x3; val_offset:94902*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94902*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7fff00; valaddr_reg:x3; val_offset:94905*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94905*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7fff80; valaddr_reg:x3; val_offset:94908*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94908*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7fffc0; valaddr_reg:x3; val_offset:94911*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94911*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7fffe0; valaddr_reg:x3; val_offset:94914*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94914*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7ffff0; valaddr_reg:x3; val_offset:94917*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94917*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7ffff8; valaddr_reg:x3; val_offset:94920*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94920*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7ffffc; valaddr_reg:x3; val_offset:94923*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94923*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7ffffe; valaddr_reg:x3; val_offset:94926*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94926*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x205337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f205337; op2val:0x80000000;
op3val:0x8d7fffff; valaddr_reg:x3; val_offset:94929*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94929*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:94932*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94932*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:94935*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94935*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:94938*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94938*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:94941*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94941*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:94944*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94944*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:94947*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94947*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:94950*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94950*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:94953*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94953*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:94956*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94956*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:94959*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94959*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:94962*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94962*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:94965*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94965*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:94968*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94968*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:94971*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94971*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:94974*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94974*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:94977*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94977*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x800000; valaddr_reg:x3; val_offset:94980*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94980*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:94983*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94983*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:94986*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94986*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:94989*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94989*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x80000f; valaddr_reg:x3; val_offset:94992*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94992*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x80001f; valaddr_reg:x3; val_offset:94995*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94995*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x80003f; valaddr_reg:x3; val_offset:94998*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94998*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x80007f; valaddr_reg:x3; val_offset:95001*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95001*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x8000ff; valaddr_reg:x3; val_offset:95004*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95004*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x8001ff; valaddr_reg:x3; val_offset:95007*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95007*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x8003ff; valaddr_reg:x3; val_offset:95010*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95010*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x8007ff; valaddr_reg:x3; val_offset:95013*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95013*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x800fff; valaddr_reg:x3; val_offset:95016*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95016*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x801fff; valaddr_reg:x3; val_offset:95019*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95019*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x803fff; valaddr_reg:x3; val_offset:95022*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95022*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x807fff; valaddr_reg:x3; val_offset:95025*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95025*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x80ffff; valaddr_reg:x3; val_offset:95028*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95028*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x81ffff; valaddr_reg:x3; val_offset:95031*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95031*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x83ffff; valaddr_reg:x3; val_offset:95034*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95034*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x87ffff; valaddr_reg:x3; val_offset:95037*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95037*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x8fffff; valaddr_reg:x3; val_offset:95040*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95040*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0x9fffff; valaddr_reg:x3; val_offset:95043*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95043*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xbfffff; valaddr_reg:x3; val_offset:95046*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95046*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xc00000; valaddr_reg:x3; val_offset:95049*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95049*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xe00000; valaddr_reg:x3; val_offset:95052*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95052*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xf00000; valaddr_reg:x3; val_offset:95055*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95055*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xf80000; valaddr_reg:x3; val_offset:95058*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95058*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xfc0000; valaddr_reg:x3; val_offset:95061*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95061*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xfe0000; valaddr_reg:x3; val_offset:95064*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95064*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xff0000; valaddr_reg:x3; val_offset:95067*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95067*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xff8000; valaddr_reg:x3; val_offset:95070*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95070*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xffc000; valaddr_reg:x3; val_offset:95073*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95073*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xffe000; valaddr_reg:x3; val_offset:95076*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95076*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xfff000; valaddr_reg:x3; val_offset:95079*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95079*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xfff800; valaddr_reg:x3; val_offset:95082*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95082*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xfffc00; valaddr_reg:x3; val_offset:95085*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95085*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xfffe00; valaddr_reg:x3; val_offset:95088*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95088*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xffff00; valaddr_reg:x3; val_offset:95091*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95091*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xffff80; valaddr_reg:x3; val_offset:95094*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95094*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xffffc0; valaddr_reg:x3; val_offset:95097*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95097*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xffffe0; valaddr_reg:x3; val_offset:95100*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95100*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xfffff0; valaddr_reg:x3; val_offset:95103*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95103*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:95106*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95106*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:95109*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95109*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:95112*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95112*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f206a70; op2val:0x0;
op3val:0xffffff; valaddr_reg:x3; val_offset:95115*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95115*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x64000000; valaddr_reg:x3; val_offset:95118*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95118*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x64000001; valaddr_reg:x3; val_offset:95121*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95121*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x64000003; valaddr_reg:x3; val_offset:95124*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95124*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x64000007; valaddr_reg:x3; val_offset:95127*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95127*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x6400000f; valaddr_reg:x3; val_offset:95130*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95130*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x6400001f; valaddr_reg:x3; val_offset:95133*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95133*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x6400003f; valaddr_reg:x3; val_offset:95136*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95136*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x6400007f; valaddr_reg:x3; val_offset:95139*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95139*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x640000ff; valaddr_reg:x3; val_offset:95142*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95142*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x640001ff; valaddr_reg:x3; val_offset:95145*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95145*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x640003ff; valaddr_reg:x3; val_offset:95148*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95148*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x640007ff; valaddr_reg:x3; val_offset:95151*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95151*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x64000fff; valaddr_reg:x3; val_offset:95154*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95154*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x64001fff; valaddr_reg:x3; val_offset:95157*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95157*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x64003fff; valaddr_reg:x3; val_offset:95160*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95160*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x64007fff; valaddr_reg:x3; val_offset:95163*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95163*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x6400ffff; valaddr_reg:x3; val_offset:95166*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95166*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x6401ffff; valaddr_reg:x3; val_offset:95169*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95169*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x6403ffff; valaddr_reg:x3; val_offset:95172*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95172*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x6407ffff; valaddr_reg:x3; val_offset:95175*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95175*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x640fffff; valaddr_reg:x3; val_offset:95178*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95178*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x641fffff; valaddr_reg:x3; val_offset:95181*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95181*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x643fffff; valaddr_reg:x3; val_offset:95184*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95184*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x64400000; valaddr_reg:x3; val_offset:95187*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95187*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x64600000; valaddr_reg:x3; val_offset:95190*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95190*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x64700000; valaddr_reg:x3; val_offset:95193*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95193*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x64780000; valaddr_reg:x3; val_offset:95196*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95196*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x647c0000; valaddr_reg:x3; val_offset:95199*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95199*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x647e0000; valaddr_reg:x3; val_offset:95202*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95202*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x647f0000; valaddr_reg:x3; val_offset:95205*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95205*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x647f8000; valaddr_reg:x3; val_offset:95208*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95208*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x647fc000; valaddr_reg:x3; val_offset:95211*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95211*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x647fe000; valaddr_reg:x3; val_offset:95214*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95214*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x647ff000; valaddr_reg:x3; val_offset:95217*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95217*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x647ff800; valaddr_reg:x3; val_offset:95220*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95220*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x647ffc00; valaddr_reg:x3; val_offset:95223*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95223*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x647ffe00; valaddr_reg:x3; val_offset:95226*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95226*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d3a1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4bbf4d and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d3a1; op2val:0x3fcbbf4d;
op3val:0x647fff00; valaddr_reg:x3; val_offset:95229*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95229*0 + 3*247*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365849599,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2366111743,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2366636031,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2367684607,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2369781759,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2369781760,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2371878912,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2372927488,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373451776,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373713920,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373844992,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373910528,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373943296,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373959680,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373967872,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373971968,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373974016,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975040,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975552,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975808,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975936,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976000,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976032,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976048,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976056,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976060,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976062,32,FLEN)
NAN_BOXED(2132824887,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976063,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388623,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388639,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388671,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388735,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388863,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8389119,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8389631,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8390655,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8392703,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8396799,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8404991,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8421375,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8454143,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8519679,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8650751,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8912895,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(9437183,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10485759,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12582911,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12582912,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14680064,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15728640,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16252928,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16515072,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16646144,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16711680,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16744448,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16760832,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16769024,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16773120,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16775168,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16776192,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16776704,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16776960,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777088,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777152,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777184,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777200,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2132830832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777215,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677721600,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677721601,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677721603,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677721607,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677721615,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677721631,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677721663,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677721727,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677721855,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677722111,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677722623,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677723647,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677725695,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677729791,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677737983,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677754367,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677787135,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677852671,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1677983743,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1678245887,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1678770175,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1679818751,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1681915903,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1681915904,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1684013056,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1685061632,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1685585920,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1685848064,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1685979136,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1686044672,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1686077440,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1686093824,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1686102016,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1686106112,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1686108160,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1686109184,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1686109696,32,FLEN)
NAN_BOXED(2132857761,32,FLEN)
NAN_BOXED(1070317389,32,FLEN)
NAN_BOXED(1686109952,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
