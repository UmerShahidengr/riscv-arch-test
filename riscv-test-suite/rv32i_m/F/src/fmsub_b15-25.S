
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_3072:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x6cffffe0; valaddr_reg:x3; val_offset:9216*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9216*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3073:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x6cfffff0; valaddr_reg:x3; val_offset:9219*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9219*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3074:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x6cfffff8; valaddr_reg:x3; val_offset:9222*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9222*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3075:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x6cfffffc; valaddr_reg:x3; val_offset:9225*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9225*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3076:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x6cfffffe; valaddr_reg:x3; val_offset:9228*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9228*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3077:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x6cffffff; valaddr_reg:x3; val_offset:9231*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9231*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3078:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x7f000001; valaddr_reg:x3; val_offset:9234*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9234*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3079:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x7f000003; valaddr_reg:x3; val_offset:9237*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9237*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3080:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x7f000007; valaddr_reg:x3; val_offset:9240*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9240*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3081:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x7f199999; valaddr_reg:x3; val_offset:9243*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9243*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3082:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x7f249249; valaddr_reg:x3; val_offset:9246*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9246*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3083:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x7f333333; valaddr_reg:x3; val_offset:9249*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9249*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3084:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:9252*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9252*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3085:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:9255*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9255*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3086:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x7f444444; valaddr_reg:x3; val_offset:9258*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9258*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3087:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:9261*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9261*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3088:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:9264*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9264*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3089:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x7f666666; valaddr_reg:x3; val_offset:9267*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9267*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3090:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:9270*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9270*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3091:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:9273*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9273*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3092:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:9276*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9276*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3093:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6d93e5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ece5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6d93e5; op2val:0x4189ece5;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:9279*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9279*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3094:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:9282*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9282*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3095:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:9285*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9285*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3096:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:9288*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9288*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3097:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:9291*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9291*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3098:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:9294*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9294*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3099:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:9297*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9297*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3100:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:9300*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9300*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3101:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:9303*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9303*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3102:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:9306*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9306*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3103:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:9309*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9309*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3104:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:9312*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9312*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3105:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:9315*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9315*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3106:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:9318*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9318*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3107:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:9321*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9321*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3108:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:9324*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9324*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3109:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:9327*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9327*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3110:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d000000; valaddr_reg:x3; val_offset:9330*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9330*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3111:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d000001; valaddr_reg:x3; val_offset:9333*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9333*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3112:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d000003; valaddr_reg:x3; val_offset:9336*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9336*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3113:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d000007; valaddr_reg:x3; val_offset:9339*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9339*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3114:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d00000f; valaddr_reg:x3; val_offset:9342*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9342*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3115:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d00001f; valaddr_reg:x3; val_offset:9345*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9345*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3116:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d00003f; valaddr_reg:x3; val_offset:9348*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9348*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3117:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d00007f; valaddr_reg:x3; val_offset:9351*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9351*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3118:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d0000ff; valaddr_reg:x3; val_offset:9354*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9354*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3119:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d0001ff; valaddr_reg:x3; val_offset:9357*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9357*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3120:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d0003ff; valaddr_reg:x3; val_offset:9360*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9360*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3121:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d0007ff; valaddr_reg:x3; val_offset:9363*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9363*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3122:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d000fff; valaddr_reg:x3; val_offset:9366*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9366*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3123:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d001fff; valaddr_reg:x3; val_offset:9369*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9369*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3124:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d003fff; valaddr_reg:x3; val_offset:9372*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9372*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3125:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d007fff; valaddr_reg:x3; val_offset:9375*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9375*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3126:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d00ffff; valaddr_reg:x3; val_offset:9378*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9378*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3127:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d01ffff; valaddr_reg:x3; val_offset:9381*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9381*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3128:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d03ffff; valaddr_reg:x3; val_offset:9384*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9384*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3129:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d07ffff; valaddr_reg:x3; val_offset:9387*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9387*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3130:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d0fffff; valaddr_reg:x3; val_offset:9390*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9390*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3131:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d1fffff; valaddr_reg:x3; val_offset:9393*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9393*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3132:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d3fffff; valaddr_reg:x3; val_offset:9396*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9396*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3133:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d400000; valaddr_reg:x3; val_offset:9399*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9399*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3134:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d600000; valaddr_reg:x3; val_offset:9402*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9402*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3135:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d700000; valaddr_reg:x3; val_offset:9405*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9405*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3136:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d780000; valaddr_reg:x3; val_offset:9408*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9408*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3137:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7c0000; valaddr_reg:x3; val_offset:9411*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9411*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3138:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7e0000; valaddr_reg:x3; val_offset:9414*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9414*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3139:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7f0000; valaddr_reg:x3; val_offset:9417*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9417*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3140:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7f8000; valaddr_reg:x3; val_offset:9420*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9420*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3141:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7fc000; valaddr_reg:x3; val_offset:9423*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9423*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3142:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7fe000; valaddr_reg:x3; val_offset:9426*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9426*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3143:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7ff000; valaddr_reg:x3; val_offset:9429*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9429*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3144:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7ff800; valaddr_reg:x3; val_offset:9432*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9432*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3145:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7ffc00; valaddr_reg:x3; val_offset:9435*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9435*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3146:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7ffe00; valaddr_reg:x3; val_offset:9438*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9438*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3147:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7fff00; valaddr_reg:x3; val_offset:9441*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9441*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3148:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7fff80; valaddr_reg:x3; val_offset:9444*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9444*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3149:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7fffc0; valaddr_reg:x3; val_offset:9447*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9447*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3150:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7fffe0; valaddr_reg:x3; val_offset:9450*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9450*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3151:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7ffff0; valaddr_reg:x3; val_offset:9453*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9453*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3152:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7ffff8; valaddr_reg:x3; val_offset:9456*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9456*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3153:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7ffffc; valaddr_reg:x3; val_offset:9459*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9459*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3154:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7ffffe; valaddr_reg:x3; val_offset:9462*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9462*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3155:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6dba7a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6dba7a; op2val:0x80000000;
op3val:0x8d7fffff; valaddr_reg:x3; val_offset:9465*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9465*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3156:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x3f800001; valaddr_reg:x3; val_offset:9468*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9468*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3157:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x3f800003; valaddr_reg:x3; val_offset:9471*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9471*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3158:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x3f800007; valaddr_reg:x3; val_offset:9474*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9474*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3159:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x3f999999; valaddr_reg:x3; val_offset:9477*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9477*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3160:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:9480*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9480*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3161:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:9483*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9483*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3162:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:9486*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9486*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3163:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:9489*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9489*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3164:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:9492*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9492*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3165:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:9495*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9495*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3166:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:9498*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9498*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3167:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:9501*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9501*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3168:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:9504*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9504*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3169:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:9507*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9507*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3170:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:9510*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9510*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3171:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:9513*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9513*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3172:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b000000; valaddr_reg:x3; val_offset:9516*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9516*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3173:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b000001; valaddr_reg:x3; val_offset:9519*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9519*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3174:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b000003; valaddr_reg:x3; val_offset:9522*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9522*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3175:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b000007; valaddr_reg:x3; val_offset:9525*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9525*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3176:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b00000f; valaddr_reg:x3; val_offset:9528*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9528*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3177:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b00001f; valaddr_reg:x3; val_offset:9531*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9531*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3178:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b00003f; valaddr_reg:x3; val_offset:9534*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9534*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3179:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b00007f; valaddr_reg:x3; val_offset:9537*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9537*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3180:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b0000ff; valaddr_reg:x3; val_offset:9540*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9540*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3181:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b0001ff; valaddr_reg:x3; val_offset:9543*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9543*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3182:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b0003ff; valaddr_reg:x3; val_offset:9546*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9546*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3183:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b0007ff; valaddr_reg:x3; val_offset:9549*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9549*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3184:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b000fff; valaddr_reg:x3; val_offset:9552*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9552*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3185:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b001fff; valaddr_reg:x3; val_offset:9555*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9555*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3186:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b003fff; valaddr_reg:x3; val_offset:9558*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9558*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3187:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b007fff; valaddr_reg:x3; val_offset:9561*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9561*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3188:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b00ffff; valaddr_reg:x3; val_offset:9564*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9564*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3189:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b01ffff; valaddr_reg:x3; val_offset:9567*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9567*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3190:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b03ffff; valaddr_reg:x3; val_offset:9570*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9570*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3191:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b07ffff; valaddr_reg:x3; val_offset:9573*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9573*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3192:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b0fffff; valaddr_reg:x3; val_offset:9576*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9576*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3193:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b1fffff; valaddr_reg:x3; val_offset:9579*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9579*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3194:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b3fffff; valaddr_reg:x3; val_offset:9582*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9582*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3195:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b400000; valaddr_reg:x3; val_offset:9585*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9585*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3196:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b600000; valaddr_reg:x3; val_offset:9588*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9588*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3197:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b700000; valaddr_reg:x3; val_offset:9591*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9591*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3198:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b780000; valaddr_reg:x3; val_offset:9594*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9594*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3199:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x77141b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x049f2e and fs3 == 0 and fe3 == 0x96 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d77141b; op2val:0x1849f2e;
op3val:0x4b7c0000; valaddr_reg:x3; val_offset:9597*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9597*0 + 3*24*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(1828716512,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(1828716528,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(1828716536,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(1828716540,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(1828716542,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(1828716543,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2104333285,32,FLEN)
NAN_BOXED(1099558117,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587456,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587457,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587459,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587463,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587471,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587487,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587519,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587583,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587711,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587967,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365588479,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365589503,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365591551,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365595647,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365603839,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365620223,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365652991,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365718527,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365849599,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2366111743,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2366636031,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2367684607,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2369781759,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2369781760,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2371878912,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2372927488,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373451776,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373713920,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373844992,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373910528,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373943296,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373959680,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373967872,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373971968,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373974016,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975040,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975552,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975808,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975936,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976000,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976032,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976048,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976056,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976060,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976062,32,FLEN)
NAN_BOXED(2104343162,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976063,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258291200,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258291201,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258291203,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258291207,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258291215,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258291231,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258291263,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258291327,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258291455,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258291711,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258292223,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258293247,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258295295,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258299391,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258307583,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258323967,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258356735,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258422271,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258553343,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1258815487,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1259339775,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1260388351,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1262485503,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1262485504,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1264582656,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1265631232,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1266155520,32,FLEN)
NAN_BOXED(2104955931,32,FLEN)
NAN_BOXED(25468718,32,FLEN)
NAN_BOXED(1266417664,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
