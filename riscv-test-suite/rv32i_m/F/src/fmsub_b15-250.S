
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83f80000; valaddr_reg:x3; val_offset:95616*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95616*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83fc0000; valaddr_reg:x3; val_offset:95619*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95619*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83fe0000; valaddr_reg:x3; val_offset:95622*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95622*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83ff0000; valaddr_reg:x3; val_offset:95625*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95625*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83ff8000; valaddr_reg:x3; val_offset:95628*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95628*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83ffc000; valaddr_reg:x3; val_offset:95631*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95631*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83ffe000; valaddr_reg:x3; val_offset:95634*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95634*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83fff000; valaddr_reg:x3; val_offset:95637*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95637*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83fff800; valaddr_reg:x3; val_offset:95640*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95640*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83fffc00; valaddr_reg:x3; val_offset:95643*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95643*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83fffe00; valaddr_reg:x3; val_offset:95646*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95646*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83ffff00; valaddr_reg:x3; val_offset:95649*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95649*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83ffff80; valaddr_reg:x3; val_offset:95652*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95652*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83ffffc0; valaddr_reg:x3; val_offset:95655*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95655*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83ffffe0; valaddr_reg:x3; val_offset:95658*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95658*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83fffff0; valaddr_reg:x3; val_offset:95661*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95661*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83fffff8; valaddr_reg:x3; val_offset:95664*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95664*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83fffffc; valaddr_reg:x3; val_offset:95667*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95667*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83fffffe; valaddr_reg:x3; val_offset:95670*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95670*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216a51; op2val:0x80000000;
op3val:0x83ffffff; valaddr_reg:x3; val_offset:95673*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95673*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x67000000; valaddr_reg:x3; val_offset:95676*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95676*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x67000001; valaddr_reg:x3; val_offset:95679*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95679*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x67000003; valaddr_reg:x3; val_offset:95682*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95682*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x67000007; valaddr_reg:x3; val_offset:95685*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95685*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x6700000f; valaddr_reg:x3; val_offset:95688*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95688*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x6700001f; valaddr_reg:x3; val_offset:95691*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95691*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x6700003f; valaddr_reg:x3; val_offset:95694*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95694*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x6700007f; valaddr_reg:x3; val_offset:95697*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95697*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x670000ff; valaddr_reg:x3; val_offset:95700*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95700*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x670001ff; valaddr_reg:x3; val_offset:95703*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95703*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x670003ff; valaddr_reg:x3; val_offset:95706*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95706*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x670007ff; valaddr_reg:x3; val_offset:95709*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95709*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x67000fff; valaddr_reg:x3; val_offset:95712*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95712*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x67001fff; valaddr_reg:x3; val_offset:95715*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95715*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x67003fff; valaddr_reg:x3; val_offset:95718*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95718*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x67007fff; valaddr_reg:x3; val_offset:95721*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95721*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x6700ffff; valaddr_reg:x3; val_offset:95724*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95724*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x6701ffff; valaddr_reg:x3; val_offset:95727*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95727*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x6703ffff; valaddr_reg:x3; val_offset:95730*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95730*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x6707ffff; valaddr_reg:x3; val_offset:95733*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95733*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x670fffff; valaddr_reg:x3; val_offset:95736*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95736*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x671fffff; valaddr_reg:x3; val_offset:95739*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95739*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x673fffff; valaddr_reg:x3; val_offset:95742*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95742*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x67400000; valaddr_reg:x3; val_offset:95745*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95745*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x67600000; valaddr_reg:x3; val_offset:95748*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95748*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x67700000; valaddr_reg:x3; val_offset:95751*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95751*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x67780000; valaddr_reg:x3; val_offset:95754*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95754*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677c0000; valaddr_reg:x3; val_offset:95757*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95757*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677e0000; valaddr_reg:x3; val_offset:95760*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95760*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677f0000; valaddr_reg:x3; val_offset:95763*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95763*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677f8000; valaddr_reg:x3; val_offset:95766*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95766*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677fc000; valaddr_reg:x3; val_offset:95769*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95769*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677fe000; valaddr_reg:x3; val_offset:95772*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95772*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677ff000; valaddr_reg:x3; val_offset:95775*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95775*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677ff800; valaddr_reg:x3; val_offset:95778*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95778*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677ffc00; valaddr_reg:x3; val_offset:95781*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95781*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677ffe00; valaddr_reg:x3; val_offset:95784*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95784*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677fff00; valaddr_reg:x3; val_offset:95787*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95787*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677fff80; valaddr_reg:x3; val_offset:95790*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95790*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677fffc0; valaddr_reg:x3; val_offset:95793*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95793*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677fffe0; valaddr_reg:x3; val_offset:95796*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95796*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677ffff0; valaddr_reg:x3; val_offset:95799*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95799*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677ffff8; valaddr_reg:x3; val_offset:95802*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95802*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677ffffc; valaddr_reg:x3; val_offset:95805*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95805*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677ffffe; valaddr_reg:x3; val_offset:95808*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95808*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xce and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x677fffff; valaddr_reg:x3; val_offset:95811*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95811*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x7f000001; valaddr_reg:x3; val_offset:95814*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95814*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x7f000003; valaddr_reg:x3; val_offset:95817*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95817*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x7f000007; valaddr_reg:x3; val_offset:95820*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95820*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x7f199999; valaddr_reg:x3; val_offset:95823*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95823*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x7f249249; valaddr_reg:x3; val_offset:95826*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95826*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x7f333333; valaddr_reg:x3; val_offset:95829*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95829*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:95832*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95832*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:95835*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95835*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x7f444444; valaddr_reg:x3; val_offset:95838*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95838*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:95841*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95841*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:95844*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95844*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x7f666666; valaddr_reg:x3; val_offset:95847*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95847*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:95850*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95850*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:95853*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95853*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:95856*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95856*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216e93 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4afbbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216e93; op2val:0x3fcafbbe;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:95859*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95859*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f000000; valaddr_reg:x3; val_offset:95862*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95862*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f000001; valaddr_reg:x3; val_offset:95865*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95865*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f000003; valaddr_reg:x3; val_offset:95868*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95868*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f000007; valaddr_reg:x3; val_offset:95871*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95871*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f00000f; valaddr_reg:x3; val_offset:95874*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95874*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f00001f; valaddr_reg:x3; val_offset:95877*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95877*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f00003f; valaddr_reg:x3; val_offset:95880*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95880*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f00007f; valaddr_reg:x3; val_offset:95883*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95883*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f0000ff; valaddr_reg:x3; val_offset:95886*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95886*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f0001ff; valaddr_reg:x3; val_offset:95889*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95889*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f0003ff; valaddr_reg:x3; val_offset:95892*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95892*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f0007ff; valaddr_reg:x3; val_offset:95895*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95895*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f000fff; valaddr_reg:x3; val_offset:95898*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95898*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f001fff; valaddr_reg:x3; val_offset:95901*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95901*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f003fff; valaddr_reg:x3; val_offset:95904*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95904*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f007fff; valaddr_reg:x3; val_offset:95907*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95907*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f00ffff; valaddr_reg:x3; val_offset:95910*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95910*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f01ffff; valaddr_reg:x3; val_offset:95913*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95913*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f03ffff; valaddr_reg:x3; val_offset:95916*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95916*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f07ffff; valaddr_reg:x3; val_offset:95919*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95919*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f0fffff; valaddr_reg:x3; val_offset:95922*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95922*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f1fffff; valaddr_reg:x3; val_offset:95925*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95925*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f3fffff; valaddr_reg:x3; val_offset:95928*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95928*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f400000; valaddr_reg:x3; val_offset:95931*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95931*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f600000; valaddr_reg:x3; val_offset:95934*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95934*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f700000; valaddr_reg:x3; val_offset:95937*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95937*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f780000; valaddr_reg:x3; val_offset:95940*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95940*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7c0000; valaddr_reg:x3; val_offset:95943*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95943*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7e0000; valaddr_reg:x3; val_offset:95946*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95946*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7f0000; valaddr_reg:x3; val_offset:95949*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95949*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7f8000; valaddr_reg:x3; val_offset:95952*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95952*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7fc000; valaddr_reg:x3; val_offset:95955*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95955*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7fe000; valaddr_reg:x3; val_offset:95958*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95958*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7ff000; valaddr_reg:x3; val_offset:95961*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95961*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7ff800; valaddr_reg:x3; val_offset:95964*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95964*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7ffc00; valaddr_reg:x3; val_offset:95967*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95967*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7ffe00; valaddr_reg:x3; val_offset:95970*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95970*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7fff00; valaddr_reg:x3; val_offset:95973*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95973*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7fff80; valaddr_reg:x3; val_offset:95976*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95976*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7fffc0; valaddr_reg:x3; val_offset:95979*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95979*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7fffe0; valaddr_reg:x3; val_offset:95982*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95982*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7ffff0; valaddr_reg:x3; val_offset:95985*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95985*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7ffff8; valaddr_reg:x3; val_offset:95988*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95988*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7ffffc; valaddr_reg:x3; val_offset:95991*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95991*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7ffffe; valaddr_reg:x3; val_offset:95994*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95994*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x5f7fffff; valaddr_reg:x3; val_offset:95997*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95997*0 + 3*249*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214068224,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214330368,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214461440,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214526976,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214559744,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214576128,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214584320,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214588416,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214590464,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214591488,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592000,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592256,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592384,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592448,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592480,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592496,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592504,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592508,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592510,32,FLEN)
NAN_BOXED(2132896337,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592511,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728053248,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728053249,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728053251,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728053255,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728053263,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728053279,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728053311,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728053375,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728053503,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728053759,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728054271,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728055295,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728057343,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728061439,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728069631,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728086015,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728118783,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728184319,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728315391,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1728577535,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1729101823,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1730150399,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1732247551,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1732247552,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1734344704,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1735393280,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1735917568,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736179712,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736310784,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736376320,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736409088,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736425472,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736433664,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736437760,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736439808,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736440832,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736441344,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736441600,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736441728,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736441792,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736441824,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736441840,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736441848,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736441852,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736441854,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(1736441855,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2132897427,32,FLEN)
NAN_BOXED(1070267326,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593835520,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593835521,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593835523,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593835527,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593835535,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593835551,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593835583,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593835647,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593835775,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593836031,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593836543,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593837567,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593839615,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593843711,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593851903,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593868287,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593901055,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1593966591,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1594097663,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1594359807,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1594884095,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1595932671,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1598029823,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1598029824,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1600126976,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1601175552,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1601699840,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1601961984,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602093056,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602158592,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602191360,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602207744,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602215936,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602220032,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602222080,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602223104,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602223616,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602223872,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602224000,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602224064,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602224096,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602224112,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602224120,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602224124,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602224126,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(1602224127,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
