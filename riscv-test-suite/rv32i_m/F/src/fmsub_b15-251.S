
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_32000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x7f000001; valaddr_reg:x3; val_offset:96000*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96000*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x7f000003; valaddr_reg:x3; val_offset:96003*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96003*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x7f000007; valaddr_reg:x3; val_offset:96006*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96006*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x7f199999; valaddr_reg:x3; val_offset:96009*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96009*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x7f249249; valaddr_reg:x3; val_offset:96012*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96012*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x7f333333; valaddr_reg:x3; val_offset:96015*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96015*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:96018*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96018*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:96021*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96021*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x7f444444; valaddr_reg:x3; val_offset:96024*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96024*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:96027*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96027*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:96030*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96030*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x7f666666; valaddr_reg:x3; val_offset:96033*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96033*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:96036*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96036*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:96039*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96039*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:96042*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96042*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x224fd2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49e20e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f224fd2; op2val:0x3fc9e20e;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:96045*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96045*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:96048*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96048*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:96051*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96051*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:96054*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96054*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:96057*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96057*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:96060*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96060*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:96063*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96063*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:96066*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96066*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:96069*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96069*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:96072*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96072*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:96075*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96075*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:96078*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96078*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:96081*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96081*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:96084*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96084*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:96087*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96087*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:96090*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96090*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:96093*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96093*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2800000; valaddr_reg:x3; val_offset:96096*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96096*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2800001; valaddr_reg:x3; val_offset:96099*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96099*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2800003; valaddr_reg:x3; val_offset:96102*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96102*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2800007; valaddr_reg:x3; val_offset:96105*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96105*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x280000f; valaddr_reg:x3; val_offset:96108*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96108*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x280001f; valaddr_reg:x3; val_offset:96111*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96111*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x280003f; valaddr_reg:x3; val_offset:96114*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96114*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x280007f; valaddr_reg:x3; val_offset:96117*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96117*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x28000ff; valaddr_reg:x3; val_offset:96120*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96120*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x28001ff; valaddr_reg:x3; val_offset:96123*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96123*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x28003ff; valaddr_reg:x3; val_offset:96126*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96126*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x28007ff; valaddr_reg:x3; val_offset:96129*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96129*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2800fff; valaddr_reg:x3; val_offset:96132*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96132*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2801fff; valaddr_reg:x3; val_offset:96135*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96135*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2803fff; valaddr_reg:x3; val_offset:96138*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96138*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2807fff; valaddr_reg:x3; val_offset:96141*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96141*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x280ffff; valaddr_reg:x3; val_offset:96144*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96144*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x281ffff; valaddr_reg:x3; val_offset:96147*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96147*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x283ffff; valaddr_reg:x3; val_offset:96150*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96150*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x287ffff; valaddr_reg:x3; val_offset:96153*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96153*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x28fffff; valaddr_reg:x3; val_offset:96156*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96156*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x29fffff; valaddr_reg:x3; val_offset:96159*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96159*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2bfffff; valaddr_reg:x3; val_offset:96162*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96162*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2c00000; valaddr_reg:x3; val_offset:96165*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96165*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2e00000; valaddr_reg:x3; val_offset:96168*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96168*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2f00000; valaddr_reg:x3; val_offset:96171*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96171*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2f80000; valaddr_reg:x3; val_offset:96174*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96174*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2fc0000; valaddr_reg:x3; val_offset:96177*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96177*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2fe0000; valaddr_reg:x3; val_offset:96180*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96180*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2ff0000; valaddr_reg:x3; val_offset:96183*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96183*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2ff8000; valaddr_reg:x3; val_offset:96186*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96186*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2ffc000; valaddr_reg:x3; val_offset:96189*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96189*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2ffe000; valaddr_reg:x3; val_offset:96192*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96192*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2fff000; valaddr_reg:x3; val_offset:96195*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96195*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2fff800; valaddr_reg:x3; val_offset:96198*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96198*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2fffc00; valaddr_reg:x3; val_offset:96201*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96201*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2fffe00; valaddr_reg:x3; val_offset:96204*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96204*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2ffff00; valaddr_reg:x3; val_offset:96207*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96207*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2ffff80; valaddr_reg:x3; val_offset:96210*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96210*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2ffffc0; valaddr_reg:x3; val_offset:96213*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96213*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2ffffe0; valaddr_reg:x3; val_offset:96216*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96216*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2fffff0; valaddr_reg:x3; val_offset:96219*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96219*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2fffff8; valaddr_reg:x3; val_offset:96222*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96222*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2fffffc; valaddr_reg:x3; val_offset:96225*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96225*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2fffffe; valaddr_reg:x3; val_offset:96228*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96228*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227949 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227949; op2val:0x0;
op3val:0x2ffffff; valaddr_reg:x3; val_offset:96231*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96231*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf8000000; valaddr_reg:x3; val_offset:96234*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96234*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf8000001; valaddr_reg:x3; val_offset:96237*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96237*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf8000003; valaddr_reg:x3; val_offset:96240*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96240*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf8000007; valaddr_reg:x3; val_offset:96243*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96243*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf800000f; valaddr_reg:x3; val_offset:96246*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96246*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf800001f; valaddr_reg:x3; val_offset:96249*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96249*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf800003f; valaddr_reg:x3; val_offset:96252*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96252*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf800007f; valaddr_reg:x3; val_offset:96255*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96255*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf80000ff; valaddr_reg:x3; val_offset:96258*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96258*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf80001ff; valaddr_reg:x3; val_offset:96261*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96261*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf80003ff; valaddr_reg:x3; val_offset:96264*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96264*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf80007ff; valaddr_reg:x3; val_offset:96267*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96267*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf8000fff; valaddr_reg:x3; val_offset:96270*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96270*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf8001fff; valaddr_reg:x3; val_offset:96273*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96273*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf8003fff; valaddr_reg:x3; val_offset:96276*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96276*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf8007fff; valaddr_reg:x3; val_offset:96279*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96279*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf800ffff; valaddr_reg:x3; val_offset:96282*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96282*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf801ffff; valaddr_reg:x3; val_offset:96285*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96285*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf803ffff; valaddr_reg:x3; val_offset:96288*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96288*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf807ffff; valaddr_reg:x3; val_offset:96291*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96291*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf80fffff; valaddr_reg:x3; val_offset:96294*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96294*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf81fffff; valaddr_reg:x3; val_offset:96297*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96297*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf83fffff; valaddr_reg:x3; val_offset:96300*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96300*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf8400000; valaddr_reg:x3; val_offset:96303*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96303*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf8600000; valaddr_reg:x3; val_offset:96306*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96306*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf8700000; valaddr_reg:x3; val_offset:96309*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96309*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf8780000; valaddr_reg:x3; val_offset:96312*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96312*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87c0000; valaddr_reg:x3; val_offset:96315*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96315*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87e0000; valaddr_reg:x3; val_offset:96318*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96318*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87f0000; valaddr_reg:x3; val_offset:96321*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96321*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87f8000; valaddr_reg:x3; val_offset:96324*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96324*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87fc000; valaddr_reg:x3; val_offset:96327*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96327*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87fe000; valaddr_reg:x3; val_offset:96330*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96330*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87ff000; valaddr_reg:x3; val_offset:96333*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96333*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87ff800; valaddr_reg:x3; val_offset:96336*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96336*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87ffc00; valaddr_reg:x3; val_offset:96339*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96339*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87ffe00; valaddr_reg:x3; val_offset:96342*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96342*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87fff00; valaddr_reg:x3; val_offset:96345*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96345*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87fff80; valaddr_reg:x3; val_offset:96348*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96348*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87fffc0; valaddr_reg:x3; val_offset:96351*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96351*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87fffe0; valaddr_reg:x3; val_offset:96354*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96354*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87ffff0; valaddr_reg:x3; val_offset:96357*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96357*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87ffff8; valaddr_reg:x3; val_offset:96360*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96360*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87ffffc; valaddr_reg:x3; val_offset:96363*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96363*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87ffffe; valaddr_reg:x3; val_offset:96366*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96366*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xf87fffff; valaddr_reg:x3; val_offset:96369*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96369*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xff000001; valaddr_reg:x3; val_offset:96372*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96372*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xff000003; valaddr_reg:x3; val_offset:96375*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96375*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xff000007; valaddr_reg:x3; val_offset:96378*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96378*0 + 3*250*FLEN/8, x4, x1, x2)

inst_32127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23295a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x48d4e6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23295a; op2val:0xbfc8d4e6;
op3val:0xff199999; valaddr_reg:x3; val_offset:96381*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96381*0 + 3*250*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2132955090,32,FLEN)
NAN_BOXED(1070195214,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943040,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943041,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943043,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943047,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943055,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943071,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943103,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943167,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943295,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943551,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41944063,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41945087,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41947135,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41951231,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41959423,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41975807,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42008575,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42074111,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42205183,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42467327,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42991615,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(44040191,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(46137343,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(46137344,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(48234496,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(49283072,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(49807360,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50069504,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50200576,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50266112,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50298880,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50315264,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50323456,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50327552,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50329600,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50330624,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331136,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331392,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331520,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331584,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331616,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331632,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331640,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331644,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331646,32,FLEN)
NAN_BOXED(2132965705,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331647,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160749568,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160749569,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160749571,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160749575,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160749583,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160749599,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160749631,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160749695,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160749823,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160750079,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160750591,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160751615,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160753663,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160757759,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160765951,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160782335,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160815103,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4160880639,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4161011711,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4161273855,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4161798143,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4162846719,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4164943871,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4164943872,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4167041024,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4168089600,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4168613888,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4168876032,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169007104,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169072640,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169105408,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169121792,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169129984,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169134080,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169136128,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169137152,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169137664,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169137920,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169138048,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169138112,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169138144,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169138160,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169138168,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169138172,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169138174,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4169138175,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2133010778,32,FLEN)
NAN_BOXED(3217609958,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
