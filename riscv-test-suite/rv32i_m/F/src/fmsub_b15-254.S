
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_32384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:97152*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97152*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:97155*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97155*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:97158*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97158*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:97161*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97161*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:97164*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97164*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:97167*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97167*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:97170*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97170*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:97173*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97173*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:97176*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97176*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:97179*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97179*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:97182*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97182*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:97185*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97185*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:97188*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97188*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:97191*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97191*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82800000; valaddr_reg:x3; val_offset:97194*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97194*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82800001; valaddr_reg:x3; val_offset:97197*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97197*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82800003; valaddr_reg:x3; val_offset:97200*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97200*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82800007; valaddr_reg:x3; val_offset:97203*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97203*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x8280000f; valaddr_reg:x3; val_offset:97206*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97206*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x8280001f; valaddr_reg:x3; val_offset:97209*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97209*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x8280003f; valaddr_reg:x3; val_offset:97212*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97212*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x8280007f; valaddr_reg:x3; val_offset:97215*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97215*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x828000ff; valaddr_reg:x3; val_offset:97218*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97218*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x828001ff; valaddr_reg:x3; val_offset:97221*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97221*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x828003ff; valaddr_reg:x3; val_offset:97224*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97224*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x828007ff; valaddr_reg:x3; val_offset:97227*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97227*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82800fff; valaddr_reg:x3; val_offset:97230*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97230*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82801fff; valaddr_reg:x3; val_offset:97233*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97233*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82803fff; valaddr_reg:x3; val_offset:97236*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97236*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82807fff; valaddr_reg:x3; val_offset:97239*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97239*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x8280ffff; valaddr_reg:x3; val_offset:97242*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97242*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x8281ffff; valaddr_reg:x3; val_offset:97245*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97245*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x8283ffff; valaddr_reg:x3; val_offset:97248*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97248*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x8287ffff; valaddr_reg:x3; val_offset:97251*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97251*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x828fffff; valaddr_reg:x3; val_offset:97254*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97254*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x829fffff; valaddr_reg:x3; val_offset:97257*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97257*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82bfffff; valaddr_reg:x3; val_offset:97260*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97260*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82c00000; valaddr_reg:x3; val_offset:97263*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97263*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82e00000; valaddr_reg:x3; val_offset:97266*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97266*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82f00000; valaddr_reg:x3; val_offset:97269*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97269*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82f80000; valaddr_reg:x3; val_offset:97272*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97272*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82fc0000; valaddr_reg:x3; val_offset:97275*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97275*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82fe0000; valaddr_reg:x3; val_offset:97278*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97278*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82ff0000; valaddr_reg:x3; val_offset:97281*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97281*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82ff8000; valaddr_reg:x3; val_offset:97284*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97284*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82ffc000; valaddr_reg:x3; val_offset:97287*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97287*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82ffe000; valaddr_reg:x3; val_offset:97290*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97290*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82fff000; valaddr_reg:x3; val_offset:97293*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97293*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82fff800; valaddr_reg:x3; val_offset:97296*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97296*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82fffc00; valaddr_reg:x3; val_offset:97299*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97299*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82fffe00; valaddr_reg:x3; val_offset:97302*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97302*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82ffff00; valaddr_reg:x3; val_offset:97305*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97305*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82ffff80; valaddr_reg:x3; val_offset:97308*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97308*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82ffffc0; valaddr_reg:x3; val_offset:97311*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97311*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82ffffe0; valaddr_reg:x3; val_offset:97314*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97314*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82fffff0; valaddr_reg:x3; val_offset:97317*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97317*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82fffff8; valaddr_reg:x3; val_offset:97320*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97320*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82fffffc; valaddr_reg:x3; val_offset:97323*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97323*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82fffffe; valaddr_reg:x3; val_offset:97326*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97326*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24ebef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24ebef; op2val:0x80000000;
op3val:0x82ffffff; valaddr_reg:x3; val_offset:97329*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97329*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef000000; valaddr_reg:x3; val_offset:97332*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97332*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef000001; valaddr_reg:x3; val_offset:97335*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97335*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef000003; valaddr_reg:x3; val_offset:97338*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97338*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef000007; valaddr_reg:x3; val_offset:97341*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97341*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef00000f; valaddr_reg:x3; val_offset:97344*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97344*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef00001f; valaddr_reg:x3; val_offset:97347*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97347*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef00003f; valaddr_reg:x3; val_offset:97350*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97350*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef00007f; valaddr_reg:x3; val_offset:97353*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97353*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef0000ff; valaddr_reg:x3; val_offset:97356*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97356*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef0001ff; valaddr_reg:x3; val_offset:97359*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97359*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef0003ff; valaddr_reg:x3; val_offset:97362*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97362*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef0007ff; valaddr_reg:x3; val_offset:97365*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97365*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef000fff; valaddr_reg:x3; val_offset:97368*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97368*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef001fff; valaddr_reg:x3; val_offset:97371*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97371*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef003fff; valaddr_reg:x3; val_offset:97374*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97374*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef007fff; valaddr_reg:x3; val_offset:97377*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97377*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef00ffff; valaddr_reg:x3; val_offset:97380*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97380*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef01ffff; valaddr_reg:x3; val_offset:97383*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97383*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef03ffff; valaddr_reg:x3; val_offset:97386*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97386*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef07ffff; valaddr_reg:x3; val_offset:97389*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97389*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef0fffff; valaddr_reg:x3; val_offset:97392*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97392*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef1fffff; valaddr_reg:x3; val_offset:97395*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97395*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef3fffff; valaddr_reg:x3; val_offset:97398*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97398*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef400000; valaddr_reg:x3; val_offset:97401*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97401*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef600000; valaddr_reg:x3; val_offset:97404*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97404*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef700000; valaddr_reg:x3; val_offset:97407*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97407*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef780000; valaddr_reg:x3; val_offset:97410*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97410*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7c0000; valaddr_reg:x3; val_offset:97413*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97413*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7e0000; valaddr_reg:x3; val_offset:97416*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97416*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7f0000; valaddr_reg:x3; val_offset:97419*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97419*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7f8000; valaddr_reg:x3; val_offset:97422*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97422*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7fc000; valaddr_reg:x3; val_offset:97425*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97425*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7fe000; valaddr_reg:x3; val_offset:97428*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97428*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7ff000; valaddr_reg:x3; val_offset:97431*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97431*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7ff800; valaddr_reg:x3; val_offset:97434*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97434*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7ffc00; valaddr_reg:x3; val_offset:97437*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97437*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7ffe00; valaddr_reg:x3; val_offset:97440*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97440*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7fff00; valaddr_reg:x3; val_offset:97443*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97443*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7fff80; valaddr_reg:x3; val_offset:97446*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97446*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7fffc0; valaddr_reg:x3; val_offset:97449*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97449*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7fffe0; valaddr_reg:x3; val_offset:97452*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97452*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7ffff0; valaddr_reg:x3; val_offset:97455*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97455*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7ffff8; valaddr_reg:x3; val_offset:97458*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97458*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7ffffc; valaddr_reg:x3; val_offset:97461*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97461*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7ffffe; valaddr_reg:x3; val_offset:97464*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97464*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xde and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xef7fffff; valaddr_reg:x3; val_offset:97467*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97467*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xff000001; valaddr_reg:x3; val_offset:97470*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97470*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xff000003; valaddr_reg:x3; val_offset:97473*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97473*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xff000007; valaddr_reg:x3; val_offset:97476*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97476*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xff199999; valaddr_reg:x3; val_offset:97479*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97479*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xff249249; valaddr_reg:x3; val_offset:97482*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97482*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xff333333; valaddr_reg:x3; val_offset:97485*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97485*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:97488*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97488*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:97491*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97491*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xff444444; valaddr_reg:x3; val_offset:97494*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97494*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:97497*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97497*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:97500*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97500*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xff666666; valaddr_reg:x3; val_offset:97503*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97503*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:97506*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97506*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:97509*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97509*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:97512*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97512*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255c5f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x46291b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255c5f; op2val:0xbfc6291b;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:97515*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97515*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb800000; valaddr_reg:x3; val_offset:97518*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97518*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb800001; valaddr_reg:x3; val_offset:97521*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97521*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb800003; valaddr_reg:x3; val_offset:97524*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97524*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb800007; valaddr_reg:x3; val_offset:97527*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97527*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb80000f; valaddr_reg:x3; val_offset:97530*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97530*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb80001f; valaddr_reg:x3; val_offset:97533*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97533*0 + 3*253*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426688,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426689,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426691,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426695,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426703,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426719,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426751,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426815,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426943,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189427199,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189427711,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189428735,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189430783,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189434879,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189443071,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189459455,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189492223,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189557759,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189688831,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189950975,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2190475263,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2191523839,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2193620991,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2193620992,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2195718144,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2196766720,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197291008,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197553152,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197684224,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197749760,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197782528,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197798912,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197807104,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197811200,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197813248,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197814272,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197814784,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815040,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815168,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815232,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815264,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815280,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815288,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815292,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815294,32,FLEN)
NAN_BOXED(2133126127,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815295,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009754624,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009754625,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009754627,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009754631,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009754639,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009754655,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009754687,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009754751,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009754879,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009755135,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009755647,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009756671,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009758719,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009762815,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009771007,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009787391,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009820159,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4009885695,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4010016767,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4010278911,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4010803199,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4011851775,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4013948927,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4013948928,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4016046080,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4017094656,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4017618944,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4017881088,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018012160,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018077696,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018110464,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018126848,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018135040,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018139136,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018141184,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018142208,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018142720,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018142976,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018143104,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018143168,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018143200,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018143216,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018143224,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018143228,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018143230,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4018143231,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2133154911,32,FLEN)
NAN_BOXED(3217434907,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219469824,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219469825,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219469827,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219469831,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219469839,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219469855,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
