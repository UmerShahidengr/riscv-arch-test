
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_32512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb80003f; valaddr_reg:x3; val_offset:97536*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97536*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb80007f; valaddr_reg:x3; val_offset:97539*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97539*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb8000ff; valaddr_reg:x3; val_offset:97542*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97542*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb8001ff; valaddr_reg:x3; val_offset:97545*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97545*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb8003ff; valaddr_reg:x3; val_offset:97548*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97548*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb8007ff; valaddr_reg:x3; val_offset:97551*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97551*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb800fff; valaddr_reg:x3; val_offset:97554*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97554*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb801fff; valaddr_reg:x3; val_offset:97557*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97557*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb803fff; valaddr_reg:x3; val_offset:97560*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97560*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb807fff; valaddr_reg:x3; val_offset:97563*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97563*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb80ffff; valaddr_reg:x3; val_offset:97566*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97566*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb81ffff; valaddr_reg:x3; val_offset:97569*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97569*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb83ffff; valaddr_reg:x3; val_offset:97572*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97572*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb87ffff; valaddr_reg:x3; val_offset:97575*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97575*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb8fffff; valaddr_reg:x3; val_offset:97578*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97578*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfb9fffff; valaddr_reg:x3; val_offset:97581*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97581*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbbfffff; valaddr_reg:x3; val_offset:97584*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97584*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbc00000; valaddr_reg:x3; val_offset:97587*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97587*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbe00000; valaddr_reg:x3; val_offset:97590*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97590*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbf00000; valaddr_reg:x3; val_offset:97593*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97593*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbf80000; valaddr_reg:x3; val_offset:97596*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97596*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbfc0000; valaddr_reg:x3; val_offset:97599*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97599*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbfe0000; valaddr_reg:x3; val_offset:97602*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97602*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbff0000; valaddr_reg:x3; val_offset:97605*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97605*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbff8000; valaddr_reg:x3; val_offset:97608*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97608*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbffc000; valaddr_reg:x3; val_offset:97611*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97611*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbffe000; valaddr_reg:x3; val_offset:97614*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97614*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbfff000; valaddr_reg:x3; val_offset:97617*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97617*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbfff800; valaddr_reg:x3; val_offset:97620*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97620*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbfffc00; valaddr_reg:x3; val_offset:97623*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97623*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbfffe00; valaddr_reg:x3; val_offset:97626*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97626*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbffff00; valaddr_reg:x3; val_offset:97629*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97629*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbffff80; valaddr_reg:x3; val_offset:97632*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97632*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbffffc0; valaddr_reg:x3; val_offset:97635*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97635*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbffffe0; valaddr_reg:x3; val_offset:97638*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97638*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbfffff0; valaddr_reg:x3; val_offset:97641*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97641*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbfffff8; valaddr_reg:x3; val_offset:97644*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97644*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbfffffc; valaddr_reg:x3; val_offset:97647*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97647*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbfffffe; valaddr_reg:x3; val_offset:97650*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97650*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xfbffffff; valaddr_reg:x3; val_offset:97653*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97653*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xff000001; valaddr_reg:x3; val_offset:97656*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97656*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xff000003; valaddr_reg:x3; val_offset:97659*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97659*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xff000007; valaddr_reg:x3; val_offset:97662*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97662*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xff199999; valaddr_reg:x3; val_offset:97665*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97665*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xff249249; valaddr_reg:x3; val_offset:97668*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97668*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xff333333; valaddr_reg:x3; val_offset:97671*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97671*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:97674*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97674*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:97677*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97677*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xff444444; valaddr_reg:x3; val_offset:97680*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97680*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:97683*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97683*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:97686*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97686*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xff666666; valaddr_reg:x3; val_offset:97689*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97689*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:97692*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97692*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:97695*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97695*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:97698*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97698*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258545 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x45f825 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258545; op2val:0xbfc5f825;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:97701*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97701*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:97704*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97704*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:97707*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97707*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:97710*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97710*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:97713*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97713*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:97716*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97716*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:97719*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97719*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:97722*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97722*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:97725*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97725*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:97728*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97728*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:97731*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97731*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:97734*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97734*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:97737*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97737*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:97740*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97740*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:97743*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97743*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:97746*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97746*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:97749*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97749*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f800000; valaddr_reg:x3; val_offset:97752*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97752*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f800001; valaddr_reg:x3; val_offset:97755*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97755*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f800003; valaddr_reg:x3; val_offset:97758*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97758*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f800007; valaddr_reg:x3; val_offset:97761*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97761*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f80000f; valaddr_reg:x3; val_offset:97764*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97764*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f80001f; valaddr_reg:x3; val_offset:97767*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97767*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f80003f; valaddr_reg:x3; val_offset:97770*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97770*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f80007f; valaddr_reg:x3; val_offset:97773*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97773*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f8000ff; valaddr_reg:x3; val_offset:97776*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97776*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f8001ff; valaddr_reg:x3; val_offset:97779*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97779*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f8003ff; valaddr_reg:x3; val_offset:97782*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97782*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f8007ff; valaddr_reg:x3; val_offset:97785*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97785*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f800fff; valaddr_reg:x3; val_offset:97788*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97788*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f801fff; valaddr_reg:x3; val_offset:97791*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97791*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f803fff; valaddr_reg:x3; val_offset:97794*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97794*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f807fff; valaddr_reg:x3; val_offset:97797*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97797*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f80ffff; valaddr_reg:x3; val_offset:97800*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97800*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f81ffff; valaddr_reg:x3; val_offset:97803*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97803*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f83ffff; valaddr_reg:x3; val_offset:97806*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97806*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f87ffff; valaddr_reg:x3; val_offset:97809*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97809*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f8fffff; valaddr_reg:x3; val_offset:97812*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97812*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8f9fffff; valaddr_reg:x3; val_offset:97815*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97815*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8fbfffff; valaddr_reg:x3; val_offset:97818*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97818*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8fc00000; valaddr_reg:x3; val_offset:97821*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97821*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8fe00000; valaddr_reg:x3; val_offset:97824*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97824*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8ff00000; valaddr_reg:x3; val_offset:97827*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97827*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8ff80000; valaddr_reg:x3; val_offset:97830*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97830*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8ffc0000; valaddr_reg:x3; val_offset:97833*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97833*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8ffe0000; valaddr_reg:x3; val_offset:97836*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97836*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8fff0000; valaddr_reg:x3; val_offset:97839*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97839*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8fff8000; valaddr_reg:x3; val_offset:97842*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97842*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8fffc000; valaddr_reg:x3; val_offset:97845*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97845*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8fffe000; valaddr_reg:x3; val_offset:97848*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97848*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8ffff000; valaddr_reg:x3; val_offset:97851*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97851*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8ffff800; valaddr_reg:x3; val_offset:97854*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97854*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8ffffc00; valaddr_reg:x3; val_offset:97857*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97857*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8ffffe00; valaddr_reg:x3; val_offset:97860*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97860*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8fffff00; valaddr_reg:x3; val_offset:97863*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97863*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8fffff80; valaddr_reg:x3; val_offset:97866*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97866*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8fffffc0; valaddr_reg:x3; val_offset:97869*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97869*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8fffffe0; valaddr_reg:x3; val_offset:97872*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97872*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8ffffff0; valaddr_reg:x3; val_offset:97875*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97875*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8ffffff8; valaddr_reg:x3; val_offset:97878*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97878*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8ffffffc; valaddr_reg:x3; val_offset:97881*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97881*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8ffffffe; valaddr_reg:x3; val_offset:97884*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97884*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x258f9d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f258f9d; op2val:0x80000000;
op3val:0x8fffffff; valaddr_reg:x3; val_offset:97887*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97887*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xbf800001; valaddr_reg:x3; val_offset:97890*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97890*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xbf800003; valaddr_reg:x3; val_offset:97893*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97893*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xbf800007; valaddr_reg:x3; val_offset:97896*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97896*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xbf999999; valaddr_reg:x3; val_offset:97899*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97899*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:97902*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97902*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:97905*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97905*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:97908*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97908*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:97911*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97911*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:97914*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97914*0 + 3*254*FLEN/8, x4, x1, x2)

inst_32639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:97917*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97917*0 + 3*254*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219469887,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219469951,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219470079,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219470335,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219470847,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219471871,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219473919,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219478015,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219486207,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219502591,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219535359,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219600895,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219731967,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4219994111,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4220518399,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4221566975,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4223664127,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4223664128,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4225761280,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4226809856,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227334144,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227596288,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227727360,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227792896,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227825664,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227842048,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227850240,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227854336,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227856384,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227857408,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227857920,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227858176,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227858304,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227858368,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227858400,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227858416,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227858424,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227858428,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227858430,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4227858431,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2133165381,32,FLEN)
NAN_BOXED(3217422373,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530496,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530497,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530499,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530503,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530511,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530527,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530559,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530623,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530751,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407531007,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407531519,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407532543,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407534591,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407538687,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407546879,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407563263,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407596031,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407661567,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407792639,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2408054783,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2408579071,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2409627647,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2411724799,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2411724800,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2413821952,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2414870528,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415394816,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415656960,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415788032,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415853568,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415886336,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415902720,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415910912,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415915008,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415917056,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918080,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918592,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918848,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918976,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919040,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919072,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919088,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919096,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919100,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919102,32,FLEN)
NAN_BOXED(2133168029,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919103,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
