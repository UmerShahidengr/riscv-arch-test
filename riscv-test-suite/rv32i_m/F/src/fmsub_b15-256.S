
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_32640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:97920*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97920*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:97923*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97923*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:97926*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97926*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:97929*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97929*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:97932*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97932*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:97935*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97935*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1800000; valaddr_reg:x3; val_offset:97938*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97938*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1800001; valaddr_reg:x3; val_offset:97941*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97941*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1800003; valaddr_reg:x3; val_offset:97944*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97944*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1800007; valaddr_reg:x3; val_offset:97947*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97947*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc180000f; valaddr_reg:x3; val_offset:97950*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97950*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc180001f; valaddr_reg:x3; val_offset:97953*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97953*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc180003f; valaddr_reg:x3; val_offset:97956*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97956*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc180007f; valaddr_reg:x3; val_offset:97959*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97959*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc18000ff; valaddr_reg:x3; val_offset:97962*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97962*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc18001ff; valaddr_reg:x3; val_offset:97965*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97965*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc18003ff; valaddr_reg:x3; val_offset:97968*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97968*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc18007ff; valaddr_reg:x3; val_offset:97971*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97971*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1800fff; valaddr_reg:x3; val_offset:97974*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97974*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1801fff; valaddr_reg:x3; val_offset:97977*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97977*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1803fff; valaddr_reg:x3; val_offset:97980*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97980*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1807fff; valaddr_reg:x3; val_offset:97983*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97983*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc180ffff; valaddr_reg:x3; val_offset:97986*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97986*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc181ffff; valaddr_reg:x3; val_offset:97989*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97989*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc183ffff; valaddr_reg:x3; val_offset:97992*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97992*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc187ffff; valaddr_reg:x3; val_offset:97995*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97995*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc18fffff; valaddr_reg:x3; val_offset:97998*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97998*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc19fffff; valaddr_reg:x3; val_offset:98001*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98001*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1bfffff; valaddr_reg:x3; val_offset:98004*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98004*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1c00000; valaddr_reg:x3; val_offset:98007*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98007*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1e00000; valaddr_reg:x3; val_offset:98010*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98010*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1f00000; valaddr_reg:x3; val_offset:98013*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98013*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1f80000; valaddr_reg:x3; val_offset:98016*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98016*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1fc0000; valaddr_reg:x3; val_offset:98019*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98019*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1fe0000; valaddr_reg:x3; val_offset:98022*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98022*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1ff0000; valaddr_reg:x3; val_offset:98025*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98025*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1ff8000; valaddr_reg:x3; val_offset:98028*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98028*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1ffc000; valaddr_reg:x3; val_offset:98031*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98031*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1ffe000; valaddr_reg:x3; val_offset:98034*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98034*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1fff000; valaddr_reg:x3; val_offset:98037*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98037*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1fff800; valaddr_reg:x3; val_offset:98040*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98040*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1fffc00; valaddr_reg:x3; val_offset:98043*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98043*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1fffe00; valaddr_reg:x3; val_offset:98046*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98046*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1ffff00; valaddr_reg:x3; val_offset:98049*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98049*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1ffff80; valaddr_reg:x3; val_offset:98052*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98052*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1ffffc0; valaddr_reg:x3; val_offset:98055*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98055*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1ffffe0; valaddr_reg:x3; val_offset:98058*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98058*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1fffff0; valaddr_reg:x3; val_offset:98061*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98061*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1fffff8; valaddr_reg:x3; val_offset:98064*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98064*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1fffffc; valaddr_reg:x3; val_offset:98067*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98067*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1fffffe; valaddr_reg:x3; val_offset:98070*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98070*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x263b79 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3147c9 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f263b79; op2val:0x803147c9;
op3val:0xc1ffffff; valaddr_reg:x3; val_offset:98073*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98073*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf5000000; valaddr_reg:x3; val_offset:98076*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98076*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf5000001; valaddr_reg:x3; val_offset:98079*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98079*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf5000003; valaddr_reg:x3; val_offset:98082*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98082*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf5000007; valaddr_reg:x3; val_offset:98085*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98085*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf500000f; valaddr_reg:x3; val_offset:98088*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98088*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf500001f; valaddr_reg:x3; val_offset:98091*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98091*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf500003f; valaddr_reg:x3; val_offset:98094*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98094*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf500007f; valaddr_reg:x3; val_offset:98097*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98097*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf50000ff; valaddr_reg:x3; val_offset:98100*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98100*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf50001ff; valaddr_reg:x3; val_offset:98103*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98103*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf50003ff; valaddr_reg:x3; val_offset:98106*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98106*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf50007ff; valaddr_reg:x3; val_offset:98109*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98109*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf5000fff; valaddr_reg:x3; val_offset:98112*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98112*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf5001fff; valaddr_reg:x3; val_offset:98115*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98115*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf5003fff; valaddr_reg:x3; val_offset:98118*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98118*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf5007fff; valaddr_reg:x3; val_offset:98121*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98121*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf500ffff; valaddr_reg:x3; val_offset:98124*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98124*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf501ffff; valaddr_reg:x3; val_offset:98127*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98127*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf503ffff; valaddr_reg:x3; val_offset:98130*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98130*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf507ffff; valaddr_reg:x3; val_offset:98133*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98133*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf50fffff; valaddr_reg:x3; val_offset:98136*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98136*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf51fffff; valaddr_reg:x3; val_offset:98139*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98139*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf53fffff; valaddr_reg:x3; val_offset:98142*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98142*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf5400000; valaddr_reg:x3; val_offset:98145*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98145*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf5600000; valaddr_reg:x3; val_offset:98148*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98148*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf5700000; valaddr_reg:x3; val_offset:98151*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98151*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf5780000; valaddr_reg:x3; val_offset:98154*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98154*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57c0000; valaddr_reg:x3; val_offset:98157*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98157*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57e0000; valaddr_reg:x3; val_offset:98160*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98160*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57f0000; valaddr_reg:x3; val_offset:98163*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98163*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57f8000; valaddr_reg:x3; val_offset:98166*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98166*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57fc000; valaddr_reg:x3; val_offset:98169*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98169*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57fe000; valaddr_reg:x3; val_offset:98172*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98172*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57ff000; valaddr_reg:x3; val_offset:98175*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98175*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57ff800; valaddr_reg:x3; val_offset:98178*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98178*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57ffc00; valaddr_reg:x3; val_offset:98181*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98181*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57ffe00; valaddr_reg:x3; val_offset:98184*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98184*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57fff00; valaddr_reg:x3; val_offset:98187*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98187*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57fff80; valaddr_reg:x3; val_offset:98190*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98190*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57fffc0; valaddr_reg:x3; val_offset:98193*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98193*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57fffe0; valaddr_reg:x3; val_offset:98196*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98196*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57ffff0; valaddr_reg:x3; val_offset:98199*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98199*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57ffff8; valaddr_reg:x3; val_offset:98202*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98202*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57ffffc; valaddr_reg:x3; val_offset:98205*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98205*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57ffffe; valaddr_reg:x3; val_offset:98208*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98208*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xf57fffff; valaddr_reg:x3; val_offset:98211*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98211*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xff000001; valaddr_reg:x3; val_offset:98214*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98214*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xff000003; valaddr_reg:x3; val_offset:98217*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98217*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xff000007; valaddr_reg:x3; val_offset:98220*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98220*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xff199999; valaddr_reg:x3; val_offset:98223*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98223*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xff249249; valaddr_reg:x3; val_offset:98226*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98226*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xff333333; valaddr_reg:x3; val_offset:98229*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98229*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:98232*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98232*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:98235*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98235*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xff444444; valaddr_reg:x3; val_offset:98238*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98238*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:98241*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98241*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:98244*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98244*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xff666666; valaddr_reg:x3; val_offset:98247*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98247*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:98250*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98250*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:98253*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98253*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:98256*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98256*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26b03d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x449511 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26b03d; op2val:0xbfc49511;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:98259*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98259*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27dfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30cc5e and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27dfe7; op2val:0x8030cc5e;
op3val:0xad800000; valaddr_reg:x3; val_offset:98262*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98262*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27dfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30cc5e and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27dfe7; op2val:0x8030cc5e;
op3val:0xad800001; valaddr_reg:x3; val_offset:98265*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98265*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27dfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30cc5e and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27dfe7; op2val:0x8030cc5e;
op3val:0xad800003; valaddr_reg:x3; val_offset:98268*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98268*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27dfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30cc5e and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27dfe7; op2val:0x8030cc5e;
op3val:0xad800007; valaddr_reg:x3; val_offset:98271*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98271*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27dfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30cc5e and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27dfe7; op2val:0x8030cc5e;
op3val:0xad80000f; valaddr_reg:x3; val_offset:98274*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98274*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27dfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30cc5e and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27dfe7; op2val:0x8030cc5e;
op3val:0xad80001f; valaddr_reg:x3; val_offset:98277*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98277*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27dfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30cc5e and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27dfe7; op2val:0x8030cc5e;
op3val:0xad80003f; valaddr_reg:x3; val_offset:98280*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98280*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27dfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30cc5e and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27dfe7; op2val:0x8030cc5e;
op3val:0xad80007f; valaddr_reg:x3; val_offset:98283*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98283*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27dfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30cc5e and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27dfe7; op2val:0x8030cc5e;
op3val:0xad8000ff; valaddr_reg:x3; val_offset:98286*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98286*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27dfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30cc5e and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27dfe7; op2val:0x8030cc5e;
op3val:0xad8001ff; valaddr_reg:x3; val_offset:98289*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98289*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27dfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30cc5e and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27dfe7; op2val:0x8030cc5e;
op3val:0xad8003ff; valaddr_reg:x3; val_offset:98292*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98292*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27dfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30cc5e and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27dfe7; op2val:0x8030cc5e;
op3val:0xad8007ff; valaddr_reg:x3; val_offset:98295*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98295*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27dfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30cc5e and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27dfe7; op2val:0x8030cc5e;
op3val:0xad800fff; valaddr_reg:x3; val_offset:98298*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98298*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27dfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x30cc5e and fs3 == 1 and fe3 == 0x5b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27dfe7; op2val:0x8030cc5e;
op3val:0xad801fff; valaddr_reg:x3; val_offset:98301*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98301*0 + 3*255*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246391296,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246391297,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246391299,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246391303,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246391311,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246391327,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246391359,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246391423,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246391551,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246391807,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246392319,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246393343,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246395391,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246399487,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246407679,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246424063,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246456831,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246522367,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246653439,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3246915583,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3247439871,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3248488447,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3250585599,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3250585600,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3252682752,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3253731328,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254255616,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254517760,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254648832,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254714368,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254747136,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254763520,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254771712,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254775808,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254777856,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254778880,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254779392,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254779648,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254779776,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254779840,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254779872,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254779888,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254779896,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254779900,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254779902,32,FLEN)
NAN_BOXED(2133212025,32,FLEN)
NAN_BOXED(2150713289,32,FLEN)
NAN_BOXED(3254779903,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110417920,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110417921,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110417923,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110417927,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110417935,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110417951,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110417983,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110418047,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110418175,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110418431,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110418943,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110419967,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110422015,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110426111,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110434303,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110450687,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110483455,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110548991,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110680063,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4110942207,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4111466495,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4112515071,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4114612223,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4114612224,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4116709376,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4117757952,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118282240,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118544384,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118675456,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118740992,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118773760,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118790144,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118798336,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118802432,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118804480,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118805504,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118806016,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118806272,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118806400,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118806464,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118806496,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118806512,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118806520,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118806524,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118806526,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4118806527,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2133241917,32,FLEN)
NAN_BOXED(3217331473,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2133319655,32,FLEN)
NAN_BOXED(2150681694,32,FLEN)
NAN_BOXED(2910846976,32,FLEN)
NAN_BOXED(2133319655,32,FLEN)
NAN_BOXED(2150681694,32,FLEN)
NAN_BOXED(2910846977,32,FLEN)
NAN_BOXED(2133319655,32,FLEN)
NAN_BOXED(2150681694,32,FLEN)
NAN_BOXED(2910846979,32,FLEN)
NAN_BOXED(2133319655,32,FLEN)
NAN_BOXED(2150681694,32,FLEN)
NAN_BOXED(2910846983,32,FLEN)
NAN_BOXED(2133319655,32,FLEN)
NAN_BOXED(2150681694,32,FLEN)
NAN_BOXED(2910846991,32,FLEN)
NAN_BOXED(2133319655,32,FLEN)
NAN_BOXED(2150681694,32,FLEN)
NAN_BOXED(2910847007,32,FLEN)
NAN_BOXED(2133319655,32,FLEN)
NAN_BOXED(2150681694,32,FLEN)
NAN_BOXED(2910847039,32,FLEN)
NAN_BOXED(2133319655,32,FLEN)
NAN_BOXED(2150681694,32,FLEN)
NAN_BOXED(2910847103,32,FLEN)
NAN_BOXED(2133319655,32,FLEN)
NAN_BOXED(2150681694,32,FLEN)
NAN_BOXED(2910847231,32,FLEN)
NAN_BOXED(2133319655,32,FLEN)
NAN_BOXED(2150681694,32,FLEN)
NAN_BOXED(2910847487,32,FLEN)
NAN_BOXED(2133319655,32,FLEN)
NAN_BOXED(2150681694,32,FLEN)
NAN_BOXED(2910847999,32,FLEN)
NAN_BOXED(2133319655,32,FLEN)
NAN_BOXED(2150681694,32,FLEN)
NAN_BOXED(2910849023,32,FLEN)
NAN_BOXED(2133319655,32,FLEN)
NAN_BOXED(2150681694,32,FLEN)
NAN_BOXED(2910851071,32,FLEN)
NAN_BOXED(2133319655,32,FLEN)
NAN_BOXED(2150681694,32,FLEN)
NAN_BOXED(2910855167,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
