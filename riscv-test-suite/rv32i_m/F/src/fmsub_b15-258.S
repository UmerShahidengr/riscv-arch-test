
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_32896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7903ffff; valaddr_reg:x3; val_offset:98688*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98688*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7907ffff; valaddr_reg:x3; val_offset:98691*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98691*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x790fffff; valaddr_reg:x3; val_offset:98694*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98694*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x791fffff; valaddr_reg:x3; val_offset:98697*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98697*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x793fffff; valaddr_reg:x3; val_offset:98700*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98700*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x79400000; valaddr_reg:x3; val_offset:98703*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98703*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x79600000; valaddr_reg:x3; val_offset:98706*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98706*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x79700000; valaddr_reg:x3; val_offset:98709*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98709*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x79780000; valaddr_reg:x3; val_offset:98712*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98712*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797c0000; valaddr_reg:x3; val_offset:98715*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98715*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797e0000; valaddr_reg:x3; val_offset:98718*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98718*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797f0000; valaddr_reg:x3; val_offset:98721*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98721*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797f8000; valaddr_reg:x3; val_offset:98724*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98724*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797fc000; valaddr_reg:x3; val_offset:98727*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98727*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797fe000; valaddr_reg:x3; val_offset:98730*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98730*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797ff000; valaddr_reg:x3; val_offset:98733*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98733*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797ff800; valaddr_reg:x3; val_offset:98736*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98736*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797ffc00; valaddr_reg:x3; val_offset:98739*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98739*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797ffe00; valaddr_reg:x3; val_offset:98742*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98742*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797fff00; valaddr_reg:x3; val_offset:98745*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98745*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797fff80; valaddr_reg:x3; val_offset:98748*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98748*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797fffc0; valaddr_reg:x3; val_offset:98751*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98751*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797fffe0; valaddr_reg:x3; val_offset:98754*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98754*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797ffff0; valaddr_reg:x3; val_offset:98757*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98757*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797ffff8; valaddr_reg:x3; val_offset:98760*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98760*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797ffffc; valaddr_reg:x3; val_offset:98763*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98763*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797ffffe; valaddr_reg:x3; val_offset:98766*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98766*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x797fffff; valaddr_reg:x3; val_offset:98769*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98769*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7f000001; valaddr_reg:x3; val_offset:98772*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98772*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7f000003; valaddr_reg:x3; val_offset:98775*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98775*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7f000007; valaddr_reg:x3; val_offset:98778*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98778*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7f199999; valaddr_reg:x3; val_offset:98781*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98781*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7f249249; valaddr_reg:x3; val_offset:98784*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98784*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7f333333; valaddr_reg:x3; val_offset:98787*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98787*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:98790*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98790*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:98793*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98793*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7f444444; valaddr_reg:x3; val_offset:98796*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98796*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:98799*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98799*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:98802*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98802*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7f666666; valaddr_reg:x3; val_offset:98805*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98805*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:98808*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98808*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:98811*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98811*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:98814*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98814*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2818ba and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42ef7e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2818ba; op2val:0x3fc2ef7e;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:98817*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98817*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:98820*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98820*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:98823*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98823*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:98826*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98826*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:98829*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98829*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:98832*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98832*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:98835*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98835*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:98838*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98838*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:98841*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98841*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:98844*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98844*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:98847*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98847*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:98850*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98850*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:98853*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98853*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:98856*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98856*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:98859*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98859*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:98862*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98862*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:98865*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98865*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d800000; valaddr_reg:x3; val_offset:98868*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98868*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d800001; valaddr_reg:x3; val_offset:98871*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98871*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d800003; valaddr_reg:x3; val_offset:98874*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98874*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d800007; valaddr_reg:x3; val_offset:98877*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98877*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d80000f; valaddr_reg:x3; val_offset:98880*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98880*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d80001f; valaddr_reg:x3; val_offset:98883*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98883*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d80003f; valaddr_reg:x3; val_offset:98886*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98886*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d80007f; valaddr_reg:x3; val_offset:98889*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98889*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d8000ff; valaddr_reg:x3; val_offset:98892*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98892*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d8001ff; valaddr_reg:x3; val_offset:98895*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98895*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d8003ff; valaddr_reg:x3; val_offset:98898*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98898*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d8007ff; valaddr_reg:x3; val_offset:98901*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98901*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d800fff; valaddr_reg:x3; val_offset:98904*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98904*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d801fff; valaddr_reg:x3; val_offset:98907*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98907*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d803fff; valaddr_reg:x3; val_offset:98910*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98910*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d807fff; valaddr_reg:x3; val_offset:98913*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98913*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d80ffff; valaddr_reg:x3; val_offset:98916*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98916*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d81ffff; valaddr_reg:x3; val_offset:98919*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98919*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d83ffff; valaddr_reg:x3; val_offset:98922*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98922*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d87ffff; valaddr_reg:x3; val_offset:98925*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98925*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d8fffff; valaddr_reg:x3; val_offset:98928*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98928*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8d9fffff; valaddr_reg:x3; val_offset:98931*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98931*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dbfffff; valaddr_reg:x3; val_offset:98934*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98934*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dc00000; valaddr_reg:x3; val_offset:98937*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98937*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8de00000; valaddr_reg:x3; val_offset:98940*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98940*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8df00000; valaddr_reg:x3; val_offset:98943*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98943*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8df80000; valaddr_reg:x3; val_offset:98946*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98946*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dfc0000; valaddr_reg:x3; val_offset:98949*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98949*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dfe0000; valaddr_reg:x3; val_offset:98952*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98952*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dff0000; valaddr_reg:x3; val_offset:98955*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98955*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dff8000; valaddr_reg:x3; val_offset:98958*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98958*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dffc000; valaddr_reg:x3; val_offset:98961*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98961*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dffe000; valaddr_reg:x3; val_offset:98964*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98964*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dfff000; valaddr_reg:x3; val_offset:98967*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98967*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dfff800; valaddr_reg:x3; val_offset:98970*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98970*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dfffc00; valaddr_reg:x3; val_offset:98973*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98973*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dfffe00; valaddr_reg:x3; val_offset:98976*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98976*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dffff00; valaddr_reg:x3; val_offset:98979*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98979*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dffff80; valaddr_reg:x3; val_offset:98982*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98982*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dffffc0; valaddr_reg:x3; val_offset:98985*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98985*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dffffe0; valaddr_reg:x3; val_offset:98988*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98988*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dfffff0; valaddr_reg:x3; val_offset:98991*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98991*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dfffff8; valaddr_reg:x3; val_offset:98994*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98994*0 + 3*257*FLEN/8, x4, x1, x2)

inst_32999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dfffffc; valaddr_reg:x3; val_offset:98997*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98997*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dfffffe; valaddr_reg:x3; val_offset:99000*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99000*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28535e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28535e; op2val:0x80000000;
op3val:0x8dffffff; valaddr_reg:x3; val_offset:99003*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99003*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:99006*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99006*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:99009*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99009*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:99012*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99012*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:99015*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99015*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:99018*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99018*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:99021*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99021*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:99024*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99024*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:99027*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99027*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:99030*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99030*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:99033*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99033*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:99036*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99036*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:99039*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99039*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:99042*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99042*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:99045*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99045*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:99048*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99048*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:99051*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99051*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x3000000; valaddr_reg:x3; val_offset:99054*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99054*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x3000001; valaddr_reg:x3; val_offset:99057*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99057*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x3000003; valaddr_reg:x3; val_offset:99060*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99060*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x3000007; valaddr_reg:x3; val_offset:99063*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99063*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x300000f; valaddr_reg:x3; val_offset:99066*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99066*0 + 3*257*FLEN/8, x4, x1, x2)

inst_33023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x287bf4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f287bf4; op2val:0x0;
op3val:0x300001f; valaddr_reg:x3; val_offset:99069*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99069*0 + 3*257*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2030305279,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2030567423,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2031091711,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2032140287,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2034237439,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2034237440,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2036334592,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2037383168,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2037907456,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038169600,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038300672,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038366208,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038398976,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038415360,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038423552,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038427648,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038429696,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038430720,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038431232,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038431488,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038431616,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038431680,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038431712,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038431728,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038431736,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038431740,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038431742,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2038431743,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2133334202,32,FLEN)
NAN_BOXED(1069739902,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976064,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976065,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976067,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976071,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976079,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976095,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976127,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976191,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976319,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976575,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373977087,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373978111,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373980159,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373984255,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373992447,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374008831,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374041599,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374107135,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374238207,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374500351,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2375024639,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2376073215,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2378170367,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2378170368,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2380267520,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2381316096,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2381840384,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382102528,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382233600,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382299136,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382331904,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382348288,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382356480,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382360576,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382362624,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382363648,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364160,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364416,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364544,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364608,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364640,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364656,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364664,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364668,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364670,32,FLEN)
NAN_BOXED(2133349214,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364671,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331648,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331649,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331651,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331655,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331663,32,FLEN)
NAN_BOXED(2133359604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331679,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
