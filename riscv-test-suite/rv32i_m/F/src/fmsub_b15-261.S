
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9803fff; valaddr_reg:x3; val_offset:99840*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99840*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9807fff; valaddr_reg:x3; val_offset:99843*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99843*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x980ffff; valaddr_reg:x3; val_offset:99846*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99846*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x981ffff; valaddr_reg:x3; val_offset:99849*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99849*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x983ffff; valaddr_reg:x3; val_offset:99852*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99852*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x987ffff; valaddr_reg:x3; val_offset:99855*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99855*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x98fffff; valaddr_reg:x3; val_offset:99858*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99858*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x99fffff; valaddr_reg:x3; val_offset:99861*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99861*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9bfffff; valaddr_reg:x3; val_offset:99864*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99864*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9c00000; valaddr_reg:x3; val_offset:99867*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99867*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9e00000; valaddr_reg:x3; val_offset:99870*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99870*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9f00000; valaddr_reg:x3; val_offset:99873*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99873*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9f80000; valaddr_reg:x3; val_offset:99876*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99876*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9fc0000; valaddr_reg:x3; val_offset:99879*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99879*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9fe0000; valaddr_reg:x3; val_offset:99882*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99882*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9ff0000; valaddr_reg:x3; val_offset:99885*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99885*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9ff8000; valaddr_reg:x3; val_offset:99888*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99888*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9ffc000; valaddr_reg:x3; val_offset:99891*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99891*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9ffe000; valaddr_reg:x3; val_offset:99894*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99894*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9fff000; valaddr_reg:x3; val_offset:99897*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99897*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9fff800; valaddr_reg:x3; val_offset:99900*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99900*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9fffc00; valaddr_reg:x3; val_offset:99903*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99903*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9fffe00; valaddr_reg:x3; val_offset:99906*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99906*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9ffff00; valaddr_reg:x3; val_offset:99909*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99909*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9ffff80; valaddr_reg:x3; val_offset:99912*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99912*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9ffffc0; valaddr_reg:x3; val_offset:99915*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99915*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9ffffe0; valaddr_reg:x3; val_offset:99918*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99918*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9fffff0; valaddr_reg:x3; val_offset:99921*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99921*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9fffff8; valaddr_reg:x3; val_offset:99924*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99924*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9fffffc; valaddr_reg:x3; val_offset:99927*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99927*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9fffffe; valaddr_reg:x3; val_offset:99930*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99930*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x294f17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f294f17; op2val:0x0;
op3val:0x9ffffff; valaddr_reg:x3; val_offset:99933*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99933*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x22000000; valaddr_reg:x3; val_offset:99936*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99936*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x22000001; valaddr_reg:x3; val_offset:99939*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99939*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x22000003; valaddr_reg:x3; val_offset:99942*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99942*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x22000007; valaddr_reg:x3; val_offset:99945*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99945*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x2200000f; valaddr_reg:x3; val_offset:99948*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99948*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x2200001f; valaddr_reg:x3; val_offset:99951*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99951*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x2200003f; valaddr_reg:x3; val_offset:99954*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99954*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x2200007f; valaddr_reg:x3; val_offset:99957*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99957*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x220000ff; valaddr_reg:x3; val_offset:99960*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99960*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x220001ff; valaddr_reg:x3; val_offset:99963*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99963*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x220003ff; valaddr_reg:x3; val_offset:99966*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99966*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x220007ff; valaddr_reg:x3; val_offset:99969*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99969*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x22000fff; valaddr_reg:x3; val_offset:99972*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99972*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x22001fff; valaddr_reg:x3; val_offset:99975*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99975*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x22003fff; valaddr_reg:x3; val_offset:99978*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99978*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x22007fff; valaddr_reg:x3; val_offset:99981*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99981*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x2200ffff; valaddr_reg:x3; val_offset:99984*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99984*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x2201ffff; valaddr_reg:x3; val_offset:99987*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99987*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x2203ffff; valaddr_reg:x3; val_offset:99990*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99990*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x2207ffff; valaddr_reg:x3; val_offset:99993*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99993*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x220fffff; valaddr_reg:x3; val_offset:99996*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99996*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x221fffff; valaddr_reg:x3; val_offset:99999*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99999*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x223fffff; valaddr_reg:x3; val_offset:100002*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100002*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x22400000; valaddr_reg:x3; val_offset:100005*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100005*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x22600000; valaddr_reg:x3; val_offset:100008*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100008*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x22700000; valaddr_reg:x3; val_offset:100011*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100011*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x22780000; valaddr_reg:x3; val_offset:100014*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100014*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227c0000; valaddr_reg:x3; val_offset:100017*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100017*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227e0000; valaddr_reg:x3; val_offset:100020*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100020*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227f0000; valaddr_reg:x3; val_offset:100023*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100023*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227f8000; valaddr_reg:x3; val_offset:100026*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100026*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227fc000; valaddr_reg:x3; val_offset:100029*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100029*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227fe000; valaddr_reg:x3; val_offset:100032*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100032*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227ff000; valaddr_reg:x3; val_offset:100035*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100035*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227ff800; valaddr_reg:x3; val_offset:100038*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100038*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227ffc00; valaddr_reg:x3; val_offset:100041*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100041*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227ffe00; valaddr_reg:x3; val_offset:100044*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100044*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227fff00; valaddr_reg:x3; val_offset:100047*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100047*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227fff80; valaddr_reg:x3; val_offset:100050*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100050*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227fffc0; valaddr_reg:x3; val_offset:100053*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100053*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227fffe0; valaddr_reg:x3; val_offset:100056*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100056*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227ffff0; valaddr_reg:x3; val_offset:100059*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100059*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227ffff8; valaddr_reg:x3; val_offset:100062*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100062*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227ffffc; valaddr_reg:x3; val_offset:100065*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100065*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227ffffe; valaddr_reg:x3; val_offset:100068*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100068*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x44 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x227fffff; valaddr_reg:x3; val_offset:100071*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100071*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x3f800001; valaddr_reg:x3; val_offset:100074*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100074*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x3f800003; valaddr_reg:x3; val_offset:100077*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100077*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x3f800007; valaddr_reg:x3; val_offset:100080*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100080*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x3f999999; valaddr_reg:x3; val_offset:100083*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100083*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:100086*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100086*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:100089*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100089*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:100092*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100092*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:100095*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100095*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:100098*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100098*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:100101*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100101*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:100104*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100104*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:100107*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100107*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:100110*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100110*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:100113*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100113*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:100116*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100116*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x295b7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x305eff and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f295b7b; op2val:0x305eff;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:100119*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100119*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xbf800001; valaddr_reg:x3; val_offset:100122*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100122*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xbf800003; valaddr_reg:x3; val_offset:100125*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100125*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xbf800007; valaddr_reg:x3; val_offset:100128*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100128*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xbf999999; valaddr_reg:x3; val_offset:100131*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100131*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:100134*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100134*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:100137*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100137*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:100140*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100140*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:100143*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100143*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:100146*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100146*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:100149*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100149*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:100152*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100152*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:100155*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100155*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:100158*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100158*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:100161*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100161*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:100164*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100164*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:100167*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100167*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf800000; valaddr_reg:x3; val_offset:100170*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100170*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf800001; valaddr_reg:x3; val_offset:100173*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100173*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf800003; valaddr_reg:x3; val_offset:100176*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100176*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf800007; valaddr_reg:x3; val_offset:100179*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100179*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf80000f; valaddr_reg:x3; val_offset:100182*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100182*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf80001f; valaddr_reg:x3; val_offset:100185*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100185*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf80003f; valaddr_reg:x3; val_offset:100188*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100188*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf80007f; valaddr_reg:x3; val_offset:100191*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100191*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf8000ff; valaddr_reg:x3; val_offset:100194*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100194*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf8001ff; valaddr_reg:x3; val_offset:100197*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100197*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf8003ff; valaddr_reg:x3; val_offset:100200*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100200*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf8007ff; valaddr_reg:x3; val_offset:100203*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100203*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf800fff; valaddr_reg:x3; val_offset:100206*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100206*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf801fff; valaddr_reg:x3; val_offset:100209*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100209*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf803fff; valaddr_reg:x3; val_offset:100212*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100212*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf807fff; valaddr_reg:x3; val_offset:100215*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100215*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf80ffff; valaddr_reg:x3; val_offset:100218*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100218*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29f337 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3033d0 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29f337; op2val:0x803033d0;
op3val:0xcf81ffff; valaddr_reg:x3; val_offset:100221*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100221*0 + 3*260*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159399935,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159416319,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159449087,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159514623,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159645695,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159907839,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(160432127,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(161480703,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(163577855,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(163577856,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(165675008,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(166723584,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167247872,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167510016,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167641088,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167706624,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167739392,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167755776,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167763968,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167768064,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167770112,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167771136,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167771648,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167771904,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772032,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772096,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772128,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772144,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772152,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772156,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772158,32,FLEN)
NAN_BOXED(2133413655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772159,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570425344,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570425345,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570425347,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570425351,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570425359,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570425375,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570425407,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570425471,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570425599,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570425855,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570426367,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570427391,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570429439,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570433535,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570441727,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570458111,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570490879,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570556415,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570687487,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(570949631,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(571473919,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(572522495,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(574619647,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(574619648,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(576716800,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(577765376,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578289664,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578551808,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578682880,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578748416,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578781184,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578797568,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578805760,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578809856,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578811904,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578812928,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578813440,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578813696,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578813824,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578813888,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578813920,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578813936,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578813944,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578813948,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578813950,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(578813951,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2133416827,32,FLEN)
NAN_BOXED(3170047,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481272320,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481272321,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481272323,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481272327,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481272335,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481272351,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481272383,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481272447,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481272575,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481272831,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481273343,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481274367,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481276415,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481280511,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481288703,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481305087,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481337855,32,FLEN)
NAN_BOXED(2133455671,32,FLEN)
NAN_BOXED(2150642640,32,FLEN)
NAN_BOXED(3481403391,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
