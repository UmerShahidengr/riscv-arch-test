
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bc20f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bc20f; op2val:0x80000000;
op3val:0x8ffffe00; valaddr_reg:x3; val_offset:101376*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101376*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bc20f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bc20f; op2val:0x80000000;
op3val:0x8fffff00; valaddr_reg:x3; val_offset:101379*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101379*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bc20f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bc20f; op2val:0x80000000;
op3val:0x8fffff80; valaddr_reg:x3; val_offset:101382*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101382*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bc20f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bc20f; op2val:0x80000000;
op3val:0x8fffffc0; valaddr_reg:x3; val_offset:101385*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101385*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bc20f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bc20f; op2val:0x80000000;
op3val:0x8fffffe0; valaddr_reg:x3; val_offset:101388*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101388*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bc20f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bc20f; op2val:0x80000000;
op3val:0x8ffffff0; valaddr_reg:x3; val_offset:101391*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101391*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bc20f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bc20f; op2val:0x80000000;
op3val:0x8ffffff8; valaddr_reg:x3; val_offset:101394*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101394*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bc20f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bc20f; op2val:0x80000000;
op3val:0x8ffffffc; valaddr_reg:x3; val_offset:101397*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101397*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bc20f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bc20f; op2val:0x80000000;
op3val:0x8ffffffe; valaddr_reg:x3; val_offset:101400*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101400*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bc20f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bc20f; op2val:0x80000000;
op3val:0x8fffffff; valaddr_reg:x3; val_offset:101403*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101403*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:101406*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101406*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:101409*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101409*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:101412*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101412*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:101415*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101415*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:101418*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101418*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:101421*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101421*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:101424*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101424*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:101427*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101427*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:101430*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101430*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:101433*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101433*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:101436*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101436*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:101439*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101439*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:101442*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101442*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:101445*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101445*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:101448*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101448*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:101451*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101451*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x4000000; valaddr_reg:x3; val_offset:101454*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101454*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x4000001; valaddr_reg:x3; val_offset:101457*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101457*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x4000003; valaddr_reg:x3; val_offset:101460*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101460*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x4000007; valaddr_reg:x3; val_offset:101463*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101463*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x400000f; valaddr_reg:x3; val_offset:101466*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101466*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x400001f; valaddr_reg:x3; val_offset:101469*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101469*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x400003f; valaddr_reg:x3; val_offset:101472*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101472*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x400007f; valaddr_reg:x3; val_offset:101475*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101475*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x40000ff; valaddr_reg:x3; val_offset:101478*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101478*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x40001ff; valaddr_reg:x3; val_offset:101481*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101481*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x40003ff; valaddr_reg:x3; val_offset:101484*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101484*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x40007ff; valaddr_reg:x3; val_offset:101487*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101487*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x4000fff; valaddr_reg:x3; val_offset:101490*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101490*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x4001fff; valaddr_reg:x3; val_offset:101493*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101493*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x4003fff; valaddr_reg:x3; val_offset:101496*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101496*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x4007fff; valaddr_reg:x3; val_offset:101499*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101499*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x400ffff; valaddr_reg:x3; val_offset:101502*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101502*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x401ffff; valaddr_reg:x3; val_offset:101505*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101505*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x403ffff; valaddr_reg:x3; val_offset:101508*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101508*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x407ffff; valaddr_reg:x3; val_offset:101511*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101511*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x40fffff; valaddr_reg:x3; val_offset:101514*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101514*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x41fffff; valaddr_reg:x3; val_offset:101517*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101517*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x43fffff; valaddr_reg:x3; val_offset:101520*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101520*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x4400000; valaddr_reg:x3; val_offset:101523*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101523*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x4600000; valaddr_reg:x3; val_offset:101526*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101526*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x4700000; valaddr_reg:x3; val_offset:101529*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101529*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x4780000; valaddr_reg:x3; val_offset:101532*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101532*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47c0000; valaddr_reg:x3; val_offset:101535*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101535*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47e0000; valaddr_reg:x3; val_offset:101538*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101538*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47f0000; valaddr_reg:x3; val_offset:101541*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101541*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47f8000; valaddr_reg:x3; val_offset:101544*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101544*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47fc000; valaddr_reg:x3; val_offset:101547*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101547*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47fe000; valaddr_reg:x3; val_offset:101550*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101550*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47ff000; valaddr_reg:x3; val_offset:101553*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101553*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47ff800; valaddr_reg:x3; val_offset:101556*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101556*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47ffc00; valaddr_reg:x3; val_offset:101559*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101559*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47ffe00; valaddr_reg:x3; val_offset:101562*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101562*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47fff00; valaddr_reg:x3; val_offset:101565*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101565*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47fff80; valaddr_reg:x3; val_offset:101568*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101568*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47fffc0; valaddr_reg:x3; val_offset:101571*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101571*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47fffe0; valaddr_reg:x3; val_offset:101574*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101574*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47ffff0; valaddr_reg:x3; val_offset:101577*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101577*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47ffff8; valaddr_reg:x3; val_offset:101580*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101580*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47ffffc; valaddr_reg:x3; val_offset:101583*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101583*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47ffffe; valaddr_reg:x3; val_offset:101586*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101586*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bd1f5; op2val:0x0;
op3val:0x47fffff; valaddr_reg:x3; val_offset:101589*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101589*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b000000; valaddr_reg:x3; val_offset:101592*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101592*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b000001; valaddr_reg:x3; val_offset:101595*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101595*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b000003; valaddr_reg:x3; val_offset:101598*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101598*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b000007; valaddr_reg:x3; val_offset:101601*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101601*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b00000f; valaddr_reg:x3; val_offset:101604*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101604*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b00001f; valaddr_reg:x3; val_offset:101607*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101607*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b00003f; valaddr_reg:x3; val_offset:101610*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101610*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b00007f; valaddr_reg:x3; val_offset:101613*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101613*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b0000ff; valaddr_reg:x3; val_offset:101616*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101616*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b0001ff; valaddr_reg:x3; val_offset:101619*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101619*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b0003ff; valaddr_reg:x3; val_offset:101622*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101622*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b0007ff; valaddr_reg:x3; val_offset:101625*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101625*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b000fff; valaddr_reg:x3; val_offset:101628*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101628*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b001fff; valaddr_reg:x3; val_offset:101631*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101631*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b003fff; valaddr_reg:x3; val_offset:101634*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101634*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b007fff; valaddr_reg:x3; val_offset:101637*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101637*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b00ffff; valaddr_reg:x3; val_offset:101640*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101640*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b01ffff; valaddr_reg:x3; val_offset:101643*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101643*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b03ffff; valaddr_reg:x3; val_offset:101646*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101646*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b07ffff; valaddr_reg:x3; val_offset:101649*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101649*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b0fffff; valaddr_reg:x3; val_offset:101652*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101652*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b1fffff; valaddr_reg:x3; val_offset:101655*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101655*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b3fffff; valaddr_reg:x3; val_offset:101658*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101658*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b400000; valaddr_reg:x3; val_offset:101661*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101661*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b600000; valaddr_reg:x3; val_offset:101664*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101664*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b700000; valaddr_reg:x3; val_offset:101667*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101667*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b780000; valaddr_reg:x3; val_offset:101670*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101670*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7c0000; valaddr_reg:x3; val_offset:101673*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101673*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7e0000; valaddr_reg:x3; val_offset:101676*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101676*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7f0000; valaddr_reg:x3; val_offset:101679*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101679*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7f8000; valaddr_reg:x3; val_offset:101682*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101682*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7fc000; valaddr_reg:x3; val_offset:101685*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101685*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7fe000; valaddr_reg:x3; val_offset:101688*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101688*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7ff000; valaddr_reg:x3; val_offset:101691*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101691*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7ff800; valaddr_reg:x3; val_offset:101694*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101694*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7ffc00; valaddr_reg:x3; val_offset:101697*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101697*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7ffe00; valaddr_reg:x3; val_offset:101700*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101700*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7fff00; valaddr_reg:x3; val_offset:101703*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101703*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7fff80; valaddr_reg:x3; val_offset:101706*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101706*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7fffc0; valaddr_reg:x3; val_offset:101709*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101709*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7fffe0; valaddr_reg:x3; val_offset:101712*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101712*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7ffff0; valaddr_reg:x3; val_offset:101715*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101715*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7ffff8; valaddr_reg:x3; val_offset:101718*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101718*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7ffffc; valaddr_reg:x3; val_offset:101721*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101721*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7ffffe; valaddr_reg:x3; val_offset:101724*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101724*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x56 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x2b7fffff; valaddr_reg:x3; val_offset:101727*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101727*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x3f800001; valaddr_reg:x3; val_offset:101730*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101730*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x3f800003; valaddr_reg:x3; val_offset:101733*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101733*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x3f800007; valaddr_reg:x3; val_offset:101736*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101736*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x3f999999; valaddr_reg:x3; val_offset:101739*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101739*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:101742*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101742*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:101745*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101745*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:101748*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101748*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:101751*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101751*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:101754*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101754*0 + 3*264*FLEN/8, x4, x1, x2)

inst_33919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c68ea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f83c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c68ea; op2val:0x2f83c2;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:101757*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101757*0 + 3*264*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133574159,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918592,32,FLEN)
NAN_BOXED(2133574159,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918848,32,FLEN)
NAN_BOXED(2133574159,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918976,32,FLEN)
NAN_BOXED(2133574159,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919040,32,FLEN)
NAN_BOXED(2133574159,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919072,32,FLEN)
NAN_BOXED(2133574159,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919088,32,FLEN)
NAN_BOXED(2133574159,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919096,32,FLEN)
NAN_BOXED(2133574159,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919100,32,FLEN)
NAN_BOXED(2133574159,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919102,32,FLEN)
NAN_BOXED(2133574159,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919103,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108864,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108865,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108867,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108871,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108879,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108895,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108927,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108991,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109119,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109375,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109887,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67110911,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67112959,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67117055,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67125247,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67141631,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67174399,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67239935,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67371007,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67633151,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(68157439,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(69206015,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(71303167,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(71303168,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(73400320,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(74448896,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(74973184,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75235328,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75366400,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75431936,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75464704,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75481088,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75489280,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75493376,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75495424,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75496448,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75496960,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497216,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497344,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497408,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497440,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497456,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497464,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497468,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497470,32,FLEN)
NAN_BOXED(2133578229,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497471,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721420288,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721420289,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721420291,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721420295,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721420303,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721420319,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721420351,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721420415,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721420543,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721420799,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721421311,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721422335,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721424383,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721428479,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721436671,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721453055,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721485823,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721551359,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721682431,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(721944575,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(722468863,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(723517439,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(725614591,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(725614592,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(727711744,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(728760320,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729284608,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729546752,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729677824,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729743360,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729776128,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729792512,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729800704,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729804800,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729806848,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729807872,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729808384,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729808640,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729808768,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729808832,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729808864,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729808880,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729808888,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729808892,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729808894,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(729808895,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2133616874,32,FLEN)
NAN_BOXED(3113922,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
