
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_34432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80800000; valaddr_reg:x3; val_offset:103296*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103296*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:103299*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103299*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:103302*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103302*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:103305*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103305*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x8080000f; valaddr_reg:x3; val_offset:103308*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103308*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x8080001f; valaddr_reg:x3; val_offset:103311*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103311*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x8080003f; valaddr_reg:x3; val_offset:103314*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103314*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x8080007f; valaddr_reg:x3; val_offset:103317*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103317*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x808000ff; valaddr_reg:x3; val_offset:103320*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103320*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x808001ff; valaddr_reg:x3; val_offset:103323*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103323*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x808003ff; valaddr_reg:x3; val_offset:103326*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103326*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x808007ff; valaddr_reg:x3; val_offset:103329*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103329*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80800fff; valaddr_reg:x3; val_offset:103332*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103332*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80801fff; valaddr_reg:x3; val_offset:103335*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103335*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80803fff; valaddr_reg:x3; val_offset:103338*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103338*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80807fff; valaddr_reg:x3; val_offset:103341*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103341*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x8080ffff; valaddr_reg:x3; val_offset:103344*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103344*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x8081ffff; valaddr_reg:x3; val_offset:103347*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103347*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x8083ffff; valaddr_reg:x3; val_offset:103350*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103350*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x8087ffff; valaddr_reg:x3; val_offset:103353*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103353*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x808fffff; valaddr_reg:x3; val_offset:103356*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103356*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x809fffff; valaddr_reg:x3; val_offset:103359*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103359*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80bfffff; valaddr_reg:x3; val_offset:103362*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103362*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80c00000; valaddr_reg:x3; val_offset:103365*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103365*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80e00000; valaddr_reg:x3; val_offset:103368*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103368*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80f00000; valaddr_reg:x3; val_offset:103371*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103371*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80f80000; valaddr_reg:x3; val_offset:103374*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103374*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80fc0000; valaddr_reg:x3; val_offset:103377*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103377*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80fe0000; valaddr_reg:x3; val_offset:103380*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103380*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80ff0000; valaddr_reg:x3; val_offset:103383*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103383*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80ff8000; valaddr_reg:x3; val_offset:103386*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103386*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80ffc000; valaddr_reg:x3; val_offset:103389*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103389*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80ffe000; valaddr_reg:x3; val_offset:103392*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103392*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80fff000; valaddr_reg:x3; val_offset:103395*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103395*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80fff800; valaddr_reg:x3; val_offset:103398*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103398*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80fffc00; valaddr_reg:x3; val_offset:103401*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103401*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80fffe00; valaddr_reg:x3; val_offset:103404*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103404*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80ffff00; valaddr_reg:x3; val_offset:103407*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103407*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80ffff80; valaddr_reg:x3; val_offset:103410*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103410*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80ffffc0; valaddr_reg:x3; val_offset:103413*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103413*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80ffffe0; valaddr_reg:x3; val_offset:103416*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103416*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80fffff0; valaddr_reg:x3; val_offset:103419*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103419*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:103422*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103422*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:103425*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103425*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:103428*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103428*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e6d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e6d83; op2val:0x80000000;
op3val:0x80ffffff; valaddr_reg:x3; val_offset:103431*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103431*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xbf800001; valaddr_reg:x3; val_offset:103434*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103434*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xbf800003; valaddr_reg:x3; val_offset:103437*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103437*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xbf800007; valaddr_reg:x3; val_offset:103440*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103440*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xbf999999; valaddr_reg:x3; val_offset:103443*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103443*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:103446*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103446*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:103449*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103449*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:103452*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103452*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:103455*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103455*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:103458*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103458*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:103461*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103461*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:103464*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103464*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:103467*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103467*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:103470*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103470*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:103473*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103473*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:103476*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103476*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:103479*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103479*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc000000; valaddr_reg:x3; val_offset:103482*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103482*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc000001; valaddr_reg:x3; val_offset:103485*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103485*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc000003; valaddr_reg:x3; val_offset:103488*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103488*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc000007; valaddr_reg:x3; val_offset:103491*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103491*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc00000f; valaddr_reg:x3; val_offset:103494*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103494*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc00001f; valaddr_reg:x3; val_offset:103497*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103497*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc00003f; valaddr_reg:x3; val_offset:103500*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103500*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc00007f; valaddr_reg:x3; val_offset:103503*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103503*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc0000ff; valaddr_reg:x3; val_offset:103506*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103506*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc0001ff; valaddr_reg:x3; val_offset:103509*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103509*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc0003ff; valaddr_reg:x3; val_offset:103512*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103512*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc0007ff; valaddr_reg:x3; val_offset:103515*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103515*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc000fff; valaddr_reg:x3; val_offset:103518*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103518*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc001fff; valaddr_reg:x3; val_offset:103521*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103521*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc003fff; valaddr_reg:x3; val_offset:103524*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103524*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc007fff; valaddr_reg:x3; val_offset:103527*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103527*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc00ffff; valaddr_reg:x3; val_offset:103530*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103530*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc01ffff; valaddr_reg:x3; val_offset:103533*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103533*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc03ffff; valaddr_reg:x3; val_offset:103536*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103536*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc07ffff; valaddr_reg:x3; val_offset:103539*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103539*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc0fffff; valaddr_reg:x3; val_offset:103542*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103542*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc1fffff; valaddr_reg:x3; val_offset:103545*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103545*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc3fffff; valaddr_reg:x3; val_offset:103548*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103548*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc400000; valaddr_reg:x3; val_offset:103551*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103551*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc600000; valaddr_reg:x3; val_offset:103554*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103554*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc700000; valaddr_reg:x3; val_offset:103557*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103557*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc780000; valaddr_reg:x3; val_offset:103560*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103560*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7c0000; valaddr_reg:x3; val_offset:103563*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103563*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7e0000; valaddr_reg:x3; val_offset:103566*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103566*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7f0000; valaddr_reg:x3; val_offset:103569*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103569*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7f8000; valaddr_reg:x3; val_offset:103572*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103572*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7fc000; valaddr_reg:x3; val_offset:103575*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103575*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7fe000; valaddr_reg:x3; val_offset:103578*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103578*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7ff000; valaddr_reg:x3; val_offset:103581*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103581*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7ff800; valaddr_reg:x3; val_offset:103584*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103584*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7ffc00; valaddr_reg:x3; val_offset:103587*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103587*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7ffe00; valaddr_reg:x3; val_offset:103590*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103590*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7fff00; valaddr_reg:x3; val_offset:103593*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103593*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7fff80; valaddr_reg:x3; val_offset:103596*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103596*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7fffc0; valaddr_reg:x3; val_offset:103599*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103599*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7fffe0; valaddr_reg:x3; val_offset:103602*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103602*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7ffff0; valaddr_reg:x3; val_offset:103605*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103605*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7ffff8; valaddr_reg:x3; val_offset:103608*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103608*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7ffffc; valaddr_reg:x3; val_offset:103611*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103611*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7ffffe; valaddr_reg:x3; val_offset:103614*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103614*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efb76 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ed0f0 and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efb76; op2val:0x802ed0f0;
op3val:0xcc7fffff; valaddr_reg:x3; val_offset:103617*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103617*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:103620*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103620*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:103623*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103623*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:103626*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103626*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:103629*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103629*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:103632*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103632*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:103635*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103635*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:103638*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103638*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:103641*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103641*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:103644*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103644*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:103647*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103647*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:103650*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103650*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:103653*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103653*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:103656*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103656*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:103659*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103659*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:103662*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103662*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:103665*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103665*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb800000; valaddr_reg:x3; val_offset:103668*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103668*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb800001; valaddr_reg:x3; val_offset:103671*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103671*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb800003; valaddr_reg:x3; val_offset:103674*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103674*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb800007; valaddr_reg:x3; val_offset:103677*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103677*0 + 3*269*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872271,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872287,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872319,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872383,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872511,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872767,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155873279,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155874303,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155876351,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155880447,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155888639,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155905023,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155937791,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2156003327,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2156134399,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2156396543,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2156920831,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157969407,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160066559,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160066560,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162163712,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163212288,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163736576,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163998720,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164129792,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164195328,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164228096,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164244480,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164252672,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164256768,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164258816,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164259840,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260352,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260608,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260736,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260800,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260832,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260848,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2133749123,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260863,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422552064,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422552065,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422552067,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422552071,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422552079,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422552095,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422552127,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422552191,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422552319,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422552575,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422553087,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422554111,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422556159,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422560255,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422568447,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422584831,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422617599,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422683135,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3422814207,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3423076351,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3423600639,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3424649215,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3426746367,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3426746368,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3428843520,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3429892096,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430416384,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430678528,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430809600,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430875136,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430907904,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430924288,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430932480,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430936576,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430938624,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430939648,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430940160,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430940416,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430940544,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430940608,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430940640,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430940656,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430940664,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430940668,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430940670,32,FLEN)
NAN_BOXED(2133785462,32,FLEN)
NAN_BOXED(2150551792,32,FLEN)
NAN_BOXED(3430940671,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951034368,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951034369,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951034371,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951034375,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
