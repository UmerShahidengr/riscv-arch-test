
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_34560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb80000f; valaddr_reg:x3; val_offset:103680*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103680*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb80001f; valaddr_reg:x3; val_offset:103683*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103683*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb80003f; valaddr_reg:x3; val_offset:103686*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103686*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb80007f; valaddr_reg:x3; val_offset:103689*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103689*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb8000ff; valaddr_reg:x3; val_offset:103692*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103692*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb8001ff; valaddr_reg:x3; val_offset:103695*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103695*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb8003ff; valaddr_reg:x3; val_offset:103698*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103698*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb8007ff; valaddr_reg:x3; val_offset:103701*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103701*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb800fff; valaddr_reg:x3; val_offset:103704*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103704*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb801fff; valaddr_reg:x3; val_offset:103707*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103707*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb803fff; valaddr_reg:x3; val_offset:103710*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103710*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb807fff; valaddr_reg:x3; val_offset:103713*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103713*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb80ffff; valaddr_reg:x3; val_offset:103716*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103716*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb81ffff; valaddr_reg:x3; val_offset:103719*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103719*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb83ffff; valaddr_reg:x3; val_offset:103722*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103722*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb87ffff; valaddr_reg:x3; val_offset:103725*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103725*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb8fffff; valaddr_reg:x3; val_offset:103728*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103728*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xeb9fffff; valaddr_reg:x3; val_offset:103731*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103731*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebbfffff; valaddr_reg:x3; val_offset:103734*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103734*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebc00000; valaddr_reg:x3; val_offset:103737*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103737*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebe00000; valaddr_reg:x3; val_offset:103740*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103740*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebf00000; valaddr_reg:x3; val_offset:103743*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103743*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebf80000; valaddr_reg:x3; val_offset:103746*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103746*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebfc0000; valaddr_reg:x3; val_offset:103749*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103749*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebfe0000; valaddr_reg:x3; val_offset:103752*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103752*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebff0000; valaddr_reg:x3; val_offset:103755*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103755*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebff8000; valaddr_reg:x3; val_offset:103758*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103758*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebffc000; valaddr_reg:x3; val_offset:103761*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103761*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebffe000; valaddr_reg:x3; val_offset:103764*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103764*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebfff000; valaddr_reg:x3; val_offset:103767*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103767*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebfff800; valaddr_reg:x3; val_offset:103770*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103770*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebfffc00; valaddr_reg:x3; val_offset:103773*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103773*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebfffe00; valaddr_reg:x3; val_offset:103776*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103776*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebffff00; valaddr_reg:x3; val_offset:103779*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103779*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebffff80; valaddr_reg:x3; val_offset:103782*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103782*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebffffc0; valaddr_reg:x3; val_offset:103785*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103785*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebffffe0; valaddr_reg:x3; val_offset:103788*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103788*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebfffff0; valaddr_reg:x3; val_offset:103791*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103791*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebfffff8; valaddr_reg:x3; val_offset:103794*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103794*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebfffffc; valaddr_reg:x3; val_offset:103797*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103797*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebfffffe; valaddr_reg:x3; val_offset:103800*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103800*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f9f7c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f9f7c; op2val:0x80000000;
op3val:0xebffffff; valaddr_reg:x3; val_offset:103803*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103803*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:103806*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103806*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:103809*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103809*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:103812*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103812*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:103815*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103815*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:103818*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103818*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:103821*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103821*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:103824*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103824*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:103827*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103827*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:103830*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103830*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:103833*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103833*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:103836*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103836*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:103839*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103839*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:103842*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103842*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:103845*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103845*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:103848*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103848*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:103851*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103851*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x82000000; valaddr_reg:x3; val_offset:103854*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103854*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x82000001; valaddr_reg:x3; val_offset:103857*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103857*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x82000003; valaddr_reg:x3; val_offset:103860*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103860*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x82000007; valaddr_reg:x3; val_offset:103863*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103863*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x8200000f; valaddr_reg:x3; val_offset:103866*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103866*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x8200001f; valaddr_reg:x3; val_offset:103869*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103869*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x8200003f; valaddr_reg:x3; val_offset:103872*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103872*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x8200007f; valaddr_reg:x3; val_offset:103875*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103875*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x820000ff; valaddr_reg:x3; val_offset:103878*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103878*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x820001ff; valaddr_reg:x3; val_offset:103881*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103881*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x820003ff; valaddr_reg:x3; val_offset:103884*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103884*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x820007ff; valaddr_reg:x3; val_offset:103887*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103887*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x82000fff; valaddr_reg:x3; val_offset:103890*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103890*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x82001fff; valaddr_reg:x3; val_offset:103893*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103893*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x82003fff; valaddr_reg:x3; val_offset:103896*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103896*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x82007fff; valaddr_reg:x3; val_offset:103899*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103899*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x8200ffff; valaddr_reg:x3; val_offset:103902*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103902*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x8201ffff; valaddr_reg:x3; val_offset:103905*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103905*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x8203ffff; valaddr_reg:x3; val_offset:103908*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103908*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x8207ffff; valaddr_reg:x3; val_offset:103911*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103911*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x820fffff; valaddr_reg:x3; val_offset:103914*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103914*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x821fffff; valaddr_reg:x3; val_offset:103917*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103917*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x823fffff; valaddr_reg:x3; val_offset:103920*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103920*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x82400000; valaddr_reg:x3; val_offset:103923*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103923*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x82600000; valaddr_reg:x3; val_offset:103926*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103926*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x82700000; valaddr_reg:x3; val_offset:103929*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103929*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x82780000; valaddr_reg:x3; val_offset:103932*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103932*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827c0000; valaddr_reg:x3; val_offset:103935*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103935*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827e0000; valaddr_reg:x3; val_offset:103938*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103938*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827f0000; valaddr_reg:x3; val_offset:103941*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103941*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827f8000; valaddr_reg:x3; val_offset:103944*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103944*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827fc000; valaddr_reg:x3; val_offset:103947*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103947*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827fe000; valaddr_reg:x3; val_offset:103950*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103950*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827ff000; valaddr_reg:x3; val_offset:103953*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103953*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827ff800; valaddr_reg:x3; val_offset:103956*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103956*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827ffc00; valaddr_reg:x3; val_offset:103959*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103959*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827ffe00; valaddr_reg:x3; val_offset:103962*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103962*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827fff00; valaddr_reg:x3; val_offset:103965*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103965*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827fff80; valaddr_reg:x3; val_offset:103968*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103968*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827fffc0; valaddr_reg:x3; val_offset:103971*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103971*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827fffe0; valaddr_reg:x3; val_offset:103974*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103974*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827ffff0; valaddr_reg:x3; val_offset:103977*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103977*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827ffff8; valaddr_reg:x3; val_offset:103980*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103980*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827ffffc; valaddr_reg:x3; val_offset:103983*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103983*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827ffffe; valaddr_reg:x3; val_offset:103986*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103986*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fac99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fac99; op2val:0x80000000;
op3val:0x827fffff; valaddr_reg:x3; val_offset:103989*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103989*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c000000; valaddr_reg:x3; val_offset:103992*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103992*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c000001; valaddr_reg:x3; val_offset:103995*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103995*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c000003; valaddr_reg:x3; val_offset:103998*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103998*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c000007; valaddr_reg:x3; val_offset:104001*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104001*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c00000f; valaddr_reg:x3; val_offset:104004*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104004*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c00001f; valaddr_reg:x3; val_offset:104007*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104007*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c00003f; valaddr_reg:x3; val_offset:104010*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104010*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c00007f; valaddr_reg:x3; val_offset:104013*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104013*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c0000ff; valaddr_reg:x3; val_offset:104016*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104016*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c0001ff; valaddr_reg:x3; val_offset:104019*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104019*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c0003ff; valaddr_reg:x3; val_offset:104022*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104022*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c0007ff; valaddr_reg:x3; val_offset:104025*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104025*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c000fff; valaddr_reg:x3; val_offset:104028*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104028*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c001fff; valaddr_reg:x3; val_offset:104031*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104031*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c003fff; valaddr_reg:x3; val_offset:104034*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104034*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c007fff; valaddr_reg:x3; val_offset:104037*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104037*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c00ffff; valaddr_reg:x3; val_offset:104040*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104040*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c01ffff; valaddr_reg:x3; val_offset:104043*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104043*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c03ffff; valaddr_reg:x3; val_offset:104046*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104046*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c07ffff; valaddr_reg:x3; val_offset:104049*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104049*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c0fffff; valaddr_reg:x3; val_offset:104052*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104052*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c1fffff; valaddr_reg:x3; val_offset:104055*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104055*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c3fffff; valaddr_reg:x3; val_offset:104058*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104058*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c400000; valaddr_reg:x3; val_offset:104061*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104061*0 + 3*270*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951034383,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951034399,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951034431,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951034495,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951034623,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951034879,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951035391,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951036415,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951038463,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951042559,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951050751,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951067135,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951099903,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951165439,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951296511,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3951558655,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3952082943,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3953131519,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3955228671,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3955228672,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3957325824,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3958374400,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3958898688,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959160832,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959291904,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959357440,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959390208,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959406592,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959414784,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959418880,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959420928,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959421952,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959422464,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959422720,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959422848,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959422912,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959422944,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959422960,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959422968,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959422972,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959422974,32,FLEN)
NAN_BOXED(2133827452,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3959422975,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038080,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038081,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038083,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038087,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038095,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038111,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038143,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038207,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038335,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038591,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181039103,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181040127,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181042175,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181046271,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181054463,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181070847,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181103615,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181169151,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181300223,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181562367,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2182086655,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2183135231,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2185232383,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2185232384,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2187329536,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2188378112,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2188902400,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189164544,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189295616,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189361152,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189393920,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189410304,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189418496,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189422592,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189424640,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189425664,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426176,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426432,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426560,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426624,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426656,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426672,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426680,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426684,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426686,32,FLEN)
NAN_BOXED(2133830809,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426687,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1811939328,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1811939329,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1811939331,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1811939335,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1811939343,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1811939359,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1811939391,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1811939455,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1811939583,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1811939839,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1811940351,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1811941375,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1811943423,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1811947519,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1811955711,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1811972095,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1812004863,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1812070399,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1812201471,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1812463615,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1812987903,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1814036479,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1816133631,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1816133632,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
