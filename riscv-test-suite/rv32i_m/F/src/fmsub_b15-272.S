
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_34688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c600000; valaddr_reg:x3; val_offset:104064*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104064*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c700000; valaddr_reg:x3; val_offset:104067*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104067*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c780000; valaddr_reg:x3; val_offset:104070*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104070*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7c0000; valaddr_reg:x3; val_offset:104073*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104073*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7e0000; valaddr_reg:x3; val_offset:104076*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104076*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7f0000; valaddr_reg:x3; val_offset:104079*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104079*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7f8000; valaddr_reg:x3; val_offset:104082*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104082*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7fc000; valaddr_reg:x3; val_offset:104085*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104085*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7fe000; valaddr_reg:x3; val_offset:104088*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104088*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7ff000; valaddr_reg:x3; val_offset:104091*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104091*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7ff800; valaddr_reg:x3; val_offset:104094*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104094*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7ffc00; valaddr_reg:x3; val_offset:104097*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104097*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7ffe00; valaddr_reg:x3; val_offset:104100*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104100*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7fff00; valaddr_reg:x3; val_offset:104103*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104103*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7fff80; valaddr_reg:x3; val_offset:104106*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104106*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7fffc0; valaddr_reg:x3; val_offset:104109*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104109*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7fffe0; valaddr_reg:x3; val_offset:104112*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104112*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7ffff0; valaddr_reg:x3; val_offset:104115*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104115*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7ffff8; valaddr_reg:x3; val_offset:104118*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104118*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7ffffc; valaddr_reg:x3; val_offset:104121*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104121*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7ffffe; valaddr_reg:x3; val_offset:104124*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104124*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x6c7fffff; valaddr_reg:x3; val_offset:104127*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104127*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x7f000001; valaddr_reg:x3; val_offset:104130*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104130*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x7f000003; valaddr_reg:x3; val_offset:104133*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104133*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x7f000007; valaddr_reg:x3; val_offset:104136*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104136*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x7f199999; valaddr_reg:x3; val_offset:104139*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104139*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x7f249249; valaddr_reg:x3; val_offset:104142*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104142*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x7f333333; valaddr_reg:x3; val_offset:104145*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104145*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:104148*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104148*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:104151*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104151*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x7f444444; valaddr_reg:x3; val_offset:104154*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104154*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:104157*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104157*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:104160*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104160*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x7f666666; valaddr_reg:x3; val_offset:104163*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104163*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:104166*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104166*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:104169*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104169*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:104172*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104172*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a80a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fb283; op2val:0x3fba80a6;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:104175*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104175*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27800000; valaddr_reg:x3; val_offset:104178*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104178*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27800001; valaddr_reg:x3; val_offset:104181*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104181*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27800003; valaddr_reg:x3; val_offset:104184*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104184*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27800007; valaddr_reg:x3; val_offset:104187*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104187*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x2780000f; valaddr_reg:x3; val_offset:104190*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104190*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x2780001f; valaddr_reg:x3; val_offset:104193*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104193*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x2780003f; valaddr_reg:x3; val_offset:104196*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104196*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x2780007f; valaddr_reg:x3; val_offset:104199*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104199*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x278000ff; valaddr_reg:x3; val_offset:104202*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104202*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x278001ff; valaddr_reg:x3; val_offset:104205*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104205*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x278003ff; valaddr_reg:x3; val_offset:104208*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104208*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x278007ff; valaddr_reg:x3; val_offset:104211*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104211*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27800fff; valaddr_reg:x3; val_offset:104214*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104214*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27801fff; valaddr_reg:x3; val_offset:104217*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104217*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27803fff; valaddr_reg:x3; val_offset:104220*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104220*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27807fff; valaddr_reg:x3; val_offset:104223*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104223*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x2780ffff; valaddr_reg:x3; val_offset:104226*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104226*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x2781ffff; valaddr_reg:x3; val_offset:104229*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104229*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x2783ffff; valaddr_reg:x3; val_offset:104232*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104232*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x2787ffff; valaddr_reg:x3; val_offset:104235*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104235*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x278fffff; valaddr_reg:x3; val_offset:104238*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104238*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x279fffff; valaddr_reg:x3; val_offset:104241*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104241*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27bfffff; valaddr_reg:x3; val_offset:104244*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104244*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27c00000; valaddr_reg:x3; val_offset:104247*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104247*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27e00000; valaddr_reg:x3; val_offset:104250*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104250*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27f00000; valaddr_reg:x3; val_offset:104253*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104253*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27f80000; valaddr_reg:x3; val_offset:104256*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104256*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27fc0000; valaddr_reg:x3; val_offset:104259*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104259*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27fe0000; valaddr_reg:x3; val_offset:104262*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104262*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27ff0000; valaddr_reg:x3; val_offset:104265*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104265*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27ff8000; valaddr_reg:x3; val_offset:104268*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104268*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27ffc000; valaddr_reg:x3; val_offset:104271*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104271*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27ffe000; valaddr_reg:x3; val_offset:104274*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104274*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27fff000; valaddr_reg:x3; val_offset:104277*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104277*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27fff800; valaddr_reg:x3; val_offset:104280*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104280*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27fffc00; valaddr_reg:x3; val_offset:104283*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104283*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27fffe00; valaddr_reg:x3; val_offset:104286*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104286*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27ffff00; valaddr_reg:x3; val_offset:104289*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104289*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27ffff80; valaddr_reg:x3; val_offset:104292*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104292*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27ffffc0; valaddr_reg:x3; val_offset:104295*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104295*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27ffffe0; valaddr_reg:x3; val_offset:104298*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104298*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27fffff0; valaddr_reg:x3; val_offset:104301*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104301*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27fffff8; valaddr_reg:x3; val_offset:104304*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104304*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27fffffc; valaddr_reg:x3; val_offset:104307*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104307*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27fffffe; valaddr_reg:x3; val_offset:104310*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104310*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x27ffffff; valaddr_reg:x3; val_offset:104313*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104313*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x3f800001; valaddr_reg:x3; val_offset:104316*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104316*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x3f800003; valaddr_reg:x3; val_offset:104319*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104319*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x3f800007; valaddr_reg:x3; val_offset:104322*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104322*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x3f999999; valaddr_reg:x3; val_offset:104325*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104325*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:104328*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104328*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:104331*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104331*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:104334*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104334*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:104337*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104337*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:104340*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104340*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:104343*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104343*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:104346*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104346*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:104349*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104349*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:104352*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104352*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:104355*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104355*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:104358*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104358*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fd769 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e9661 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fd769; op2val:0x2e9661;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:104361*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104361*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x3f800001; valaddr_reg:x3; val_offset:104364*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104364*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x3f800003; valaddr_reg:x3; val_offset:104367*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104367*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x3f800007; valaddr_reg:x3; val_offset:104370*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104370*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x3f999999; valaddr_reg:x3; val_offset:104373*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104373*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:104376*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104376*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:104379*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104379*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:104382*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104382*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:104385*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104385*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:104388*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104388*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:104391*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104391*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:104394*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104394*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:104397*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104397*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:104400*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104400*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:104403*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104403*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:104406*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104406*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:104409*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104409*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x48000000; valaddr_reg:x3; val_offset:104412*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104412*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x48000001; valaddr_reg:x3; val_offset:104415*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104415*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x48000003; valaddr_reg:x3; val_offset:104418*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104418*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x48000007; valaddr_reg:x3; val_offset:104421*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104421*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x4800000f; valaddr_reg:x3; val_offset:104424*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104424*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x4800001f; valaddr_reg:x3; val_offset:104427*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104427*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x4800003f; valaddr_reg:x3; val_offset:104430*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104430*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x4800007f; valaddr_reg:x3; val_offset:104433*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104433*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x480000ff; valaddr_reg:x3; val_offset:104436*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104436*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x480001ff; valaddr_reg:x3; val_offset:104439*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104439*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x480003ff; valaddr_reg:x3; val_offset:104442*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104442*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x480007ff; valaddr_reg:x3; val_offset:104445*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104445*0 + 3*271*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1818230784,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1819279360,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1819803648,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820065792,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820196864,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820262400,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820295168,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820311552,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820319744,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820323840,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820325888,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820326912,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820327424,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820327680,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820327808,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820327872,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820327904,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820327920,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820327928,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820327932,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820327934,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(1820327935,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2133832323,32,FLEN)
NAN_BOXED(1069187238,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662700032,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662700033,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662700035,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662700039,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662700047,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662700063,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662700095,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662700159,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662700287,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662700543,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662701055,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662702079,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662704127,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662708223,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662716415,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662732799,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662765567,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662831103,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(662962175,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(663224319,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(663748607,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(664797183,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(666894335,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(666894336,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(668991488,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(670040064,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(670564352,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(670826496,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(670957568,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(671023104,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(671055872,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(671072256,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(671080448,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(671084544,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(671086592,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(671087616,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(671088128,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(671088384,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(671088512,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(671088576,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(671088608,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(671088624,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(671088632,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(671088636,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(671088638,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(671088639,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2133841769,32,FLEN)
NAN_BOXED(3053153,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1207959552,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1207959553,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1207959555,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1207959559,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1207959567,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1207959583,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1207959615,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1207959679,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1207959807,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1207960063,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1207960575,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1207961599,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
