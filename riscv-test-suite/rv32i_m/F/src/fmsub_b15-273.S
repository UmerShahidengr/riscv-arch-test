
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_34816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x48000fff; valaddr_reg:x3; val_offset:104448*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104448*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x48001fff; valaddr_reg:x3; val_offset:104451*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104451*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x48003fff; valaddr_reg:x3; val_offset:104454*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104454*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x48007fff; valaddr_reg:x3; val_offset:104457*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104457*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x4800ffff; valaddr_reg:x3; val_offset:104460*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104460*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x4801ffff; valaddr_reg:x3; val_offset:104463*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104463*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x4803ffff; valaddr_reg:x3; val_offset:104466*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104466*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x4807ffff; valaddr_reg:x3; val_offset:104469*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104469*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x480fffff; valaddr_reg:x3; val_offset:104472*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104472*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x481fffff; valaddr_reg:x3; val_offset:104475*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104475*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x483fffff; valaddr_reg:x3; val_offset:104478*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104478*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x48400000; valaddr_reg:x3; val_offset:104481*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104481*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x48600000; valaddr_reg:x3; val_offset:104484*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104484*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x48700000; valaddr_reg:x3; val_offset:104487*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104487*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x48780000; valaddr_reg:x3; val_offset:104490*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104490*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487c0000; valaddr_reg:x3; val_offset:104493*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104493*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487e0000; valaddr_reg:x3; val_offset:104496*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104496*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487f0000; valaddr_reg:x3; val_offset:104499*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104499*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487f8000; valaddr_reg:x3; val_offset:104502*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104502*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487fc000; valaddr_reg:x3; val_offset:104505*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104505*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487fe000; valaddr_reg:x3; val_offset:104508*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104508*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487ff000; valaddr_reg:x3; val_offset:104511*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104511*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487ff800; valaddr_reg:x3; val_offset:104514*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104514*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487ffc00; valaddr_reg:x3; val_offset:104517*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104517*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487ffe00; valaddr_reg:x3; val_offset:104520*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104520*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487fff00; valaddr_reg:x3; val_offset:104523*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104523*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487fff80; valaddr_reg:x3; val_offset:104526*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104526*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487fffc0; valaddr_reg:x3; val_offset:104529*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104529*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487fffe0; valaddr_reg:x3; val_offset:104532*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104532*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487ffff0; valaddr_reg:x3; val_offset:104535*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104535*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487ffff8; valaddr_reg:x3; val_offset:104538*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104538*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487ffffc; valaddr_reg:x3; val_offset:104541*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104541*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487ffffe; valaddr_reg:x3; val_offset:104544*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104544*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ff2ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2e8f21 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ff2ca; op2val:0x2e8f21;
op3val:0x487fffff; valaddr_reg:x3; val_offset:104547*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104547*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf3000000; valaddr_reg:x3; val_offset:104550*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104550*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf3000001; valaddr_reg:x3; val_offset:104553*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104553*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf3000003; valaddr_reg:x3; val_offset:104556*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104556*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf3000007; valaddr_reg:x3; val_offset:104559*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104559*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf300000f; valaddr_reg:x3; val_offset:104562*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104562*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf300001f; valaddr_reg:x3; val_offset:104565*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104565*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf300003f; valaddr_reg:x3; val_offset:104568*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104568*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf300007f; valaddr_reg:x3; val_offset:104571*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104571*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf30000ff; valaddr_reg:x3; val_offset:104574*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104574*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf30001ff; valaddr_reg:x3; val_offset:104577*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104577*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf30003ff; valaddr_reg:x3; val_offset:104580*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104580*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf30007ff; valaddr_reg:x3; val_offset:104583*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104583*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf3000fff; valaddr_reg:x3; val_offset:104586*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104586*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf3001fff; valaddr_reg:x3; val_offset:104589*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104589*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf3003fff; valaddr_reg:x3; val_offset:104592*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104592*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf3007fff; valaddr_reg:x3; val_offset:104595*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104595*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf300ffff; valaddr_reg:x3; val_offset:104598*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104598*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf301ffff; valaddr_reg:x3; val_offset:104601*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104601*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf303ffff; valaddr_reg:x3; val_offset:104604*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104604*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf307ffff; valaddr_reg:x3; val_offset:104607*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104607*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf30fffff; valaddr_reg:x3; val_offset:104610*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104610*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf31fffff; valaddr_reg:x3; val_offset:104613*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104613*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf33fffff; valaddr_reg:x3; val_offset:104616*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104616*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf3400000; valaddr_reg:x3; val_offset:104619*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104619*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf3600000; valaddr_reg:x3; val_offset:104622*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104622*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf3700000; valaddr_reg:x3; val_offset:104625*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104625*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf3780000; valaddr_reg:x3; val_offset:104628*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104628*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37c0000; valaddr_reg:x3; val_offset:104631*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104631*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37e0000; valaddr_reg:x3; val_offset:104634*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104634*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37f0000; valaddr_reg:x3; val_offset:104637*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104637*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37f8000; valaddr_reg:x3; val_offset:104640*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104640*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37fc000; valaddr_reg:x3; val_offset:104643*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104643*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37fe000; valaddr_reg:x3; val_offset:104646*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104646*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37ff000; valaddr_reg:x3; val_offset:104649*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104649*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37ff800; valaddr_reg:x3; val_offset:104652*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104652*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37ffc00; valaddr_reg:x3; val_offset:104655*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104655*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37ffe00; valaddr_reg:x3; val_offset:104658*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104658*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37fff00; valaddr_reg:x3; val_offset:104661*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104661*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37fff80; valaddr_reg:x3; val_offset:104664*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104664*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37fffc0; valaddr_reg:x3; val_offset:104667*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104667*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37fffe0; valaddr_reg:x3; val_offset:104670*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104670*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37ffff0; valaddr_reg:x3; val_offset:104673*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104673*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37ffff8; valaddr_reg:x3; val_offset:104676*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104676*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37ffffc; valaddr_reg:x3; val_offset:104679*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104679*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37ffffe; valaddr_reg:x3; val_offset:104682*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104682*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xe6 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xf37fffff; valaddr_reg:x3; val_offset:104685*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104685*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xff000001; valaddr_reg:x3; val_offset:104688*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104688*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xff000003; valaddr_reg:x3; val_offset:104691*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104691*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xff000007; valaddr_reg:x3; val_offset:104694*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104694*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xff199999; valaddr_reg:x3; val_offset:104697*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104697*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xff249249; valaddr_reg:x3; val_offset:104700*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104700*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xff333333; valaddr_reg:x3; val_offset:104703*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104703*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:104706*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104706*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:104709*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104709*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xff444444; valaddr_reg:x3; val_offset:104712*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104712*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:104715*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104715*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:104718*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104718*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xff666666; valaddr_reg:x3; val_offset:104721*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104721*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:104724*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104724*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:104727*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104727*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:104730*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104730*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300efc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3a1eb2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300efc; op2val:0xbfba1eb2;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:104733*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104733*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x77000000; valaddr_reg:x3; val_offset:104736*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104736*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x77000001; valaddr_reg:x3; val_offset:104739*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104739*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x77000003; valaddr_reg:x3; val_offset:104742*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104742*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x77000007; valaddr_reg:x3; val_offset:104745*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104745*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x7700000f; valaddr_reg:x3; val_offset:104748*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104748*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x7700001f; valaddr_reg:x3; val_offset:104751*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104751*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x7700003f; valaddr_reg:x3; val_offset:104754*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104754*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x7700007f; valaddr_reg:x3; val_offset:104757*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104757*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x770000ff; valaddr_reg:x3; val_offset:104760*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104760*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x770001ff; valaddr_reg:x3; val_offset:104763*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104763*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x770003ff; valaddr_reg:x3; val_offset:104766*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104766*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x770007ff; valaddr_reg:x3; val_offset:104769*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104769*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x77000fff; valaddr_reg:x3; val_offset:104772*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104772*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x77001fff; valaddr_reg:x3; val_offset:104775*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104775*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x77003fff; valaddr_reg:x3; val_offset:104778*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104778*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x77007fff; valaddr_reg:x3; val_offset:104781*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104781*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x7700ffff; valaddr_reg:x3; val_offset:104784*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104784*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x7701ffff; valaddr_reg:x3; val_offset:104787*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104787*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x7703ffff; valaddr_reg:x3; val_offset:104790*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104790*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x7707ffff; valaddr_reg:x3; val_offset:104793*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104793*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x770fffff; valaddr_reg:x3; val_offset:104796*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104796*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x771fffff; valaddr_reg:x3; val_offset:104799*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104799*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x773fffff; valaddr_reg:x3; val_offset:104802*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104802*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x77400000; valaddr_reg:x3; val_offset:104805*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104805*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x77600000; valaddr_reg:x3; val_offset:104808*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104808*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x77700000; valaddr_reg:x3; val_offset:104811*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104811*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x77780000; valaddr_reg:x3; val_offset:104814*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104814*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x777c0000; valaddr_reg:x3; val_offset:104817*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104817*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x777e0000; valaddr_reg:x3; val_offset:104820*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104820*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x777f0000; valaddr_reg:x3; val_offset:104823*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104823*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x777f8000; valaddr_reg:x3; val_offset:104826*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104826*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305db9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x39cb9a and fs3 == 0 and fe3 == 0xee and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f305db9; op2val:0x3fb9cb9a;
op3val:0x777fc000; valaddr_reg:x3; val_offset:104829*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104829*0 + 3*272*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1207963647,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1207967743,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1207975935,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1207992319,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1208025087,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1208090623,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1208221695,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1208483839,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1209008127,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1210056703,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1212153855,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1212153856,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1214251008,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1215299584,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1215823872,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216086016,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216217088,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216282624,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216315392,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216331776,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216339968,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216344064,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216346112,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216347136,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216347648,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216347904,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216348032,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216348096,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216348128,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216348144,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216348152,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216348156,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216348158,32,FLEN)
NAN_BOXED(2133848778,32,FLEN)
NAN_BOXED(3051297,32,FLEN)
NAN_BOXED(1216348159,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076863488,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076863489,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076863491,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076863495,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076863503,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076863519,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076863551,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076863615,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076863743,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076863999,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076864511,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076865535,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076867583,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076871679,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076879871,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076896255,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076929023,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4076994559,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4077125631,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4077387775,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4077912063,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4078960639,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4081057791,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4081057792,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4083154944,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4084203520,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4084727808,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4084989952,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085121024,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085186560,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085219328,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085235712,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085243904,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085248000,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085250048,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085251072,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085251584,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085251840,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085251968,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085252032,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085252064,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085252080,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085252088,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085252092,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085252094,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4085252095,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2133855996,32,FLEN)
NAN_BOXED(3216645810,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996488704,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996488705,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996488707,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996488711,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996488719,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996488735,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996488767,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996488831,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996488959,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996489215,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996489727,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996490751,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996492799,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996496895,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996505087,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996521471,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996554239,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996619775,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1996750847,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1997012991,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1997537279,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(1998585855,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(2000683007,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(2000683008,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(2002780160,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(2003828736,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(2004353024,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(2004615168,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(2004746240,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(2004811776,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(2004844544,32,FLEN)
NAN_BOXED(2133876153,32,FLEN)
NAN_BOXED(1069140890,32,FLEN)
NAN_BOXED(2004860928,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
