
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_35200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x90600000; valaddr_reg:x3; val_offset:105600*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105600*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x90700000; valaddr_reg:x3; val_offset:105603*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105603*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x90780000; valaddr_reg:x3; val_offset:105606*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105606*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907c0000; valaddr_reg:x3; val_offset:105609*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105609*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907e0000; valaddr_reg:x3; val_offset:105612*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105612*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907f0000; valaddr_reg:x3; val_offset:105615*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105615*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907f8000; valaddr_reg:x3; val_offset:105618*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105618*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907fc000; valaddr_reg:x3; val_offset:105621*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105621*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907fe000; valaddr_reg:x3; val_offset:105624*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105624*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907ff000; valaddr_reg:x3; val_offset:105627*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105627*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907ff800; valaddr_reg:x3; val_offset:105630*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105630*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907ffc00; valaddr_reg:x3; val_offset:105633*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105633*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907ffe00; valaddr_reg:x3; val_offset:105636*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105636*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907fff00; valaddr_reg:x3; val_offset:105639*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105639*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907fff80; valaddr_reg:x3; val_offset:105642*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105642*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907fffc0; valaddr_reg:x3; val_offset:105645*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105645*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907fffe0; valaddr_reg:x3; val_offset:105648*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105648*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907ffff0; valaddr_reg:x3; val_offset:105651*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105651*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907ffff8; valaddr_reg:x3; val_offset:105654*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105654*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907ffffc; valaddr_reg:x3; val_offset:105657*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105657*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907ffffe; valaddr_reg:x3; val_offset:105660*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105660*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f97b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f97b; op2val:0x80000000;
op3val:0x907fffff; valaddr_reg:x3; val_offset:105663*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105663*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:105666*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105666*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:105669*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105669*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:105672*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105672*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:105675*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105675*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:105678*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105678*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:105681*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105681*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:105684*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105684*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:105687*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105687*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:105690*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105690*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:105693*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105693*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:105696*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105696*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:105699*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105699*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:105702*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105702*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:105705*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105705*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:105708*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105708*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:105711*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105711*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x2000000; valaddr_reg:x3; val_offset:105714*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105714*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x2000001; valaddr_reg:x3; val_offset:105717*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105717*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x2000003; valaddr_reg:x3; val_offset:105720*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105720*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x2000007; valaddr_reg:x3; val_offset:105723*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105723*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x200000f; valaddr_reg:x3; val_offset:105726*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105726*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x200001f; valaddr_reg:x3; val_offset:105729*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105729*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x200003f; valaddr_reg:x3; val_offset:105732*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105732*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x200007f; valaddr_reg:x3; val_offset:105735*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105735*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x20000ff; valaddr_reg:x3; val_offset:105738*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105738*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x20001ff; valaddr_reg:x3; val_offset:105741*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105741*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x20003ff; valaddr_reg:x3; val_offset:105744*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105744*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x20007ff; valaddr_reg:x3; val_offset:105747*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105747*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x2000fff; valaddr_reg:x3; val_offset:105750*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105750*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x2001fff; valaddr_reg:x3; val_offset:105753*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105753*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x2003fff; valaddr_reg:x3; val_offset:105756*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105756*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x2007fff; valaddr_reg:x3; val_offset:105759*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105759*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x200ffff; valaddr_reg:x3; val_offset:105762*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105762*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x201ffff; valaddr_reg:x3; val_offset:105765*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105765*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x203ffff; valaddr_reg:x3; val_offset:105768*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105768*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x207ffff; valaddr_reg:x3; val_offset:105771*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105771*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x20fffff; valaddr_reg:x3; val_offset:105774*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105774*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x21fffff; valaddr_reg:x3; val_offset:105777*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105777*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x23fffff; valaddr_reg:x3; val_offset:105780*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105780*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x2400000; valaddr_reg:x3; val_offset:105783*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105783*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x2600000; valaddr_reg:x3; val_offset:105786*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105786*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x2700000; valaddr_reg:x3; val_offset:105789*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105789*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x2780000; valaddr_reg:x3; val_offset:105792*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105792*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27c0000; valaddr_reg:x3; val_offset:105795*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105795*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27e0000; valaddr_reg:x3; val_offset:105798*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105798*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27f0000; valaddr_reg:x3; val_offset:105801*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105801*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27f8000; valaddr_reg:x3; val_offset:105804*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105804*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27fc000; valaddr_reg:x3; val_offset:105807*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105807*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27fe000; valaddr_reg:x3; val_offset:105810*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105810*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27ff000; valaddr_reg:x3; val_offset:105813*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105813*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27ff800; valaddr_reg:x3; val_offset:105816*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105816*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27ffc00; valaddr_reg:x3; val_offset:105819*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105819*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27ffe00; valaddr_reg:x3; val_offset:105822*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105822*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27fff00; valaddr_reg:x3; val_offset:105825*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105825*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27fff80; valaddr_reg:x3; val_offset:105828*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105828*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27fffc0; valaddr_reg:x3; val_offset:105831*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105831*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27fffe0; valaddr_reg:x3; val_offset:105834*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105834*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27ffff0; valaddr_reg:x3; val_offset:105837*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105837*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27ffff8; valaddr_reg:x3; val_offset:105840*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105840*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27ffffc; valaddr_reg:x3; val_offset:105843*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105843*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27ffffe; valaddr_reg:x3; val_offset:105846*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105846*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x311268 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f311268; op2val:0x0;
op3val:0x27fffff; valaddr_reg:x3; val_offset:105849*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105849*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:105852*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105852*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:105855*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105855*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:105858*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105858*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:105861*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105861*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:105864*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105864*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:105867*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105867*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:105870*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105870*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:105873*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105873*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:105876*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105876*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:105879*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105879*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:105882*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105882*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:105885*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105885*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:105888*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105888*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:105891*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105891*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:105894*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105894*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:105897*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105897*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1800000; valaddr_reg:x3; val_offset:105900*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105900*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1800001; valaddr_reg:x3; val_offset:105903*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105903*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1800003; valaddr_reg:x3; val_offset:105906*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105906*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1800007; valaddr_reg:x3; val_offset:105909*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105909*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x180000f; valaddr_reg:x3; val_offset:105912*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105912*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x180001f; valaddr_reg:x3; val_offset:105915*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105915*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x180003f; valaddr_reg:x3; val_offset:105918*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105918*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x180007f; valaddr_reg:x3; val_offset:105921*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105921*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x18000ff; valaddr_reg:x3; val_offset:105924*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105924*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x18001ff; valaddr_reg:x3; val_offset:105927*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105927*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x18003ff; valaddr_reg:x3; val_offset:105930*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105930*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x18007ff; valaddr_reg:x3; val_offset:105933*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105933*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1800fff; valaddr_reg:x3; val_offset:105936*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105936*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1801fff; valaddr_reg:x3; val_offset:105939*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105939*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1803fff; valaddr_reg:x3; val_offset:105942*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105942*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1807fff; valaddr_reg:x3; val_offset:105945*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105945*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x180ffff; valaddr_reg:x3; val_offset:105948*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105948*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x181ffff; valaddr_reg:x3; val_offset:105951*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105951*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x183ffff; valaddr_reg:x3; val_offset:105954*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105954*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x187ffff; valaddr_reg:x3; val_offset:105957*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105957*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x18fffff; valaddr_reg:x3; val_offset:105960*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105960*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x19fffff; valaddr_reg:x3; val_offset:105963*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105963*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1bfffff; valaddr_reg:x3; val_offset:105966*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105966*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1c00000; valaddr_reg:x3; val_offset:105969*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105969*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1e00000; valaddr_reg:x3; val_offset:105972*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105972*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1f00000; valaddr_reg:x3; val_offset:105975*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105975*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1f80000; valaddr_reg:x3; val_offset:105978*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105978*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1fc0000; valaddr_reg:x3; val_offset:105981*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105981*0 + 3*275*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2422210560,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2423259136,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2423783424,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424045568,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424176640,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424242176,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424274944,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424291328,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424299520,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424303616,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424305664,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424306688,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307200,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307456,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307584,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307648,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307680,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307696,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307704,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307708,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307710,32,FLEN)
NAN_BOXED(2133916027,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307711,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554432,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554433,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554435,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554439,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554447,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554463,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554495,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554559,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554687,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554943,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33555455,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33556479,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33558527,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33562623,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33570815,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33587199,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33619967,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33685503,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33816575,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(34078719,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(34603007,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(35651583,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(37748735,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(37748736,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(39845888,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(40894464,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41418752,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41680896,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41811968,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41877504,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41910272,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41926656,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41934848,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41938944,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41940992,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41942016,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41942528,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41942784,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41942912,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41942976,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943008,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943024,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943032,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943036,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943038,32,FLEN)
NAN_BOXED(2133922408,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943039,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165824,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165825,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165827,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165831,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165839,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165855,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165887,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165951,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25166079,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25166335,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25166847,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25167871,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25169919,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25174015,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25182207,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25198591,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25231359,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25296895,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25427967,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25690111,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(26214399,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(27262975,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(29360127,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(29360128,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31457280,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32505856,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33030144,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33292288,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
