
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_35328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1fe0000; valaddr_reg:x3; val_offset:105984*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105984*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1ff0000; valaddr_reg:x3; val_offset:105987*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105987*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1ff8000; valaddr_reg:x3; val_offset:105990*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105990*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1ffc000; valaddr_reg:x3; val_offset:105993*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105993*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1ffe000; valaddr_reg:x3; val_offset:105996*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105996*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1fff000; valaddr_reg:x3; val_offset:105999*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105999*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1fff800; valaddr_reg:x3; val_offset:106002*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106002*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1fffc00; valaddr_reg:x3; val_offset:106005*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106005*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1fffe00; valaddr_reg:x3; val_offset:106008*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106008*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1ffff00; valaddr_reg:x3; val_offset:106011*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106011*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1ffff80; valaddr_reg:x3; val_offset:106014*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106014*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1ffffc0; valaddr_reg:x3; val_offset:106017*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106017*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1ffffe0; valaddr_reg:x3; val_offset:106020*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106020*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1fffff0; valaddr_reg:x3; val_offset:106023*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106023*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1fffff8; valaddr_reg:x3; val_offset:106026*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106026*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1fffffc; valaddr_reg:x3; val_offset:106029*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106029*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1fffffe; valaddr_reg:x3; val_offset:106032*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106032*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319664 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f319664; op2val:0x0;
op3val:0x1ffffff; valaddr_reg:x3; val_offset:106035*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106035*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7800000; valaddr_reg:x3; val_offset:106038*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106038*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7800001; valaddr_reg:x3; val_offset:106041*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106041*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7800003; valaddr_reg:x3; val_offset:106044*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106044*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7800007; valaddr_reg:x3; val_offset:106047*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106047*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa780000f; valaddr_reg:x3; val_offset:106050*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106050*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa780001f; valaddr_reg:x3; val_offset:106053*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106053*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa780003f; valaddr_reg:x3; val_offset:106056*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106056*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa780007f; valaddr_reg:x3; val_offset:106059*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106059*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa78000ff; valaddr_reg:x3; val_offset:106062*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106062*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa78001ff; valaddr_reg:x3; val_offset:106065*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106065*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa78003ff; valaddr_reg:x3; val_offset:106068*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106068*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa78007ff; valaddr_reg:x3; val_offset:106071*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106071*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7800fff; valaddr_reg:x3; val_offset:106074*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106074*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7801fff; valaddr_reg:x3; val_offset:106077*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106077*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7803fff; valaddr_reg:x3; val_offset:106080*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106080*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7807fff; valaddr_reg:x3; val_offset:106083*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106083*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa780ffff; valaddr_reg:x3; val_offset:106086*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106086*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa781ffff; valaddr_reg:x3; val_offset:106089*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106089*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa783ffff; valaddr_reg:x3; val_offset:106092*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106092*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa787ffff; valaddr_reg:x3; val_offset:106095*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106095*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa78fffff; valaddr_reg:x3; val_offset:106098*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106098*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa79fffff; valaddr_reg:x3; val_offset:106101*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106101*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7bfffff; valaddr_reg:x3; val_offset:106104*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106104*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7c00000; valaddr_reg:x3; val_offset:106107*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106107*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7e00000; valaddr_reg:x3; val_offset:106110*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106110*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7f00000; valaddr_reg:x3; val_offset:106113*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106113*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7f80000; valaddr_reg:x3; val_offset:106116*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106116*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7fc0000; valaddr_reg:x3; val_offset:106119*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106119*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7fe0000; valaddr_reg:x3; val_offset:106122*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106122*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7ff0000; valaddr_reg:x3; val_offset:106125*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106125*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7ff8000; valaddr_reg:x3; val_offset:106128*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106128*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7ffc000; valaddr_reg:x3; val_offset:106131*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106131*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7ffe000; valaddr_reg:x3; val_offset:106134*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106134*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7fff000; valaddr_reg:x3; val_offset:106137*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106137*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7fff800; valaddr_reg:x3; val_offset:106140*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106140*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7fffc00; valaddr_reg:x3; val_offset:106143*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106143*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7fffe00; valaddr_reg:x3; val_offset:106146*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106146*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7ffff00; valaddr_reg:x3; val_offset:106149*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106149*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7ffff80; valaddr_reg:x3; val_offset:106152*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106152*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7ffffc0; valaddr_reg:x3; val_offset:106155*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106155*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7ffffe0; valaddr_reg:x3; val_offset:106158*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106158*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7fffff0; valaddr_reg:x3; val_offset:106161*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106161*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7fffff8; valaddr_reg:x3; val_offset:106164*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106164*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7fffffc; valaddr_reg:x3; val_offset:106167*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106167*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7fffffe; valaddr_reg:x3; val_offset:106170*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106170*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xa7ffffff; valaddr_reg:x3; val_offset:106173*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106173*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xbf800001; valaddr_reg:x3; val_offset:106176*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106176*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xbf800003; valaddr_reg:x3; val_offset:106179*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106179*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xbf800007; valaddr_reg:x3; val_offset:106182*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106182*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xbf999999; valaddr_reg:x3; val_offset:106185*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106185*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:106188*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106188*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:106191*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106191*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:106194*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106194*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:106197*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106197*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:106200*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106200*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:106203*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106203*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:106206*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106206*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:106209*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106209*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:106212*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106212*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:106215*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106215*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:106218*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106218*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325857 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2deef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325857; op2val:0x802deef4;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:106221*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106221*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac800000; valaddr_reg:x3; val_offset:106224*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106224*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac800001; valaddr_reg:x3; val_offset:106227*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106227*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac800003; valaddr_reg:x3; val_offset:106230*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106230*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac800007; valaddr_reg:x3; val_offset:106233*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106233*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac80000f; valaddr_reg:x3; val_offset:106236*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106236*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac80001f; valaddr_reg:x3; val_offset:106239*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106239*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac80003f; valaddr_reg:x3; val_offset:106242*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106242*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac80007f; valaddr_reg:x3; val_offset:106245*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106245*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac8000ff; valaddr_reg:x3; val_offset:106248*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106248*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac8001ff; valaddr_reg:x3; val_offset:106251*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106251*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac8003ff; valaddr_reg:x3; val_offset:106254*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106254*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac8007ff; valaddr_reg:x3; val_offset:106257*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106257*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac800fff; valaddr_reg:x3; val_offset:106260*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106260*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac801fff; valaddr_reg:x3; val_offset:106263*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106263*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac803fff; valaddr_reg:x3; val_offset:106266*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106266*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac807fff; valaddr_reg:x3; val_offset:106269*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106269*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac80ffff; valaddr_reg:x3; val_offset:106272*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106272*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac81ffff; valaddr_reg:x3; val_offset:106275*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106275*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac83ffff; valaddr_reg:x3; val_offset:106278*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106278*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac87ffff; valaddr_reg:x3; val_offset:106281*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106281*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac8fffff; valaddr_reg:x3; val_offset:106284*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106284*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xac9fffff; valaddr_reg:x3; val_offset:106287*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106287*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacbfffff; valaddr_reg:x3; val_offset:106290*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106290*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacc00000; valaddr_reg:x3; val_offset:106293*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106293*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xace00000; valaddr_reg:x3; val_offset:106296*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106296*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacf00000; valaddr_reg:x3; val_offset:106299*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106299*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacf80000; valaddr_reg:x3; val_offset:106302*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106302*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacfc0000; valaddr_reg:x3; val_offset:106305*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106305*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacfe0000; valaddr_reg:x3; val_offset:106308*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106308*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacff0000; valaddr_reg:x3; val_offset:106311*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106311*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacff8000; valaddr_reg:x3; val_offset:106314*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106314*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacffc000; valaddr_reg:x3; val_offset:106317*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106317*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacffe000; valaddr_reg:x3; val_offset:106320*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106320*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacfff000; valaddr_reg:x3; val_offset:106323*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106323*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacfff800; valaddr_reg:x3; val_offset:106326*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106326*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacfffc00; valaddr_reg:x3; val_offset:106329*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106329*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacfffe00; valaddr_reg:x3; val_offset:106332*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106332*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacffff00; valaddr_reg:x3; val_offset:106335*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106335*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacffff80; valaddr_reg:x3; val_offset:106338*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106338*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacffffc0; valaddr_reg:x3; val_offset:106341*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106341*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacffffe0; valaddr_reg:x3; val_offset:106344*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106344*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacfffff0; valaddr_reg:x3; val_offset:106347*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106347*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacfffff8; valaddr_reg:x3; val_offset:106350*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106350*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacfffffc; valaddr_reg:x3; val_offset:106353*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106353*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacfffffe; valaddr_reg:x3; val_offset:106356*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106356*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xacffffff; valaddr_reg:x3; val_offset:106359*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106359*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xbf800001; valaddr_reg:x3; val_offset:106362*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106362*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3307a6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2dc1fa and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3307a6; op2val:0x802dc1fa;
op3val:0xbf800003; valaddr_reg:x3; val_offset:106365*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106365*0 + 3*276*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33423360,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33488896,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33521664,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33538048,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33546240,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33550336,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33552384,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33553408,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33553920,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554176,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554304,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554368,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554400,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554416,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554424,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554428,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554430,32,FLEN)
NAN_BOXED(2133956196,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554431,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810183680,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810183681,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810183683,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810183687,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810183695,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810183711,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810183743,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810183807,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810183935,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810184191,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810184703,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810185727,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810187775,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810191871,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810200063,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810216447,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810249215,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810314751,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810445823,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2810707967,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2811232255,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2812280831,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2814377983,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2814377984,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2816475136,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2817523712,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818048000,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818310144,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818441216,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818506752,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818539520,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818555904,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818564096,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818568192,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818570240,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818571264,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818571776,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818572032,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818572160,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818572224,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818572256,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818572272,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818572280,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818572284,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818572286,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(2818572287,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2134005847,32,FLEN)
NAN_BOXED(2150493940,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894069760,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894069761,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894069763,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894069767,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894069775,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894069791,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894069823,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894069887,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894070015,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894070271,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894070783,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894071807,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894073855,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894077951,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894086143,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894102527,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894135295,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894200831,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894331903,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2894594047,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2895118335,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2896166911,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2898264063,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2898264064,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2900361216,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2901409792,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2901934080,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902196224,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902327296,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902392832,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902425600,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902441984,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902450176,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902454272,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902456320,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902457344,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902457856,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902458112,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902458240,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902458304,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902458336,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902458352,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902458360,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902458364,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902458366,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(2902458367,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2134050726,32,FLEN)
NAN_BOXED(2150482426,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
