
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_3456:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x06e4c2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x72eada and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d86e4c2; op2val:0x8172eada;
op3val:0xfe7ffff8; valaddr_reg:x3; val_offset:10368*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10368*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3457:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x06e4c2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x72eada and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d86e4c2; op2val:0x8172eada;
op3val:0xfe7ffffc; valaddr_reg:x3; val_offset:10371*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10371*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3458:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x06e4c2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x72eada and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d86e4c2; op2val:0x8172eada;
op3val:0xfe7ffffe; valaddr_reg:x3; val_offset:10374*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10374*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3459:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x06e4c2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x72eada and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d86e4c2; op2val:0x8172eada;
op3val:0xfe7fffff; valaddr_reg:x3; val_offset:10377*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10377*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3460:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:10380*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10380*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3461:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:10383*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10383*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3462:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:10386*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10386*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3463:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:10389*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10389*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3464:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:10392*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10392*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3465:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:10395*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10395*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3466:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:10398*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10398*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3467:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:10401*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10401*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3468:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:10404*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10404*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3469:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:10407*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10407*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3470:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:10410*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10410*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3471:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:10413*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10413*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3472:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:10416*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10416*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3473:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:10419*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10419*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3474:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:10422*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10422*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3475:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:10425*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10425*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3476:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b800000; valaddr_reg:x3; val_offset:10428*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10428*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3477:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b800001; valaddr_reg:x3; val_offset:10431*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10431*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3478:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b800003; valaddr_reg:x3; val_offset:10434*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10434*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3479:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b800007; valaddr_reg:x3; val_offset:10437*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10437*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3480:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b80000f; valaddr_reg:x3; val_offset:10440*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10440*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3481:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b80001f; valaddr_reg:x3; val_offset:10443*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10443*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3482:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b80003f; valaddr_reg:x3; val_offset:10446*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10446*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3483:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b80007f; valaddr_reg:x3; val_offset:10449*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10449*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3484:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b8000ff; valaddr_reg:x3; val_offset:10452*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10452*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3485:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b8001ff; valaddr_reg:x3; val_offset:10455*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10455*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3486:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b8003ff; valaddr_reg:x3; val_offset:10458*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10458*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3487:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b8007ff; valaddr_reg:x3; val_offset:10461*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10461*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3488:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b800fff; valaddr_reg:x3; val_offset:10464*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10464*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3489:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b801fff; valaddr_reg:x3; val_offset:10467*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10467*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3490:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b803fff; valaddr_reg:x3; val_offset:10470*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10470*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3491:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b807fff; valaddr_reg:x3; val_offset:10473*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10473*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3492:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b80ffff; valaddr_reg:x3; val_offset:10476*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10476*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3493:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b81ffff; valaddr_reg:x3; val_offset:10479*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10479*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3494:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b83ffff; valaddr_reg:x3; val_offset:10482*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10482*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3495:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b87ffff; valaddr_reg:x3; val_offset:10485*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10485*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3496:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b8fffff; valaddr_reg:x3; val_offset:10488*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10488*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3497:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8b9fffff; valaddr_reg:x3; val_offset:10491*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10491*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3498:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bbfffff; valaddr_reg:x3; val_offset:10494*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10494*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3499:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bc00000; valaddr_reg:x3; val_offset:10497*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10497*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3500:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8be00000; valaddr_reg:x3; val_offset:10500*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10500*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3501:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bf00000; valaddr_reg:x3; val_offset:10503*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10503*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3502:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bf80000; valaddr_reg:x3; val_offset:10506*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10506*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3503:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bfc0000; valaddr_reg:x3; val_offset:10509*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10509*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3504:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bfe0000; valaddr_reg:x3; val_offset:10512*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10512*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3505:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bff0000; valaddr_reg:x3; val_offset:10515*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10515*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3506:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bff8000; valaddr_reg:x3; val_offset:10518*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10518*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3507:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bffc000; valaddr_reg:x3; val_offset:10521*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10521*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3508:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bffe000; valaddr_reg:x3; val_offset:10524*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10524*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3509:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bfff000; valaddr_reg:x3; val_offset:10527*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10527*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3510:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bfff800; valaddr_reg:x3; val_offset:10530*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10530*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3511:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bfffc00; valaddr_reg:x3; val_offset:10533*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10533*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3512:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bfffe00; valaddr_reg:x3; val_offset:10536*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10536*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3513:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bffff00; valaddr_reg:x3; val_offset:10539*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10539*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3514:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bffff80; valaddr_reg:x3; val_offset:10542*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10542*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3515:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bffffc0; valaddr_reg:x3; val_offset:10545*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10545*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3516:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bffffe0; valaddr_reg:x3; val_offset:10548*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10548*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3517:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bfffff0; valaddr_reg:x3; val_offset:10551*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10551*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3518:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bfffff8; valaddr_reg:x3; val_offset:10554*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10554*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3519:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bfffffc; valaddr_reg:x3; val_offset:10557*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10557*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3520:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bfffffe; valaddr_reg:x3; val_offset:10560*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10560*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3521:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ebdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d88ebdb; op2val:0x80000000;
op3val:0x8bffffff; valaddr_reg:x3; val_offset:10563*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10563*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3522:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x71000000; valaddr_reg:x3; val_offset:10566*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10566*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3523:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x71000001; valaddr_reg:x3; val_offset:10569*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10569*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3524:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x71000003; valaddr_reg:x3; val_offset:10572*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10572*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3525:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x71000007; valaddr_reg:x3; val_offset:10575*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10575*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3526:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7100000f; valaddr_reg:x3; val_offset:10578*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10578*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3527:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7100001f; valaddr_reg:x3; val_offset:10581*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10581*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3528:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7100003f; valaddr_reg:x3; val_offset:10584*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10584*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3529:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7100007f; valaddr_reg:x3; val_offset:10587*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10587*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3530:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x710000ff; valaddr_reg:x3; val_offset:10590*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10590*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3531:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x710001ff; valaddr_reg:x3; val_offset:10593*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10593*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3532:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x710003ff; valaddr_reg:x3; val_offset:10596*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10596*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3533:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x710007ff; valaddr_reg:x3; val_offset:10599*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10599*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3534:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x71000fff; valaddr_reg:x3; val_offset:10602*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10602*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3535:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x71001fff; valaddr_reg:x3; val_offset:10605*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10605*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3536:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x71003fff; valaddr_reg:x3; val_offset:10608*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10608*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3537:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x71007fff; valaddr_reg:x3; val_offset:10611*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10611*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3538:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7100ffff; valaddr_reg:x3; val_offset:10614*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10614*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3539:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7101ffff; valaddr_reg:x3; val_offset:10617*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10617*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3540:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7103ffff; valaddr_reg:x3; val_offset:10620*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10620*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3541:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7107ffff; valaddr_reg:x3; val_offset:10623*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10623*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3542:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x710fffff; valaddr_reg:x3; val_offset:10626*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10626*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3543:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x711fffff; valaddr_reg:x3; val_offset:10629*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10629*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3544:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x713fffff; valaddr_reg:x3; val_offset:10632*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10632*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3545:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x71400000; valaddr_reg:x3; val_offset:10635*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10635*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3546:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x71600000; valaddr_reg:x3; val_offset:10638*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10638*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3547:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x71700000; valaddr_reg:x3; val_offset:10641*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10641*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3548:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x71780000; valaddr_reg:x3; val_offset:10644*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10644*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3549:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717c0000; valaddr_reg:x3; val_offset:10647*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10647*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3550:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717e0000; valaddr_reg:x3; val_offset:10650*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10650*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3551:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717f0000; valaddr_reg:x3; val_offset:10653*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10653*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3552:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717f8000; valaddr_reg:x3; val_offset:10656*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10656*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3553:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717fc000; valaddr_reg:x3; val_offset:10659*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10659*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3554:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717fe000; valaddr_reg:x3; val_offset:10662*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10662*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3555:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717ff000; valaddr_reg:x3; val_offset:10665*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10665*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3556:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717ff800; valaddr_reg:x3; val_offset:10668*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10668*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3557:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717ffc00; valaddr_reg:x3; val_offset:10671*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10671*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3558:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717ffe00; valaddr_reg:x3; val_offset:10674*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10674*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3559:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717fff00; valaddr_reg:x3; val_offset:10677*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10677*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3560:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717fff80; valaddr_reg:x3; val_offset:10680*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10680*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3561:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717fffc0; valaddr_reg:x3; val_offset:10683*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10683*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3562:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717fffe0; valaddr_reg:x3; val_offset:10686*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10686*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3563:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717ffff0; valaddr_reg:x3; val_offset:10689*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10689*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3564:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717ffff8; valaddr_reg:x3; val_offset:10692*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10692*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3565:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717ffffc; valaddr_reg:x3; val_offset:10695*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10695*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3566:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717ffffe; valaddr_reg:x3; val_offset:10698*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10698*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3567:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x717fffff; valaddr_reg:x3; val_offset:10701*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10701*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3568:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7f000001; valaddr_reg:x3; val_offset:10704*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10704*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3569:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7f000003; valaddr_reg:x3; val_offset:10707*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10707*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3570:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7f000007; valaddr_reg:x3; val_offset:10710*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10710*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3571:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7f199999; valaddr_reg:x3; val_offset:10713*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10713*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3572:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7f249249; valaddr_reg:x3; val_offset:10716*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10716*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3573:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7f333333; valaddr_reg:x3; val_offset:10719*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10719*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3574:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:10722*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10722*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3575:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:10725*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10725*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3576:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7f444444; valaddr_reg:x3; val_offset:10728*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10728*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3577:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:10731*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10731*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3578:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:10734*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10734*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3579:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7f666666; valaddr_reg:x3; val_offset:10737*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10737*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3580:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:10740*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10740*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3581:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:10743*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10743*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3582:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:10746*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10746*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3583:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d3190 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x681417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d3190; op2val:0x41681417;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:10749*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10749*0 + 3*27*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2105992386,32,FLEN)
NAN_BOXED(2171792090,32,FLEN)
NAN_BOXED(4269801464,32,FLEN)
NAN_BOXED(2105992386,32,FLEN)
NAN_BOXED(2171792090,32,FLEN)
NAN_BOXED(4269801468,32,FLEN)
NAN_BOXED(2105992386,32,FLEN)
NAN_BOXED(2171792090,32,FLEN)
NAN_BOXED(4269801470,32,FLEN)
NAN_BOXED(2105992386,32,FLEN)
NAN_BOXED(2171792090,32,FLEN)
NAN_BOXED(4269801471,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421632,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421633,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421635,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421639,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421647,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421663,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421695,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421759,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421887,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340422143,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340422655,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340423679,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340425727,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340429823,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340438015,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340454399,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340487167,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340552703,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340683775,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340945919,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2341470207,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2342518783,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2344615935,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2344615936,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2346713088,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2347761664,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348285952,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348548096,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348679168,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348744704,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348777472,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348793856,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348802048,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348806144,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348808192,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809216,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809728,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809984,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810112,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810176,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810208,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810224,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810232,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810236,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810238,32,FLEN)
NAN_BOXED(2106125275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810239,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895825408,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895825409,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895825411,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895825415,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895825423,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895825439,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895825471,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895825535,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895825663,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895825919,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895826431,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895827455,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895829503,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895833599,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895841791,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895858175,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895890943,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1895956479,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1896087551,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1896349695,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1896873983,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1897922559,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1900019711,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1900019712,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1902116864,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1903165440,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1903689728,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1903951872,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904082944,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904148480,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904181248,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904197632,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904205824,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904209920,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904211968,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904212992,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904213504,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904213760,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904213888,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904213952,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904213984,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904214000,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904214008,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904214012,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904214014,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(1904214015,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2106405264,32,FLEN)
NAN_BOXED(1097339927,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
