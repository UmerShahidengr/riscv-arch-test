
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_35840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x347f9a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f347f9a; op2val:0x80000000;
op3val:0x8e7ffffe; valaddr_reg:x3; val_offset:107520*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107520*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x347f9a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f347f9a; op2val:0x80000000;
op3val:0x8e7fffff; valaddr_reg:x3; val_offset:107523*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107523*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:107526*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107526*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:107529*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107529*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:107532*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107532*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:107535*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107535*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:107538*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107538*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:107541*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107541*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:107544*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107544*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:107547*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107547*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:107550*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107550*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:107553*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107553*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:107556*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107556*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:107559*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107559*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:107562*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107562*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:107565*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107565*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:107568*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107568*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:107571*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107571*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c000000; valaddr_reg:x3; val_offset:107574*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107574*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c000001; valaddr_reg:x3; val_offset:107577*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107577*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c000003; valaddr_reg:x3; val_offset:107580*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107580*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c000007; valaddr_reg:x3; val_offset:107583*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107583*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c00000f; valaddr_reg:x3; val_offset:107586*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107586*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c00001f; valaddr_reg:x3; val_offset:107589*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107589*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c00003f; valaddr_reg:x3; val_offset:107592*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107592*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c00007f; valaddr_reg:x3; val_offset:107595*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107595*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c0000ff; valaddr_reg:x3; val_offset:107598*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107598*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c0001ff; valaddr_reg:x3; val_offset:107601*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107601*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c0003ff; valaddr_reg:x3; val_offset:107604*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107604*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c0007ff; valaddr_reg:x3; val_offset:107607*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107607*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c000fff; valaddr_reg:x3; val_offset:107610*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107610*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c001fff; valaddr_reg:x3; val_offset:107613*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107613*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c003fff; valaddr_reg:x3; val_offset:107616*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107616*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c007fff; valaddr_reg:x3; val_offset:107619*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107619*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c00ffff; valaddr_reg:x3; val_offset:107622*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107622*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c01ffff; valaddr_reg:x3; val_offset:107625*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107625*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c03ffff; valaddr_reg:x3; val_offset:107628*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107628*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c07ffff; valaddr_reg:x3; val_offset:107631*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107631*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c0fffff; valaddr_reg:x3; val_offset:107634*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107634*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c1fffff; valaddr_reg:x3; val_offset:107637*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107637*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c3fffff; valaddr_reg:x3; val_offset:107640*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107640*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c400000; valaddr_reg:x3; val_offset:107643*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107643*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c600000; valaddr_reg:x3; val_offset:107646*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107646*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c700000; valaddr_reg:x3; val_offset:107649*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107649*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c780000; valaddr_reg:x3; val_offset:107652*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107652*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7c0000; valaddr_reg:x3; val_offset:107655*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107655*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7e0000; valaddr_reg:x3; val_offset:107658*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107658*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7f0000; valaddr_reg:x3; val_offset:107661*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107661*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7f8000; valaddr_reg:x3; val_offset:107664*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107664*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7fc000; valaddr_reg:x3; val_offset:107667*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107667*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7fe000; valaddr_reg:x3; val_offset:107670*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107670*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7ff000; valaddr_reg:x3; val_offset:107673*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107673*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7ff800; valaddr_reg:x3; val_offset:107676*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107676*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7ffc00; valaddr_reg:x3; val_offset:107679*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107679*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7ffe00; valaddr_reg:x3; val_offset:107682*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107682*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7fff00; valaddr_reg:x3; val_offset:107685*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107685*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7fff80; valaddr_reg:x3; val_offset:107688*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107688*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7fffc0; valaddr_reg:x3; val_offset:107691*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107691*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7fffe0; valaddr_reg:x3; val_offset:107694*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107694*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7ffff0; valaddr_reg:x3; val_offset:107697*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107697*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7ffff8; valaddr_reg:x3; val_offset:107700*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107700*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7ffffc; valaddr_reg:x3; val_offset:107703*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107703*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7ffffe; valaddr_reg:x3; val_offset:107706*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107706*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349832 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f349832; op2val:0x80000000;
op3val:0x8c7fffff; valaddr_reg:x3; val_offset:107709*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107709*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a000000; valaddr_reg:x3; val_offset:107712*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107712*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a000001; valaddr_reg:x3; val_offset:107715*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107715*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a000003; valaddr_reg:x3; val_offset:107718*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107718*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a000007; valaddr_reg:x3; val_offset:107721*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107721*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a00000f; valaddr_reg:x3; val_offset:107724*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107724*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a00001f; valaddr_reg:x3; val_offset:107727*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107727*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a00003f; valaddr_reg:x3; val_offset:107730*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107730*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a00007f; valaddr_reg:x3; val_offset:107733*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107733*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a0000ff; valaddr_reg:x3; val_offset:107736*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107736*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a0001ff; valaddr_reg:x3; val_offset:107739*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107739*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a0003ff; valaddr_reg:x3; val_offset:107742*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107742*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a0007ff; valaddr_reg:x3; val_offset:107745*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107745*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a000fff; valaddr_reg:x3; val_offset:107748*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107748*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a001fff; valaddr_reg:x3; val_offset:107751*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107751*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a003fff; valaddr_reg:x3; val_offset:107754*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107754*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a007fff; valaddr_reg:x3; val_offset:107757*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107757*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a00ffff; valaddr_reg:x3; val_offset:107760*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107760*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a01ffff; valaddr_reg:x3; val_offset:107763*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107763*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a03ffff; valaddr_reg:x3; val_offset:107766*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107766*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a07ffff; valaddr_reg:x3; val_offset:107769*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107769*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a0fffff; valaddr_reg:x3; val_offset:107772*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107772*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a1fffff; valaddr_reg:x3; val_offset:107775*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107775*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a3fffff; valaddr_reg:x3; val_offset:107778*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107778*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a400000; valaddr_reg:x3; val_offset:107781*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107781*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a600000; valaddr_reg:x3; val_offset:107784*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107784*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a700000; valaddr_reg:x3; val_offset:107787*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107787*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a780000; valaddr_reg:x3; val_offset:107790*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107790*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7c0000; valaddr_reg:x3; val_offset:107793*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107793*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7e0000; valaddr_reg:x3; val_offset:107796*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107796*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7f0000; valaddr_reg:x3; val_offset:107799*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107799*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7f8000; valaddr_reg:x3; val_offset:107802*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107802*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7fc000; valaddr_reg:x3; val_offset:107805*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107805*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7fe000; valaddr_reg:x3; val_offset:107808*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107808*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7ff000; valaddr_reg:x3; val_offset:107811*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107811*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7ff800; valaddr_reg:x3; val_offset:107814*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107814*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7ffc00; valaddr_reg:x3; val_offset:107817*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107817*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7ffe00; valaddr_reg:x3; val_offset:107820*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107820*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7fff00; valaddr_reg:x3; val_offset:107823*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107823*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7fff80; valaddr_reg:x3; val_offset:107826*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107826*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7fffc0; valaddr_reg:x3; val_offset:107829*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107829*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7fffe0; valaddr_reg:x3; val_offset:107832*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107832*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7ffff0; valaddr_reg:x3; val_offset:107835*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107835*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7ffff8; valaddr_reg:x3; val_offset:107838*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107838*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7ffffc; valaddr_reg:x3; val_offset:107841*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107841*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7ffffe; valaddr_reg:x3; val_offset:107844*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107844*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x2a7fffff; valaddr_reg:x3; val_offset:107847*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107847*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x3f800001; valaddr_reg:x3; val_offset:107850*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107850*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x3f800003; valaddr_reg:x3; val_offset:107853*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107853*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x3f800007; valaddr_reg:x3; val_offset:107856*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107856*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x3f999999; valaddr_reg:x3; val_offset:107859*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107859*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:107862*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107862*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:107865*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107865*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:107868*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107868*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:107871*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107871*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:107874*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107874*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:107877*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107877*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:107880*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107880*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:107883*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107883*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:107886*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107886*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:107889*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107889*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:107892*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107892*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x352ae3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d37c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f352ae3; op2val:0x2d37c2;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:107895*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107895*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354d4f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34bcb3 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354d4f; op2val:0xbfb4bcb3;
op3val:0xfd000000; valaddr_reg:x3; val_offset:107898*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107898*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354d4f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34bcb3 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354d4f; op2val:0xbfb4bcb3;
op3val:0xfd000001; valaddr_reg:x3; val_offset:107901*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107901*0 + 3*280*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134146970,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753278,32,FLEN)
NAN_BOXED(2134146970,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753279,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810240,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810241,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810243,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810247,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810255,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810271,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810303,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810367,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810495,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810751,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348811263,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348812287,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348814335,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348818431,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348826623,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348843007,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348875775,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348941311,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349072383,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349334527,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349858815,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2350907391,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004543,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004544,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2355101696,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356150272,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356674560,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356936704,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357067776,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357133312,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357166080,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357182464,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357190656,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357194752,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357196800,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357197824,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198336,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198592,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198720,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198784,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198816,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198832,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198840,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198844,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198846,32,FLEN)
NAN_BOXED(2134153266,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198847,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704643072,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704643073,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704643075,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704643079,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704643087,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704643103,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704643135,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704643199,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704643327,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704643583,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704644095,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704645119,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704647167,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704651263,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704659455,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704675839,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704708607,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704774143,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(704905215,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(705167359,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(705691647,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(706740223,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(708837375,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(708837376,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(710934528,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(711983104,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(712507392,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(712769536,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(712900608,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(712966144,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(712998912,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(713015296,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(713023488,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(713027584,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(713029632,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(713030656,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(713031168,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(713031424,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(713031552,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(713031616,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(713031648,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(713031664,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(713031672,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(713031676,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(713031678,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(713031679,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2134190819,32,FLEN)
NAN_BOXED(2963394,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2134199631,32,FLEN)
NAN_BOXED(3216293043,32,FLEN)
NAN_BOXED(4244635648,32,FLEN)
NAN_BOXED(2134199631,32,FLEN)
NAN_BOXED(3216293043,32,FLEN)
NAN_BOXED(4244635649,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
