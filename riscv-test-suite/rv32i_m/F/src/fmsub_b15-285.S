
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_36352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe08fffff; valaddr_reg:x3; val_offset:109056*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109056*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe09fffff; valaddr_reg:x3; val_offset:109059*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109059*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0bfffff; valaddr_reg:x3; val_offset:109062*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109062*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0c00000; valaddr_reg:x3; val_offset:109065*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109065*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0e00000; valaddr_reg:x3; val_offset:109068*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109068*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0f00000; valaddr_reg:x3; val_offset:109071*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109071*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0f80000; valaddr_reg:x3; val_offset:109074*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109074*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0fc0000; valaddr_reg:x3; val_offset:109077*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109077*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0fe0000; valaddr_reg:x3; val_offset:109080*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109080*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0ff0000; valaddr_reg:x3; val_offset:109083*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109083*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0ff8000; valaddr_reg:x3; val_offset:109086*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109086*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0ffc000; valaddr_reg:x3; val_offset:109089*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109089*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0ffe000; valaddr_reg:x3; val_offset:109092*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109092*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0fff000; valaddr_reg:x3; val_offset:109095*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109095*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0fff800; valaddr_reg:x3; val_offset:109098*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109098*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0fffc00; valaddr_reg:x3; val_offset:109101*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109101*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0fffe00; valaddr_reg:x3; val_offset:109104*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109104*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0ffff00; valaddr_reg:x3; val_offset:109107*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109107*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0ffff80; valaddr_reg:x3; val_offset:109110*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109110*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0ffffc0; valaddr_reg:x3; val_offset:109113*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109113*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0ffffe0; valaddr_reg:x3; val_offset:109116*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109116*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0fffff0; valaddr_reg:x3; val_offset:109119*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109119*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0fffff8; valaddr_reg:x3; val_offset:109122*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109122*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0fffffc; valaddr_reg:x3; val_offset:109125*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109125*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0fffffe; valaddr_reg:x3; val_offset:109128*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109128*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xe0ffffff; valaddr_reg:x3; val_offset:109131*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109131*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xff000001; valaddr_reg:x3; val_offset:109134*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109134*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xff000003; valaddr_reg:x3; val_offset:109137*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109137*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xff000007; valaddr_reg:x3; val_offset:109140*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109140*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xff199999; valaddr_reg:x3; val_offset:109143*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109143*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xff249249; valaddr_reg:x3; val_offset:109146*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109146*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xff333333; valaddr_reg:x3; val_offset:109149*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109149*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:109152*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109152*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:109155*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109155*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xff444444; valaddr_reg:x3; val_offset:109158*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109158*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:109161*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109161*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:109164*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109164*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xff666666; valaddr_reg:x3; val_offset:109167*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109167*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:109170*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109170*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:109173*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109173*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:109176*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109176*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c70a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x324d74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37c70a; op2val:0xbfb24d74;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:109179*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109179*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:109182*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109182*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:109185*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109185*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:109188*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109188*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:109191*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109191*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:109194*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109194*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:109197*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109197*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:109200*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109200*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:109203*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109203*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:109206*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109206*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:109209*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109209*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:109212*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109212*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:109215*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109215*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:109218*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109218*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:109221*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109221*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:109224*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109224*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:109227*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109227*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a000000; valaddr_reg:x3; val_offset:109230*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109230*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a000001; valaddr_reg:x3; val_offset:109233*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109233*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a000003; valaddr_reg:x3; val_offset:109236*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109236*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a000007; valaddr_reg:x3; val_offset:109239*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109239*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a00000f; valaddr_reg:x3; val_offset:109242*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109242*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a00001f; valaddr_reg:x3; val_offset:109245*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109245*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a00003f; valaddr_reg:x3; val_offset:109248*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109248*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a00007f; valaddr_reg:x3; val_offset:109251*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109251*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a0000ff; valaddr_reg:x3; val_offset:109254*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109254*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a0001ff; valaddr_reg:x3; val_offset:109257*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109257*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a0003ff; valaddr_reg:x3; val_offset:109260*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109260*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a0007ff; valaddr_reg:x3; val_offset:109263*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109263*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a000fff; valaddr_reg:x3; val_offset:109266*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109266*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a001fff; valaddr_reg:x3; val_offset:109269*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109269*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a003fff; valaddr_reg:x3; val_offset:109272*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109272*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a007fff; valaddr_reg:x3; val_offset:109275*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109275*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a00ffff; valaddr_reg:x3; val_offset:109278*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109278*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a01ffff; valaddr_reg:x3; val_offset:109281*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109281*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a03ffff; valaddr_reg:x3; val_offset:109284*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109284*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a07ffff; valaddr_reg:x3; val_offset:109287*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109287*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a0fffff; valaddr_reg:x3; val_offset:109290*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109290*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a1fffff; valaddr_reg:x3; val_offset:109293*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109293*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a3fffff; valaddr_reg:x3; val_offset:109296*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109296*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a400000; valaddr_reg:x3; val_offset:109299*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109299*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a600000; valaddr_reg:x3; val_offset:109302*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109302*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a700000; valaddr_reg:x3; val_offset:109305*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109305*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a780000; valaddr_reg:x3; val_offset:109308*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109308*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7c0000; valaddr_reg:x3; val_offset:109311*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109311*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7e0000; valaddr_reg:x3; val_offset:109314*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109314*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7f0000; valaddr_reg:x3; val_offset:109317*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109317*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7f8000; valaddr_reg:x3; val_offset:109320*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109320*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7fc000; valaddr_reg:x3; val_offset:109323*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109323*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7fe000; valaddr_reg:x3; val_offset:109326*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109326*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7ff000; valaddr_reg:x3; val_offset:109329*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109329*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7ff800; valaddr_reg:x3; val_offset:109332*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109332*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7ffc00; valaddr_reg:x3; val_offset:109335*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109335*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7ffe00; valaddr_reg:x3; val_offset:109338*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109338*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7fff00; valaddr_reg:x3; val_offset:109341*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109341*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7fff80; valaddr_reg:x3; val_offset:109344*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109344*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7fffc0; valaddr_reg:x3; val_offset:109347*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109347*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7fffe0; valaddr_reg:x3; val_offset:109350*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109350*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7ffff0; valaddr_reg:x3; val_offset:109353*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109353*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7ffff8; valaddr_reg:x3; val_offset:109356*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109356*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7ffffc; valaddr_reg:x3; val_offset:109359*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109359*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7ffffe; valaddr_reg:x3; val_offset:109362*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109362*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e38d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37e38d; op2val:0x80000000;
op3val:0x8a7fffff; valaddr_reg:x3; val_offset:109365*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109365*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c000000; valaddr_reg:x3; val_offset:109368*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109368*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c000001; valaddr_reg:x3; val_offset:109371*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109371*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c000003; valaddr_reg:x3; val_offset:109374*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109374*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c000007; valaddr_reg:x3; val_offset:109377*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109377*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c00000f; valaddr_reg:x3; val_offset:109380*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109380*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c00001f; valaddr_reg:x3; val_offset:109383*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109383*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c00003f; valaddr_reg:x3; val_offset:109386*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109386*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c00007f; valaddr_reg:x3; val_offset:109389*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109389*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c0000ff; valaddr_reg:x3; val_offset:109392*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109392*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c0001ff; valaddr_reg:x3; val_offset:109395*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109395*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c0003ff; valaddr_reg:x3; val_offset:109398*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109398*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c0007ff; valaddr_reg:x3; val_offset:109401*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109401*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c000fff; valaddr_reg:x3; val_offset:109404*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109404*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c001fff; valaddr_reg:x3; val_offset:109407*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109407*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c003fff; valaddr_reg:x3; val_offset:109410*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109410*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c007fff; valaddr_reg:x3; val_offset:109413*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109413*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c00ffff; valaddr_reg:x3; val_offset:109416*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109416*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c01ffff; valaddr_reg:x3; val_offset:109419*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109419*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c03ffff; valaddr_reg:x3; val_offset:109422*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109422*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c07ffff; valaddr_reg:x3; val_offset:109425*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109425*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c0fffff; valaddr_reg:x3; val_offset:109428*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109428*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c1fffff; valaddr_reg:x3; val_offset:109431*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109431*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c3fffff; valaddr_reg:x3; val_offset:109434*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109434*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c400000; valaddr_reg:x3; val_offset:109437*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109437*0 + 3*284*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3767533567,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3768582143,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3770679295,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3770679296,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3772776448,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3773825024,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774349312,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774611456,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774742528,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774808064,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774840832,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774857216,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774865408,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774869504,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774871552,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774872576,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774873088,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774873344,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774873472,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774873536,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774873568,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774873584,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774873592,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774873596,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774873598,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(3774873599,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2134361866,32,FLEN)
NAN_BOXED(3216133492,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255808,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255809,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255811,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255815,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255823,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255839,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255871,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255935,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256063,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256319,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256831,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315257855,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315259903,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315263999,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315272191,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315288575,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315321343,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315386879,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315517951,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315780095,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2316304383,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2317352959,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2319450111,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2319450112,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2321547264,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2322595840,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323120128,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323382272,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323513344,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323578880,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323611648,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323628032,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323636224,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323640320,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323642368,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323643392,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323643904,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644160,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644288,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644352,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644384,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644400,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644408,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644412,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644414,32,FLEN)
NAN_BOXED(2134369165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644415,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006632960,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006632961,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006632963,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006632967,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006632975,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006632991,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006633023,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006633087,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006633215,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006633471,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006633983,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006635007,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006637055,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006641151,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006649343,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006665727,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006698495,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006764031,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1006895103,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1007157247,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1007681535,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1008730111,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1010827263,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1010827264,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
