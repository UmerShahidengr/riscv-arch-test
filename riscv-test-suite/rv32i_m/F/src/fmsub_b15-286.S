
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_36480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c600000; valaddr_reg:x3; val_offset:109440*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109440*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c700000; valaddr_reg:x3; val_offset:109443*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109443*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c780000; valaddr_reg:x3; val_offset:109446*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109446*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7c0000; valaddr_reg:x3; val_offset:109449*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109449*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7e0000; valaddr_reg:x3; val_offset:109452*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109452*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7f0000; valaddr_reg:x3; val_offset:109455*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109455*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7f8000; valaddr_reg:x3; val_offset:109458*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109458*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7fc000; valaddr_reg:x3; val_offset:109461*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109461*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7fe000; valaddr_reg:x3; val_offset:109464*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109464*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7ff000; valaddr_reg:x3; val_offset:109467*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109467*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7ff800; valaddr_reg:x3; val_offset:109470*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109470*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7ffc00; valaddr_reg:x3; val_offset:109473*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109473*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7ffe00; valaddr_reg:x3; val_offset:109476*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109476*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7fff00; valaddr_reg:x3; val_offset:109479*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109479*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7fff80; valaddr_reg:x3; val_offset:109482*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109482*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7fffc0; valaddr_reg:x3; val_offset:109485*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109485*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7fffe0; valaddr_reg:x3; val_offset:109488*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109488*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7ffff0; valaddr_reg:x3; val_offset:109491*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109491*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7ffff8; valaddr_reg:x3; val_offset:109494*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109494*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7ffffc; valaddr_reg:x3; val_offset:109497*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109497*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7ffffe; valaddr_reg:x3; val_offset:109500*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109500*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3c7fffff; valaddr_reg:x3; val_offset:109503*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109503*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3f800001; valaddr_reg:x3; val_offset:109506*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109506*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3f800003; valaddr_reg:x3; val_offset:109509*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109509*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3f800007; valaddr_reg:x3; val_offset:109512*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109512*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3f999999; valaddr_reg:x3; val_offset:109515*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109515*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:109518*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109518*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:109521*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109521*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:109524*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109524*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:109527*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109527*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:109530*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109530*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:109533*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109533*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:109536*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109536*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:109539*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109539*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:109542*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109542*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:109545*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109545*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:109548*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109548*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381626 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c8035 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381626; op2val:0x2c8035;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:109551*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109551*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x3f800001; valaddr_reg:x3; val_offset:109554*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109554*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x3f800003; valaddr_reg:x3; val_offset:109557*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109557*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x3f800007; valaddr_reg:x3; val_offset:109560*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109560*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x3f999999; valaddr_reg:x3; val_offset:109563*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109563*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:109566*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109566*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:109569*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109569*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:109572*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109572*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:109575*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109575*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:109578*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109578*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:109581*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109581*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:109584*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109584*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:109587*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109587*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:109590*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109590*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:109593*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109593*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:109596*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109596*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:109599*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109599*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44800000; valaddr_reg:x3; val_offset:109602*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109602*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44800001; valaddr_reg:x3; val_offset:109605*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109605*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44800003; valaddr_reg:x3; val_offset:109608*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109608*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44800007; valaddr_reg:x3; val_offset:109611*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109611*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x4480000f; valaddr_reg:x3; val_offset:109614*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109614*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x4480001f; valaddr_reg:x3; val_offset:109617*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109617*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x4480003f; valaddr_reg:x3; val_offset:109620*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109620*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x4480007f; valaddr_reg:x3; val_offset:109623*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109623*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x448000ff; valaddr_reg:x3; val_offset:109626*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109626*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x448001ff; valaddr_reg:x3; val_offset:109629*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109629*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x448003ff; valaddr_reg:x3; val_offset:109632*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109632*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x448007ff; valaddr_reg:x3; val_offset:109635*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109635*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44800fff; valaddr_reg:x3; val_offset:109638*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109638*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44801fff; valaddr_reg:x3; val_offset:109641*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109641*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44803fff; valaddr_reg:x3; val_offset:109644*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109644*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44807fff; valaddr_reg:x3; val_offset:109647*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109647*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x4480ffff; valaddr_reg:x3; val_offset:109650*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109650*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x4481ffff; valaddr_reg:x3; val_offset:109653*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109653*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x4483ffff; valaddr_reg:x3; val_offset:109656*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109656*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x4487ffff; valaddr_reg:x3; val_offset:109659*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109659*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x448fffff; valaddr_reg:x3; val_offset:109662*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109662*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x449fffff; valaddr_reg:x3; val_offset:109665*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109665*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44bfffff; valaddr_reg:x3; val_offset:109668*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109668*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44c00000; valaddr_reg:x3; val_offset:109671*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109671*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44e00000; valaddr_reg:x3; val_offset:109674*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109674*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44f00000; valaddr_reg:x3; val_offset:109677*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109677*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44f80000; valaddr_reg:x3; val_offset:109680*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109680*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44fc0000; valaddr_reg:x3; val_offset:109683*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109683*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44fe0000; valaddr_reg:x3; val_offset:109686*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109686*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44ff0000; valaddr_reg:x3; val_offset:109689*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109689*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44ff8000; valaddr_reg:x3; val_offset:109692*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109692*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44ffc000; valaddr_reg:x3; val_offset:109695*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109695*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44ffe000; valaddr_reg:x3; val_offset:109698*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109698*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44fff000; valaddr_reg:x3; val_offset:109701*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109701*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44fff800; valaddr_reg:x3; val_offset:109704*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109704*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44fffc00; valaddr_reg:x3; val_offset:109707*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109707*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44fffe00; valaddr_reg:x3; val_offset:109710*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109710*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44ffff00; valaddr_reg:x3; val_offset:109713*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109713*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44ffff80; valaddr_reg:x3; val_offset:109716*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109716*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44ffffc0; valaddr_reg:x3; val_offset:109719*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109719*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44ffffe0; valaddr_reg:x3; val_offset:109722*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109722*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44fffff0; valaddr_reg:x3; val_offset:109725*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109725*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44fffff8; valaddr_reg:x3; val_offset:109728*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109728*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44fffffc; valaddr_reg:x3; val_offset:109731*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109731*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44fffffe; valaddr_reg:x3; val_offset:109734*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109734*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3820c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c7da4 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3820c3; op2val:0x2c7da4;
op3val:0x44ffffff; valaddr_reg:x3; val_offset:109737*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109737*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf800000; valaddr_reg:x3; val_offset:109740*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109740*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf800001; valaddr_reg:x3; val_offset:109743*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109743*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf800003; valaddr_reg:x3; val_offset:109746*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109746*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf800007; valaddr_reg:x3; val_offset:109749*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109749*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf80000f; valaddr_reg:x3; val_offset:109752*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109752*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf80001f; valaddr_reg:x3; val_offset:109755*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109755*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf80003f; valaddr_reg:x3; val_offset:109758*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109758*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf80007f; valaddr_reg:x3; val_offset:109761*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109761*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf8000ff; valaddr_reg:x3; val_offset:109764*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109764*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf8001ff; valaddr_reg:x3; val_offset:109767*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109767*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf8003ff; valaddr_reg:x3; val_offset:109770*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109770*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf8007ff; valaddr_reg:x3; val_offset:109773*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109773*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf800fff; valaddr_reg:x3; val_offset:109776*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109776*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf801fff; valaddr_reg:x3; val_offset:109779*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109779*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf803fff; valaddr_reg:x3; val_offset:109782*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109782*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf807fff; valaddr_reg:x3; val_offset:109785*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109785*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf80ffff; valaddr_reg:x3; val_offset:109788*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109788*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf81ffff; valaddr_reg:x3; val_offset:109791*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109791*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf83ffff; valaddr_reg:x3; val_offset:109794*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109794*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf87ffff; valaddr_reg:x3; val_offset:109797*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109797*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf8fffff; valaddr_reg:x3; val_offset:109800*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109800*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf999999; valaddr_reg:x3; val_offset:109803*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109803*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbf9fffff; valaddr_reg:x3; val_offset:109806*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109806*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:109809*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109809*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:109812*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109812*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:109815*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109815*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:109818*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109818*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383e3c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2c7686 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f383e3c; op2val:0x802c7686;
op3val:0xbfbfffff; valaddr_reg:x3; val_offset:109821*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109821*0 + 3*285*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1012924416,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1013972992,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1014497280,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1014759424,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1014890496,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1014956032,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1014988800,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1015005184,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1015013376,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1015017472,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1015019520,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1015020544,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1015021056,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1015021312,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1015021440,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1015021504,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1015021536,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1015021552,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1015021560,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1015021564,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1015021566,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1015021567,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2134382118,32,FLEN)
NAN_BOXED(2916405,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149239296,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149239297,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149239299,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149239303,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149239311,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149239327,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149239359,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149239423,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149239551,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149239807,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149240319,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149241343,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149243391,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149247487,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149255679,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149272063,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149304831,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149370367,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149501439,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1149763583,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1150287871,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1151336447,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1153433599,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1153433600,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1155530752,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1156579328,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157103616,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157365760,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157496832,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157562368,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157595136,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157611520,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157619712,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157623808,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157625856,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157626880,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157627392,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157627648,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157627776,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157627840,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157627872,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157627888,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157627896,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157627900,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157627902,32,FLEN)
NAN_BOXED(2134384835,32,FLEN)
NAN_BOXED(2915748,32,FLEN)
NAN_BOXED(1157627903,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212836879,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212836895,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212836927,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212836991,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212837119,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212837375,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212837887,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212838911,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212840959,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212845055,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212853247,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212869631,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212902399,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3212967935,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3213099007,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3213361151,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3213885439,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3214934015,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2134392380,32,FLEN)
NAN_BOXED(2150397574,32,FLEN)
NAN_BOXED(3217031167,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
