
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_36736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe3fffff; valaddr_reg:x3; val_offset:110208*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110208*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe400000; valaddr_reg:x3; val_offset:110211*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110211*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe600000; valaddr_reg:x3; val_offset:110214*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110214*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe700000; valaddr_reg:x3; val_offset:110217*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110217*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe780000; valaddr_reg:x3; val_offset:110220*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110220*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7c0000; valaddr_reg:x3; val_offset:110223*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110223*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7e0000; valaddr_reg:x3; val_offset:110226*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110226*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7f0000; valaddr_reg:x3; val_offset:110229*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110229*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7f8000; valaddr_reg:x3; val_offset:110232*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110232*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7fc000; valaddr_reg:x3; val_offset:110235*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110235*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7fe000; valaddr_reg:x3; val_offset:110238*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110238*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7ff000; valaddr_reg:x3; val_offset:110241*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110241*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7ff800; valaddr_reg:x3; val_offset:110244*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110244*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7ffc00; valaddr_reg:x3; val_offset:110247*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110247*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7ffe00; valaddr_reg:x3; val_offset:110250*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110250*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7fff00; valaddr_reg:x3; val_offset:110253*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110253*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7fff80; valaddr_reg:x3; val_offset:110256*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110256*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7fffc0; valaddr_reg:x3; val_offset:110259*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110259*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7fffe0; valaddr_reg:x3; val_offset:110262*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110262*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7ffff0; valaddr_reg:x3; val_offset:110265*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110265*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7ffff8; valaddr_reg:x3; val_offset:110268*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110268*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7ffffc; valaddr_reg:x3; val_offset:110271*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110271*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7ffffe; valaddr_reg:x3; val_offset:110274*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110274*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38b31c; op2val:0x0;
op3val:0xe7fffff; valaddr_reg:x3; val_offset:110277*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110277*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf6000000; valaddr_reg:x3; val_offset:110280*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110280*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf6000001; valaddr_reg:x3; val_offset:110283*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110283*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf6000003; valaddr_reg:x3; val_offset:110286*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110286*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf6000007; valaddr_reg:x3; val_offset:110289*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110289*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf600000f; valaddr_reg:x3; val_offset:110292*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110292*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf600001f; valaddr_reg:x3; val_offset:110295*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110295*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf600003f; valaddr_reg:x3; val_offset:110298*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110298*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf600007f; valaddr_reg:x3; val_offset:110301*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110301*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf60000ff; valaddr_reg:x3; val_offset:110304*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110304*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf60001ff; valaddr_reg:x3; val_offset:110307*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110307*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf60003ff; valaddr_reg:x3; val_offset:110310*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110310*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf60007ff; valaddr_reg:x3; val_offset:110313*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110313*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf6000fff; valaddr_reg:x3; val_offset:110316*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110316*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf6001fff; valaddr_reg:x3; val_offset:110319*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110319*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf6003fff; valaddr_reg:x3; val_offset:110322*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110322*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf6007fff; valaddr_reg:x3; val_offset:110325*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110325*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf600ffff; valaddr_reg:x3; val_offset:110328*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110328*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf601ffff; valaddr_reg:x3; val_offset:110331*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110331*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf603ffff; valaddr_reg:x3; val_offset:110334*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110334*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf607ffff; valaddr_reg:x3; val_offset:110337*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110337*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf60fffff; valaddr_reg:x3; val_offset:110340*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110340*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf61fffff; valaddr_reg:x3; val_offset:110343*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110343*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf63fffff; valaddr_reg:x3; val_offset:110346*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110346*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf6400000; valaddr_reg:x3; val_offset:110349*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110349*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf6600000; valaddr_reg:x3; val_offset:110352*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110352*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf6700000; valaddr_reg:x3; val_offset:110355*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110355*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf6780000; valaddr_reg:x3; val_offset:110358*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110358*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67c0000; valaddr_reg:x3; val_offset:110361*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110361*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67e0000; valaddr_reg:x3; val_offset:110364*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110364*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67f0000; valaddr_reg:x3; val_offset:110367*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110367*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67f8000; valaddr_reg:x3; val_offset:110370*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110370*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67fc000; valaddr_reg:x3; val_offset:110373*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110373*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67fe000; valaddr_reg:x3; val_offset:110376*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110376*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67ff000; valaddr_reg:x3; val_offset:110379*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110379*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67ff800; valaddr_reg:x3; val_offset:110382*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110382*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67ffc00; valaddr_reg:x3; val_offset:110385*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110385*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67ffe00; valaddr_reg:x3; val_offset:110388*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110388*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67fff00; valaddr_reg:x3; val_offset:110391*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110391*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67fff80; valaddr_reg:x3; val_offset:110394*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110394*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67fffc0; valaddr_reg:x3; val_offset:110397*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110397*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67fffe0; valaddr_reg:x3; val_offset:110400*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110400*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67ffff0; valaddr_reg:x3; val_offset:110403*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110403*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67ffff8; valaddr_reg:x3; val_offset:110406*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110406*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67ffffc; valaddr_reg:x3; val_offset:110409*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110409*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67ffffe; valaddr_reg:x3; val_offset:110412*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110412*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xf67fffff; valaddr_reg:x3; val_offset:110415*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110415*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xff000001; valaddr_reg:x3; val_offset:110418*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110418*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xff000003; valaddr_reg:x3; val_offset:110421*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110421*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xff000007; valaddr_reg:x3; val_offset:110424*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110424*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xff199999; valaddr_reg:x3; val_offset:110427*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110427*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xff249249; valaddr_reg:x3; val_offset:110430*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110430*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xff333333; valaddr_reg:x3; val_offset:110433*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110433*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:110436*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110436*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:110439*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110439*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xff444444; valaddr_reg:x3; val_offset:110442*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110442*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:110445*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110445*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:110448*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110448*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xff666666; valaddr_reg:x3; val_offset:110451*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110451*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:110454*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110454*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:110457*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110457*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:110460*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110460*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38e07b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x313e04 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38e07b; op2val:0xbfb13e04;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:110463*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110463*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80800000; valaddr_reg:x3; val_offset:110466*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110466*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:110469*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110469*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:110472*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110472*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:110475*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110475*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x8080000f; valaddr_reg:x3; val_offset:110478*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110478*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x8080001f; valaddr_reg:x3; val_offset:110481*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110481*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x8080003f; valaddr_reg:x3; val_offset:110484*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110484*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x8080007f; valaddr_reg:x3; val_offset:110487*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110487*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x808000ff; valaddr_reg:x3; val_offset:110490*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110490*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x808001ff; valaddr_reg:x3; val_offset:110493*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110493*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x808003ff; valaddr_reg:x3; val_offset:110496*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110496*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x808007ff; valaddr_reg:x3; val_offset:110499*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110499*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80800fff; valaddr_reg:x3; val_offset:110502*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110502*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80801fff; valaddr_reg:x3; val_offset:110505*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110505*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80803fff; valaddr_reg:x3; val_offset:110508*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110508*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80807fff; valaddr_reg:x3; val_offset:110511*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110511*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x8080ffff; valaddr_reg:x3; val_offset:110514*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110514*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x8081ffff; valaddr_reg:x3; val_offset:110517*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110517*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x8083ffff; valaddr_reg:x3; val_offset:110520*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110520*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x8087ffff; valaddr_reg:x3; val_offset:110523*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110523*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x808fffff; valaddr_reg:x3; val_offset:110526*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110526*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:110529*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110529*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x809fffff; valaddr_reg:x3; val_offset:110532*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110532*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:110535*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110535*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:110538*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110538*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:110541*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110541*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:110544*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110544*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80bfffff; valaddr_reg:x3; val_offset:110547*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110547*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80c00000; valaddr_reg:x3; val_offset:110550*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110550*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:110553*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110553*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:110556*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110556*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:110559*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110559*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80e00000; valaddr_reg:x3; val_offset:110562*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110562*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:110565*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110565*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:110568*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110568*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80f00000; valaddr_reg:x3; val_offset:110571*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110571*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80f80000; valaddr_reg:x3; val_offset:110574*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110574*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80fc0000; valaddr_reg:x3; val_offset:110577*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110577*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80fe0000; valaddr_reg:x3; val_offset:110580*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110580*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80ff0000; valaddr_reg:x3; val_offset:110583*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110583*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80ff8000; valaddr_reg:x3; val_offset:110586*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110586*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80ffc000; valaddr_reg:x3; val_offset:110589*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110589*0 + 3*287*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(239075327,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(239075328,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(241172480,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(242221056,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(242745344,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243007488,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243138560,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243204096,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243236864,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243253248,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243261440,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243265536,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243267584,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243268608,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269120,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269376,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269504,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269568,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269600,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269616,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269624,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269628,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269630,32,FLEN)
NAN_BOXED(2134422300,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269631,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127195136,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127195137,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127195139,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127195143,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127195151,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127195167,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127195199,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127195263,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127195391,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127195647,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127196159,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127197183,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127199231,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127203327,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127211519,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127227903,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127260671,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127326207,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127457279,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4127719423,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4128243711,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4129292287,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4131389439,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4131389440,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4133486592,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4134535168,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135059456,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135321600,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135452672,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135518208,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135550976,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135567360,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135575552,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135579648,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135581696,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135582720,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135583232,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135583488,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135583616,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135583680,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135583712,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135583728,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135583736,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135583740,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135583742,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4135583743,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2134433915,32,FLEN)
NAN_BOXED(3216064004,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872271,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872287,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872319,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872383,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872511,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872767,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155873279,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155874303,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155876351,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155880447,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155888639,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155905023,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155937791,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2156003327,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2156134399,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2156396543,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2156920831,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157969407,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160066559,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160066560,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162163712,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163212288,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163736576,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163998720,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164129792,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164195328,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164228096,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164244480,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
