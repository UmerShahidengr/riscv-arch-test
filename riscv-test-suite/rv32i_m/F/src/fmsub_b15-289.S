
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_36864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80ffe000; valaddr_reg:x3; val_offset:110592*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110592*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80fff000; valaddr_reg:x3; val_offset:110595*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110595*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80fff800; valaddr_reg:x3; val_offset:110598*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110598*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80fffc00; valaddr_reg:x3; val_offset:110601*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110601*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80fffe00; valaddr_reg:x3; val_offset:110604*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110604*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80ffff00; valaddr_reg:x3; val_offset:110607*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110607*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80ffff80; valaddr_reg:x3; val_offset:110610*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110610*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80ffffc0; valaddr_reg:x3; val_offset:110613*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110613*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80ffffe0; valaddr_reg:x3; val_offset:110616*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110616*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80fffff0; valaddr_reg:x3; val_offset:110619*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110619*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:110622*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110622*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:110625*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110625*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:110628*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110628*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39daa3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39daa3; op2val:0x80000000;
op3val:0x80ffffff; valaddr_reg:x3; val_offset:110631*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110631*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:110634*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110634*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:110637*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110637*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:110640*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110640*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:110643*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110643*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:110646*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110646*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:110649*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110649*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:110652*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110652*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:110655*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110655*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:110658*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110658*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:110661*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110661*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:110664*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110664*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:110667*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110667*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:110670*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110670*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:110673*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110673*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:110676*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110676*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:110679*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110679*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc000000; valaddr_reg:x3; val_offset:110682*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110682*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc000001; valaddr_reg:x3; val_offset:110685*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110685*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc000003; valaddr_reg:x3; val_offset:110688*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110688*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc000007; valaddr_reg:x3; val_offset:110691*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110691*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc00000f; valaddr_reg:x3; val_offset:110694*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110694*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc00001f; valaddr_reg:x3; val_offset:110697*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110697*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc00003f; valaddr_reg:x3; val_offset:110700*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110700*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc00007f; valaddr_reg:x3; val_offset:110703*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110703*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc0000ff; valaddr_reg:x3; val_offset:110706*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110706*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc0001ff; valaddr_reg:x3; val_offset:110709*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110709*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc0003ff; valaddr_reg:x3; val_offset:110712*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110712*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc0007ff; valaddr_reg:x3; val_offset:110715*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110715*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc000fff; valaddr_reg:x3; val_offset:110718*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110718*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc001fff; valaddr_reg:x3; val_offset:110721*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110721*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc003fff; valaddr_reg:x3; val_offset:110724*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110724*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc007fff; valaddr_reg:x3; val_offset:110727*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110727*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc00ffff; valaddr_reg:x3; val_offset:110730*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110730*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc01ffff; valaddr_reg:x3; val_offset:110733*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110733*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc03ffff; valaddr_reg:x3; val_offset:110736*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110736*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc07ffff; valaddr_reg:x3; val_offset:110739*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110739*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc0fffff; valaddr_reg:x3; val_offset:110742*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110742*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc1fffff; valaddr_reg:x3; val_offset:110745*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110745*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc3fffff; valaddr_reg:x3; val_offset:110748*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110748*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc400000; valaddr_reg:x3; val_offset:110751*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110751*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc600000; valaddr_reg:x3; val_offset:110754*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110754*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc700000; valaddr_reg:x3; val_offset:110757*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110757*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc780000; valaddr_reg:x3; val_offset:110760*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110760*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7c0000; valaddr_reg:x3; val_offset:110763*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110763*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7e0000; valaddr_reg:x3; val_offset:110766*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110766*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7f0000; valaddr_reg:x3; val_offset:110769*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110769*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7f8000; valaddr_reg:x3; val_offset:110772*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110772*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7fc000; valaddr_reg:x3; val_offset:110775*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110775*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7fe000; valaddr_reg:x3; val_offset:110778*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110778*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7ff000; valaddr_reg:x3; val_offset:110781*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110781*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7ff800; valaddr_reg:x3; val_offset:110784*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110784*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7ffc00; valaddr_reg:x3; val_offset:110787*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110787*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7ffe00; valaddr_reg:x3; val_offset:110790*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110790*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7fff00; valaddr_reg:x3; val_offset:110793*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110793*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7fff80; valaddr_reg:x3; val_offset:110796*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110796*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7fffc0; valaddr_reg:x3; val_offset:110799*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110799*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7fffe0; valaddr_reg:x3; val_offset:110802*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110802*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7ffff0; valaddr_reg:x3; val_offset:110805*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110805*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7ffff8; valaddr_reg:x3; val_offset:110808*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110808*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7ffffc; valaddr_reg:x3; val_offset:110811*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110811*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7ffffe; valaddr_reg:x3; val_offset:110814*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110814*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a2611 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a2611; op2val:0x0;
op3val:0xc7fffff; valaddr_reg:x3; val_offset:110817*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110817*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x3f800001; valaddr_reg:x3; val_offset:110820*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110820*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x3f800003; valaddr_reg:x3; val_offset:110823*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110823*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x3f800007; valaddr_reg:x3; val_offset:110826*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110826*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x3f999999; valaddr_reg:x3; val_offset:110829*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110829*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:110832*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110832*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:110835*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110835*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:110838*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110838*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:110841*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110841*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:110844*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110844*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:110847*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110847*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:110850*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110850*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:110853*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110853*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:110856*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110856*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:110859*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110859*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:110862*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110862*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:110865*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110865*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x43000000; valaddr_reg:x3; val_offset:110868*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110868*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x43000001; valaddr_reg:x3; val_offset:110871*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110871*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x43000003; valaddr_reg:x3; val_offset:110874*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110874*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x43000007; valaddr_reg:x3; val_offset:110877*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110877*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x4300000f; valaddr_reg:x3; val_offset:110880*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110880*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x4300001f; valaddr_reg:x3; val_offset:110883*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110883*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x4300003f; valaddr_reg:x3; val_offset:110886*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110886*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x4300007f; valaddr_reg:x3; val_offset:110889*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110889*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x430000ff; valaddr_reg:x3; val_offset:110892*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110892*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x430001ff; valaddr_reg:x3; val_offset:110895*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110895*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x430003ff; valaddr_reg:x3; val_offset:110898*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110898*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x430007ff; valaddr_reg:x3; val_offset:110901*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110901*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x43000fff; valaddr_reg:x3; val_offset:110904*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110904*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x43001fff; valaddr_reg:x3; val_offset:110907*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110907*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x43003fff; valaddr_reg:x3; val_offset:110910*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110910*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x43007fff; valaddr_reg:x3; val_offset:110913*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110913*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x4300ffff; valaddr_reg:x3; val_offset:110916*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110916*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x4301ffff; valaddr_reg:x3; val_offset:110919*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110919*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x4303ffff; valaddr_reg:x3; val_offset:110922*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110922*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x4307ffff; valaddr_reg:x3; val_offset:110925*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110925*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x430fffff; valaddr_reg:x3; val_offset:110928*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110928*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x431fffff; valaddr_reg:x3; val_offset:110931*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110931*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x433fffff; valaddr_reg:x3; val_offset:110934*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110934*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x43400000; valaddr_reg:x3; val_offset:110937*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110937*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x43600000; valaddr_reg:x3; val_offset:110940*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110940*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x43700000; valaddr_reg:x3; val_offset:110943*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110943*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x43780000; valaddr_reg:x3; val_offset:110946*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110946*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437c0000; valaddr_reg:x3; val_offset:110949*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110949*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437e0000; valaddr_reg:x3; val_offset:110952*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110952*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437f0000; valaddr_reg:x3; val_offset:110955*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110955*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437f8000; valaddr_reg:x3; val_offset:110958*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110958*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437fc000; valaddr_reg:x3; val_offset:110961*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110961*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437fe000; valaddr_reg:x3; val_offset:110964*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110964*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437ff000; valaddr_reg:x3; val_offset:110967*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110967*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437ff800; valaddr_reg:x3; val_offset:110970*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110970*0 + 3*288*FLEN/8, x4, x1, x2)

inst_36991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437ffc00; valaddr_reg:x3; val_offset:110973*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110973*0 + 3*288*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164252672,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164256768,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164258816,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164259840,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260352,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260608,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260736,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260800,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260832,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260848,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2134497955,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260863,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326592,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326593,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326595,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326599,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326607,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326623,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326655,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326719,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326847,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201327103,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201327615,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201328639,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201330687,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201334783,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201342975,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201359359,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201392127,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201457663,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201588735,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201850879,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(202375167,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(203423743,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(205520895,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(205520896,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(207618048,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(208666624,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209190912,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209453056,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209584128,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209649664,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209682432,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209698816,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209707008,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209711104,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209713152,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714176,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714688,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714944,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715072,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715136,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715168,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715184,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715192,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715196,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715198,32,FLEN)
NAN_BOXED(2134517265,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715199,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124073472,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124073473,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124073475,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124073479,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124073487,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124073503,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124073535,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124073599,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124073727,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124073983,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124074495,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124075519,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124077567,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124081663,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124089855,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124106239,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124139007,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124204543,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124335615,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1124597759,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1125122047,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1126170623,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1128267775,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1128267776,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1130364928,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1131413504,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1131937792,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132199936,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132331008,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132396544,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132429312,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132445696,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132453888,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132457984,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132460032,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132461056,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
