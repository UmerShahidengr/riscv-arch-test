
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_3584:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf4000000; valaddr_reg:x3; val_offset:10752*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10752*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3585:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf4000001; valaddr_reg:x3; val_offset:10755*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10755*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3586:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf4000003; valaddr_reg:x3; val_offset:10758*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10758*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3587:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf4000007; valaddr_reg:x3; val_offset:10761*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10761*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3588:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf400000f; valaddr_reg:x3; val_offset:10764*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10764*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3589:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf400001f; valaddr_reg:x3; val_offset:10767*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10767*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3590:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf400003f; valaddr_reg:x3; val_offset:10770*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10770*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3591:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf400007f; valaddr_reg:x3; val_offset:10773*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10773*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3592:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf40000ff; valaddr_reg:x3; val_offset:10776*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10776*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3593:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf40001ff; valaddr_reg:x3; val_offset:10779*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10779*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3594:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf40003ff; valaddr_reg:x3; val_offset:10782*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10782*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3595:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf40007ff; valaddr_reg:x3; val_offset:10785*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10785*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3596:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf4000fff; valaddr_reg:x3; val_offset:10788*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10788*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3597:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf4001fff; valaddr_reg:x3; val_offset:10791*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10791*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3598:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf4003fff; valaddr_reg:x3; val_offset:10794*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10794*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3599:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf4007fff; valaddr_reg:x3; val_offset:10797*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10797*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3600:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf400ffff; valaddr_reg:x3; val_offset:10800*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10800*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3601:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf401ffff; valaddr_reg:x3; val_offset:10803*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10803*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3602:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf403ffff; valaddr_reg:x3; val_offset:10806*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10806*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3603:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf407ffff; valaddr_reg:x3; val_offset:10809*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10809*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3604:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf40fffff; valaddr_reg:x3; val_offset:10812*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10812*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3605:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf41fffff; valaddr_reg:x3; val_offset:10815*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10815*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3606:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf43fffff; valaddr_reg:x3; val_offset:10818*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10818*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3607:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf4400000; valaddr_reg:x3; val_offset:10821*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10821*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3608:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf4600000; valaddr_reg:x3; val_offset:10824*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10824*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3609:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf4700000; valaddr_reg:x3; val_offset:10827*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10827*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3610:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf4780000; valaddr_reg:x3; val_offset:10830*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10830*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3611:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47c0000; valaddr_reg:x3; val_offset:10833*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10833*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3612:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47e0000; valaddr_reg:x3; val_offset:10836*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10836*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3613:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47f0000; valaddr_reg:x3; val_offset:10839*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10839*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3614:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47f8000; valaddr_reg:x3; val_offset:10842*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10842*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3615:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47fc000; valaddr_reg:x3; val_offset:10845*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10845*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3616:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47fe000; valaddr_reg:x3; val_offset:10848*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10848*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3617:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47ff000; valaddr_reg:x3; val_offset:10851*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10851*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3618:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47ff800; valaddr_reg:x3; val_offset:10854*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10854*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3619:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47ffc00; valaddr_reg:x3; val_offset:10857*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10857*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3620:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47ffe00; valaddr_reg:x3; val_offset:10860*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10860*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3621:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47fff00; valaddr_reg:x3; val_offset:10863*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10863*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3622:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47fff80; valaddr_reg:x3; val_offset:10866*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10866*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3623:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47fffc0; valaddr_reg:x3; val_offset:10869*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10869*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3624:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47fffe0; valaddr_reg:x3; val_offset:10872*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10872*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3625:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47ffff0; valaddr_reg:x3; val_offset:10875*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10875*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3626:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47ffff8; valaddr_reg:x3; val_offset:10878*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10878*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3627:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47ffffc; valaddr_reg:x3; val_offset:10881*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10881*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3628:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47ffffe; valaddr_reg:x3; val_offset:10884*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10884*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3629:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xf47fffff; valaddr_reg:x3; val_offset:10887*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10887*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3630:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xff000001; valaddr_reg:x3; val_offset:10890*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10890*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3631:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xff000003; valaddr_reg:x3; val_offset:10893*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10893*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3632:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xff000007; valaddr_reg:x3; val_offset:10896*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10896*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3633:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xff199999; valaddr_reg:x3; val_offset:10899*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10899*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3634:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xff249249; valaddr_reg:x3; val_offset:10902*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10902*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3635:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xff333333; valaddr_reg:x3; val_offset:10905*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10905*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3636:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:10908*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10908*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3637:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:10911*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10911*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3638:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xff444444; valaddr_reg:x3; val_offset:10914*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10914*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3639:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:10917*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10917*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3640:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:10920*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10920*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3641:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xff666666; valaddr_reg:x3; val_offset:10923*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10923*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3642:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:10926*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10926*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3643:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:10929*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10929*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3644:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:10932*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10932*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3645:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0dbeb9 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x672cf8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8dbeb9; op2val:0xc1672cf8;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:10935*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10935*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3646:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:10938*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10938*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3647:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:10941*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10941*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3648:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:10944*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10944*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3649:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:10947*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10947*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3650:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:10950*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10950*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3651:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:10953*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10953*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3652:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:10956*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10956*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3653:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:10959*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10959*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3654:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:10962*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10962*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3655:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:10965*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10965*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3656:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:10968*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10968*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3657:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:10971*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10971*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3658:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:10974*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10974*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3659:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:10977*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10977*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3660:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:10980*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10980*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3661:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:10983*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10983*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3662:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x84000000; valaddr_reg:x3; val_offset:10986*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10986*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3663:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x84000001; valaddr_reg:x3; val_offset:10989*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10989*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3664:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x84000003; valaddr_reg:x3; val_offset:10992*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10992*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3665:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x84000007; valaddr_reg:x3; val_offset:10995*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10995*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3666:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x8400000f; valaddr_reg:x3; val_offset:10998*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10998*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3667:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x8400001f; valaddr_reg:x3; val_offset:11001*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11001*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3668:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x8400003f; valaddr_reg:x3; val_offset:11004*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11004*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3669:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x8400007f; valaddr_reg:x3; val_offset:11007*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11007*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3670:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x840000ff; valaddr_reg:x3; val_offset:11010*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11010*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3671:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x840001ff; valaddr_reg:x3; val_offset:11013*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11013*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3672:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x840003ff; valaddr_reg:x3; val_offset:11016*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11016*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3673:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x840007ff; valaddr_reg:x3; val_offset:11019*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11019*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3674:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x84000fff; valaddr_reg:x3; val_offset:11022*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11022*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3675:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x84001fff; valaddr_reg:x3; val_offset:11025*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11025*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3676:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x84003fff; valaddr_reg:x3; val_offset:11028*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11028*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3677:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x84007fff; valaddr_reg:x3; val_offset:11031*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11031*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3678:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x8400ffff; valaddr_reg:x3; val_offset:11034*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11034*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3679:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x8401ffff; valaddr_reg:x3; val_offset:11037*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11037*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3680:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x8403ffff; valaddr_reg:x3; val_offset:11040*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11040*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3681:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x8407ffff; valaddr_reg:x3; val_offset:11043*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11043*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3682:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x840fffff; valaddr_reg:x3; val_offset:11046*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11046*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3683:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x841fffff; valaddr_reg:x3; val_offset:11049*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11049*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3684:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x843fffff; valaddr_reg:x3; val_offset:11052*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11052*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3685:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x84400000; valaddr_reg:x3; val_offset:11055*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11055*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3686:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x84600000; valaddr_reg:x3; val_offset:11058*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11058*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3687:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x84700000; valaddr_reg:x3; val_offset:11061*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11061*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3688:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x84780000; valaddr_reg:x3; val_offset:11064*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11064*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3689:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847c0000; valaddr_reg:x3; val_offset:11067*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11067*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3690:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847e0000; valaddr_reg:x3; val_offset:11070*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11070*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3691:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847f0000; valaddr_reg:x3; val_offset:11073*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11073*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3692:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847f8000; valaddr_reg:x3; val_offset:11076*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11076*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3693:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847fc000; valaddr_reg:x3; val_offset:11079*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11079*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3694:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847fe000; valaddr_reg:x3; val_offset:11082*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11082*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3695:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847ff000; valaddr_reg:x3; val_offset:11085*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11085*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3696:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847ff800; valaddr_reg:x3; val_offset:11088*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11088*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3697:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847ffc00; valaddr_reg:x3; val_offset:11091*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11091*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3698:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847ffe00; valaddr_reg:x3; val_offset:11094*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11094*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3699:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847fff00; valaddr_reg:x3; val_offset:11097*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11097*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3700:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847fff80; valaddr_reg:x3; val_offset:11100*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11100*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3701:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847fffc0; valaddr_reg:x3; val_offset:11103*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11103*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3702:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847fffe0; valaddr_reg:x3; val_offset:11106*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11106*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3703:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847ffff0; valaddr_reg:x3; val_offset:11109*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11109*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3704:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847ffff8; valaddr_reg:x3; val_offset:11112*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11112*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3705:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847ffffc; valaddr_reg:x3; val_offset:11115*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11115*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3706:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847ffffe; valaddr_reg:x3; val_offset:11118*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11118*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3707:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0ec4f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8ec4f4; op2val:0x80000000;
op3val:0x847fffff; valaddr_reg:x3; val_offset:11121*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11121*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3708:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0f8b78 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x6446f4 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8f8b78; op2val:0x16446f4;
op3val:0x3c800000; valaddr_reg:x3; val_offset:11124*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11124*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3709:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0f8b78 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x6446f4 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8f8b78; op2val:0x16446f4;
op3val:0x3c800001; valaddr_reg:x3; val_offset:11127*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11127*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3710:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0f8b78 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x6446f4 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8f8b78; op2val:0x16446f4;
op3val:0x3c800003; valaddr_reg:x3; val_offset:11130*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11130*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3711:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0f8b78 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x6446f4 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8f8b78; op2val:0x16446f4;
op3val:0x3c800007; valaddr_reg:x3; val_offset:11133*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11133*0 + 3*28*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093640704,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093640705,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093640707,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093640711,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093640719,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093640735,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093640767,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093640831,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093640959,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093641215,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093641727,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093642751,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093644799,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093648895,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093657087,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093673471,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093706239,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093771775,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4093902847,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4094164991,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4094689279,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4095737855,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4097835007,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4097835008,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4099932160,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4100980736,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4101505024,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4101767168,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4101898240,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4101963776,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4101996544,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4102012928,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4102021120,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4102025216,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4102027264,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4102028288,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4102028800,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4102029056,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4102029184,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4102029248,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4102029280,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4102029296,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4102029304,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4102029308,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4102029310,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4102029311,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2106441401,32,FLEN)
NAN_BOXED(3244764408,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592512,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592513,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592515,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592519,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592527,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592543,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592575,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592639,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592767,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214593023,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214593535,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214594559,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214596607,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214600703,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214608895,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214625279,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214658047,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214723583,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214854655,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2215116799,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2215641087,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2216689663,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2218786815,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2218786816,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2220883968,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2221932544,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222456832,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222718976,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222850048,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222915584,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222948352,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222964736,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222972928,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222977024,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222979072,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980096,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980608,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980864,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980992,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981056,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981088,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981104,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981112,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981116,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981118,32,FLEN)
NAN_BOXED(2106508532,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981119,32,FLEN)
NAN_BOXED(2106559352,32,FLEN)
NAN_BOXED(23348980,32,FLEN)
NAN_BOXED(1015021568,32,FLEN)
NAN_BOXED(2106559352,32,FLEN)
NAN_BOXED(23348980,32,FLEN)
NAN_BOXED(1015021569,32,FLEN)
NAN_BOXED(2106559352,32,FLEN)
NAN_BOXED(23348980,32,FLEN)
NAN_BOXED(1015021571,32,FLEN)
NAN_BOXED(2106559352,32,FLEN)
NAN_BOXED(23348980,32,FLEN)
NAN_BOXED(1015021575,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
