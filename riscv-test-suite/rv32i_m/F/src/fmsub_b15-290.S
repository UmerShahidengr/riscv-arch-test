
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_36992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437ffe00; valaddr_reg:x3; val_offset:110976*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110976*0 + 3*289*FLEN/8, x4, x1, x2)

inst_36993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437fff00; valaddr_reg:x3; val_offset:110979*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110979*0 + 3*289*FLEN/8, x4, x1, x2)

inst_36994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437fff80; valaddr_reg:x3; val_offset:110982*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110982*0 + 3*289*FLEN/8, x4, x1, x2)

inst_36995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437fffc0; valaddr_reg:x3; val_offset:110985*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110985*0 + 3*289*FLEN/8, x4, x1, x2)

inst_36996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437fffe0; valaddr_reg:x3; val_offset:110988*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110988*0 + 3*289*FLEN/8, x4, x1, x2)

inst_36997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437ffff0; valaddr_reg:x3; val_offset:110991*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110991*0 + 3*289*FLEN/8, x4, x1, x2)

inst_36998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437ffff8; valaddr_reg:x3; val_offset:110994*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110994*0 + 3*289*FLEN/8, x4, x1, x2)

inst_36999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437ffffc; valaddr_reg:x3; val_offset:110997*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110997*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437ffffe; valaddr_reg:x3; val_offset:111000*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111000*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a5f0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf48d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a5f0a; op2val:0x2bf48d;
op3val:0x437fffff; valaddr_reg:x3; val_offset:111003*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111003*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:111006*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111006*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:111009*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111009*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:111012*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111012*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:111015*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111015*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:111018*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111018*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:111021*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111021*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:111024*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111024*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:111027*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111027*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:111030*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111030*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:111033*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111033*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:111036*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111036*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:111039*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111039*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:111042*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111042*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:111045*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111045*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:111048*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111048*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:111051*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111051*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x89000000; valaddr_reg:x3; val_offset:111054*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111054*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x89000001; valaddr_reg:x3; val_offset:111057*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111057*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x89000003; valaddr_reg:x3; val_offset:111060*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111060*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x89000007; valaddr_reg:x3; val_offset:111063*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111063*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x8900000f; valaddr_reg:x3; val_offset:111066*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111066*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x8900001f; valaddr_reg:x3; val_offset:111069*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111069*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x8900003f; valaddr_reg:x3; val_offset:111072*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111072*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x8900007f; valaddr_reg:x3; val_offset:111075*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111075*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x890000ff; valaddr_reg:x3; val_offset:111078*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111078*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x890001ff; valaddr_reg:x3; val_offset:111081*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111081*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x890003ff; valaddr_reg:x3; val_offset:111084*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111084*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x890007ff; valaddr_reg:x3; val_offset:111087*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111087*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x89000fff; valaddr_reg:x3; val_offset:111090*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111090*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x89001fff; valaddr_reg:x3; val_offset:111093*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111093*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x89003fff; valaddr_reg:x3; val_offset:111096*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111096*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x89007fff; valaddr_reg:x3; val_offset:111099*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111099*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x8900ffff; valaddr_reg:x3; val_offset:111102*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111102*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x8901ffff; valaddr_reg:x3; val_offset:111105*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111105*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x8903ffff; valaddr_reg:x3; val_offset:111108*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111108*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x8907ffff; valaddr_reg:x3; val_offset:111111*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111111*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x890fffff; valaddr_reg:x3; val_offset:111114*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111114*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x891fffff; valaddr_reg:x3; val_offset:111117*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111117*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x893fffff; valaddr_reg:x3; val_offset:111120*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111120*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x89400000; valaddr_reg:x3; val_offset:111123*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111123*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x89600000; valaddr_reg:x3; val_offset:111126*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111126*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x89700000; valaddr_reg:x3; val_offset:111129*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111129*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x89780000; valaddr_reg:x3; val_offset:111132*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111132*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897c0000; valaddr_reg:x3; val_offset:111135*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111135*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897e0000; valaddr_reg:x3; val_offset:111138*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111138*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897f0000; valaddr_reg:x3; val_offset:111141*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111141*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897f8000; valaddr_reg:x3; val_offset:111144*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111144*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897fc000; valaddr_reg:x3; val_offset:111147*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111147*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897fe000; valaddr_reg:x3; val_offset:111150*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111150*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897ff000; valaddr_reg:x3; val_offset:111153*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111153*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897ff800; valaddr_reg:x3; val_offset:111156*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111156*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897ffc00; valaddr_reg:x3; val_offset:111159*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111159*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897ffe00; valaddr_reg:x3; val_offset:111162*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111162*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897fff00; valaddr_reg:x3; val_offset:111165*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111165*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897fff80; valaddr_reg:x3; val_offset:111168*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111168*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897fffc0; valaddr_reg:x3; val_offset:111171*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111171*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897fffe0; valaddr_reg:x3; val_offset:111174*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111174*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897ffff0; valaddr_reg:x3; val_offset:111177*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111177*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897ffff8; valaddr_reg:x3; val_offset:111180*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111180*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897ffffc; valaddr_reg:x3; val_offset:111183*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111183*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897ffffe; valaddr_reg:x3; val_offset:111186*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111186*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a60a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a60a2; op2val:0x80000000;
op3val:0x897fffff; valaddr_reg:x3; val_offset:111189*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111189*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34800000; valaddr_reg:x3; val_offset:111192*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111192*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34800001; valaddr_reg:x3; val_offset:111195*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111195*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34800003; valaddr_reg:x3; val_offset:111198*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111198*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34800007; valaddr_reg:x3; val_offset:111201*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111201*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3480000f; valaddr_reg:x3; val_offset:111204*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111204*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3480001f; valaddr_reg:x3; val_offset:111207*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111207*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3480003f; valaddr_reg:x3; val_offset:111210*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111210*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3480007f; valaddr_reg:x3; val_offset:111213*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111213*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x348000ff; valaddr_reg:x3; val_offset:111216*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111216*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x348001ff; valaddr_reg:x3; val_offset:111219*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111219*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x348003ff; valaddr_reg:x3; val_offset:111222*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111222*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x348007ff; valaddr_reg:x3; val_offset:111225*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111225*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34800fff; valaddr_reg:x3; val_offset:111228*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111228*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34801fff; valaddr_reg:x3; val_offset:111231*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111231*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34803fff; valaddr_reg:x3; val_offset:111234*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111234*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34807fff; valaddr_reg:x3; val_offset:111237*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111237*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3480ffff; valaddr_reg:x3; val_offset:111240*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111240*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3481ffff; valaddr_reg:x3; val_offset:111243*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111243*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3483ffff; valaddr_reg:x3; val_offset:111246*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111246*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3487ffff; valaddr_reg:x3; val_offset:111249*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111249*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x348fffff; valaddr_reg:x3; val_offset:111252*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111252*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x349fffff; valaddr_reg:x3; val_offset:111255*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111255*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34bfffff; valaddr_reg:x3; val_offset:111258*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111258*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34c00000; valaddr_reg:x3; val_offset:111261*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111261*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34e00000; valaddr_reg:x3; val_offset:111264*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111264*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34f00000; valaddr_reg:x3; val_offset:111267*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111267*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34f80000; valaddr_reg:x3; val_offset:111270*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111270*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34fc0000; valaddr_reg:x3; val_offset:111273*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111273*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34fe0000; valaddr_reg:x3; val_offset:111276*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111276*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34ff0000; valaddr_reg:x3; val_offset:111279*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111279*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34ff8000; valaddr_reg:x3; val_offset:111282*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111282*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34ffc000; valaddr_reg:x3; val_offset:111285*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111285*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34ffe000; valaddr_reg:x3; val_offset:111288*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111288*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34fff000; valaddr_reg:x3; val_offset:111291*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111291*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34fff800; valaddr_reg:x3; val_offset:111294*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111294*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34fffc00; valaddr_reg:x3; val_offset:111297*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111297*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34fffe00; valaddr_reg:x3; val_offset:111300*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111300*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34ffff00; valaddr_reg:x3; val_offset:111303*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111303*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34ffff80; valaddr_reg:x3; val_offset:111306*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111306*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34ffffc0; valaddr_reg:x3; val_offset:111309*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111309*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34ffffe0; valaddr_reg:x3; val_offset:111312*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111312*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34fffff0; valaddr_reg:x3; val_offset:111315*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111315*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34fffff8; valaddr_reg:x3; val_offset:111318*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111318*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34fffffc; valaddr_reg:x3; val_offset:111321*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111321*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34fffffe; valaddr_reg:x3; val_offset:111324*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111324*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x34ffffff; valaddr_reg:x3; val_offset:111327*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111327*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3f800001; valaddr_reg:x3; val_offset:111330*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111330*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3f800003; valaddr_reg:x3; val_offset:111333*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111333*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3f800007; valaddr_reg:x3; val_offset:111336*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111336*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3f999999; valaddr_reg:x3; val_offset:111339*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111339*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:111342*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111342*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:111345*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111345*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:111348*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111348*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:111351*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111351*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:111354*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111354*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a659b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2bf300 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a659b; op2val:0x2bf300;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:111357*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111357*0 + 3*289*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132461568,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132461824,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132461952,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132462016,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132462048,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132462064,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132462072,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132462076,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132462078,32,FLEN)
NAN_BOXED(2134531850,32,FLEN)
NAN_BOXED(2880653,32,FLEN)
NAN_BOXED(1132462079,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478592,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478593,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478595,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478599,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478607,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478623,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478655,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478719,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478847,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298479103,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298479615,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298480639,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298482687,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298486783,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298494975,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298511359,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298544127,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298609663,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298740735,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2299002879,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2299527167,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2300575743,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2302672895,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2302672896,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2304770048,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2305818624,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306342912,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306605056,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306736128,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306801664,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306834432,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306850816,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306859008,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306863104,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306865152,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866176,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866688,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866944,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867072,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867136,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867168,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867184,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867192,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867196,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867198,32,FLEN)
NAN_BOXED(2134532258,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867199,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880803840,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880803841,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880803843,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880803847,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880803855,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880803871,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880803903,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880803967,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880804095,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880804351,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880804863,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880805887,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880807935,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880812031,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880820223,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880836607,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880869375,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(880934911,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(881065983,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(881328127,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(881852415,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(882900991,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(884998143,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(884998144,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(887095296,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(888143872,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(888668160,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(888930304,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889061376,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889126912,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889159680,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889176064,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889184256,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889188352,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889190400,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889191424,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889191936,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889192192,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889192320,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889192384,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889192416,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889192432,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889192440,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889192444,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889192446,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(889192447,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2134533531,32,FLEN)
NAN_BOXED(2880256,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
