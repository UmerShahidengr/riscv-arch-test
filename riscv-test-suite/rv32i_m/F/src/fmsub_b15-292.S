
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_37248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ab2b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ab2b5; op2val:0x80000000;
op3val:0x8ffffffe; valaddr_reg:x3; val_offset:111744*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111744*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ab2b5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ab2b5; op2val:0x80000000;
op3val:0x8fffffff; valaddr_reg:x3; val_offset:111747*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111747*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:111750*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111750*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:111753*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111753*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:111756*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111756*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:111759*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111759*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:111762*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111762*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:111765*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111765*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:111768*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111768*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:111771*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111771*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:111774*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111774*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:111777*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111777*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:111780*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111780*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:111783*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111783*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:111786*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111786*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:111789*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111789*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:111792*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111792*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:111795*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111795*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x88000000; valaddr_reg:x3; val_offset:111798*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111798*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x88000001; valaddr_reg:x3; val_offset:111801*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111801*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x88000003; valaddr_reg:x3; val_offset:111804*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111804*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x88000007; valaddr_reg:x3; val_offset:111807*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111807*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x8800000f; valaddr_reg:x3; val_offset:111810*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111810*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x8800001f; valaddr_reg:x3; val_offset:111813*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111813*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x8800003f; valaddr_reg:x3; val_offset:111816*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111816*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x8800007f; valaddr_reg:x3; val_offset:111819*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111819*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x880000ff; valaddr_reg:x3; val_offset:111822*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111822*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x880001ff; valaddr_reg:x3; val_offset:111825*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111825*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x880003ff; valaddr_reg:x3; val_offset:111828*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111828*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x880007ff; valaddr_reg:x3; val_offset:111831*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111831*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x88000fff; valaddr_reg:x3; val_offset:111834*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111834*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x88001fff; valaddr_reg:x3; val_offset:111837*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111837*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x88003fff; valaddr_reg:x3; val_offset:111840*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111840*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x88007fff; valaddr_reg:x3; val_offset:111843*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111843*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x8800ffff; valaddr_reg:x3; val_offset:111846*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111846*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x8801ffff; valaddr_reg:x3; val_offset:111849*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111849*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x8803ffff; valaddr_reg:x3; val_offset:111852*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111852*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x8807ffff; valaddr_reg:x3; val_offset:111855*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111855*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x880fffff; valaddr_reg:x3; val_offset:111858*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111858*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x881fffff; valaddr_reg:x3; val_offset:111861*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111861*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x883fffff; valaddr_reg:x3; val_offset:111864*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111864*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x88400000; valaddr_reg:x3; val_offset:111867*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111867*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x88600000; valaddr_reg:x3; val_offset:111870*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111870*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x88700000; valaddr_reg:x3; val_offset:111873*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111873*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x88780000; valaddr_reg:x3; val_offset:111876*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111876*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887c0000; valaddr_reg:x3; val_offset:111879*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111879*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887e0000; valaddr_reg:x3; val_offset:111882*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111882*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887f0000; valaddr_reg:x3; val_offset:111885*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111885*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887f8000; valaddr_reg:x3; val_offset:111888*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111888*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887fc000; valaddr_reg:x3; val_offset:111891*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111891*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887fe000; valaddr_reg:x3; val_offset:111894*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111894*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887ff000; valaddr_reg:x3; val_offset:111897*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111897*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887ff800; valaddr_reg:x3; val_offset:111900*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111900*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887ffc00; valaddr_reg:x3; val_offset:111903*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111903*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887ffe00; valaddr_reg:x3; val_offset:111906*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111906*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887fff00; valaddr_reg:x3; val_offset:111909*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111909*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887fff80; valaddr_reg:x3; val_offset:111912*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111912*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887fffc0; valaddr_reg:x3; val_offset:111915*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111915*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887fffe0; valaddr_reg:x3; val_offset:111918*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111918*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887ffff0; valaddr_reg:x3; val_offset:111921*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111921*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887ffff8; valaddr_reg:x3; val_offset:111924*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111924*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887ffffc; valaddr_reg:x3; val_offset:111927*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111927*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887ffffe; valaddr_reg:x3; val_offset:111930*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111930*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3abcaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3abcaf; op2val:0x80000000;
op3val:0x887fffff; valaddr_reg:x3; val_offset:111933*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111933*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xbf800001; valaddr_reg:x3; val_offset:111936*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111936*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xbf800003; valaddr_reg:x3; val_offset:111939*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111939*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xbf800007; valaddr_reg:x3; val_offset:111942*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111942*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xbf999999; valaddr_reg:x3; val_offset:111945*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111945*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:111948*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111948*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:111951*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111951*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:111954*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111954*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:111957*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111957*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:111960*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111960*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:111963*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111963*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:111966*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111966*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:111969*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111969*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:111972*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111972*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:111975*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111975*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:111978*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111978*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:111981*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111981*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce000000; valaddr_reg:x3; val_offset:111984*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111984*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce000001; valaddr_reg:x3; val_offset:111987*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111987*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce000003; valaddr_reg:x3; val_offset:111990*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111990*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce000007; valaddr_reg:x3; val_offset:111993*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111993*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce00000f; valaddr_reg:x3; val_offset:111996*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111996*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce00001f; valaddr_reg:x3; val_offset:111999*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111999*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce00003f; valaddr_reg:x3; val_offset:112002*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112002*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce00007f; valaddr_reg:x3; val_offset:112005*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112005*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce0000ff; valaddr_reg:x3; val_offset:112008*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112008*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce0001ff; valaddr_reg:x3; val_offset:112011*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112011*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce0003ff; valaddr_reg:x3; val_offset:112014*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112014*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce0007ff; valaddr_reg:x3; val_offset:112017*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112017*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce000fff; valaddr_reg:x3; val_offset:112020*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112020*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce001fff; valaddr_reg:x3; val_offset:112023*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112023*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce003fff; valaddr_reg:x3; val_offset:112026*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112026*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce007fff; valaddr_reg:x3; val_offset:112029*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112029*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce00ffff; valaddr_reg:x3; val_offset:112032*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112032*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce01ffff; valaddr_reg:x3; val_offset:112035*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112035*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce03ffff; valaddr_reg:x3; val_offset:112038*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112038*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce07ffff; valaddr_reg:x3; val_offset:112041*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112041*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce0fffff; valaddr_reg:x3; val_offset:112044*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112044*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce1fffff; valaddr_reg:x3; val_offset:112047*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112047*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce3fffff; valaddr_reg:x3; val_offset:112050*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112050*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce400000; valaddr_reg:x3; val_offset:112053*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112053*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce600000; valaddr_reg:x3; val_offset:112056*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112056*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce700000; valaddr_reg:x3; val_offset:112059*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112059*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce780000; valaddr_reg:x3; val_offset:112062*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112062*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7c0000; valaddr_reg:x3; val_offset:112065*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112065*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7e0000; valaddr_reg:x3; val_offset:112068*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112068*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7f0000; valaddr_reg:x3; val_offset:112071*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112071*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7f8000; valaddr_reg:x3; val_offset:112074*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112074*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7fc000; valaddr_reg:x3; val_offset:112077*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112077*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7fe000; valaddr_reg:x3; val_offset:112080*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112080*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7ff000; valaddr_reg:x3; val_offset:112083*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112083*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7ff800; valaddr_reg:x3; val_offset:112086*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112086*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7ffc00; valaddr_reg:x3; val_offset:112089*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112089*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7ffe00; valaddr_reg:x3; val_offset:112092*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112092*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7fff00; valaddr_reg:x3; val_offset:112095*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112095*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7fff80; valaddr_reg:x3; val_offset:112098*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112098*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7fffc0; valaddr_reg:x3; val_offset:112101*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112101*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7fffe0; valaddr_reg:x3; val_offset:112104*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112104*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7ffff0; valaddr_reg:x3; val_offset:112107*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112107*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7ffff8; valaddr_reg:x3; val_offset:112110*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112110*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7ffffc; valaddr_reg:x3; val_offset:112113*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112113*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7ffffe; valaddr_reg:x3; val_offset:112116*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112116*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3afdda and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2bcf38 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3afdda; op2val:0x802bcf38;
op3val:0xce7fffff; valaddr_reg:x3; val_offset:112119*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112119*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d1b74 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2d46fe and fs3 == 0 and fe3 == 0xcc and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d1b74; op2val:0x3fad46fe;
op3val:0x66000000; valaddr_reg:x3; val_offset:112122*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112122*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d1b74 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2d46fe and fs3 == 0 and fe3 == 0xcc and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d1b74; op2val:0x3fad46fe;
op3val:0x66000001; valaddr_reg:x3; val_offset:112125*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112125*0 + 3*291*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134553269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919102,32,FLEN)
NAN_BOXED(2134553269,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919103,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701376,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701377,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701379,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701383,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701391,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701407,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701439,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701503,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701631,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701887,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281702399,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281703423,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281705471,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281709567,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281717759,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281734143,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281766911,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281832447,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281963519,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282225663,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282749951,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2283798527,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895679,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895680,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2287992832,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289041408,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289565696,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289827840,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289958912,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290024448,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290057216,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290073600,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290081792,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290085888,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290087936,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290088960,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089472,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089728,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089856,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089920,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089952,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089968,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089976,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089980,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089982,32,FLEN)
NAN_BOXED(2134555823,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089983,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456106496,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456106497,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456106499,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456106503,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456106511,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456106527,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456106559,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456106623,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456106751,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456107007,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456107519,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456108543,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456110591,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456114687,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456122879,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456139263,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456172031,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456237567,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456368639,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3456630783,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3457155071,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3458203647,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3460300799,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3460300800,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3462397952,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3463446528,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3463970816,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464232960,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464364032,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464429568,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464462336,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464478720,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464486912,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464491008,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464493056,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464494080,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464494592,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464494848,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464494976,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464495040,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464495072,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464495088,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464495096,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464495100,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464495102,32,FLEN)
NAN_BOXED(2134572506,32,FLEN)
NAN_BOXED(2150354744,32,FLEN)
NAN_BOXED(3464495103,32,FLEN)
NAN_BOXED(2134711156,32,FLEN)
NAN_BOXED(1068320510,32,FLEN)
NAN_BOXED(1711276032,32,FLEN)
NAN_BOXED(2134711156,32,FLEN)
NAN_BOXED(1068320510,32,FLEN)
NAN_BOXED(1711276033,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
