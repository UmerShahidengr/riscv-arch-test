
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_37504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x6680003f; valaddr_reg:x3; val_offset:112512*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112512*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x6680007f; valaddr_reg:x3; val_offset:112515*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112515*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x668000ff; valaddr_reg:x3; val_offset:112518*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112518*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x668001ff; valaddr_reg:x3; val_offset:112521*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112521*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x668003ff; valaddr_reg:x3; val_offset:112524*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112524*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x668007ff; valaddr_reg:x3; val_offset:112527*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112527*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66800fff; valaddr_reg:x3; val_offset:112530*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112530*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66801fff; valaddr_reg:x3; val_offset:112533*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112533*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66803fff; valaddr_reg:x3; val_offset:112536*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112536*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66807fff; valaddr_reg:x3; val_offset:112539*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112539*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x6680ffff; valaddr_reg:x3; val_offset:112542*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112542*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x6681ffff; valaddr_reg:x3; val_offset:112545*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112545*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x6683ffff; valaddr_reg:x3; val_offset:112548*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112548*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x6687ffff; valaddr_reg:x3; val_offset:112551*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112551*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x668fffff; valaddr_reg:x3; val_offset:112554*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112554*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x669fffff; valaddr_reg:x3; val_offset:112557*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112557*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66bfffff; valaddr_reg:x3; val_offset:112560*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112560*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66c00000; valaddr_reg:x3; val_offset:112563*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112563*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66e00000; valaddr_reg:x3; val_offset:112566*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112566*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66f00000; valaddr_reg:x3; val_offset:112569*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112569*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66f80000; valaddr_reg:x3; val_offset:112572*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112572*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66fc0000; valaddr_reg:x3; val_offset:112575*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112575*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66fe0000; valaddr_reg:x3; val_offset:112578*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112578*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66ff0000; valaddr_reg:x3; val_offset:112581*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112581*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66ff8000; valaddr_reg:x3; val_offset:112584*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112584*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66ffc000; valaddr_reg:x3; val_offset:112587*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112587*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66ffe000; valaddr_reg:x3; val_offset:112590*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112590*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66fff000; valaddr_reg:x3; val_offset:112593*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112593*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66fff800; valaddr_reg:x3; val_offset:112596*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112596*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66fffc00; valaddr_reg:x3; val_offset:112599*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112599*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66fffe00; valaddr_reg:x3; val_offset:112602*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112602*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66ffff00; valaddr_reg:x3; val_offset:112605*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112605*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66ffff80; valaddr_reg:x3; val_offset:112608*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112608*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66ffffc0; valaddr_reg:x3; val_offset:112611*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112611*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66ffffe0; valaddr_reg:x3; val_offset:112614*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112614*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66fffff0; valaddr_reg:x3; val_offset:112617*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112617*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66fffff8; valaddr_reg:x3; val_offset:112620*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112620*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66fffffc; valaddr_reg:x3; val_offset:112623*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112623*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66fffffe; valaddr_reg:x3; val_offset:112626*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112626*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x66ffffff; valaddr_reg:x3; val_offset:112629*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112629*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x7f000001; valaddr_reg:x3; val_offset:112632*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112632*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x7f000003; valaddr_reg:x3; val_offset:112635*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112635*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x7f000007; valaddr_reg:x3; val_offset:112638*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112638*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x7f199999; valaddr_reg:x3; val_offset:112641*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112641*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x7f249249; valaddr_reg:x3; val_offset:112644*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112644*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x7f333333; valaddr_reg:x3; val_offset:112647*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112647*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:112650*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112650*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:112653*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112653*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x7f444444; valaddr_reg:x3; val_offset:112656*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112656*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:112659*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112659*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:112662*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112662*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x7f666666; valaddr_reg:x3; val_offset:112665*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112665*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:112668*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112668*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:112671*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112671*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:112674*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112674*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddfe3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2c93bb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ddfe3; op2val:0x3fac93bb;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:112677*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112677*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:112680*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112680*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:112683*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112683*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:112686*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112686*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:112689*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112689*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:112692*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112692*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:112695*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112695*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:112698*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112698*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:112701*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112701*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:112704*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112704*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:112707*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112707*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:112710*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112710*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:112713*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112713*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:112716*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112716*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:112719*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112719*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:112722*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112722*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:112725*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112725*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa000000; valaddr_reg:x3; val_offset:112728*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112728*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa000001; valaddr_reg:x3; val_offset:112731*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112731*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa000003; valaddr_reg:x3; val_offset:112734*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112734*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa000007; valaddr_reg:x3; val_offset:112737*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112737*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa00000f; valaddr_reg:x3; val_offset:112740*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112740*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa00001f; valaddr_reg:x3; val_offset:112743*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112743*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa00003f; valaddr_reg:x3; val_offset:112746*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112746*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa00007f; valaddr_reg:x3; val_offset:112749*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112749*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa0000ff; valaddr_reg:x3; val_offset:112752*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112752*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa0001ff; valaddr_reg:x3; val_offset:112755*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112755*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa0003ff; valaddr_reg:x3; val_offset:112758*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112758*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa0007ff; valaddr_reg:x3; val_offset:112761*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112761*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa000fff; valaddr_reg:x3; val_offset:112764*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112764*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa001fff; valaddr_reg:x3; val_offset:112767*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112767*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa003fff; valaddr_reg:x3; val_offset:112770*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112770*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa007fff; valaddr_reg:x3; val_offset:112773*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112773*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa00ffff; valaddr_reg:x3; val_offset:112776*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112776*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa01ffff; valaddr_reg:x3; val_offset:112779*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112779*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa03ffff; valaddr_reg:x3; val_offset:112782*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112782*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa07ffff; valaddr_reg:x3; val_offset:112785*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112785*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa0fffff; valaddr_reg:x3; val_offset:112788*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112788*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa1fffff; valaddr_reg:x3; val_offset:112791*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112791*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa3fffff; valaddr_reg:x3; val_offset:112794*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112794*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa400000; valaddr_reg:x3; val_offset:112797*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112797*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa600000; valaddr_reg:x3; val_offset:112800*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112800*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa700000; valaddr_reg:x3; val_offset:112803*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112803*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa780000; valaddr_reg:x3; val_offset:112806*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112806*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7c0000; valaddr_reg:x3; val_offset:112809*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112809*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7e0000; valaddr_reg:x3; val_offset:112812*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112812*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7f0000; valaddr_reg:x3; val_offset:112815*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112815*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7f8000; valaddr_reg:x3; val_offset:112818*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112818*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7fc000; valaddr_reg:x3; val_offset:112821*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112821*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7fe000; valaddr_reg:x3; val_offset:112824*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112824*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7ff000; valaddr_reg:x3; val_offset:112827*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112827*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7ff800; valaddr_reg:x3; val_offset:112830*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112830*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7ffc00; valaddr_reg:x3; val_offset:112833*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112833*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7ffe00; valaddr_reg:x3; val_offset:112836*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112836*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7fff00; valaddr_reg:x3; val_offset:112839*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112839*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7fff80; valaddr_reg:x3; val_offset:112842*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112842*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7fffc0; valaddr_reg:x3; val_offset:112845*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112845*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7fffe0; valaddr_reg:x3; val_offset:112848*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112848*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7ffff0; valaddr_reg:x3; val_offset:112851*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112851*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7ffff8; valaddr_reg:x3; val_offset:112854*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112854*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7ffffc; valaddr_reg:x3; val_offset:112857*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112857*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7ffffe; valaddr_reg:x3; val_offset:112860*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112860*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e8551 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e8551; op2val:0x0;
op3val:0xa7fffff; valaddr_reg:x3; val_offset:112863*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112863*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f015e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f015e; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:112866*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112866*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f015e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f015e; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:112869*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112869*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f015e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f015e; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:112872*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112872*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f015e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f015e; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:112875*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112875*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f015e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f015e; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:112878*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112878*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f015e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f015e; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:112881*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112881*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f015e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f015e; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:112884*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112884*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f015e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f015e; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:112887*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112887*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f015e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f015e; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:112890*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112890*0 + 3*293*FLEN/8, x4, x1, x2)

inst_37631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f015e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f015e; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:112893*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112893*0 + 3*293*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1719664703,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1719664767,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1719664895,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1719665151,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1719665663,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1719666687,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1719668735,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1719672831,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1719681023,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1719697407,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1719730175,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1719795711,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1719926783,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1720188927,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1720713215,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1721761791,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1723858943,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1723858944,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1725956096,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1727004672,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1727528960,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1727791104,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1727922176,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1727987712,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1728020480,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1728036864,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1728045056,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1728049152,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1728051200,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1728052224,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1728052736,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1728052992,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1728053120,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1728053184,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1728053216,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1728053232,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1728053240,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1728053244,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1728053246,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(1728053247,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2134761443,32,FLEN)
NAN_BOXED(1068274619,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772160,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772161,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772163,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772167,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772175,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772191,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772223,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772287,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772415,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772671,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167773183,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167774207,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167776255,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167780351,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167788543,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167804927,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167837695,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167903231,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(168034303,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(168296447,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(168820735,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(169869311,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(171966463,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(171966464,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(174063616,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175112192,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175636480,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175898624,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176029696,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176095232,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176128000,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176144384,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176152576,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176156672,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176158720,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176159744,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160256,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160512,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160640,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160704,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160736,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160752,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160760,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160764,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160766,32,FLEN)
NAN_BOXED(2134803793,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160767,32,FLEN)
NAN_BOXED(2134835550,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2134835550,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2134835550,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2134835550,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2134835550,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2134835550,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2134835550,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2134835550,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2134835550,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2134835550,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
