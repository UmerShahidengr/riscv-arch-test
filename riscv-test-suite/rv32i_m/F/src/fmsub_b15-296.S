
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_37760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a003fff; valaddr_reg:x3; val_offset:113280*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113280*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a007fff; valaddr_reg:x3; val_offset:113283*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113283*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a00ffff; valaddr_reg:x3; val_offset:113286*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113286*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a01ffff; valaddr_reg:x3; val_offset:113289*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113289*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a03ffff; valaddr_reg:x3; val_offset:113292*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113292*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a07ffff; valaddr_reg:x3; val_offset:113295*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113295*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a0fffff; valaddr_reg:x3; val_offset:113298*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113298*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a1fffff; valaddr_reg:x3; val_offset:113301*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113301*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a3fffff; valaddr_reg:x3; val_offset:113304*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113304*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a400000; valaddr_reg:x3; val_offset:113307*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113307*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a600000; valaddr_reg:x3; val_offset:113310*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113310*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a700000; valaddr_reg:x3; val_offset:113313*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113313*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a780000; valaddr_reg:x3; val_offset:113316*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113316*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7c0000; valaddr_reg:x3; val_offset:113319*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113319*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7e0000; valaddr_reg:x3; val_offset:113322*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113322*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7f0000; valaddr_reg:x3; val_offset:113325*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113325*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7f8000; valaddr_reg:x3; val_offset:113328*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113328*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7fc000; valaddr_reg:x3; val_offset:113331*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113331*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7fe000; valaddr_reg:x3; val_offset:113334*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113334*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7ff000; valaddr_reg:x3; val_offset:113337*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113337*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7ff800; valaddr_reg:x3; val_offset:113340*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113340*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7ffc00; valaddr_reg:x3; val_offset:113343*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113343*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7ffe00; valaddr_reg:x3; val_offset:113346*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113346*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7fff00; valaddr_reg:x3; val_offset:113349*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113349*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7fff80; valaddr_reg:x3; val_offset:113352*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113352*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7fffc0; valaddr_reg:x3; val_offset:113355*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113355*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7fffe0; valaddr_reg:x3; val_offset:113358*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113358*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7ffff0; valaddr_reg:x3; val_offset:113361*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113361*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7ffff8; valaddr_reg:x3; val_offset:113364*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113364*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7ffffc; valaddr_reg:x3; val_offset:113367*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113367*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7ffffe; valaddr_reg:x3; val_offset:113370*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113370*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xd4 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x6a7fffff; valaddr_reg:x3; val_offset:113373*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113373*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x7f000001; valaddr_reg:x3; val_offset:113376*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113376*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x7f000003; valaddr_reg:x3; val_offset:113379*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113379*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x7f000007; valaddr_reg:x3; val_offset:113382*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113382*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x7f199999; valaddr_reg:x3; val_offset:113385*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113385*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x7f249249; valaddr_reg:x3; val_offset:113388*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113388*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x7f333333; valaddr_reg:x3; val_offset:113391*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113391*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:113394*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113394*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:113397*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113397*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x7f444444; valaddr_reg:x3; val_offset:113400*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113400*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:113403*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113403*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:113406*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113406*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x7f666666; valaddr_reg:x3; val_offset:113409*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113409*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:113412*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113412*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:113415*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113415*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:113418*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113418*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f16e6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b7ad9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f16e6; op2val:0x3fab7ad9;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:113421*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113421*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24800000; valaddr_reg:x3; val_offset:113424*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113424*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24800001; valaddr_reg:x3; val_offset:113427*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113427*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24800003; valaddr_reg:x3; val_offset:113430*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113430*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24800007; valaddr_reg:x3; val_offset:113433*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113433*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x2480000f; valaddr_reg:x3; val_offset:113436*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113436*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x2480001f; valaddr_reg:x3; val_offset:113439*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113439*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x2480003f; valaddr_reg:x3; val_offset:113442*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113442*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x2480007f; valaddr_reg:x3; val_offset:113445*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113445*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x248000ff; valaddr_reg:x3; val_offset:113448*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113448*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x248001ff; valaddr_reg:x3; val_offset:113451*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113451*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x248003ff; valaddr_reg:x3; val_offset:113454*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113454*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x248007ff; valaddr_reg:x3; val_offset:113457*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113457*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24800fff; valaddr_reg:x3; val_offset:113460*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113460*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24801fff; valaddr_reg:x3; val_offset:113463*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113463*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24803fff; valaddr_reg:x3; val_offset:113466*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113466*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24807fff; valaddr_reg:x3; val_offset:113469*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113469*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x2480ffff; valaddr_reg:x3; val_offset:113472*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113472*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x2481ffff; valaddr_reg:x3; val_offset:113475*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113475*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x2483ffff; valaddr_reg:x3; val_offset:113478*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113478*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x2487ffff; valaddr_reg:x3; val_offset:113481*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113481*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x248fffff; valaddr_reg:x3; val_offset:113484*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113484*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x249fffff; valaddr_reg:x3; val_offset:113487*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113487*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24bfffff; valaddr_reg:x3; val_offset:113490*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113490*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24c00000; valaddr_reg:x3; val_offset:113493*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113493*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24e00000; valaddr_reg:x3; val_offset:113496*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113496*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24f00000; valaddr_reg:x3; val_offset:113499*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113499*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24f80000; valaddr_reg:x3; val_offset:113502*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113502*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24fc0000; valaddr_reg:x3; val_offset:113505*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113505*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24fe0000; valaddr_reg:x3; val_offset:113508*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113508*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24ff0000; valaddr_reg:x3; val_offset:113511*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113511*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24ff8000; valaddr_reg:x3; val_offset:113514*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113514*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24ffc000; valaddr_reg:x3; val_offset:113517*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113517*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24ffe000; valaddr_reg:x3; val_offset:113520*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113520*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24fff000; valaddr_reg:x3; val_offset:113523*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113523*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24fff800; valaddr_reg:x3; val_offset:113526*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113526*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24fffc00; valaddr_reg:x3; val_offset:113529*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113529*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24fffe00; valaddr_reg:x3; val_offset:113532*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113532*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24ffff00; valaddr_reg:x3; val_offset:113535*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113535*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24ffff80; valaddr_reg:x3; val_offset:113538*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113538*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24ffffc0; valaddr_reg:x3; val_offset:113541*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113541*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24ffffe0; valaddr_reg:x3; val_offset:113544*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113544*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24fffff0; valaddr_reg:x3; val_offset:113547*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113547*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24fffff8; valaddr_reg:x3; val_offset:113550*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113550*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24fffffc; valaddr_reg:x3; val_offset:113553*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113553*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24fffffe; valaddr_reg:x3; val_offset:113556*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113556*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x24ffffff; valaddr_reg:x3; val_offset:113559*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113559*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x3f800001; valaddr_reg:x3; val_offset:113562*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113562*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x3f800003; valaddr_reg:x3; val_offset:113565*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113565*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x3f800007; valaddr_reg:x3; val_offset:113568*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113568*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x3f999999; valaddr_reg:x3; val_offset:113571*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113571*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:113574*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113574*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:113577*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113577*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:113580*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113580*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:113583*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113583*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:113586*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113586*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:113589*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113589*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:113592*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113592*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:113595*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113595*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:113598*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113598*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:113601*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113601*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:113604*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113604*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f6fe9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2acac7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f6fe9; op2val:0x2acac7;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:113607*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113607*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf1800000; valaddr_reg:x3; val_offset:113610*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113610*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf1800001; valaddr_reg:x3; val_offset:113613*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113613*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf1800003; valaddr_reg:x3; val_offset:113616*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113616*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf1800007; valaddr_reg:x3; val_offset:113619*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113619*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf180000f; valaddr_reg:x3; val_offset:113622*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113622*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf180001f; valaddr_reg:x3; val_offset:113625*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113625*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf180003f; valaddr_reg:x3; val_offset:113628*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113628*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf180007f; valaddr_reg:x3; val_offset:113631*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113631*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf18000ff; valaddr_reg:x3; val_offset:113634*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113634*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf18001ff; valaddr_reg:x3; val_offset:113637*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113637*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf18003ff; valaddr_reg:x3; val_offset:113640*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113640*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf18007ff; valaddr_reg:x3; val_offset:113643*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113643*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf1800fff; valaddr_reg:x3; val_offset:113646*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113646*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf1801fff; valaddr_reg:x3; val_offset:113649*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113649*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf1803fff; valaddr_reg:x3; val_offset:113652*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113652*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf1807fff; valaddr_reg:x3; val_offset:113655*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113655*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf180ffff; valaddr_reg:x3; val_offset:113658*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113658*0 + 3*295*FLEN/8, x4, x1, x2)

inst_37887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f738b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2b27de and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f738b; op2val:0xbfab27de;
op3val:0xf181ffff; valaddr_reg:x3; val_offset:113661*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113661*0 + 3*295*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1778401279,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1778417663,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1778450431,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1778515967,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1778647039,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1778909183,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1779433471,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1780482047,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1782579199,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1782579200,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1784676352,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1785724928,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786249216,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786511360,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786642432,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786707968,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786740736,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786757120,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786765312,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786769408,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786771456,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786772480,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786772992,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786773248,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786773376,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786773440,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786773472,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786773488,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786773496,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786773500,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786773502,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(1786773503,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2134841062,32,FLEN)
NAN_BOXED(1068202713,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612368384,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612368385,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612368387,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612368391,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612368399,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612368415,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612368447,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612368511,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612368639,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612368895,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612369407,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612370431,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612372479,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612376575,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612384767,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612401151,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612433919,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612499455,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612630527,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(612892671,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(613416959,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(614465535,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(616562687,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(616562688,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(618659840,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(619708416,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620232704,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620494848,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620625920,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620691456,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620724224,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620740608,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620748800,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620752896,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620754944,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620755968,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620756480,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620756736,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620756864,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620756928,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620756960,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620756976,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620756984,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620756988,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620756990,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(620756991,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2134863849,32,FLEN)
NAN_BOXED(2804423,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051697664,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051697665,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051697667,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051697671,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051697679,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051697695,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051697727,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051697791,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051697919,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051698175,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051698687,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051699711,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051701759,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051705855,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051714047,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051730431,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051763199,32,FLEN)
NAN_BOXED(2134864779,32,FLEN)
NAN_BOXED(3215665118,32,FLEN)
NAN_BOXED(4051828735,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
