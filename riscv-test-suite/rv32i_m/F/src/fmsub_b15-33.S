
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_4096:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe900ffff; valaddr_reg:x3; val_offset:12288*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12288*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4097:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe901ffff; valaddr_reg:x3; val_offset:12291*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12291*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4098:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe903ffff; valaddr_reg:x3; val_offset:12294*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12294*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4099:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe907ffff; valaddr_reg:x3; val_offset:12297*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12297*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4100:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe90fffff; valaddr_reg:x3; val_offset:12300*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12300*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4101:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe91fffff; valaddr_reg:x3; val_offset:12303*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12303*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4102:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe93fffff; valaddr_reg:x3; val_offset:12306*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12306*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4103:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe9400000; valaddr_reg:x3; val_offset:12309*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12309*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4104:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe9600000; valaddr_reg:x3; val_offset:12312*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12312*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4105:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe9700000; valaddr_reg:x3; val_offset:12315*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12315*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4106:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe9780000; valaddr_reg:x3; val_offset:12318*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12318*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4107:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97c0000; valaddr_reg:x3; val_offset:12321*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12321*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4108:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97e0000; valaddr_reg:x3; val_offset:12324*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12324*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4109:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97f0000; valaddr_reg:x3; val_offset:12327*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12327*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4110:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97f8000; valaddr_reg:x3; val_offset:12330*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12330*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4111:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97fc000; valaddr_reg:x3; val_offset:12333*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12333*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4112:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97fe000; valaddr_reg:x3; val_offset:12336*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12336*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4113:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97ff000; valaddr_reg:x3; val_offset:12339*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12339*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4114:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97ff800; valaddr_reg:x3; val_offset:12342*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12342*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4115:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97ffc00; valaddr_reg:x3; val_offset:12345*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12345*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4116:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97ffe00; valaddr_reg:x3; val_offset:12348*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12348*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4117:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97fff00; valaddr_reg:x3; val_offset:12351*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12351*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4118:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97fff80; valaddr_reg:x3; val_offset:12354*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12354*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4119:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97fffc0; valaddr_reg:x3; val_offset:12357*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12357*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4120:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97fffe0; valaddr_reg:x3; val_offset:12360*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12360*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4121:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97ffff0; valaddr_reg:x3; val_offset:12363*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12363*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4122:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97ffff8; valaddr_reg:x3; val_offset:12366*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12366*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4123:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97ffffc; valaddr_reg:x3; val_offset:12369*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12369*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4124:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97ffffe; valaddr_reg:x3; val_offset:12372*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12372*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4125:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xe97fffff; valaddr_reg:x3; val_offset:12375*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12375*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4126:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xff000001; valaddr_reg:x3; val_offset:12378*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12378*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4127:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xff000003; valaddr_reg:x3; val_offset:12381*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12381*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4128:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xff000007; valaddr_reg:x3; val_offset:12384*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12384*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4129:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xff199999; valaddr_reg:x3; val_offset:12387*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12387*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4130:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xff249249; valaddr_reg:x3; val_offset:12390*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12390*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4131:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xff333333; valaddr_reg:x3; val_offset:12393*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12393*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4132:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:12396*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12396*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4133:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:12399*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12399*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4134:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xff444444; valaddr_reg:x3; val_offset:12402*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12402*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4135:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:12405*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12405*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4136:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:12408*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12408*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4137:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xff666666; valaddr_reg:x3; val_offset:12411*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12411*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4138:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:12414*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12414*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4139:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:12417*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12417*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4140:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:12420*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12420*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4141:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fb78b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4d29b3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9fb78b; op2val:0xc14d29b3;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:12423*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12423*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4142:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:12426*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12426*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4143:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:12429*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12429*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4144:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:12432*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12432*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4145:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:12435*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12435*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4146:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:12438*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12438*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4147:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:12441*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12441*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4148:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:12444*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12444*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4149:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:12447*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12447*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4150:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:12450*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12450*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4151:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:12453*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12453*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4152:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:12456*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12456*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4153:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:12459*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12459*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4154:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:12462*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12462*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4155:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:12465*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12465*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4156:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:12468*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12468*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4157:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:12471*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12471*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4158:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x81000000; valaddr_reg:x3; val_offset:12474*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12474*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4159:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x81000001; valaddr_reg:x3; val_offset:12477*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12477*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4160:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x81000003; valaddr_reg:x3; val_offset:12480*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12480*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4161:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x81000007; valaddr_reg:x3; val_offset:12483*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12483*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4162:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x8100000f; valaddr_reg:x3; val_offset:12486*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12486*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4163:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x8100001f; valaddr_reg:x3; val_offset:12489*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12489*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4164:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x8100003f; valaddr_reg:x3; val_offset:12492*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12492*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4165:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x8100007f; valaddr_reg:x3; val_offset:12495*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12495*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4166:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x810000ff; valaddr_reg:x3; val_offset:12498*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12498*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4167:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x810001ff; valaddr_reg:x3; val_offset:12501*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12501*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4168:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x810003ff; valaddr_reg:x3; val_offset:12504*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12504*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4169:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x810007ff; valaddr_reg:x3; val_offset:12507*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12507*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4170:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x81000fff; valaddr_reg:x3; val_offset:12510*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12510*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4171:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x81001fff; valaddr_reg:x3; val_offset:12513*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12513*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4172:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x81003fff; valaddr_reg:x3; val_offset:12516*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12516*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4173:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x81007fff; valaddr_reg:x3; val_offset:12519*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12519*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4174:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x8100ffff; valaddr_reg:x3; val_offset:12522*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12522*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4175:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x8101ffff; valaddr_reg:x3; val_offset:12525*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12525*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4176:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x8103ffff; valaddr_reg:x3; val_offset:12528*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12528*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4177:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x8107ffff; valaddr_reg:x3; val_offset:12531*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12531*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4178:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x810fffff; valaddr_reg:x3; val_offset:12534*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12534*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4179:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x811fffff; valaddr_reg:x3; val_offset:12537*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12537*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4180:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x813fffff; valaddr_reg:x3; val_offset:12540*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12540*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4181:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x81400000; valaddr_reg:x3; val_offset:12543*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12543*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4182:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x81600000; valaddr_reg:x3; val_offset:12546*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12546*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4183:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x81700000; valaddr_reg:x3; val_offset:12549*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12549*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4184:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x81780000; valaddr_reg:x3; val_offset:12552*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12552*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4185:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817c0000; valaddr_reg:x3; val_offset:12555*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12555*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4186:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817e0000; valaddr_reg:x3; val_offset:12558*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12558*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4187:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817f0000; valaddr_reg:x3; val_offset:12561*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12561*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4188:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817f8000; valaddr_reg:x3; val_offset:12564*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12564*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4189:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817fc000; valaddr_reg:x3; val_offset:12567*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12567*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4190:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817fe000; valaddr_reg:x3; val_offset:12570*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12570*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4191:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817ff000; valaddr_reg:x3; val_offset:12573*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12573*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4192:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817ff800; valaddr_reg:x3; val_offset:12576*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12576*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4193:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817ffc00; valaddr_reg:x3; val_offset:12579*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12579*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4194:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817ffe00; valaddr_reg:x3; val_offset:12582*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12582*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4195:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817fff00; valaddr_reg:x3; val_offset:12585*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12585*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4196:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817fff80; valaddr_reg:x3; val_offset:12588*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12588*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4197:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817fffc0; valaddr_reg:x3; val_offset:12591*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12591*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4198:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817fffe0; valaddr_reg:x3; val_offset:12594*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12594*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4199:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817ffff0; valaddr_reg:x3; val_offset:12597*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12597*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4200:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817ffff8; valaddr_reg:x3; val_offset:12600*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12600*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4201:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817ffffc; valaddr_reg:x3; val_offset:12603*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12603*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4202:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817ffffe; valaddr_reg:x3; val_offset:12606*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12606*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4203:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202861 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da02861; op2val:0x80000000;
op3val:0x817fffff; valaddr_reg:x3; val_offset:12609*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12609*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4204:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae800000; valaddr_reg:x3; val_offset:12612*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12612*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4205:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae800001; valaddr_reg:x3; val_offset:12615*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12615*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4206:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae800003; valaddr_reg:x3; val_offset:12618*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12618*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4207:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae800007; valaddr_reg:x3; val_offset:12621*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12621*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4208:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae80000f; valaddr_reg:x3; val_offset:12624*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12624*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4209:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae80001f; valaddr_reg:x3; val_offset:12627*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12627*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4210:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae80003f; valaddr_reg:x3; val_offset:12630*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12630*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4211:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae80007f; valaddr_reg:x3; val_offset:12633*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12633*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4212:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae8000ff; valaddr_reg:x3; val_offset:12636*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12636*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4213:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae8001ff; valaddr_reg:x3; val_offset:12639*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12639*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4214:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae8003ff; valaddr_reg:x3; val_offset:12642*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12642*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4215:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae8007ff; valaddr_reg:x3; val_offset:12645*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12645*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4216:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae800fff; valaddr_reg:x3; val_offset:12648*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12648*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4217:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae801fff; valaddr_reg:x3; val_offset:12651*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12651*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4218:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae803fff; valaddr_reg:x3; val_offset:12654*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12654*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4219:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae807fff; valaddr_reg:x3; val_offset:12657*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12657*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4220:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae80ffff; valaddr_reg:x3; val_offset:12660*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12660*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4221:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae81ffff; valaddr_reg:x3; val_offset:12663*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12663*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4222:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae83ffff; valaddr_reg:x3; val_offset:12666*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12666*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4223:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x214e2c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x4b2485 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da14e2c; op2val:0x814b2485;
op3val:0xae87ffff; valaddr_reg:x3; val_offset:12669*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12669*0 + 3*32*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3909156863,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3909222399,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3909353471,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3909615615,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3910139903,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3911188479,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3913285631,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3913285632,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3915382784,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3916431360,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3916955648,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917217792,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917348864,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917414400,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917447168,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917463552,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917471744,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917475840,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917477888,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917478912,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917479424,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917479680,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917479808,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917479872,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917479904,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917479920,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917479928,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917479932,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917479934,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(3917479935,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2107619211,32,FLEN)
NAN_BOXED(3243059635,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260864,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260865,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260867,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260871,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260879,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260895,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260927,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260991,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261119,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261375,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261887,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164262911,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164264959,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164269055,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164277247,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164293631,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164326399,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164391935,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164523007,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164785151,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2165309439,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2166358015,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2168455167,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2168455168,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2170552320,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2171600896,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172125184,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172387328,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172518400,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172583936,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172616704,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172633088,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172641280,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172645376,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172647424,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172648448,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172648960,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649216,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649344,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649408,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649440,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649456,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649464,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649468,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649470,32,FLEN)
NAN_BOXED(2107648097,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649471,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927624192,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927624193,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927624195,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927624199,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927624207,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927624223,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927624255,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927624319,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927624447,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927624703,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927625215,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927626239,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927628287,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927632383,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927640575,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927656959,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927689727,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927755263,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2927886335,32,FLEN)
NAN_BOXED(2107723308,32,FLEN)
NAN_BOXED(2169185413,32,FLEN)
NAN_BOXED(2928148479,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
