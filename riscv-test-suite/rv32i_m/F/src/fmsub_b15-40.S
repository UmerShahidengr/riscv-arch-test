
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_4992:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x32f9b7 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x371627 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db2f9b7; op2val:0x41371627;
op3val:0x7f249249; valaddr_reg:x3; val_offset:14976*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14976*0 + 3*39*FLEN/8, x4, x1, x2)

inst_4993:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x32f9b7 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x371627 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db2f9b7; op2val:0x41371627;
op3val:0x7f333333; valaddr_reg:x3; val_offset:14979*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14979*0 + 3*39*FLEN/8, x4, x1, x2)

inst_4994:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x32f9b7 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x371627 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db2f9b7; op2val:0x41371627;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:14982*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14982*0 + 3*39*FLEN/8, x4, x1, x2)

inst_4995:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x32f9b7 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x371627 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db2f9b7; op2val:0x41371627;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:14985*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14985*0 + 3*39*FLEN/8, x4, x1, x2)

inst_4996:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x32f9b7 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x371627 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db2f9b7; op2val:0x41371627;
op3val:0x7f444444; valaddr_reg:x3; val_offset:14988*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14988*0 + 3*39*FLEN/8, x4, x1, x2)

inst_4997:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x32f9b7 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x371627 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db2f9b7; op2val:0x41371627;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:14991*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14991*0 + 3*39*FLEN/8, x4, x1, x2)

inst_4998:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x32f9b7 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x371627 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db2f9b7; op2val:0x41371627;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:14994*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14994*0 + 3*39*FLEN/8, x4, x1, x2)

inst_4999:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x32f9b7 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x371627 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db2f9b7; op2val:0x41371627;
op3val:0x7f666666; valaddr_reg:x3; val_offset:14997*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14997*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5000:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x32f9b7 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x371627 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db2f9b7; op2val:0x41371627;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:15000*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15000*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5001:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x32f9b7 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x371627 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db2f9b7; op2val:0x41371627;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:15003*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15003*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5002:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x32f9b7 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x371627 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db2f9b7; op2val:0x41371627;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:15006*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15006*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5003:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x32f9b7 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x371627 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db2f9b7; op2val:0x41371627;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:15009*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15009*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5004:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab000000; valaddr_reg:x3; val_offset:15012*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15012*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5005:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab000001; valaddr_reg:x3; val_offset:15015*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15015*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5006:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab000003; valaddr_reg:x3; val_offset:15018*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15018*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5007:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab000007; valaddr_reg:x3; val_offset:15021*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15021*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5008:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab00000f; valaddr_reg:x3; val_offset:15024*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15024*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5009:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab00001f; valaddr_reg:x3; val_offset:15027*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15027*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5010:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab00003f; valaddr_reg:x3; val_offset:15030*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15030*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5011:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab00007f; valaddr_reg:x3; val_offset:15033*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15033*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5012:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab0000ff; valaddr_reg:x3; val_offset:15036*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15036*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5013:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab0001ff; valaddr_reg:x3; val_offset:15039*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15039*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5014:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab0003ff; valaddr_reg:x3; val_offset:15042*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15042*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5015:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab0007ff; valaddr_reg:x3; val_offset:15045*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15045*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5016:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab000fff; valaddr_reg:x3; val_offset:15048*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15048*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5017:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab001fff; valaddr_reg:x3; val_offset:15051*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15051*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5018:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab003fff; valaddr_reg:x3; val_offset:15054*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15054*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5019:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab007fff; valaddr_reg:x3; val_offset:15057*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15057*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5020:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab00ffff; valaddr_reg:x3; val_offset:15060*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15060*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5021:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab01ffff; valaddr_reg:x3; val_offset:15063*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15063*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5022:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab03ffff; valaddr_reg:x3; val_offset:15066*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15066*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5023:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab07ffff; valaddr_reg:x3; val_offset:15069*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15069*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5024:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab0fffff; valaddr_reg:x3; val_offset:15072*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15072*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5025:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab1fffff; valaddr_reg:x3; val_offset:15075*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15075*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5026:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab3fffff; valaddr_reg:x3; val_offset:15078*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15078*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5027:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab400000; valaddr_reg:x3; val_offset:15081*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15081*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5028:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab600000; valaddr_reg:x3; val_offset:15084*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15084*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5029:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab700000; valaddr_reg:x3; val_offset:15087*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15087*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5030:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab780000; valaddr_reg:x3; val_offset:15090*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15090*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5031:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7c0000; valaddr_reg:x3; val_offset:15093*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15093*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5032:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7e0000; valaddr_reg:x3; val_offset:15096*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15096*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5033:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7f0000; valaddr_reg:x3; val_offset:15099*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15099*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5034:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7f8000; valaddr_reg:x3; val_offset:15102*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15102*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5035:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7fc000; valaddr_reg:x3; val_offset:15105*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15105*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5036:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7fe000; valaddr_reg:x3; val_offset:15108*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15108*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5037:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7ff000; valaddr_reg:x3; val_offset:15111*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15111*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5038:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7ff800; valaddr_reg:x3; val_offset:15114*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15114*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5039:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7ffc00; valaddr_reg:x3; val_offset:15117*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15117*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5040:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7ffe00; valaddr_reg:x3; val_offset:15120*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15120*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5041:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7fff00; valaddr_reg:x3; val_offset:15123*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15123*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5042:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7fff80; valaddr_reg:x3; val_offset:15126*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15126*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5043:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7fffc0; valaddr_reg:x3; val_offset:15129*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15129*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5044:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7fffe0; valaddr_reg:x3; val_offset:15132*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15132*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5045:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7ffff0; valaddr_reg:x3; val_offset:15135*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15135*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5046:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7ffff8; valaddr_reg:x3; val_offset:15138*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15138*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5047:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7ffffc; valaddr_reg:x3; val_offset:15141*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15141*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5048:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7ffffe; valaddr_reg:x3; val_offset:15144*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15144*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5049:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x56 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xab7fffff; valaddr_reg:x3; val_offset:15147*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15147*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5050:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xbf800001; valaddr_reg:x3; val_offset:15150*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15150*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5051:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xbf800003; valaddr_reg:x3; val_offset:15153*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15153*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5052:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xbf800007; valaddr_reg:x3; val_offset:15156*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15156*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5053:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xbf999999; valaddr_reg:x3; val_offset:15159*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15159*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5054:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:15162*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15162*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5055:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:15165*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15165*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5056:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:15168*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15168*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5057:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:15171*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15171*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5058:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:15174*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15174*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5059:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:15177*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15177*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5060:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:15180*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15180*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5061:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:15183*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15183*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5062:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:15186*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15186*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5063:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:15189*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15189*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5064:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:15192*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15192*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5065:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3627de and fs2 == 1 and fe2 == 0x02 and fm2 == 0x33e3d8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db627de; op2val:0x8133e3d8;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:15195*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15195*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5066:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba000000; valaddr_reg:x3; val_offset:15198*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15198*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5067:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba000001; valaddr_reg:x3; val_offset:15201*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15201*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5068:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba000003; valaddr_reg:x3; val_offset:15204*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15204*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5069:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba000007; valaddr_reg:x3; val_offset:15207*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15207*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5070:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba00000f; valaddr_reg:x3; val_offset:15210*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15210*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5071:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba00001f; valaddr_reg:x3; val_offset:15213*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15213*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5072:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba00003f; valaddr_reg:x3; val_offset:15216*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15216*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5073:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba00007f; valaddr_reg:x3; val_offset:15219*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15219*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5074:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba0000ff; valaddr_reg:x3; val_offset:15222*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15222*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5075:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba0001ff; valaddr_reg:x3; val_offset:15225*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15225*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5076:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba0003ff; valaddr_reg:x3; val_offset:15228*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15228*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5077:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba0007ff; valaddr_reg:x3; val_offset:15231*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15231*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5078:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba000fff; valaddr_reg:x3; val_offset:15234*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15234*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5079:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba001fff; valaddr_reg:x3; val_offset:15237*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15237*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5080:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba003fff; valaddr_reg:x3; val_offset:15240*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15240*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5081:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba007fff; valaddr_reg:x3; val_offset:15243*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15243*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5082:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba00ffff; valaddr_reg:x3; val_offset:15246*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15246*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5083:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba01ffff; valaddr_reg:x3; val_offset:15249*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15249*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5084:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba03ffff; valaddr_reg:x3; val_offset:15252*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15252*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5085:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba07ffff; valaddr_reg:x3; val_offset:15255*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15255*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5086:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba0fffff; valaddr_reg:x3; val_offset:15258*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15258*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5087:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba1fffff; valaddr_reg:x3; val_offset:15261*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15261*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5088:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba3fffff; valaddr_reg:x3; val_offset:15264*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15264*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5089:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba400000; valaddr_reg:x3; val_offset:15267*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15267*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5090:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba600000; valaddr_reg:x3; val_offset:15270*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15270*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5091:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba700000; valaddr_reg:x3; val_offset:15273*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15273*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5092:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba780000; valaddr_reg:x3; val_offset:15276*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15276*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5093:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7c0000; valaddr_reg:x3; val_offset:15279*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15279*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5094:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7e0000; valaddr_reg:x3; val_offset:15282*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15282*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5095:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7f0000; valaddr_reg:x3; val_offset:15285*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15285*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5096:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7f8000; valaddr_reg:x3; val_offset:15288*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15288*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5097:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7fc000; valaddr_reg:x3; val_offset:15291*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15291*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5098:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7fe000; valaddr_reg:x3; val_offset:15294*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15294*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5099:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7ff000; valaddr_reg:x3; val_offset:15297*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15297*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5100:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7ff800; valaddr_reg:x3; val_offset:15300*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15300*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5101:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7ffc00; valaddr_reg:x3; val_offset:15303*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15303*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5102:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7ffe00; valaddr_reg:x3; val_offset:15306*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15306*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5103:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7fff00; valaddr_reg:x3; val_offset:15309*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15309*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5104:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7fff80; valaddr_reg:x3; val_offset:15312*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15312*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5105:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7fffc0; valaddr_reg:x3; val_offset:15315*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15315*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5106:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7fffe0; valaddr_reg:x3; val_offset:15318*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15318*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5107:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7ffff0; valaddr_reg:x3; val_offset:15321*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15321*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5108:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7ffff8; valaddr_reg:x3; val_offset:15324*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15324*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5109:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7ffffc; valaddr_reg:x3; val_offset:15327*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15327*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5110:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7ffffe; valaddr_reg:x3; val_offset:15330*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15330*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5111:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xba7fffff; valaddr_reg:x3; val_offset:15333*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15333*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5112:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xbf800001; valaddr_reg:x3; val_offset:15336*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15336*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5113:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xbf800003; valaddr_reg:x3; val_offset:15339*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15339*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5114:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xbf800007; valaddr_reg:x3; val_offset:15342*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15342*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5115:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xbf999999; valaddr_reg:x3; val_offset:15345*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15345*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5116:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:15348*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15348*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5117:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:15351*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15351*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5118:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:15354*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15354*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5119:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3cdd42 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2d800f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbcdd42; op2val:0x812d800f;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:15357*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15357*0 + 3*39*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2108881335,32,FLEN)
NAN_BOXED(1094129191,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2108881335,32,FLEN)
NAN_BOXED(1094129191,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2108881335,32,FLEN)
NAN_BOXED(1094129191,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2108881335,32,FLEN)
NAN_BOXED(1094129191,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2108881335,32,FLEN)
NAN_BOXED(1094129191,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2108881335,32,FLEN)
NAN_BOXED(1094129191,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2108881335,32,FLEN)
NAN_BOXED(1094129191,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2108881335,32,FLEN)
NAN_BOXED(1094129191,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2108881335,32,FLEN)
NAN_BOXED(1094129191,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2108881335,32,FLEN)
NAN_BOXED(1094129191,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2108881335,32,FLEN)
NAN_BOXED(1094129191,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2108881335,32,FLEN)
NAN_BOXED(1094129191,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2868903936,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2868903937,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2868903939,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2868903943,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2868903951,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2868903967,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2868903999,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2868904063,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2868904191,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2868904447,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2868904959,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2868905983,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2868908031,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2868912127,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2868920319,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2868936703,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2868969471,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2869035007,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2869166079,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2869428223,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2869952511,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2871001087,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2873098239,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2873098240,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2875195392,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2876243968,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2876768256,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877030400,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877161472,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877227008,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877259776,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877276160,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877284352,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877288448,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877290496,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877291520,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877292032,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877292288,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877292416,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877292480,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877292512,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877292528,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877292536,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877292540,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877292542,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(2877292543,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2109089758,32,FLEN)
NAN_BOXED(2167661528,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120562176,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120562177,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120562179,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120562183,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120562191,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120562207,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120562239,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120562303,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120562431,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120562687,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120563199,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120564223,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120566271,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120570367,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120578559,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120594943,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120627711,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120693247,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3120824319,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3121086463,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3121610751,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3122659327,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3124756479,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3124756480,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3126853632,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3127902208,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128426496,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128688640,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128819712,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128885248,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128918016,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128934400,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128942592,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128946688,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128948736,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128949760,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128950272,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128950528,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128950656,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128950720,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128950752,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128950768,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128950776,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128950780,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128950782,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3128950783,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2109529410,32,FLEN)
NAN_BOXED(2167242767,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
