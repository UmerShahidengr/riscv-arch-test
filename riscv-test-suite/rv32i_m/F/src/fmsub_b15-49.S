
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_6144:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:18432*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18432*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6145:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:18435*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18435*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6146:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:18438*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18438*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6147:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:18441*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18441*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6148:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:18444*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18444*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6149:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:18447*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18447*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6150:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:18450*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18450*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6151:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:18453*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18453*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6152:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:18456*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18456*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6153:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a800000; valaddr_reg:x3; val_offset:18459*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18459*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6154:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a800001; valaddr_reg:x3; val_offset:18462*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18462*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6155:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a800003; valaddr_reg:x3; val_offset:18465*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18465*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6156:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a800007; valaddr_reg:x3; val_offset:18468*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18468*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6157:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a80000f; valaddr_reg:x3; val_offset:18471*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18471*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6158:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a80001f; valaddr_reg:x3; val_offset:18474*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18474*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6159:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a80003f; valaddr_reg:x3; val_offset:18477*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18477*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6160:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a80007f; valaddr_reg:x3; val_offset:18480*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18480*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6161:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a8000ff; valaddr_reg:x3; val_offset:18483*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18483*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6162:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a8001ff; valaddr_reg:x3; val_offset:18486*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18486*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6163:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a8003ff; valaddr_reg:x3; val_offset:18489*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18489*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6164:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a8007ff; valaddr_reg:x3; val_offset:18492*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18492*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6165:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a800fff; valaddr_reg:x3; val_offset:18495*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18495*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6166:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a801fff; valaddr_reg:x3; val_offset:18498*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18498*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6167:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a803fff; valaddr_reg:x3; val_offset:18501*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18501*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6168:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a807fff; valaddr_reg:x3; val_offset:18504*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18504*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6169:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a80ffff; valaddr_reg:x3; val_offset:18507*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18507*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6170:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a81ffff; valaddr_reg:x3; val_offset:18510*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18510*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6171:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a83ffff; valaddr_reg:x3; val_offset:18513*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18513*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6172:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a87ffff; valaddr_reg:x3; val_offset:18516*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18516*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6173:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a8fffff; valaddr_reg:x3; val_offset:18519*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18519*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6174:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8a9fffff; valaddr_reg:x3; val_offset:18522*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18522*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6175:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8abfffff; valaddr_reg:x3; val_offset:18525*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18525*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6176:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8ac00000; valaddr_reg:x3; val_offset:18528*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18528*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6177:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8ae00000; valaddr_reg:x3; val_offset:18531*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18531*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6178:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8af00000; valaddr_reg:x3; val_offset:18534*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18534*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6179:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8af80000; valaddr_reg:x3; val_offset:18537*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18537*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6180:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8afc0000; valaddr_reg:x3; val_offset:18540*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18540*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6181:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8afe0000; valaddr_reg:x3; val_offset:18543*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18543*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6182:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8aff0000; valaddr_reg:x3; val_offset:18546*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18546*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6183:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8aff8000; valaddr_reg:x3; val_offset:18549*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18549*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6184:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8affc000; valaddr_reg:x3; val_offset:18552*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18552*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6185:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8affe000; valaddr_reg:x3; val_offset:18555*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18555*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6186:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8afff000; valaddr_reg:x3; val_offset:18558*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18558*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6187:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8afff800; valaddr_reg:x3; val_offset:18561*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18561*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6188:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8afffc00; valaddr_reg:x3; val_offset:18564*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18564*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6189:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8afffe00; valaddr_reg:x3; val_offset:18567*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18567*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6190:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8affff00; valaddr_reg:x3; val_offset:18570*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18570*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6191:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8affff80; valaddr_reg:x3; val_offset:18573*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18573*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6192:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8affffc0; valaddr_reg:x3; val_offset:18576*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18576*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6193:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8affffe0; valaddr_reg:x3; val_offset:18579*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18579*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6194:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8afffff0; valaddr_reg:x3; val_offset:18582*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18582*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6195:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8afffff8; valaddr_reg:x3; val_offset:18585*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18585*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6196:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8afffffc; valaddr_reg:x3; val_offset:18588*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18588*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6197:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8afffffe; valaddr_reg:x3; val_offset:18591*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18591*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6198:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5923f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd923f1; op2val:0x80000000;
op3val:0x8affffff; valaddr_reg:x3; val_offset:18594*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18594*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6199:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xbf800001; valaddr_reg:x3; val_offset:18597*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18597*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6200:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xbf800003; valaddr_reg:x3; val_offset:18600*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18600*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6201:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xbf800007; valaddr_reg:x3; val_offset:18603*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18603*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6202:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xbf999999; valaddr_reg:x3; val_offset:18606*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18606*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6203:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:18609*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18609*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6204:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:18612*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18612*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6205:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:18615*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18615*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6206:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:18618*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18618*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6207:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:18621*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18621*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6208:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:18624*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18624*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6209:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:18627*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18627*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6210:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:18630*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18630*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6211:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:18633*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18633*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6212:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:18636*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18636*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6213:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:18639*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18639*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6214:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:18642*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18642*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6215:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc0000000; valaddr_reg:x3; val_offset:18645*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18645*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6216:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc0000001; valaddr_reg:x3; val_offset:18648*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18648*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6217:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc0000003; valaddr_reg:x3; val_offset:18651*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18651*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6218:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc0000007; valaddr_reg:x3; val_offset:18654*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18654*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6219:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc000000f; valaddr_reg:x3; val_offset:18657*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18657*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6220:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc000001f; valaddr_reg:x3; val_offset:18660*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18660*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6221:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc000003f; valaddr_reg:x3; val_offset:18663*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18663*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6222:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc000007f; valaddr_reg:x3; val_offset:18666*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18666*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6223:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc00000ff; valaddr_reg:x3; val_offset:18669*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18669*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6224:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc00001ff; valaddr_reg:x3; val_offset:18672*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18672*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6225:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc00003ff; valaddr_reg:x3; val_offset:18675*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18675*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6226:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc00007ff; valaddr_reg:x3; val_offset:18678*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18678*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6227:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc0000fff; valaddr_reg:x3; val_offset:18681*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18681*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6228:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc0001fff; valaddr_reg:x3; val_offset:18684*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18684*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6229:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc0003fff; valaddr_reg:x3; val_offset:18687*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18687*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6230:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc0007fff; valaddr_reg:x3; val_offset:18690*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18690*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6231:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc000ffff; valaddr_reg:x3; val_offset:18693*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18693*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6232:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc001ffff; valaddr_reg:x3; val_offset:18696*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18696*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6233:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc003ffff; valaddr_reg:x3; val_offset:18699*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18699*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6234:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc007ffff; valaddr_reg:x3; val_offset:18702*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18702*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6235:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc00fffff; valaddr_reg:x3; val_offset:18705*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18705*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6236:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc01fffff; valaddr_reg:x3; val_offset:18708*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18708*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6237:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc03fffff; valaddr_reg:x3; val_offset:18711*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18711*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6238:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc0400000; valaddr_reg:x3; val_offset:18714*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18714*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6239:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc0600000; valaddr_reg:x3; val_offset:18717*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18717*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6240:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc0700000; valaddr_reg:x3; val_offset:18720*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18720*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6241:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc0780000; valaddr_reg:x3; val_offset:18723*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18723*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6242:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07c0000; valaddr_reg:x3; val_offset:18726*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18726*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6243:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07e0000; valaddr_reg:x3; val_offset:18729*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18729*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6244:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07f0000; valaddr_reg:x3; val_offset:18732*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18732*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6245:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07f8000; valaddr_reg:x3; val_offset:18735*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18735*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6246:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07fc000; valaddr_reg:x3; val_offset:18738*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18738*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6247:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07fe000; valaddr_reg:x3; val_offset:18741*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18741*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6248:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07ff000; valaddr_reg:x3; val_offset:18744*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18744*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6249:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07ff800; valaddr_reg:x3; val_offset:18747*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18747*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6250:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07ffc00; valaddr_reg:x3; val_offset:18750*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18750*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6251:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07ffe00; valaddr_reg:x3; val_offset:18753*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18753*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6252:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07fff00; valaddr_reg:x3; val_offset:18756*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18756*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6253:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07fff80; valaddr_reg:x3; val_offset:18759*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18759*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6254:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07fffc0; valaddr_reg:x3; val_offset:18762*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18762*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6255:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07fffe0; valaddr_reg:x3; val_offset:18765*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18765*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6256:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07ffff0; valaddr_reg:x3; val_offset:18768*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18768*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6257:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07ffff8; valaddr_reg:x3; val_offset:18771*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18771*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6258:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07ffffc; valaddr_reg:x3; val_offset:18774*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18774*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6259:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07ffffe; valaddr_reg:x3; val_offset:18777*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18777*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6260:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x594ae2 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x16cd23 and fs3 == 1 and fe3 == 0x80 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd94ae2; op2val:0x8116cd23;
op3val:0xc07fffff; valaddr_reg:x3; val_offset:18780*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18780*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6261:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5cc23e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x146efa and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddcc23e; op2val:0xc1146efa;
op3val:0xe2800000; valaddr_reg:x3; val_offset:18783*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18783*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6262:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5cc23e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x146efa and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddcc23e; op2val:0xc1146efa;
op3val:0xe2800001; valaddr_reg:x3; val_offset:18786*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18786*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6263:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5cc23e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x146efa and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddcc23e; op2val:0xc1146efa;
op3val:0xe2800003; valaddr_reg:x3; val_offset:18789*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18789*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6264:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5cc23e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x146efa and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddcc23e; op2val:0xc1146efa;
op3val:0xe2800007; valaddr_reg:x3; val_offset:18792*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18792*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6265:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5cc23e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x146efa and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddcc23e; op2val:0xc1146efa;
op3val:0xe280000f; valaddr_reg:x3; val_offset:18795*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18795*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6266:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5cc23e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x146efa and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddcc23e; op2val:0xc1146efa;
op3val:0xe280001f; valaddr_reg:x3; val_offset:18798*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18798*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6267:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5cc23e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x146efa and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddcc23e; op2val:0xc1146efa;
op3val:0xe280003f; valaddr_reg:x3; val_offset:18801*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18801*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6268:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5cc23e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x146efa and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddcc23e; op2val:0xc1146efa;
op3val:0xe280007f; valaddr_reg:x3; val_offset:18804*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18804*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6269:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5cc23e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x146efa and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddcc23e; op2val:0xc1146efa;
op3val:0xe28000ff; valaddr_reg:x3; val_offset:18807*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18807*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6270:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5cc23e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x146efa and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddcc23e; op2val:0xc1146efa;
op3val:0xe28001ff; valaddr_reg:x3; val_offset:18810*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18810*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6271:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5cc23e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x146efa and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddcc23e; op2val:0xc1146efa;
op3val:0xe28003ff; valaddr_reg:x3; val_offset:18813*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18813*0 + 3*48*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644416,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644417,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644419,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644423,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644431,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644447,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644479,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644543,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644671,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644927,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323645439,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323646463,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323648511,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323652607,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323660799,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323677183,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323709951,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323775487,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323906559,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2324168703,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2324692991,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2325741567,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2327838719,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2327838720,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2329935872,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2330984448,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331508736,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331770880,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331901952,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331967488,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332000256,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332016640,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332024832,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332028928,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332030976,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032000,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032512,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032768,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032896,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032960,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032992,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033008,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033016,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033020,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033022,32,FLEN)
NAN_BOXED(2111382513,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033023,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221225472,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221225473,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221225475,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221225479,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221225487,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221225503,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221225535,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221225599,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221225727,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221225983,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221226495,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221227519,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221229567,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221233663,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221241855,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221258239,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221291007,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221356543,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221487615,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3221749759,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3222274047,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3223322623,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3225419775,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3225419776,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3227516928,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3228565504,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229089792,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229351936,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229483008,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229548544,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229581312,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229597696,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229605888,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229609984,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229612032,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229613056,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229613568,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229613824,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229613952,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229614016,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229614048,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229614064,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229614072,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229614076,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229614078,32,FLEN)
NAN_BOXED(2111392482,32,FLEN)
NAN_BOXED(2165755171,32,FLEN)
NAN_BOXED(3229614079,32,FLEN)
NAN_BOXED(2111619646,32,FLEN)
NAN_BOXED(3239341818,32,FLEN)
NAN_BOXED(3800039424,32,FLEN)
NAN_BOXED(2111619646,32,FLEN)
NAN_BOXED(3239341818,32,FLEN)
NAN_BOXED(3800039425,32,FLEN)
NAN_BOXED(2111619646,32,FLEN)
NAN_BOXED(3239341818,32,FLEN)
NAN_BOXED(3800039427,32,FLEN)
NAN_BOXED(2111619646,32,FLEN)
NAN_BOXED(3239341818,32,FLEN)
NAN_BOXED(3800039431,32,FLEN)
NAN_BOXED(2111619646,32,FLEN)
NAN_BOXED(3239341818,32,FLEN)
NAN_BOXED(3800039439,32,FLEN)
NAN_BOXED(2111619646,32,FLEN)
NAN_BOXED(3239341818,32,FLEN)
NAN_BOXED(3800039455,32,FLEN)
NAN_BOXED(2111619646,32,FLEN)
NAN_BOXED(3239341818,32,FLEN)
NAN_BOXED(3800039487,32,FLEN)
NAN_BOXED(2111619646,32,FLEN)
NAN_BOXED(3239341818,32,FLEN)
NAN_BOXED(3800039551,32,FLEN)
NAN_BOXED(2111619646,32,FLEN)
NAN_BOXED(3239341818,32,FLEN)
NAN_BOXED(3800039679,32,FLEN)
NAN_BOXED(2111619646,32,FLEN)
NAN_BOXED(3239341818,32,FLEN)
NAN_BOXED(3800039935,32,FLEN)
NAN_BOXED(2111619646,32,FLEN)
NAN_BOXED(3239341818,32,FLEN)
NAN_BOXED(3800040447,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
