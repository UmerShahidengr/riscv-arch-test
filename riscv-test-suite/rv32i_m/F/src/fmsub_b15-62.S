
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_7808:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:23424*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23424*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7809:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x8000000f; valaddr_reg:x3; val_offset:23427*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23427*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7810:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x8000001f; valaddr_reg:x3; val_offset:23430*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23430*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7811:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x8000003f; valaddr_reg:x3; val_offset:23433*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23433*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7812:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x8000007f; valaddr_reg:x3; val_offset:23436*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23436*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7813:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x800000ff; valaddr_reg:x3; val_offset:23439*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23439*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7814:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x800001ff; valaddr_reg:x3; val_offset:23442*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23442*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7815:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x800003ff; valaddr_reg:x3; val_offset:23445*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23445*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7816:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x800007ff; valaddr_reg:x3; val_offset:23448*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23448*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7817:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x80000fff; valaddr_reg:x3; val_offset:23451*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23451*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7818:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x80001fff; valaddr_reg:x3; val_offset:23454*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23454*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7819:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x80003fff; valaddr_reg:x3; val_offset:23457*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23457*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7820:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x80007fff; valaddr_reg:x3; val_offset:23460*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23460*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7821:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x8000ffff; valaddr_reg:x3; val_offset:23463*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23463*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7822:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x8001ffff; valaddr_reg:x3; val_offset:23466*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23466*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7823:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x8003ffff; valaddr_reg:x3; val_offset:23469*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23469*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7824:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x8007ffff; valaddr_reg:x3; val_offset:23472*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23472*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7825:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x800fffff; valaddr_reg:x3; val_offset:23475*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23475*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7826:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:23478*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23478*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7827:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x801fffff; valaddr_reg:x3; val_offset:23481*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23481*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7828:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:23484*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23484*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7829:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:23487*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23487*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7830:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:23490*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23490*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7831:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:23493*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23493*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7832:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x803fffff; valaddr_reg:x3; val_offset:23496*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23496*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7833:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x80400000; valaddr_reg:x3; val_offset:23499*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23499*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7834:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:23502*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23502*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7835:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:23505*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23505*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7836:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:23508*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23508*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7837:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x80600000; valaddr_reg:x3; val_offset:23511*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23511*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7838:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:23514*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23514*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7839:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:23517*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23517*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7840:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x80700000; valaddr_reg:x3; val_offset:23520*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23520*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7841:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x80780000; valaddr_reg:x3; val_offset:23523*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23523*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7842:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807c0000; valaddr_reg:x3; val_offset:23526*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23526*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7843:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807e0000; valaddr_reg:x3; val_offset:23529*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23529*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7844:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807f0000; valaddr_reg:x3; val_offset:23532*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23532*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7845:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807f8000; valaddr_reg:x3; val_offset:23535*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23535*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7846:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807fc000; valaddr_reg:x3; val_offset:23538*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23538*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7847:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807fe000; valaddr_reg:x3; val_offset:23541*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23541*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7848:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807ff000; valaddr_reg:x3; val_offset:23544*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23544*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7849:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807ff800; valaddr_reg:x3; val_offset:23547*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23547*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7850:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807ffc00; valaddr_reg:x3; val_offset:23550*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23550*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7851:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807ffe00; valaddr_reg:x3; val_offset:23553*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23553*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7852:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807fff00; valaddr_reg:x3; val_offset:23556*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23556*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7853:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807fff80; valaddr_reg:x3; val_offset:23559*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23559*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7854:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807fffc0; valaddr_reg:x3; val_offset:23562*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23562*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7855:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807fffe0; valaddr_reg:x3; val_offset:23565*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23565*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7856:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807ffff0; valaddr_reg:x3; val_offset:23568*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23568*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7857:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:23571*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23571*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7858:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:23574*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23574*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7859:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:23577*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23577*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7860:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1049dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1049dc; op2val:0x80000000;
op3val:0x807fffff; valaddr_reg:x3; val_offset:23580*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23580*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7861:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf000000; valaddr_reg:x3; val_offset:23583*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23583*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7862:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf000001; valaddr_reg:x3; val_offset:23586*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23586*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7863:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf000003; valaddr_reg:x3; val_offset:23589*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23589*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7864:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf000007; valaddr_reg:x3; val_offset:23592*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23592*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7865:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf00000f; valaddr_reg:x3; val_offset:23595*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23595*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7866:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf00001f; valaddr_reg:x3; val_offset:23598*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23598*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7867:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf00003f; valaddr_reg:x3; val_offset:23601*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23601*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7868:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf00007f; valaddr_reg:x3; val_offset:23604*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23604*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7869:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf0000ff; valaddr_reg:x3; val_offset:23607*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23607*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7870:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf0001ff; valaddr_reg:x3; val_offset:23610*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23610*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7871:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf0003ff; valaddr_reg:x3; val_offset:23613*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23613*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7872:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf0007ff; valaddr_reg:x3; val_offset:23616*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23616*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7873:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf000fff; valaddr_reg:x3; val_offset:23619*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23619*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7874:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf001fff; valaddr_reg:x3; val_offset:23622*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23622*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7875:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf003fff; valaddr_reg:x3; val_offset:23625*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23625*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7876:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf007fff; valaddr_reg:x3; val_offset:23628*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23628*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7877:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf00ffff; valaddr_reg:x3; val_offset:23631*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23631*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7878:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf01ffff; valaddr_reg:x3; val_offset:23634*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23634*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7879:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf03ffff; valaddr_reg:x3; val_offset:23637*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23637*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7880:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf07ffff; valaddr_reg:x3; val_offset:23640*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23640*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7881:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf0fffff; valaddr_reg:x3; val_offset:23643*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23643*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7882:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf1fffff; valaddr_reg:x3; val_offset:23646*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23646*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7883:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf3fffff; valaddr_reg:x3; val_offset:23649*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23649*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7884:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf400000; valaddr_reg:x3; val_offset:23652*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23652*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7885:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf600000; valaddr_reg:x3; val_offset:23655*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23655*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7886:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf700000; valaddr_reg:x3; val_offset:23658*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23658*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7887:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf780000; valaddr_reg:x3; val_offset:23661*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23661*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7888:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7c0000; valaddr_reg:x3; val_offset:23664*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23664*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7889:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7e0000; valaddr_reg:x3; val_offset:23667*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23667*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7890:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7f0000; valaddr_reg:x3; val_offset:23670*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23670*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7891:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7f8000; valaddr_reg:x3; val_offset:23673*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23673*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7892:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7fc000; valaddr_reg:x3; val_offset:23676*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23676*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7893:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7fe000; valaddr_reg:x3; val_offset:23679*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23679*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7894:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7ff000; valaddr_reg:x3; val_offset:23682*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23682*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7895:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7ff800; valaddr_reg:x3; val_offset:23685*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23685*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7896:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7ffc00; valaddr_reg:x3; val_offset:23688*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23688*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7897:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7ffe00; valaddr_reg:x3; val_offset:23691*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23691*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7898:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7fff00; valaddr_reg:x3; val_offset:23694*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23694*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7899:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7fff80; valaddr_reg:x3; val_offset:23697*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23697*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7900:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7fffc0; valaddr_reg:x3; val_offset:23700*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23700*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7901:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7fffe0; valaddr_reg:x3; val_offset:23703*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23703*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7902:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7ffff0; valaddr_reg:x3; val_offset:23706*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23706*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7903:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7ffff8; valaddr_reg:x3; val_offset:23709*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23709*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7904:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7ffffc; valaddr_reg:x3; val_offset:23712*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23712*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7905:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7ffffe; valaddr_reg:x3; val_offset:23715*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23715*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7906:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xaf7fffff; valaddr_reg:x3; val_offset:23718*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23718*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7907:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xbf800001; valaddr_reg:x3; val_offset:23721*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23721*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7908:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xbf800003; valaddr_reg:x3; val_offset:23724*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23724*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7909:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xbf800007; valaddr_reg:x3; val_offset:23727*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23727*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7910:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xbf999999; valaddr_reg:x3; val_offset:23730*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23730*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7911:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:23733*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23733*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7912:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:23736*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23736*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7913:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:23739*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23739*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7914:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:23742*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23742*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7915:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:23745*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23745*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7916:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:23748*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23748*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7917:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:23751*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23751*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7918:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:23754*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23754*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7919:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:23757*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23757*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7920:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:23760*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23760*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7921:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:23763*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23763*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7922:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x185d53 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x57102a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e185d53; op2val:0x80d7102a;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:23766*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23766*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7923:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76800000; valaddr_reg:x3; val_offset:23769*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23769*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7924:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76800001; valaddr_reg:x3; val_offset:23772*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23772*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7925:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76800003; valaddr_reg:x3; val_offset:23775*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23775*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7926:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76800007; valaddr_reg:x3; val_offset:23778*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23778*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7927:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7680000f; valaddr_reg:x3; val_offset:23781*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23781*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7928:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7680001f; valaddr_reg:x3; val_offset:23784*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23784*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7929:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7680003f; valaddr_reg:x3; val_offset:23787*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23787*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7930:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7680007f; valaddr_reg:x3; val_offset:23790*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23790*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7931:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x768000ff; valaddr_reg:x3; val_offset:23793*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23793*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7932:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x768001ff; valaddr_reg:x3; val_offset:23796*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23796*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7933:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x768003ff; valaddr_reg:x3; val_offset:23799*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23799*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7934:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x768007ff; valaddr_reg:x3; val_offset:23802*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23802*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7935:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76800fff; valaddr_reg:x3; val_offset:23805*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23805*0 + 3*61*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483663,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483679,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483711,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483775,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483903,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484159,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484671,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147485695,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147487743,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147491839,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147500031,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147516415,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147549183,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147614719,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147745791,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148007935,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148532223,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149580799,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677951,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677952,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153775104,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154823680,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155347968,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155610112,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155741184,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155806720,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155839488,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155855872,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155864064,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155868160,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155870208,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871232,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871744,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872000,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872128,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872192,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872224,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872240,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2114996700,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936012800,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936012801,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936012803,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936012807,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936012815,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936012831,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936012863,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936012927,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936013055,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936013311,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936013823,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936014847,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936016895,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936020991,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936029183,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936045567,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936078335,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936143871,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936274943,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2936537087,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2937061375,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2938109951,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2940207103,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2940207104,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2942304256,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2943352832,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2943877120,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944139264,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944270336,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944335872,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944368640,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944385024,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944393216,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944397312,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944399360,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944400384,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944400896,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944401152,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944401280,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944401344,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944401376,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944401392,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944401400,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944401404,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944401406,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(2944401407,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2115525971,32,FLEN)
NAN_BOXED(2161578026,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988100096,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988100097,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988100099,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988100103,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988100111,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988100127,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988100159,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988100223,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988100351,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988100607,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988101119,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988102143,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988104191,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
