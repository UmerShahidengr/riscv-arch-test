
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_7936:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76801fff; valaddr_reg:x3; val_offset:23808*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23808*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7937:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76803fff; valaddr_reg:x3; val_offset:23811*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23811*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7938:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76807fff; valaddr_reg:x3; val_offset:23814*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23814*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7939:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7680ffff; valaddr_reg:x3; val_offset:23817*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23817*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7940:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7681ffff; valaddr_reg:x3; val_offset:23820*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23820*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7941:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7683ffff; valaddr_reg:x3; val_offset:23823*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23823*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7942:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7687ffff; valaddr_reg:x3; val_offset:23826*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23826*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7943:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x768fffff; valaddr_reg:x3; val_offset:23829*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23829*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7944:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x769fffff; valaddr_reg:x3; val_offset:23832*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23832*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7945:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76bfffff; valaddr_reg:x3; val_offset:23835*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23835*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7946:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76c00000; valaddr_reg:x3; val_offset:23838*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23838*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7947:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76e00000; valaddr_reg:x3; val_offset:23841*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23841*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7948:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76f00000; valaddr_reg:x3; val_offset:23844*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23844*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7949:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76f80000; valaddr_reg:x3; val_offset:23847*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23847*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7950:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76fc0000; valaddr_reg:x3; val_offset:23850*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23850*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7951:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76fe0000; valaddr_reg:x3; val_offset:23853*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23853*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7952:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76ff0000; valaddr_reg:x3; val_offset:23856*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23856*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7953:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76ff8000; valaddr_reg:x3; val_offset:23859*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23859*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7954:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76ffc000; valaddr_reg:x3; val_offset:23862*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23862*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7955:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76ffe000; valaddr_reg:x3; val_offset:23865*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23865*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7956:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76fff000; valaddr_reg:x3; val_offset:23868*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23868*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7957:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76fff800; valaddr_reg:x3; val_offset:23871*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23871*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7958:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76fffc00; valaddr_reg:x3; val_offset:23874*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23874*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7959:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76fffe00; valaddr_reg:x3; val_offset:23877*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23877*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7960:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76ffff00; valaddr_reg:x3; val_offset:23880*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23880*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7961:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76ffff80; valaddr_reg:x3; val_offset:23883*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23883*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7962:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76ffffc0; valaddr_reg:x3; val_offset:23886*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23886*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7963:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76ffffe0; valaddr_reg:x3; val_offset:23889*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23889*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7964:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76fffff0; valaddr_reg:x3; val_offset:23892*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23892*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7965:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76fffff8; valaddr_reg:x3; val_offset:23895*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23895*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7966:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76fffffc; valaddr_reg:x3; val_offset:23898*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23898*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7967:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76fffffe; valaddr_reg:x3; val_offset:23901*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23901*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7968:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x76ffffff; valaddr_reg:x3; val_offset:23904*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23904*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7969:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7f000001; valaddr_reg:x3; val_offset:23907*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23907*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7970:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7f000003; valaddr_reg:x3; val_offset:23910*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23910*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7971:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7f000007; valaddr_reg:x3; val_offset:23913*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23913*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7972:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7f199999; valaddr_reg:x3; val_offset:23916*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23916*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7973:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7f249249; valaddr_reg:x3; val_offset:23919*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23919*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7974:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7f333333; valaddr_reg:x3; val_offset:23922*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23922*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7975:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:23925*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23925*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7976:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:23928*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23928*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7977:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7f444444; valaddr_reg:x3; val_offset:23931*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23931*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7978:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:23934*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23934*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7979:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:23937*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23937*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7980:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7f666666; valaddr_reg:x3; val_offset:23940*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23940*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7981:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:23943*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23943*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7982:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:23946*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23946*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7983:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:23949*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23949*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7984:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x55c0d8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e194c56; op2val:0x40d5c0d8;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:23952*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23952*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7985:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1800000; valaddr_reg:x3; val_offset:23955*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23955*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7986:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1800001; valaddr_reg:x3; val_offset:23958*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23958*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7987:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1800003; valaddr_reg:x3; val_offset:23961*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23961*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7988:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1800007; valaddr_reg:x3; val_offset:23964*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23964*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7989:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe180000f; valaddr_reg:x3; val_offset:23967*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23967*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7990:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe180001f; valaddr_reg:x3; val_offset:23970*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23970*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7991:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe180003f; valaddr_reg:x3; val_offset:23973*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23973*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7992:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe180007f; valaddr_reg:x3; val_offset:23976*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23976*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7993:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe18000ff; valaddr_reg:x3; val_offset:23979*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23979*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7994:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe18001ff; valaddr_reg:x3; val_offset:23982*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23982*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7995:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe18003ff; valaddr_reg:x3; val_offset:23985*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23985*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7996:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe18007ff; valaddr_reg:x3; val_offset:23988*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23988*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7997:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1800fff; valaddr_reg:x3; val_offset:23991*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23991*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7998:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1801fff; valaddr_reg:x3; val_offset:23994*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23994*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7999:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1803fff; valaddr_reg:x3; val_offset:23997*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23997*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8000:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1807fff; valaddr_reg:x3; val_offset:24000*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24000*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8001:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe180ffff; valaddr_reg:x3; val_offset:24003*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24003*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8002:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe181ffff; valaddr_reg:x3; val_offset:24006*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24006*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8003:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe183ffff; valaddr_reg:x3; val_offset:24009*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24009*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8004:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe187ffff; valaddr_reg:x3; val_offset:24012*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24012*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8005:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe18fffff; valaddr_reg:x3; val_offset:24015*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24015*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8006:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe19fffff; valaddr_reg:x3; val_offset:24018*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24018*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8007:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1bfffff; valaddr_reg:x3; val_offset:24021*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24021*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8008:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1c00000; valaddr_reg:x3; val_offset:24024*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24024*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8009:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1e00000; valaddr_reg:x3; val_offset:24027*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24027*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8010:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1f00000; valaddr_reg:x3; val_offset:24030*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24030*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8011:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1f80000; valaddr_reg:x3; val_offset:24033*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24033*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8012:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1fc0000; valaddr_reg:x3; val_offset:24036*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24036*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8013:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1fe0000; valaddr_reg:x3; val_offset:24039*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24039*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1ff0000; valaddr_reg:x3; val_offset:24042*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24042*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8015:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1ff8000; valaddr_reg:x3; val_offset:24045*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24045*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8016:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1ffc000; valaddr_reg:x3; val_offset:24048*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24048*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8017:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1ffe000; valaddr_reg:x3; val_offset:24051*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24051*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8018:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1fff000; valaddr_reg:x3; val_offset:24054*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24054*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8019:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1fff800; valaddr_reg:x3; val_offset:24057*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24057*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8020:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1fffc00; valaddr_reg:x3; val_offset:24060*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24060*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8021:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1fffe00; valaddr_reg:x3; val_offset:24063*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24063*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8022:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1ffff00; valaddr_reg:x3; val_offset:24066*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24066*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8023:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1ffff80; valaddr_reg:x3; val_offset:24069*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24069*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8024:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1ffffc0; valaddr_reg:x3; val_offset:24072*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24072*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8025:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1ffffe0; valaddr_reg:x3; val_offset:24075*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24075*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8026:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1fffff0; valaddr_reg:x3; val_offset:24078*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24078*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8027:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1fffff8; valaddr_reg:x3; val_offset:24081*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24081*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8028:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1fffffc; valaddr_reg:x3; val_offset:24084*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24084*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8029:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1fffffe; valaddr_reg:x3; val_offset:24087*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24087*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xe1ffffff; valaddr_reg:x3; val_offset:24090*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24090*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xff000001; valaddr_reg:x3; val_offset:24093*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24093*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xff000003; valaddr_reg:x3; val_offset:24096*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24096*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xff000007; valaddr_reg:x3; val_offset:24099*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24099*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xff199999; valaddr_reg:x3; val_offset:24102*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24102*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8035:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xff249249; valaddr_reg:x3; val_offset:24105*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24105*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8036:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xff333333; valaddr_reg:x3; val_offset:24108*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24108*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8037:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:24111*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24111*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8038:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:24114*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24114*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8039:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xff444444; valaddr_reg:x3; val_offset:24117*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24117*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8040:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:24120*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24120*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8041:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:24123*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24123*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8042:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xff666666; valaddr_reg:x3; val_offset:24126*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24126*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8043:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:24129*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24129*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8044:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:24132*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24132*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8045:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:24135*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24135*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8046:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b0da2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x535574 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b0da2; op2val:0xc0d35574;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:24138*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24138*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8047:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b3c3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b3c3e; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:24141*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24141*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8048:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b3c3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b3c3e; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:24144*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24144*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8049:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b3c3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b3c3e; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:24147*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24147*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8050:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b3c3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b3c3e; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:24150*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24150*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8051:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b3c3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b3c3e; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:24153*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24153*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8052:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b3c3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b3c3e; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:24156*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24156*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8053:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b3c3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b3c3e; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:24159*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24159*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8054:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b3c3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b3c3e; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:24162*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24162*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8055:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b3c3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b3c3e; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:24165*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24165*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8056:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b3c3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b3c3e; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:24168*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24168*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8057:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b3c3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b3c3e; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:24171*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24171*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8058:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b3c3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b3c3e; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:24174*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24174*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8059:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b3c3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b3c3e; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:24177*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24177*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8060:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b3c3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b3c3e; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:24180*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24180*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8061:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b3c3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b3c3e; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:24183*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24183*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8062:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b3c3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b3c3e; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:24186*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24186*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8063:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b3c3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1b3c3e; op2val:0x80000000;
op3val:0x88000000; valaddr_reg:x3; val_offset:24189*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24189*0 + 3*62*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988108287,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988116479,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988132863,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988165631,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988231167,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988362239,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1988624383,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1989148671,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1990197247,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1992294399,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1992294400,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1994391552,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1995440128,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1995964416,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996226560,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996357632,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996423168,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996455936,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996472320,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996480512,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996484608,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996486656,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996487680,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996488192,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996488448,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996488576,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996488640,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996488672,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996488688,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996488696,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996488700,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996488702,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(1996488703,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2115587158,32,FLEN)
NAN_BOXED(1087750360,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783262208,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783262209,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783262211,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783262215,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783262223,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783262239,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783262271,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783262335,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783262463,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783262719,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783263231,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783264255,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783266303,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783270399,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783278591,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783294975,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783327743,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783393279,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783524351,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3783786495,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3784310783,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3785359359,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3787456511,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3787456512,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3789553664,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3790602240,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791126528,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791388672,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791519744,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791585280,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791618048,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791634432,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791642624,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791646720,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791648768,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791649792,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791650304,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791650560,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791650688,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791650752,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791650784,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791650800,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791650808,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791650812,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791650814,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(3791650815,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2115702178,32,FLEN)
NAN_BOXED(3235075444,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2115714110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2115714110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2115714110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2115714110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2115714110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2115714110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2115714110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2115714110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2115714110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2115714110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2115714110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2115714110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2115714110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2115714110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2115714110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2115714110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2115714110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701376,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
