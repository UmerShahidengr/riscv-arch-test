
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_8192:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa49fffff; valaddr_reg:x3; val_offset:24576*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24576*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8193:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4bfffff; valaddr_reg:x3; val_offset:24579*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24579*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8194:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4c00000; valaddr_reg:x3; val_offset:24582*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24582*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8195:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4e00000; valaddr_reg:x3; val_offset:24585*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24585*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8196:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4f00000; valaddr_reg:x3; val_offset:24588*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24588*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8197:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4f80000; valaddr_reg:x3; val_offset:24591*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24591*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8198:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4fc0000; valaddr_reg:x3; val_offset:24594*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24594*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8199:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4fe0000; valaddr_reg:x3; val_offset:24597*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24597*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8200:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4ff0000; valaddr_reg:x3; val_offset:24600*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24600*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8201:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4ff8000; valaddr_reg:x3; val_offset:24603*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24603*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8202:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4ffc000; valaddr_reg:x3; val_offset:24606*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24606*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8203:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4ffe000; valaddr_reg:x3; val_offset:24609*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24609*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8204:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4fff000; valaddr_reg:x3; val_offset:24612*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24612*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8205:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4fff800; valaddr_reg:x3; val_offset:24615*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24615*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8206:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4fffc00; valaddr_reg:x3; val_offset:24618*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24618*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4fffe00; valaddr_reg:x3; val_offset:24621*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24621*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8208:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4ffff00; valaddr_reg:x3; val_offset:24624*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24624*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8209:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4ffff80; valaddr_reg:x3; val_offset:24627*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24627*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8210:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4ffffc0; valaddr_reg:x3; val_offset:24630*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24630*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8211:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4ffffe0; valaddr_reg:x3; val_offset:24633*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24633*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8212:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4fffff0; valaddr_reg:x3; val_offset:24636*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24636*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4fffff8; valaddr_reg:x3; val_offset:24639*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24639*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8214:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4fffffc; valaddr_reg:x3; val_offset:24642*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24642*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8215:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4fffffe; valaddr_reg:x3; val_offset:24645*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24645*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8216:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xa4ffffff; valaddr_reg:x3; val_offset:24648*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24648*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8217:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xbf800001; valaddr_reg:x3; val_offset:24651*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24651*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8218:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xbf800003; valaddr_reg:x3; val_offset:24654*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24654*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8219:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xbf800007; valaddr_reg:x3; val_offset:24657*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24657*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8220:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xbf999999; valaddr_reg:x3; val_offset:24660*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24660*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8221:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:24663*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24663*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8222:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:24666*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24666*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8223:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:24669*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24669*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8224:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:24672*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24672*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8225:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:24675*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24675*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8226:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:24678*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24678*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8227:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:24681*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24681*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8228:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:24684*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24684*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8229:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:24687*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24687*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8230:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:24690*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24690*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8231:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:24693*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24693*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8232:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21634e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4b09eb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21634e; op2val:0x80cb09eb;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:24696*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24696*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8233:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c000000; valaddr_reg:x3; val_offset:24699*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24699*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8234:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c000001; valaddr_reg:x3; val_offset:24702*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24702*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8235:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c000003; valaddr_reg:x3; val_offset:24705*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24705*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8236:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c000007; valaddr_reg:x3; val_offset:24708*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24708*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8237:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c00000f; valaddr_reg:x3; val_offset:24711*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24711*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8238:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c00001f; valaddr_reg:x3; val_offset:24714*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24714*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8239:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c00003f; valaddr_reg:x3; val_offset:24717*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24717*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8240:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c00007f; valaddr_reg:x3; val_offset:24720*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24720*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8241:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c0000ff; valaddr_reg:x3; val_offset:24723*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24723*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8242:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c0001ff; valaddr_reg:x3; val_offset:24726*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24726*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8243:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c0003ff; valaddr_reg:x3; val_offset:24729*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24729*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8244:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c0007ff; valaddr_reg:x3; val_offset:24732*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24732*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8245:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c000fff; valaddr_reg:x3; val_offset:24735*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24735*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8246:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c001fff; valaddr_reg:x3; val_offset:24738*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24738*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8247:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c003fff; valaddr_reg:x3; val_offset:24741*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24741*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8248:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c007fff; valaddr_reg:x3; val_offset:24744*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24744*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8249:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c00ffff; valaddr_reg:x3; val_offset:24747*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24747*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8250:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c01ffff; valaddr_reg:x3; val_offset:24750*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24750*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8251:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c03ffff; valaddr_reg:x3; val_offset:24753*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24753*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8252:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c07ffff; valaddr_reg:x3; val_offset:24756*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24756*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8253:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c0fffff; valaddr_reg:x3; val_offset:24759*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24759*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8254:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c1fffff; valaddr_reg:x3; val_offset:24762*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24762*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8255:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c3fffff; valaddr_reg:x3; val_offset:24765*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24765*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8256:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c400000; valaddr_reg:x3; val_offset:24768*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24768*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8257:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c600000; valaddr_reg:x3; val_offset:24771*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24771*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8258:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c700000; valaddr_reg:x3; val_offset:24774*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24774*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8259:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c780000; valaddr_reg:x3; val_offset:24777*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24777*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8260:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7c0000; valaddr_reg:x3; val_offset:24780*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24780*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8261:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7e0000; valaddr_reg:x3; val_offset:24783*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24783*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8262:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7f0000; valaddr_reg:x3; val_offset:24786*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24786*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8263:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7f8000; valaddr_reg:x3; val_offset:24789*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24789*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8264:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7fc000; valaddr_reg:x3; val_offset:24792*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24792*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8265:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7fe000; valaddr_reg:x3; val_offset:24795*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24795*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8266:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7ff000; valaddr_reg:x3; val_offset:24798*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24798*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8267:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7ff800; valaddr_reg:x3; val_offset:24801*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24801*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8268:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7ffc00; valaddr_reg:x3; val_offset:24804*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24804*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8269:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7ffe00; valaddr_reg:x3; val_offset:24807*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24807*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8270:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7fff00; valaddr_reg:x3; val_offset:24810*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24810*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8271:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7fff80; valaddr_reg:x3; val_offset:24813*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24813*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8272:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7fffc0; valaddr_reg:x3; val_offset:24816*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24816*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8273:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7fffe0; valaddr_reg:x3; val_offset:24819*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24819*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8274:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7ffff0; valaddr_reg:x3; val_offset:24822*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24822*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8275:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7ffff8; valaddr_reg:x3; val_offset:24825*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24825*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8276:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7ffffc; valaddr_reg:x3; val_offset:24828*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24828*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8277:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7ffffe; valaddr_reg:x3; val_offset:24831*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24831*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8278:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7c7fffff; valaddr_reg:x3; val_offset:24834*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24834*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8279:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7f000001; valaddr_reg:x3; val_offset:24837*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24837*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8280:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7f000003; valaddr_reg:x3; val_offset:24840*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24840*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8281:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7f000007; valaddr_reg:x3; val_offset:24843*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24843*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8282:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7f199999; valaddr_reg:x3; val_offset:24846*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24846*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8283:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7f249249; valaddr_reg:x3; val_offset:24849*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24849*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8284:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7f333333; valaddr_reg:x3; val_offset:24852*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24852*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8285:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:24855*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24855*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8286:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:24858*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24858*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8287:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7f444444; valaddr_reg:x3; val_offset:24861*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24861*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8288:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:24864*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24864*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8289:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:24867*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24867*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8290:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7f666666; valaddr_reg:x3; val_offset:24870*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24870*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8291:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:24873*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24873*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8292:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:24876*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24876*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8293:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:24879*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24879*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8294:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22a6cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x497619 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22a6cc; op2val:0x40c97619;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:24882*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24882*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8295:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc000000; valaddr_reg:x3; val_offset:24885*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24885*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8296:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc000001; valaddr_reg:x3; val_offset:24888*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24888*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8297:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc000003; valaddr_reg:x3; val_offset:24891*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24891*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8298:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc000007; valaddr_reg:x3; val_offset:24894*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24894*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8299:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc00000f; valaddr_reg:x3; val_offset:24897*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24897*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8300:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc00001f; valaddr_reg:x3; val_offset:24900*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24900*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8301:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc00003f; valaddr_reg:x3; val_offset:24903*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24903*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8302:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc00007f; valaddr_reg:x3; val_offset:24906*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24906*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8303:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc0000ff; valaddr_reg:x3; val_offset:24909*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24909*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8304:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc0001ff; valaddr_reg:x3; val_offset:24912*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24912*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8305:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc0003ff; valaddr_reg:x3; val_offset:24915*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24915*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8306:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc0007ff; valaddr_reg:x3; val_offset:24918*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24918*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8307:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc000fff; valaddr_reg:x3; val_offset:24921*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24921*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8308:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc001fff; valaddr_reg:x3; val_offset:24924*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24924*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8309:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc003fff; valaddr_reg:x3; val_offset:24927*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24927*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8310:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc007fff; valaddr_reg:x3; val_offset:24930*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24930*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8311:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc00ffff; valaddr_reg:x3; val_offset:24933*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24933*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8312:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc01ffff; valaddr_reg:x3; val_offset:24936*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24936*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8313:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc03ffff; valaddr_reg:x3; val_offset:24939*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24939*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8314:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc07ffff; valaddr_reg:x3; val_offset:24942*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24942*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8315:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc0fffff; valaddr_reg:x3; val_offset:24945*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24945*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8316:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc1fffff; valaddr_reg:x3; val_offset:24948*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24948*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8317:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc3fffff; valaddr_reg:x3; val_offset:24951*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24951*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8318:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc400000; valaddr_reg:x3; val_offset:24954*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24954*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8319:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc600000; valaddr_reg:x3; val_offset:24957*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24957*0 + 3*64*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2761949183,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2764046335,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2764046336,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2766143488,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2767192064,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2767716352,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2767978496,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768109568,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768175104,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768207872,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768224256,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768232448,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768236544,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768238592,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768239616,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768240128,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768240384,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768240512,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768240576,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768240608,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768240624,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768240632,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768240636,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768240638,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(2768240639,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2116117326,32,FLEN)
NAN_BOXED(2160789995,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080374784,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080374785,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080374787,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080374791,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080374799,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080374815,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080374847,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080374911,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080375039,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080375295,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080375807,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080376831,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080378879,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080382975,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080391167,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080407551,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080440319,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080505855,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080636927,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2080899071,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2081423359,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2082471935,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2084569087,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2084569088,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2086666240,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2087714816,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088239104,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088501248,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088632320,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088697856,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088730624,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088747008,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088755200,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088759296,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088761344,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088762368,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088762880,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088763136,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088763264,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088763328,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088763360,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088763376,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088763384,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088763388,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088763390,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2088763391,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2116200140,32,FLEN)
NAN_BOXED(1086944793,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154116608,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154116609,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154116611,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154116615,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154116623,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154116639,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154116671,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154116735,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154116863,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154117119,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154117631,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154118655,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154120703,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154124799,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154132991,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154149375,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154182143,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154247679,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154378751,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3154640895,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3155165183,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3156213759,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3158310911,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3158310912,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3160408064,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
