
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_8320:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc700000; valaddr_reg:x3; val_offset:24960*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24960*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8321:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc780000; valaddr_reg:x3; val_offset:24963*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24963*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8322:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7c0000; valaddr_reg:x3; val_offset:24966*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24966*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8323:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7e0000; valaddr_reg:x3; val_offset:24969*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24969*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8324:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7f0000; valaddr_reg:x3; val_offset:24972*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24972*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8325:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7f8000; valaddr_reg:x3; val_offset:24975*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24975*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8326:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7fc000; valaddr_reg:x3; val_offset:24978*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24978*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8327:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7fe000; valaddr_reg:x3; val_offset:24981*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24981*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8328:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7ff000; valaddr_reg:x3; val_offset:24984*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24984*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8329:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7ff800; valaddr_reg:x3; val_offset:24987*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24987*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8330:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7ffc00; valaddr_reg:x3; val_offset:24990*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24990*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8331:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7ffe00; valaddr_reg:x3; val_offset:24993*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24993*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8332:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7fff00; valaddr_reg:x3; val_offset:24996*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24996*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8333:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7fff80; valaddr_reg:x3; val_offset:24999*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24999*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8334:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7fffc0; valaddr_reg:x3; val_offset:25002*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25002*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8335:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7fffe0; valaddr_reg:x3; val_offset:25005*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25005*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8336:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7ffff0; valaddr_reg:x3; val_offset:25008*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25008*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8337:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7ffff8; valaddr_reg:x3; val_offset:25011*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25011*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8338:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7ffffc; valaddr_reg:x3; val_offset:25014*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25014*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8339:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7ffffe; valaddr_reg:x3; val_offset:25017*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25017*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8340:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbc7fffff; valaddr_reg:x3; val_offset:25020*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25020*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8341:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbf800001; valaddr_reg:x3; val_offset:25023*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25023*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8342:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbf800003; valaddr_reg:x3; val_offset:25026*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25026*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8343:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbf800007; valaddr_reg:x3; val_offset:25029*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25029*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8344:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbf999999; valaddr_reg:x3; val_offset:25032*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25032*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8345:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:25035*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25035*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8346:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:25038*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25038*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8347:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:25041*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25041*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8348:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:25044*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25044*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8349:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:25047*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25047*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8350:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:25050*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25050*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8351:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:25053*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25053*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8352:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:25056*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25056*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8353:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:25059*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25059*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8354:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:25062*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25062*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8355:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:25065*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25065*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8356:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d2d6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x493f9c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d2d6; op2val:0x80c93f9c;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:25068*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25068*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8357:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea800000; valaddr_reg:x3; val_offset:25071*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25071*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8358:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea800001; valaddr_reg:x3; val_offset:25074*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25074*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8359:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea800003; valaddr_reg:x3; val_offset:25077*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25077*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8360:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea800007; valaddr_reg:x3; val_offset:25080*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25080*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8361:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea80000f; valaddr_reg:x3; val_offset:25083*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25083*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8362:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea80001f; valaddr_reg:x3; val_offset:25086*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25086*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8363:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea80003f; valaddr_reg:x3; val_offset:25089*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25089*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8364:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea80007f; valaddr_reg:x3; val_offset:25092*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25092*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8365:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea8000ff; valaddr_reg:x3; val_offset:25095*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25095*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8366:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea8001ff; valaddr_reg:x3; val_offset:25098*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25098*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8367:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea8003ff; valaddr_reg:x3; val_offset:25101*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25101*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8368:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea8007ff; valaddr_reg:x3; val_offset:25104*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25104*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8369:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea800fff; valaddr_reg:x3; val_offset:25107*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25107*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8370:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea801fff; valaddr_reg:x3; val_offset:25110*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25110*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8371:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea803fff; valaddr_reg:x3; val_offset:25113*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25113*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8372:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea807fff; valaddr_reg:x3; val_offset:25116*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25116*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8373:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea80ffff; valaddr_reg:x3; val_offset:25119*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25119*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8374:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea81ffff; valaddr_reg:x3; val_offset:25122*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25122*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8375:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea83ffff; valaddr_reg:x3; val_offset:25125*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25125*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8376:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea87ffff; valaddr_reg:x3; val_offset:25128*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25128*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8377:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea8fffff; valaddr_reg:x3; val_offset:25131*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25131*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8378:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xea9fffff; valaddr_reg:x3; val_offset:25134*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25134*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8379:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeabfffff; valaddr_reg:x3; val_offset:25137*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25137*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8380:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeac00000; valaddr_reg:x3; val_offset:25140*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25140*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8381:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeae00000; valaddr_reg:x3; val_offset:25143*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25143*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8382:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeaf00000; valaddr_reg:x3; val_offset:25146*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25146*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8383:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeaf80000; valaddr_reg:x3; val_offset:25149*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25149*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8384:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeafc0000; valaddr_reg:x3; val_offset:25152*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25152*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8385:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeafe0000; valaddr_reg:x3; val_offset:25155*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25155*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8386:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeaff0000; valaddr_reg:x3; val_offset:25158*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25158*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8387:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeaff8000; valaddr_reg:x3; val_offset:25161*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25161*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8388:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeaffc000; valaddr_reg:x3; val_offset:25164*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25164*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8389:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeaffe000; valaddr_reg:x3; val_offset:25167*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25167*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8390:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeafff000; valaddr_reg:x3; val_offset:25170*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25170*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8391:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeafff800; valaddr_reg:x3; val_offset:25173*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25173*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8392:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeafffc00; valaddr_reg:x3; val_offset:25176*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25176*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8393:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeafffe00; valaddr_reg:x3; val_offset:25179*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25179*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8394:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeaffff00; valaddr_reg:x3; val_offset:25182*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25182*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8395:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeaffff80; valaddr_reg:x3; val_offset:25185*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25185*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8396:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeaffffc0; valaddr_reg:x3; val_offset:25188*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25188*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8397:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeaffffe0; valaddr_reg:x3; val_offset:25191*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25191*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8398:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeafffff0; valaddr_reg:x3; val_offset:25194*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25194*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8399:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeafffff8; valaddr_reg:x3; val_offset:25197*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25197*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8400:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeafffffc; valaddr_reg:x3; val_offset:25200*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25200*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8401:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeafffffe; valaddr_reg:x3; val_offset:25203*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25203*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8402:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xeaffffff; valaddr_reg:x3; val_offset:25206*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25206*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8403:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xff000001; valaddr_reg:x3; val_offset:25209*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25209*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8404:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xff000003; valaddr_reg:x3; val_offset:25212*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25212*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8405:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xff000007; valaddr_reg:x3; val_offset:25215*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25215*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8406:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xff199999; valaddr_reg:x3; val_offset:25218*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25218*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8407:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xff249249; valaddr_reg:x3; val_offset:25221*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25221*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8408:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xff333333; valaddr_reg:x3; val_offset:25224*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25224*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8409:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:25227*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25227*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8410:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:25230*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25230*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8411:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xff444444; valaddr_reg:x3; val_offset:25233*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25233*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8412:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:25236*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25236*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8413:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:25239*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25239*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8414:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xff666666; valaddr_reg:x3; val_offset:25242*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25242*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8415:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:25245*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25245*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8416:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:25248*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25248*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8417:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:25251*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25251*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8418:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2313c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x48ef7a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2313c5; op2val:0xc0c8ef7a;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:25254*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25254*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8419:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d000000; valaddr_reg:x3; val_offset:25257*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25257*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8420:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d000001; valaddr_reg:x3; val_offset:25260*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25260*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8421:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d000003; valaddr_reg:x3; val_offset:25263*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25263*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8422:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d000007; valaddr_reg:x3; val_offset:25266*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25266*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8423:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d00000f; valaddr_reg:x3; val_offset:25269*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25269*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8424:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d00001f; valaddr_reg:x3; val_offset:25272*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25272*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8425:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d00003f; valaddr_reg:x3; val_offset:25275*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25275*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8426:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d00007f; valaddr_reg:x3; val_offset:25278*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25278*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8427:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d0000ff; valaddr_reg:x3; val_offset:25281*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25281*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8428:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d0001ff; valaddr_reg:x3; val_offset:25284*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25284*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8429:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d0003ff; valaddr_reg:x3; val_offset:25287*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25287*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8430:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d0007ff; valaddr_reg:x3; val_offset:25290*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25290*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8431:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d000fff; valaddr_reg:x3; val_offset:25293*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25293*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8432:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d001fff; valaddr_reg:x3; val_offset:25296*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25296*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8433:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d003fff; valaddr_reg:x3; val_offset:25299*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25299*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8434:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d007fff; valaddr_reg:x3; val_offset:25302*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25302*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8435:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d00ffff; valaddr_reg:x3; val_offset:25305*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25305*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8436:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d01ffff; valaddr_reg:x3; val_offset:25308*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25308*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8437:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d03ffff; valaddr_reg:x3; val_offset:25311*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25311*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8438:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d07ffff; valaddr_reg:x3; val_offset:25314*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25314*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8439:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d0fffff; valaddr_reg:x3; val_offset:25317*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25317*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8440:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d1fffff; valaddr_reg:x3; val_offset:25320*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25320*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8441:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d3fffff; valaddr_reg:x3; val_offset:25323*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25323*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8442:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d400000; valaddr_reg:x3; val_offset:25326*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25326*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8443:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d600000; valaddr_reg:x3; val_offset:25329*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25329*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8444:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d700000; valaddr_reg:x3; val_offset:25332*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25332*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8445:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d780000; valaddr_reg:x3; val_offset:25335*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25335*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8446:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7c0000; valaddr_reg:x3; val_offset:25338*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25338*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8447:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7e0000; valaddr_reg:x3; val_offset:25341*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25341*0 + 3*65*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3161456640,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3161980928,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162243072,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162374144,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162439680,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162472448,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162488832,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162497024,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162501120,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162503168,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162504192,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162504704,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162504960,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162505088,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162505152,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162505184,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162505200,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162505208,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162505212,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162505214,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3162505215,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2116211414,32,FLEN)
NAN_BOXED(2160672668,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934257152,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934257153,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934257155,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934257159,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934257167,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934257183,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934257215,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934257279,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934257407,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934257663,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934258175,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934259199,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934261247,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934265343,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934273535,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934289919,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934322687,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934388223,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934519295,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3934781439,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3935305727,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3936354303,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3938451455,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3938451456,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3940548608,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3941597184,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942121472,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942383616,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942514688,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942580224,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942612992,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942629376,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942637568,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942641664,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942643712,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942644736,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942645248,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942645504,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942645632,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942645696,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942645728,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942645744,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942645752,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942645756,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942645758,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(3942645759,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2116228037,32,FLEN)
NAN_BOXED(3234393978,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097152000,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097152001,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097152003,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097152007,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097152015,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097152031,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097152063,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097152127,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097152255,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097152511,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097153023,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097154047,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097156095,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097160191,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097168383,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097184767,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097217535,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097283071,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097414143,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2097676287,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2098200575,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2099249151,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2101346303,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2101346304,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2103443456,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2104492032,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105016320,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105278464,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105409536,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
