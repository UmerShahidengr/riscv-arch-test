
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_8448:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7f0000; valaddr_reg:x3; val_offset:25344*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25344*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8449:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7f8000; valaddr_reg:x3; val_offset:25347*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25347*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8450:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7fc000; valaddr_reg:x3; val_offset:25350*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25350*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8451:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7fe000; valaddr_reg:x3; val_offset:25353*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25353*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8452:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7ff000; valaddr_reg:x3; val_offset:25356*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25356*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8453:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7ff800; valaddr_reg:x3; val_offset:25359*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25359*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8454:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7ffc00; valaddr_reg:x3; val_offset:25362*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25362*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8455:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7ffe00; valaddr_reg:x3; val_offset:25365*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25365*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8456:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7fff00; valaddr_reg:x3; val_offset:25368*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25368*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8457:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7fff80; valaddr_reg:x3; val_offset:25371*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25371*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8458:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7fffc0; valaddr_reg:x3; val_offset:25374*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25374*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8459:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7fffe0; valaddr_reg:x3; val_offset:25377*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25377*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8460:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7ffff0; valaddr_reg:x3; val_offset:25380*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25380*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8461:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7ffff8; valaddr_reg:x3; val_offset:25383*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25383*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8462:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7ffffc; valaddr_reg:x3; val_offset:25386*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25386*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8463:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7ffffe; valaddr_reg:x3; val_offset:25389*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25389*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8464:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7d7fffff; valaddr_reg:x3; val_offset:25392*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25392*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8465:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7f000001; valaddr_reg:x3; val_offset:25395*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25395*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8466:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7f000003; valaddr_reg:x3; val_offset:25398*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25398*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8467:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7f000007; valaddr_reg:x3; val_offset:25401*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25401*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8468:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7f199999; valaddr_reg:x3; val_offset:25404*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25404*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8469:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7f249249; valaddr_reg:x3; val_offset:25407*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25407*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8470:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7f333333; valaddr_reg:x3; val_offset:25410*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25410*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8471:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:25413*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25413*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8472:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:25416*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25416*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8473:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7f444444; valaddr_reg:x3; val_offset:25419*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25419*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8474:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:25422*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25422*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8475:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:25425*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25425*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8476:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7f666666; valaddr_reg:x3; val_offset:25428*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25428*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8477:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:25431*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25431*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8478:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:25434*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25434*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8479:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:25437*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25437*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8480:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x254961 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x463fe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e254961; op2val:0x40c63fe0;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:25440*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25440*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8481:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:25443*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25443*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8482:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:25446*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25446*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8483:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:25449*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25449*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8484:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:25452*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25452*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8485:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:25455*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25455*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8486:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:25458*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25458*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8487:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:25461*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25461*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8488:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:25464*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25464*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8489:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:25467*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25467*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8490:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:25470*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25470*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8491:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:25473*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25473*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8492:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:25476*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25476*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8493:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:25479*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25479*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8494:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:25482*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25482*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8495:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:25485*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25485*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8496:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:25488*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25488*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8497:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87800000; valaddr_reg:x3; val_offset:25491*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25491*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8498:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87800001; valaddr_reg:x3; val_offset:25494*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25494*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8499:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87800003; valaddr_reg:x3; val_offset:25497*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25497*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8500:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87800007; valaddr_reg:x3; val_offset:25500*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25500*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8501:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x8780000f; valaddr_reg:x3; val_offset:25503*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25503*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8502:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x8780001f; valaddr_reg:x3; val_offset:25506*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25506*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8503:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x8780003f; valaddr_reg:x3; val_offset:25509*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25509*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8504:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x8780007f; valaddr_reg:x3; val_offset:25512*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25512*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8505:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x878000ff; valaddr_reg:x3; val_offset:25515*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25515*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8506:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x878001ff; valaddr_reg:x3; val_offset:25518*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25518*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8507:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x878003ff; valaddr_reg:x3; val_offset:25521*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25521*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8508:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x878007ff; valaddr_reg:x3; val_offset:25524*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25524*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8509:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87800fff; valaddr_reg:x3; val_offset:25527*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25527*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8510:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87801fff; valaddr_reg:x3; val_offset:25530*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25530*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8511:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87803fff; valaddr_reg:x3; val_offset:25533*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25533*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8512:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87807fff; valaddr_reg:x3; val_offset:25536*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25536*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8513:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x8780ffff; valaddr_reg:x3; val_offset:25539*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25539*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8514:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x8781ffff; valaddr_reg:x3; val_offset:25542*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25542*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8515:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x8783ffff; valaddr_reg:x3; val_offset:25545*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25545*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8516:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x8787ffff; valaddr_reg:x3; val_offset:25548*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25548*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8517:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x878fffff; valaddr_reg:x3; val_offset:25551*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25551*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8518:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x879fffff; valaddr_reg:x3; val_offset:25554*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25554*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8519:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87bfffff; valaddr_reg:x3; val_offset:25557*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25557*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8520:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87c00000; valaddr_reg:x3; val_offset:25560*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25560*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8521:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87e00000; valaddr_reg:x3; val_offset:25563*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25563*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8522:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87f00000; valaddr_reg:x3; val_offset:25566*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25566*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8523:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87f80000; valaddr_reg:x3; val_offset:25569*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25569*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8524:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87fc0000; valaddr_reg:x3; val_offset:25572*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25572*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8525:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87fe0000; valaddr_reg:x3; val_offset:25575*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25575*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8526:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87ff0000; valaddr_reg:x3; val_offset:25578*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25578*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8527:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87ff8000; valaddr_reg:x3; val_offset:25581*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25581*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8528:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87ffc000; valaddr_reg:x3; val_offset:25584*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25584*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8529:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87ffe000; valaddr_reg:x3; val_offset:25587*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25587*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8530:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87fff000; valaddr_reg:x3; val_offset:25590*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25590*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8531:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87fff800; valaddr_reg:x3; val_offset:25593*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25593*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8532:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87fffc00; valaddr_reg:x3; val_offset:25596*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25596*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8533:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87fffe00; valaddr_reg:x3; val_offset:25599*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25599*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8534:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87ffff00; valaddr_reg:x3; val_offset:25602*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25602*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8535:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87ffff80; valaddr_reg:x3; val_offset:25605*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25605*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8536:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87ffffc0; valaddr_reg:x3; val_offset:25608*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25608*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8537:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87ffffe0; valaddr_reg:x3; val_offset:25611*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25611*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8538:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87fffff0; valaddr_reg:x3; val_offset:25614*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25614*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8539:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87fffff8; valaddr_reg:x3; val_offset:25617*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25617*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8540:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87fffffc; valaddr_reg:x3; val_offset:25620*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25620*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8541:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87fffffe; valaddr_reg:x3; val_offset:25623*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25623*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8542:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2580de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2580de; op2val:0x80000000;
op3val:0x87ffffff; valaddr_reg:x3; val_offset:25626*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25626*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8543:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:25629*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25629*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8544:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:25632*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25632*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8545:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:25635*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25635*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8546:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:25638*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25638*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8547:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:25641*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25641*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8548:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:25644*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25644*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8549:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:25647*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25647*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8550:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:25650*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25650*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8551:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:25653*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25653*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8552:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:25656*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25656*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8553:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:25659*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25659*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8554:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:25662*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25662*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8555:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:25665*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25665*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8556:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:25668*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25668*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8557:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:25671*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25671*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8558:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:25674*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25674*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8559:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x62800000; valaddr_reg:x3; val_offset:25677*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25677*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8560:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x62800001; valaddr_reg:x3; val_offset:25680*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25680*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8561:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x62800003; valaddr_reg:x3; val_offset:25683*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25683*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8562:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x62800007; valaddr_reg:x3; val_offset:25686*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25686*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8563:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x6280000f; valaddr_reg:x3; val_offset:25689*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25689*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8564:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x6280001f; valaddr_reg:x3; val_offset:25692*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25692*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8565:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x6280003f; valaddr_reg:x3; val_offset:25695*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25695*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8566:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x6280007f; valaddr_reg:x3; val_offset:25698*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25698*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8567:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x628000ff; valaddr_reg:x3; val_offset:25701*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25701*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8568:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x628001ff; valaddr_reg:x3; val_offset:25704*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25704*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8569:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x628003ff; valaddr_reg:x3; val_offset:25707*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25707*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8570:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x628007ff; valaddr_reg:x3; val_offset:25710*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25710*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8571:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x62800fff; valaddr_reg:x3; val_offset:25713*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25713*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8572:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x62801fff; valaddr_reg:x3; val_offset:25716*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25716*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8573:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x62803fff; valaddr_reg:x3; val_offset:25719*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25719*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8574:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x62807fff; valaddr_reg:x3; val_offset:25722*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25722*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8575:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x25d078 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e25d078; op2val:0x0;
op3val:0x6280ffff; valaddr_reg:x3; val_offset:25725*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25725*0 + 3*66*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105475072,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105507840,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105524224,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105532416,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105536512,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105538560,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105539584,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105540096,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105540352,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105540480,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105540544,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105540576,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105540592,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105540600,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105540604,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105540606,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2105540607,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2116372833,32,FLEN)
NAN_BOXED(1086734304,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312768,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312769,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312771,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312775,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312783,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312799,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312831,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312895,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313023,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313279,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313791,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273314815,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273316863,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273320959,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273329151,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273345535,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273378303,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273443839,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273574911,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273837055,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2274361343,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2275409919,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2277507071,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2277507072,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2279604224,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2280652800,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281177088,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281439232,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281570304,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281635840,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281668608,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281684992,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281693184,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281697280,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281699328,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281700352,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281700864,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701120,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701248,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701312,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701344,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701360,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701368,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701372,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701374,32,FLEN)
NAN_BOXED(2116387038,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701375,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1652555776,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1652555777,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1652555779,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1652555783,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1652555791,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1652555807,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1652555839,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1652555903,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1652556031,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1652556287,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1652556799,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1652557823,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1652559871,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1652563967,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1652572159,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1652588543,32,FLEN)
NAN_BOXED(2116407416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1652621311,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
