
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_9344:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f9e07 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2b01ed and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f9e07; op2val:0xab01ed;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:28032*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28032*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9345:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f9e07 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2b01ed and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f9e07; op2val:0xab01ed;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:28035*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28035*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9346:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f9e07 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2b01ed and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f9e07; op2val:0xab01ed;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:28038*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28038*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9347:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f9e07 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2b01ed and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f9e07; op2val:0xab01ed;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:28041*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28041*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9348:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f9e07 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2b01ed and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f9e07; op2val:0xab01ed;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:28044*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28044*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9349:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:28047*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28047*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9350:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:28050*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28050*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9351:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:28053*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28053*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9352:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:28056*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28056*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9353:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:28059*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28059*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9354:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:28062*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28062*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9355:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:28065*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28065*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9356:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:28068*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28068*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9357:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:28071*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28071*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9358:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:28074*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28074*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9359:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:28077*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28077*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9360:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:28080*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28080*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9361:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:28083*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28083*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9362:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:28086*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28086*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9363:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:28089*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28089*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9364:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:28092*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28092*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9365:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85800000; valaddr_reg:x3; val_offset:28095*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28095*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9366:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85800001; valaddr_reg:x3; val_offset:28098*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28098*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9367:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85800003; valaddr_reg:x3; val_offset:28101*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28101*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9368:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85800007; valaddr_reg:x3; val_offset:28104*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28104*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9369:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x8580000f; valaddr_reg:x3; val_offset:28107*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28107*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9370:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x8580001f; valaddr_reg:x3; val_offset:28110*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28110*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9371:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x8580003f; valaddr_reg:x3; val_offset:28113*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28113*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9372:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x8580007f; valaddr_reg:x3; val_offset:28116*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28116*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9373:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x858000ff; valaddr_reg:x3; val_offset:28119*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28119*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9374:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x858001ff; valaddr_reg:x3; val_offset:28122*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28122*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9375:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x858003ff; valaddr_reg:x3; val_offset:28125*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28125*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9376:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x858007ff; valaddr_reg:x3; val_offset:28128*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28128*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9377:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85800fff; valaddr_reg:x3; val_offset:28131*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28131*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9378:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85801fff; valaddr_reg:x3; val_offset:28134*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28134*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9379:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85803fff; valaddr_reg:x3; val_offset:28137*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28137*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9380:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85807fff; valaddr_reg:x3; val_offset:28140*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28140*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9381:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x8580ffff; valaddr_reg:x3; val_offset:28143*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28143*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9382:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x8581ffff; valaddr_reg:x3; val_offset:28146*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28146*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9383:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x8583ffff; valaddr_reg:x3; val_offset:28149*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28149*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9384:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x8587ffff; valaddr_reg:x3; val_offset:28152*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28152*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9385:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x858fffff; valaddr_reg:x3; val_offset:28155*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28155*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9386:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x859fffff; valaddr_reg:x3; val_offset:28158*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28158*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9387:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85bfffff; valaddr_reg:x3; val_offset:28161*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28161*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9388:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85c00000; valaddr_reg:x3; val_offset:28164*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28164*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9389:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85e00000; valaddr_reg:x3; val_offset:28167*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28167*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9390:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85f00000; valaddr_reg:x3; val_offset:28170*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28170*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9391:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85f80000; valaddr_reg:x3; val_offset:28173*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28173*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9392:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85fc0000; valaddr_reg:x3; val_offset:28176*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28176*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9393:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85fe0000; valaddr_reg:x3; val_offset:28179*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28179*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9394:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85ff0000; valaddr_reg:x3; val_offset:28182*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28182*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9395:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85ff8000; valaddr_reg:x3; val_offset:28185*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28185*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9396:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85ffc000; valaddr_reg:x3; val_offset:28188*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28188*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9397:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85ffe000; valaddr_reg:x3; val_offset:28191*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28191*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9398:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85fff000; valaddr_reg:x3; val_offset:28194*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28194*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9399:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85fff800; valaddr_reg:x3; val_offset:28197*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28197*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9400:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85fffc00; valaddr_reg:x3; val_offset:28200*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28200*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9401:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85fffe00; valaddr_reg:x3; val_offset:28203*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28203*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9402:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85ffff00; valaddr_reg:x3; val_offset:28206*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28206*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9403:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85ffff80; valaddr_reg:x3; val_offset:28209*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28209*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9404:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85ffffc0; valaddr_reg:x3; val_offset:28212*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28212*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9405:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85ffffe0; valaddr_reg:x3; val_offset:28215*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28215*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9406:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85fffff0; valaddr_reg:x3; val_offset:28218*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28218*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9407:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85fffff8; valaddr_reg:x3; val_offset:28221*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28221*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9408:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85fffffc; valaddr_reg:x3; val_offset:28224*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28224*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9409:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85fffffe; valaddr_reg:x3; val_offset:28227*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28227*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9410:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fecaf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3fecaf; op2val:0x80000000;
op3val:0x85ffffff; valaddr_reg:x3; val_offset:28230*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28230*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9411:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x3f800001; valaddr_reg:x3; val_offset:28233*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28233*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9412:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x3f800003; valaddr_reg:x3; val_offset:28236*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28236*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9413:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x3f800007; valaddr_reg:x3; val_offset:28239*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28239*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9414:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x3f999999; valaddr_reg:x3; val_offset:28242*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28242*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9415:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:28245*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28245*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9416:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:28248*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28248*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9417:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:28251*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28251*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9418:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:28254*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28254*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9419:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:28257*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28257*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9420:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:28260*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28260*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9421:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:28263*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28263*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9422:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:28266*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28266*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9423:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:28269*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28269*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9424:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:28272*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28272*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9425:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:28275*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28275*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9426:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:28278*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28278*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9427:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45800000; valaddr_reg:x3; val_offset:28281*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28281*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9428:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45800001; valaddr_reg:x3; val_offset:28284*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28284*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9429:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45800003; valaddr_reg:x3; val_offset:28287*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28287*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9430:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45800007; valaddr_reg:x3; val_offset:28290*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28290*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9431:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x4580000f; valaddr_reg:x3; val_offset:28293*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28293*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9432:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x4580001f; valaddr_reg:x3; val_offset:28296*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28296*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9433:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x4580003f; valaddr_reg:x3; val_offset:28299*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28299*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9434:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x4580007f; valaddr_reg:x3; val_offset:28302*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28302*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9435:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x458000ff; valaddr_reg:x3; val_offset:28305*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28305*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9436:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x458001ff; valaddr_reg:x3; val_offset:28308*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28308*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9437:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x458003ff; valaddr_reg:x3; val_offset:28311*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28311*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9438:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x458007ff; valaddr_reg:x3; val_offset:28314*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28314*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9439:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45800fff; valaddr_reg:x3; val_offset:28317*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28317*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9440:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45801fff; valaddr_reg:x3; val_offset:28320*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28320*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9441:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45803fff; valaddr_reg:x3; val_offset:28323*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28323*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9442:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45807fff; valaddr_reg:x3; val_offset:28326*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28326*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9443:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x4580ffff; valaddr_reg:x3; val_offset:28329*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28329*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9444:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x4581ffff; valaddr_reg:x3; val_offset:28332*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28332*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9445:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x4583ffff; valaddr_reg:x3; val_offset:28335*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28335*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9446:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x4587ffff; valaddr_reg:x3; val_offset:28338*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28338*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9447:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x458fffff; valaddr_reg:x3; val_offset:28341*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28341*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9448:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x459fffff; valaddr_reg:x3; val_offset:28344*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28344*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9449:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45bfffff; valaddr_reg:x3; val_offset:28347*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28347*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9450:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45c00000; valaddr_reg:x3; val_offset:28350*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28350*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9451:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45e00000; valaddr_reg:x3; val_offset:28353*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28353*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9452:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45f00000; valaddr_reg:x3; val_offset:28356*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28356*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9453:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45f80000; valaddr_reg:x3; val_offset:28359*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28359*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9454:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45fc0000; valaddr_reg:x3; val_offset:28362*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28362*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9455:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45fe0000; valaddr_reg:x3; val_offset:28365*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28365*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9456:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45ff0000; valaddr_reg:x3; val_offset:28368*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28368*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9457:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45ff8000; valaddr_reg:x3; val_offset:28371*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28371*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9458:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45ffc000; valaddr_reg:x3; val_offset:28374*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28374*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9459:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45ffe000; valaddr_reg:x3; val_offset:28377*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28377*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9460:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45fff000; valaddr_reg:x3; val_offset:28380*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28380*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9461:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45fff800; valaddr_reg:x3; val_offset:28383*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28383*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9462:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45fffc00; valaddr_reg:x3; val_offset:28386*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28386*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9463:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45fffe00; valaddr_reg:x3; val_offset:28389*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28389*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9464:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45ffff00; valaddr_reg:x3; val_offset:28392*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28392*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9465:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45ffff80; valaddr_reg:x3; val_offset:28395*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28395*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9466:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45ffffc0; valaddr_reg:x3; val_offset:28398*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28398*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9467:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45ffffe0; valaddr_reg:x3; val_offset:28401*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28401*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9468:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45fffff0; valaddr_reg:x3; val_offset:28404*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28404*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9469:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45fffff8; valaddr_reg:x3; val_offset:28407*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28407*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9470:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45fffffc; valaddr_reg:x3; val_offset:28410*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28410*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9471:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x424751 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28aa3e and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e424751; op2val:0xa8aa3e;
op3val:0x45fffffe; valaddr_reg:x3; val_offset:28413*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28413*0 + 3*73*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2118098439,32,FLEN)
NAN_BOXED(11207149,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2118098439,32,FLEN)
NAN_BOXED(11207149,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2118098439,32,FLEN)
NAN_BOXED(11207149,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2118098439,32,FLEN)
NAN_BOXED(11207149,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2118098439,32,FLEN)
NAN_BOXED(11207149,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758336,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758337,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758339,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758343,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758351,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758367,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758399,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758463,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758591,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758847,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239759359,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239760383,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239762431,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239766527,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239774719,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239791103,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239823871,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239889407,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2240020479,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2240282623,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2240806911,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2241855487,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2243952639,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2243952640,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2246049792,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2247098368,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2247622656,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2247884800,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248015872,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248081408,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248114176,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248130560,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248138752,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248142848,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248144896,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248145920,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146432,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146688,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146816,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146880,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146912,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146928,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146936,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146940,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146942,32,FLEN)
NAN_BOXED(2118118575,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146943,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166016512,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166016513,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166016515,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166016519,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166016527,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166016543,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166016575,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166016639,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166016767,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166017023,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166017535,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166018559,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166020607,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166024703,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166032895,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166049279,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166082047,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166147583,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166278655,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1166540799,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1167065087,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1168113663,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1170210815,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1170210816,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1172307968,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1173356544,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1173880832,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174142976,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174274048,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174339584,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174372352,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174388736,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174396928,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174401024,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174403072,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174404096,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174404608,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174404864,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174404992,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174405056,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174405088,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174405104,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174405112,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174405116,32,FLEN)
NAN_BOXED(2118272849,32,FLEN)
NAN_BOXED(11053630,32,FLEN)
NAN_BOXED(1174405118,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
