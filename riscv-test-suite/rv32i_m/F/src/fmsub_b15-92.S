
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_11648:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:34944*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34944*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11649:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:34947*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34947*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11650:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:34950*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34950*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11651:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:34953*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34953*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11652:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:34956*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34956*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11653:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:34959*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34959*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11654:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:34962*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34962*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11655:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:34965*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34965*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11656:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:34968*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34968*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11657:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:34971*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34971*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11658:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:34974*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34974*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11659:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82800000; valaddr_reg:x3; val_offset:34977*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34977*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11660:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82800001; valaddr_reg:x3; val_offset:34980*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34980*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11661:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82800003; valaddr_reg:x3; val_offset:34983*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34983*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11662:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82800007; valaddr_reg:x3; val_offset:34986*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34986*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11663:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x8280000f; valaddr_reg:x3; val_offset:34989*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34989*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11664:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x8280001f; valaddr_reg:x3; val_offset:34992*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34992*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11665:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x8280003f; valaddr_reg:x3; val_offset:34995*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34995*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11666:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x8280007f; valaddr_reg:x3; val_offset:34998*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34998*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11667:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x828000ff; valaddr_reg:x3; val_offset:35001*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35001*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11668:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x828001ff; valaddr_reg:x3; val_offset:35004*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35004*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11669:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x828003ff; valaddr_reg:x3; val_offset:35007*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35007*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11670:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x828007ff; valaddr_reg:x3; val_offset:35010*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35010*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11671:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82800fff; valaddr_reg:x3; val_offset:35013*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35013*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11672:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82801fff; valaddr_reg:x3; val_offset:35016*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35016*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11673:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82803fff; valaddr_reg:x3; val_offset:35019*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35019*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11674:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82807fff; valaddr_reg:x3; val_offset:35022*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35022*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11675:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x8280ffff; valaddr_reg:x3; val_offset:35025*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35025*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11676:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x8281ffff; valaddr_reg:x3; val_offset:35028*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35028*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11677:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x8283ffff; valaddr_reg:x3; val_offset:35031*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35031*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11678:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x8287ffff; valaddr_reg:x3; val_offset:35034*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35034*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11679:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x828fffff; valaddr_reg:x3; val_offset:35037*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35037*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11680:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x829fffff; valaddr_reg:x3; val_offset:35040*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35040*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11681:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82bfffff; valaddr_reg:x3; val_offset:35043*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35043*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11682:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82c00000; valaddr_reg:x3; val_offset:35046*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35046*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11683:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82e00000; valaddr_reg:x3; val_offset:35049*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35049*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11684:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82f00000; valaddr_reg:x3; val_offset:35052*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35052*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11685:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82f80000; valaddr_reg:x3; val_offset:35055*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35055*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11686:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82fc0000; valaddr_reg:x3; val_offset:35058*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35058*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11687:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82fe0000; valaddr_reg:x3; val_offset:35061*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35061*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11688:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82ff0000; valaddr_reg:x3; val_offset:35064*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35064*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11689:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82ff8000; valaddr_reg:x3; val_offset:35067*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35067*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11690:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82ffc000; valaddr_reg:x3; val_offset:35070*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35070*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11691:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82ffe000; valaddr_reg:x3; val_offset:35073*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35073*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11692:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82fff000; valaddr_reg:x3; val_offset:35076*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35076*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11693:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82fff800; valaddr_reg:x3; val_offset:35079*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35079*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11694:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82fffc00; valaddr_reg:x3; val_offset:35082*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35082*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11695:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82fffe00; valaddr_reg:x3; val_offset:35085*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35085*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11696:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82ffff00; valaddr_reg:x3; val_offset:35088*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35088*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11697:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82ffff80; valaddr_reg:x3; val_offset:35091*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35091*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11698:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82ffffc0; valaddr_reg:x3; val_offset:35094*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35094*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11699:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82ffffe0; valaddr_reg:x3; val_offset:35097*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35097*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11700:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82fffff0; valaddr_reg:x3; val_offset:35100*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35100*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11701:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82fffff8; valaddr_reg:x3; val_offset:35103*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35103*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11702:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82fffffc; valaddr_reg:x3; val_offset:35106*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35106*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11703:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82fffffe; valaddr_reg:x3; val_offset:35109*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35109*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11704:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705551 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705551; op2val:0x80000000;
op3val:0x82ffffff; valaddr_reg:x3; val_offset:35112*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35112*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11705:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3800000; valaddr_reg:x3; val_offset:35115*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35115*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11706:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3800001; valaddr_reg:x3; val_offset:35118*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35118*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11707:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3800003; valaddr_reg:x3; val_offset:35121*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35121*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11708:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3800007; valaddr_reg:x3; val_offset:35124*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35124*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11709:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe380000f; valaddr_reg:x3; val_offset:35127*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35127*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11710:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe380001f; valaddr_reg:x3; val_offset:35130*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35130*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11711:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe380003f; valaddr_reg:x3; val_offset:35133*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35133*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11712:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe380007f; valaddr_reg:x3; val_offset:35136*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35136*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11713:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe38000ff; valaddr_reg:x3; val_offset:35139*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35139*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11714:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe38001ff; valaddr_reg:x3; val_offset:35142*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35142*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11715:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe38003ff; valaddr_reg:x3; val_offset:35145*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35145*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11716:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe38007ff; valaddr_reg:x3; val_offset:35148*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35148*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11717:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3800fff; valaddr_reg:x3; val_offset:35151*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35151*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11718:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3801fff; valaddr_reg:x3; val_offset:35154*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35154*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11719:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3803fff; valaddr_reg:x3; val_offset:35157*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35157*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11720:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3807fff; valaddr_reg:x3; val_offset:35160*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35160*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11721:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe380ffff; valaddr_reg:x3; val_offset:35163*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35163*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11722:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe381ffff; valaddr_reg:x3; val_offset:35166*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35166*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11723:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe383ffff; valaddr_reg:x3; val_offset:35169*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35169*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11724:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe387ffff; valaddr_reg:x3; val_offset:35172*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35172*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11725:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe38fffff; valaddr_reg:x3; val_offset:35175*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35175*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11726:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe39fffff; valaddr_reg:x3; val_offset:35178*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35178*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11727:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3bfffff; valaddr_reg:x3; val_offset:35181*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35181*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11728:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3c00000; valaddr_reg:x3; val_offset:35184*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35184*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11729:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3e00000; valaddr_reg:x3; val_offset:35187*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35187*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11730:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3f00000; valaddr_reg:x3; val_offset:35190*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35190*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11731:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3f80000; valaddr_reg:x3; val_offset:35193*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35193*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11732:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3fc0000; valaddr_reg:x3; val_offset:35196*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35196*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11733:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3fe0000; valaddr_reg:x3; val_offset:35199*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35199*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11734:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3ff0000; valaddr_reg:x3; val_offset:35202*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35202*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11735:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3ff8000; valaddr_reg:x3; val_offset:35205*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35205*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11736:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3ffc000; valaddr_reg:x3; val_offset:35208*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35208*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11737:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3ffe000; valaddr_reg:x3; val_offset:35211*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35211*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11738:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3fff000; valaddr_reg:x3; val_offset:35214*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35214*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11739:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3fff800; valaddr_reg:x3; val_offset:35217*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35217*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11740:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3fffc00; valaddr_reg:x3; val_offset:35220*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35220*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11741:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3fffe00; valaddr_reg:x3; val_offset:35223*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35223*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11742:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3ffff00; valaddr_reg:x3; val_offset:35226*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35226*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11743:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3ffff80; valaddr_reg:x3; val_offset:35229*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35229*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11744:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3ffffc0; valaddr_reg:x3; val_offset:35232*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35232*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11745:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3ffffe0; valaddr_reg:x3; val_offset:35235*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35235*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11746:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3fffff0; valaddr_reg:x3; val_offset:35238*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35238*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11747:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3fffff8; valaddr_reg:x3; val_offset:35241*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35241*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11748:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3fffffc; valaddr_reg:x3; val_offset:35244*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35244*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11749:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3fffffe; valaddr_reg:x3; val_offset:35247*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35247*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11750:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xe3ffffff; valaddr_reg:x3; val_offset:35250*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35250*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11751:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xff000001; valaddr_reg:x3; val_offset:35253*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35253*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11752:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xff000003; valaddr_reg:x3; val_offset:35256*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35256*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11753:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xff000007; valaddr_reg:x3; val_offset:35259*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35259*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11754:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xff199999; valaddr_reg:x3; val_offset:35262*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35262*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11755:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xff249249; valaddr_reg:x3; val_offset:35265*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35265*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11756:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xff333333; valaddr_reg:x3; val_offset:35268*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35268*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11757:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:35271*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35271*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11758:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:35274*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35274*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11759:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xff444444; valaddr_reg:x3; val_offset:35277*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35277*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11760:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:35280*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35280*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11761:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:35283*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35283*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11762:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xff666666; valaddr_reg:x3; val_offset:35286*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35286*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11763:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:35289*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35289*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11764:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:35292*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35292*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11765:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:35295*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35295*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11766:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70e9fb and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0803ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70e9fb; op2val:0xc08803ed;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:35298*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35298*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11767:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71d3c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71d3c6; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:35301*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35301*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11768:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71d3c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71d3c6; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:35304*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35304*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11769:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71d3c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71d3c6; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:35307*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35307*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11770:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71d3c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71d3c6; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:35310*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35310*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11771:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71d3c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71d3c6; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:35313*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35313*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11772:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71d3c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71d3c6; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:35316*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35316*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11773:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71d3c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71d3c6; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:35319*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35319*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11774:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71d3c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71d3c6; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:35322*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35322*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11775:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71d3c6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71d3c6; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:35325*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35325*0 + 3*91*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426688,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426689,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426691,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426695,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426703,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426719,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426751,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426815,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426943,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189427199,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189427711,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189428735,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189430783,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189434879,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189443071,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189459455,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189492223,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189557759,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189688831,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189950975,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2190475263,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2191523839,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2193620991,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2193620992,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2195718144,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2196766720,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197291008,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197553152,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197684224,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197749760,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197782528,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197798912,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197807104,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197811200,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197813248,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197814272,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197814784,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815040,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815168,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815232,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815264,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815280,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815288,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815292,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815294,32,FLEN)
NAN_BOXED(2121291089,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815295,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816816640,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816816641,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816816643,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816816647,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816816655,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816816671,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816816703,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816816767,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816816895,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816817151,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816817663,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816818687,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816820735,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816824831,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816833023,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816849407,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816882175,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3816947711,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3817078783,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3817340927,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3817865215,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3818913791,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3821010943,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3821010944,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3823108096,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3824156672,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3824680960,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3824943104,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825074176,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825139712,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825172480,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825188864,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825197056,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825201152,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825203200,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825204224,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825204736,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825204992,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825205120,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825205184,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825205216,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825205232,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825205240,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825205244,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825205246,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(3825205247,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2121329147,32,FLEN)
NAN_BOXED(3230139373,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2121388998,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2121388998,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2121388998,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2121388998,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2121388998,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2121388998,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2121388998,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2121388998,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2121388998,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
