
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_12032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84800001; valaddr_reg:x3; val_offset:36096*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36096*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84800003; valaddr_reg:x3; val_offset:36099*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36099*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84800007; valaddr_reg:x3; val_offset:36102*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36102*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12035:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x8480000f; valaddr_reg:x3; val_offset:36105*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36105*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12036:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x8480001f; valaddr_reg:x3; val_offset:36108*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36108*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12037:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x8480003f; valaddr_reg:x3; val_offset:36111*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36111*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12038:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x8480007f; valaddr_reg:x3; val_offset:36114*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36114*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12039:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x848000ff; valaddr_reg:x3; val_offset:36117*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36117*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12040:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x848001ff; valaddr_reg:x3; val_offset:36120*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36120*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12041:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x848003ff; valaddr_reg:x3; val_offset:36123*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36123*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12042:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x848007ff; valaddr_reg:x3; val_offset:36126*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36126*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12043:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84800fff; valaddr_reg:x3; val_offset:36129*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36129*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12044:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84801fff; valaddr_reg:x3; val_offset:36132*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36132*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12045:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84803fff; valaddr_reg:x3; val_offset:36135*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36135*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12046:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84807fff; valaddr_reg:x3; val_offset:36138*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36138*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12047:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x8480ffff; valaddr_reg:x3; val_offset:36141*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36141*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12048:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x8481ffff; valaddr_reg:x3; val_offset:36144*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36144*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12049:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x8483ffff; valaddr_reg:x3; val_offset:36147*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36147*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12050:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x8487ffff; valaddr_reg:x3; val_offset:36150*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36150*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12051:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x848fffff; valaddr_reg:x3; val_offset:36153*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36153*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12052:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x849fffff; valaddr_reg:x3; val_offset:36156*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36156*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12053:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84bfffff; valaddr_reg:x3; val_offset:36159*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36159*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12054:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84c00000; valaddr_reg:x3; val_offset:36162*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36162*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12055:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84e00000; valaddr_reg:x3; val_offset:36165*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36165*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12056:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84f00000; valaddr_reg:x3; val_offset:36168*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36168*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12057:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84f80000; valaddr_reg:x3; val_offset:36171*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36171*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12058:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84fc0000; valaddr_reg:x3; val_offset:36174*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36174*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12059:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84fe0000; valaddr_reg:x3; val_offset:36177*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36177*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12060:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84ff0000; valaddr_reg:x3; val_offset:36180*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36180*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12061:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84ff8000; valaddr_reg:x3; val_offset:36183*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36183*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12062:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84ffc000; valaddr_reg:x3; val_offset:36186*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36186*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12063:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84ffe000; valaddr_reg:x3; val_offset:36189*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36189*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12064:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84fff000; valaddr_reg:x3; val_offset:36192*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36192*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12065:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84fff800; valaddr_reg:x3; val_offset:36195*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36195*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12066:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84fffc00; valaddr_reg:x3; val_offset:36198*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36198*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12067:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84fffe00; valaddr_reg:x3; val_offset:36201*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36201*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12068:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84ffff00; valaddr_reg:x3; val_offset:36204*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36204*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12069:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84ffff80; valaddr_reg:x3; val_offset:36207*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36207*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12070:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84ffffc0; valaddr_reg:x3; val_offset:36210*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36210*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12071:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84ffffe0; valaddr_reg:x3; val_offset:36213*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36213*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12072:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84fffff0; valaddr_reg:x3; val_offset:36216*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36216*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12073:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84fffff8; valaddr_reg:x3; val_offset:36219*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36219*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12074:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84fffffc; valaddr_reg:x3; val_offset:36222*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36222*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12075:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84fffffe; valaddr_reg:x3; val_offset:36225*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36225*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12076:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x760fb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e760fb6; op2val:0x80000000;
op3val:0x84ffffff; valaddr_reg:x3; val_offset:36228*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36228*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12077:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:36231*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36231*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12078:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:36234*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36234*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12079:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:36237*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36237*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12080:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:36240*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36240*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12081:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:36243*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36243*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12082:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:36246*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36246*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12083:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:36249*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36249*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12084:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:36252*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36252*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12085:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:36255*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36255*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12086:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:36258*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36258*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12087:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:36261*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36261*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12088:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:36264*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36264*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12089:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:36267*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36267*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12090:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:36270*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36270*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12091:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:36273*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36273*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12092:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:36276*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36276*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12093:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9800000; valaddr_reg:x3; val_offset:36279*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36279*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12094:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9800001; valaddr_reg:x3; val_offset:36282*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36282*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12095:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9800003; valaddr_reg:x3; val_offset:36285*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36285*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12096:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9800007; valaddr_reg:x3; val_offset:36288*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36288*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12097:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x980000f; valaddr_reg:x3; val_offset:36291*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36291*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12098:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x980001f; valaddr_reg:x3; val_offset:36294*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36294*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12099:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x980003f; valaddr_reg:x3; val_offset:36297*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36297*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12100:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x980007f; valaddr_reg:x3; val_offset:36300*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36300*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12101:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x98000ff; valaddr_reg:x3; val_offset:36303*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36303*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12102:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x98001ff; valaddr_reg:x3; val_offset:36306*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36306*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12103:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x98003ff; valaddr_reg:x3; val_offset:36309*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36309*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12104:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x98007ff; valaddr_reg:x3; val_offset:36312*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36312*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12105:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9800fff; valaddr_reg:x3; val_offset:36315*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36315*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12106:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9801fff; valaddr_reg:x3; val_offset:36318*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36318*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9803fff; valaddr_reg:x3; val_offset:36321*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36321*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12108:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9807fff; valaddr_reg:x3; val_offset:36324*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36324*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x980ffff; valaddr_reg:x3; val_offset:36327*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36327*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x981ffff; valaddr_reg:x3; val_offset:36330*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36330*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12111:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x983ffff; valaddr_reg:x3; val_offset:36333*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36333*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12112:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x987ffff; valaddr_reg:x3; val_offset:36336*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36336*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12113:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x98fffff; valaddr_reg:x3; val_offset:36339*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36339*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12114:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x99fffff; valaddr_reg:x3; val_offset:36342*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36342*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12115:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9bfffff; valaddr_reg:x3; val_offset:36345*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36345*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12116:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9c00000; valaddr_reg:x3; val_offset:36348*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36348*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12117:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9e00000; valaddr_reg:x3; val_offset:36351*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36351*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12118:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9f00000; valaddr_reg:x3; val_offset:36354*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36354*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12119:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9f80000; valaddr_reg:x3; val_offset:36357*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36357*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12120:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9fc0000; valaddr_reg:x3; val_offset:36360*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36360*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12121:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9fe0000; valaddr_reg:x3; val_offset:36363*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36363*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12122:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9ff0000; valaddr_reg:x3; val_offset:36366*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36366*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12123:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9ff8000; valaddr_reg:x3; val_offset:36369*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36369*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12124:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9ffc000; valaddr_reg:x3; val_offset:36372*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36372*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12125:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9ffe000; valaddr_reg:x3; val_offset:36375*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36375*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12126:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9fff000; valaddr_reg:x3; val_offset:36378*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36378*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12127:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9fff800; valaddr_reg:x3; val_offset:36381*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36381*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12128:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9fffc00; valaddr_reg:x3; val_offset:36384*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36384*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12129:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9fffe00; valaddr_reg:x3; val_offset:36387*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36387*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12130:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9ffff00; valaddr_reg:x3; val_offset:36390*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36390*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12131:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9ffff80; valaddr_reg:x3; val_offset:36393*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36393*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12132:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9ffffc0; valaddr_reg:x3; val_offset:36396*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36396*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12133:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9ffffe0; valaddr_reg:x3; val_offset:36399*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36399*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12134:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9fffff0; valaddr_reg:x3; val_offset:36402*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36402*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12135:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9fffff8; valaddr_reg:x3; val_offset:36405*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36405*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12136:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9fffffc; valaddr_reg:x3; val_offset:36408*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36408*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12137:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9fffffe; valaddr_reg:x3; val_offset:36411*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36411*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12138:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x762242 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e762242; op2val:0x0;
op3val:0x9ffffff; valaddr_reg:x3; val_offset:36414*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36414*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12139:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf7000000; valaddr_reg:x3; val_offset:36417*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36417*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12140:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf7000001; valaddr_reg:x3; val_offset:36420*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36420*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12141:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf7000003; valaddr_reg:x3; val_offset:36423*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36423*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12142:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf7000007; valaddr_reg:x3; val_offset:36426*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36426*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12143:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf700000f; valaddr_reg:x3; val_offset:36429*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36429*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12144:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf700001f; valaddr_reg:x3; val_offset:36432*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36432*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12145:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf700003f; valaddr_reg:x3; val_offset:36435*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36435*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12146:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf700007f; valaddr_reg:x3; val_offset:36438*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36438*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12147:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf70000ff; valaddr_reg:x3; val_offset:36441*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36441*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12148:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf70001ff; valaddr_reg:x3; val_offset:36444*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36444*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12149:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf70003ff; valaddr_reg:x3; val_offset:36447*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36447*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12150:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf70007ff; valaddr_reg:x3; val_offset:36450*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36450*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12151:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf7000fff; valaddr_reg:x3; val_offset:36453*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36453*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12152:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf7001fff; valaddr_reg:x3; val_offset:36456*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36456*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12153:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf7003fff; valaddr_reg:x3; val_offset:36459*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36459*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12154:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf7007fff; valaddr_reg:x3; val_offset:36462*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36462*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12155:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf700ffff; valaddr_reg:x3; val_offset:36465*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36465*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12156:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf701ffff; valaddr_reg:x3; val_offset:36468*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36468*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12157:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf703ffff; valaddr_reg:x3; val_offset:36471*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36471*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12158:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf707ffff; valaddr_reg:x3; val_offset:36474*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36474*0 + 3*94*FLEN/8, x4, x1, x2)

inst_12159:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf70fffff; valaddr_reg:x3; val_offset:36477*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36477*0 + 3*94*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981121,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981123,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981127,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981135,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981151,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981183,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981247,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981375,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981631,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222982143,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222983167,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222985215,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222989311,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222997503,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223013887,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223046655,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223112191,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223243263,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223505407,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2224029695,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2225078271,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2227175423,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2227175424,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2229272576,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2230321152,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2230845440,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231107584,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231238656,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231304192,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231336960,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231353344,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231361536,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231365632,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231367680,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231368704,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369216,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369472,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369600,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369664,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369696,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369712,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369720,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369724,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369726,32,FLEN)
NAN_BOXED(2121666486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369727,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383552,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383553,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383555,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383559,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383567,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383583,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383615,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383679,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383807,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159384063,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159384575,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159385599,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159387647,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159391743,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159399935,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159416319,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159449087,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159514623,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159645695,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159907839,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(160432127,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(161480703,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(163577855,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(163577856,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(165675008,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(166723584,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167247872,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167510016,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167641088,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167706624,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167739392,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167755776,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167763968,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167768064,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167770112,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167771136,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167771648,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167771904,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772032,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772096,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772128,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772144,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772152,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772156,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772158,32,FLEN)
NAN_BOXED(2121671234,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772159,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4143972352,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4143972353,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4143972355,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4143972359,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4143972367,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4143972383,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4143972415,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4143972479,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4143972607,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4143972863,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4143973375,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4143974399,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4143976447,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4143980543,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4143988735,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4144005119,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4144037887,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4144103423,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4144234495,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4144496639,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4145020927,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
