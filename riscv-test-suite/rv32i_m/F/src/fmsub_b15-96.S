
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_12160:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf71fffff; valaddr_reg:x3; val_offset:36480*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36480*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12161:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf73fffff; valaddr_reg:x3; val_offset:36483*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36483*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12162:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf7400000; valaddr_reg:x3; val_offset:36486*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36486*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12163:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf7600000; valaddr_reg:x3; val_offset:36489*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36489*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12164:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf7700000; valaddr_reg:x3; val_offset:36492*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36492*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12165:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf7780000; valaddr_reg:x3; val_offset:36495*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36495*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12166:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77c0000; valaddr_reg:x3; val_offset:36498*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36498*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12167:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77e0000; valaddr_reg:x3; val_offset:36501*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36501*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12168:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77f0000; valaddr_reg:x3; val_offset:36504*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36504*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12169:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77f8000; valaddr_reg:x3; val_offset:36507*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36507*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12170:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77fc000; valaddr_reg:x3; val_offset:36510*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36510*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12171:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77fe000; valaddr_reg:x3; val_offset:36513*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36513*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12172:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77ff000; valaddr_reg:x3; val_offset:36516*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36516*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12173:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77ff800; valaddr_reg:x3; val_offset:36519*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36519*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12174:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77ffc00; valaddr_reg:x3; val_offset:36522*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36522*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12175:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77ffe00; valaddr_reg:x3; val_offset:36525*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36525*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12176:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77fff00; valaddr_reg:x3; val_offset:36528*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36528*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77fff80; valaddr_reg:x3; val_offset:36531*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36531*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12178:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77fffc0; valaddr_reg:x3; val_offset:36534*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36534*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12179:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77fffe0; valaddr_reg:x3; val_offset:36537*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36537*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12180:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77ffff0; valaddr_reg:x3; val_offset:36540*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36540*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12181:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77ffff8; valaddr_reg:x3; val_offset:36543*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36543*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12182:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77ffffc; valaddr_reg:x3; val_offset:36546*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36546*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12183:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77ffffe; valaddr_reg:x3; val_offset:36549*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36549*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12184:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xee and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xf77fffff; valaddr_reg:x3; val_offset:36552*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36552*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12185:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xff000001; valaddr_reg:x3; val_offset:36555*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36555*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12186:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xff000003; valaddr_reg:x3; val_offset:36558*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36558*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12187:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xff000007; valaddr_reg:x3; val_offset:36561*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36561*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12188:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xff199999; valaddr_reg:x3; val_offset:36564*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36564*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12189:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xff249249; valaddr_reg:x3; val_offset:36567*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36567*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12190:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xff333333; valaddr_reg:x3; val_offset:36570*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36570*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12191:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:36573*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36573*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12192:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:36576*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36576*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12193:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xff444444; valaddr_reg:x3; val_offset:36579*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36579*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12194:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:36582*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36582*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12195:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:36585*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36585*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12196:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xff666666; valaddr_reg:x3; val_offset:36588*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36588*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12197:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:36591*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36591*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12198:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:36594*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36594*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12199:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:36597*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36597*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12200:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7914bd and fs2 == 1 and fe2 == 0x81 and fm2 == 0x038e3a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7914bd; op2val:0xc0838e3a;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:36600*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36600*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12201:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:36603*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36603*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12202:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:36606*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36606*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12203:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:36609*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36609*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12204:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:36612*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36612*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12205:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:36615*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36615*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12206:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:36618*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36618*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:36621*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36621*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12208:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:36624*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36624*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12209:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:36627*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36627*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12210:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:36630*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36630*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12211:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:36633*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36633*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12212:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:36636*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36636*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:36639*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36639*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12214:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:36642*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36642*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12215:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:36645*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36645*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12216:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:36648*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36648*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12217:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd800000; valaddr_reg:x3; val_offset:36651*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36651*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12218:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd800001; valaddr_reg:x3; val_offset:36654*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36654*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12219:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd800003; valaddr_reg:x3; val_offset:36657*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36657*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12220:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd800007; valaddr_reg:x3; val_offset:36660*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36660*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12221:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd80000f; valaddr_reg:x3; val_offset:36663*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36663*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12222:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd80001f; valaddr_reg:x3; val_offset:36666*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36666*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12223:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd80003f; valaddr_reg:x3; val_offset:36669*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36669*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12224:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd80007f; valaddr_reg:x3; val_offset:36672*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36672*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12225:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd8000ff; valaddr_reg:x3; val_offset:36675*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36675*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12226:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd8001ff; valaddr_reg:x3; val_offset:36678*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36678*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12227:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd8003ff; valaddr_reg:x3; val_offset:36681*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36681*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12228:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd8007ff; valaddr_reg:x3; val_offset:36684*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36684*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12229:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd800fff; valaddr_reg:x3; val_offset:36687*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36687*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12230:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd801fff; valaddr_reg:x3; val_offset:36690*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36690*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12231:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd803fff; valaddr_reg:x3; val_offset:36693*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36693*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12232:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd807fff; valaddr_reg:x3; val_offset:36696*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36696*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12233:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd80ffff; valaddr_reg:x3; val_offset:36699*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36699*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12234:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd81ffff; valaddr_reg:x3; val_offset:36702*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36702*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12235:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd83ffff; valaddr_reg:x3; val_offset:36705*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36705*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12236:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd87ffff; valaddr_reg:x3; val_offset:36708*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36708*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12237:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd8fffff; valaddr_reg:x3; val_offset:36711*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36711*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12238:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xd9fffff; valaddr_reg:x3; val_offset:36714*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36714*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12239:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdbfffff; valaddr_reg:x3; val_offset:36717*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36717*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12240:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdc00000; valaddr_reg:x3; val_offset:36720*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36720*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12241:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xde00000; valaddr_reg:x3; val_offset:36723*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36723*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12242:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdf00000; valaddr_reg:x3; val_offset:36726*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36726*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12243:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdf80000; valaddr_reg:x3; val_offset:36729*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36729*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12244:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdfc0000; valaddr_reg:x3; val_offset:36732*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36732*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12245:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdfe0000; valaddr_reg:x3; val_offset:36735*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36735*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12246:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdff0000; valaddr_reg:x3; val_offset:36738*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36738*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12247:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdff8000; valaddr_reg:x3; val_offset:36741*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36741*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12248:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdffc000; valaddr_reg:x3; val_offset:36744*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36744*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12249:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdffe000; valaddr_reg:x3; val_offset:36747*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36747*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12250:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdfff000; valaddr_reg:x3; val_offset:36750*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36750*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12251:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdfff800; valaddr_reg:x3; val_offset:36753*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36753*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12252:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdfffc00; valaddr_reg:x3; val_offset:36756*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36756*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12253:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdfffe00; valaddr_reg:x3; val_offset:36759*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36759*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12254:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdffff00; valaddr_reg:x3; val_offset:36762*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36762*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12255:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdffff80; valaddr_reg:x3; val_offset:36765*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36765*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12256:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdffffc0; valaddr_reg:x3; val_offset:36768*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36768*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12257:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdffffe0; valaddr_reg:x3; val_offset:36771*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36771*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12258:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdfffff0; valaddr_reg:x3; val_offset:36774*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36774*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12259:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdfffff8; valaddr_reg:x3; val_offset:36777*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36777*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12260:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdfffffc; valaddr_reg:x3; val_offset:36780*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36780*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12261:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdfffffe; valaddr_reg:x3; val_offset:36783*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36783*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12262:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e79b5b2; op2val:0x0;
op3val:0xdffffff; valaddr_reg:x3; val_offset:36786*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36786*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12263:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x3f800001; valaddr_reg:x3; val_offset:36789*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36789*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12264:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x3f800003; valaddr_reg:x3; val_offset:36792*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36792*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12265:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x3f800007; valaddr_reg:x3; val_offset:36795*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36795*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12266:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x3f999999; valaddr_reg:x3; val_offset:36798*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36798*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12267:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:36801*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36801*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12268:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:36804*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36804*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12269:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:36807*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36807*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12270:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:36810*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36810*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12271:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:36813*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36813*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12272:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:36816*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36816*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12273:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:36819*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36819*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12274:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:36822*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36822*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12275:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:36825*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36825*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12276:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:36828*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36828*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12277:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:36831*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36831*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12278:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:36834*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36834*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12279:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x41000000; valaddr_reg:x3; val_offset:36837*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36837*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12280:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x41000001; valaddr_reg:x3; val_offset:36840*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36840*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12281:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x41000003; valaddr_reg:x3; val_offset:36843*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36843*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12282:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x41000007; valaddr_reg:x3; val_offset:36846*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36846*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12283:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x4100000f; valaddr_reg:x3; val_offset:36849*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36849*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12284:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x4100001f; valaddr_reg:x3; val_offset:36852*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36852*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12285:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x4100003f; valaddr_reg:x3; val_offset:36855*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36855*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12286:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x4100007f; valaddr_reg:x3; val_offset:36858*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36858*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12287:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x410000ff; valaddr_reg:x3; val_offset:36861*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36861*0 + 3*95*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4146069503,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4148166655,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4148166656,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4150263808,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4151312384,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4151836672,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152098816,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152229888,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152295424,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152328192,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152344576,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152352768,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152356864,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152358912,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152359936,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152360448,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152360704,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152360832,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152360896,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152360928,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152360944,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152360952,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152360956,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152360958,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4152360959,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2121864381,32,FLEN)
NAN_BOXED(3229847098,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492416,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492417,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492419,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492423,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492431,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492447,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492479,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492543,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492671,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492927,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226493439,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226494463,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226496511,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226500607,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226508799,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226525183,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226557951,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226623487,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226754559,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(227016703,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(227540991,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(228589567,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(230686719,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(230686720,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(232783872,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(233832448,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234356736,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234618880,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234749952,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234815488,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234848256,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234864640,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234872832,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234876928,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234878976,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880000,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880512,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880768,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880896,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880960,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880992,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881008,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881016,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881020,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881022,32,FLEN)
NAN_BOXED(2121905586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881023,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090519040,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090519041,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090519043,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090519047,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090519055,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090519071,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090519103,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090519167,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090519295,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
