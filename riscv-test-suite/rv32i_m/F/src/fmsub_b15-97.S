
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_12288:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x410001ff; valaddr_reg:x3; val_offset:36864*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36864*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12289:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x410003ff; valaddr_reg:x3; val_offset:36867*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36867*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12290:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x410007ff; valaddr_reg:x3; val_offset:36870*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36870*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12291:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x41000fff; valaddr_reg:x3; val_offset:36873*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36873*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12292:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x41001fff; valaddr_reg:x3; val_offset:36876*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36876*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12293:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x41003fff; valaddr_reg:x3; val_offset:36879*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36879*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12294:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x41007fff; valaddr_reg:x3; val_offset:36882*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36882*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12295:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x4100ffff; valaddr_reg:x3; val_offset:36885*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36885*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12296:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x4101ffff; valaddr_reg:x3; val_offset:36888*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36888*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12297:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x4103ffff; valaddr_reg:x3; val_offset:36891*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36891*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12298:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x4107ffff; valaddr_reg:x3; val_offset:36894*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36894*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12299:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x410fffff; valaddr_reg:x3; val_offset:36897*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36897*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12300:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x411fffff; valaddr_reg:x3; val_offset:36900*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36900*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12301:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x413fffff; valaddr_reg:x3; val_offset:36903*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36903*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12302:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x41400000; valaddr_reg:x3; val_offset:36906*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36906*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12303:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x41600000; valaddr_reg:x3; val_offset:36909*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36909*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12304:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x41700000; valaddr_reg:x3; val_offset:36912*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36912*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12305:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x41780000; valaddr_reg:x3; val_offset:36915*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36915*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12306:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417c0000; valaddr_reg:x3; val_offset:36918*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36918*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12307:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417e0000; valaddr_reg:x3; val_offset:36921*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36921*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12308:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417f0000; valaddr_reg:x3; val_offset:36924*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36924*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12309:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417f8000; valaddr_reg:x3; val_offset:36927*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36927*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12310:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417fc000; valaddr_reg:x3; val_offset:36930*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36930*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12311:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417fe000; valaddr_reg:x3; val_offset:36933*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36933*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12312:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417ff000; valaddr_reg:x3; val_offset:36936*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36936*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12313:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417ff800; valaddr_reg:x3; val_offset:36939*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36939*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12314:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417ffc00; valaddr_reg:x3; val_offset:36942*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36942*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12315:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417ffe00; valaddr_reg:x3; val_offset:36945*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36945*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12316:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417fff00; valaddr_reg:x3; val_offset:36948*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36948*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12317:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417fff80; valaddr_reg:x3; val_offset:36951*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36951*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12318:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417fffc0; valaddr_reg:x3; val_offset:36954*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36954*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12319:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417fffe0; valaddr_reg:x3; val_offset:36957*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36957*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12320:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417ffff0; valaddr_reg:x3; val_offset:36960*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36960*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12321:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417ffff8; valaddr_reg:x3; val_offset:36963*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36963*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12322:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417ffffc; valaddr_reg:x3; val_offset:36966*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36966*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12323:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417ffffe; valaddr_reg:x3; val_offset:36969*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36969*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12324:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bdfb7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0218cb and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bdfb7; op2val:0x8218cb;
op3val:0x417fffff; valaddr_reg:x3; val_offset:36972*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36972*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12325:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:36975*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36975*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12326:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:36978*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36978*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12327:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:36981*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36981*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12328:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:36984*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36984*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12329:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:36987*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36987*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12330:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:36990*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36990*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12331:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:36993*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36993*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12332:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7f; valaddr_reg:x3; val_offset:36996*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36996*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12333:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0xff; valaddr_reg:x3; val_offset:36999*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36999*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12334:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x1ff; valaddr_reg:x3; val_offset:37002*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37002*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12335:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x3ff; valaddr_reg:x3; val_offset:37005*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37005*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12336:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7ff; valaddr_reg:x3; val_offset:37008*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37008*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12337:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0xfff; valaddr_reg:x3; val_offset:37011*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37011*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12338:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x1fff; valaddr_reg:x3; val_offset:37014*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37014*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12339:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x3fff; valaddr_reg:x3; val_offset:37017*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37017*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12340:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7fff; valaddr_reg:x3; val_offset:37020*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37020*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12341:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0xffff; valaddr_reg:x3; val_offset:37023*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37023*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12342:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x1ffff; valaddr_reg:x3; val_offset:37026*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37026*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12343:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x3ffff; valaddr_reg:x3; val_offset:37029*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37029*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12344:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7ffff; valaddr_reg:x3; val_offset:37032*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37032*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12345:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0xfffff; valaddr_reg:x3; val_offset:37035*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37035*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12346:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:37038*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37038*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12347:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x1fffff; valaddr_reg:x3; val_offset:37041*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37041*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12348:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:37044*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37044*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12349:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:37047*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37047*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12350:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:37050*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37050*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12351:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:37053*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37053*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12352:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x3fffff; valaddr_reg:x3; val_offset:37056*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37056*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12353:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x400000; valaddr_reg:x3; val_offset:37059*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37059*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12354:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:37062*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37062*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12355:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:37065*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37065*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12356:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:37068*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37068*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12357:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x600000; valaddr_reg:x3; val_offset:37071*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37071*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12358:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:37074*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37074*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12359:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:37077*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37077*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12360:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x700000; valaddr_reg:x3; val_offset:37080*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37080*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12361:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x780000; valaddr_reg:x3; val_offset:37083*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37083*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12362:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7c0000; valaddr_reg:x3; val_offset:37086*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37086*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12363:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7e0000; valaddr_reg:x3; val_offset:37089*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37089*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12364:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7f0000; valaddr_reg:x3; val_offset:37092*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37092*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12365:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7f8000; valaddr_reg:x3; val_offset:37095*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37095*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12366:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7fc000; valaddr_reg:x3; val_offset:37098*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37098*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12367:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7fe000; valaddr_reg:x3; val_offset:37101*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37101*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12368:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7ff000; valaddr_reg:x3; val_offset:37104*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37104*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12369:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7ff800; valaddr_reg:x3; val_offset:37107*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37107*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12370:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7ffc00; valaddr_reg:x3; val_offset:37110*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37110*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12371:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7ffe00; valaddr_reg:x3; val_offset:37113*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37113*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12372:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7fff00; valaddr_reg:x3; val_offset:37116*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37116*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12373:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7fff80; valaddr_reg:x3; val_offset:37119*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37119*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12374:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7fffc0; valaddr_reg:x3; val_offset:37122*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37122*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12375:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7fffe0; valaddr_reg:x3; val_offset:37125*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37125*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12376:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7ffff0; valaddr_reg:x3; val_offset:37128*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37128*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12377:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:37131*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37131*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12378:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:37134*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37134*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12379:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:37137*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37137*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12380:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7cfd8d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7cfd8d; op2val:0x0;
op3val:0x7fffff; valaddr_reg:x3; val_offset:37140*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37140*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12381:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:37143*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37143*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12382:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:37146*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37146*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12383:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:37149*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37149*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12384:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:37152*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37152*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12385:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:37155*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37155*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12386:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:37158*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37158*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12387:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:37161*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37161*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12388:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:37164*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37164*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12389:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:37167*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37167*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12390:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:37170*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37170*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12391:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:37173*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37173*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12392:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:37176*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37176*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12393:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:37179*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37179*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12394:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:37182*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37182*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12395:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:37185*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37185*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12396:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:37188*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37188*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12397:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe800000; valaddr_reg:x3; val_offset:37191*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37191*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12398:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe800001; valaddr_reg:x3; val_offset:37194*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37194*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12399:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe800003; valaddr_reg:x3; val_offset:37197*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37197*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12400:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe800007; valaddr_reg:x3; val_offset:37200*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37200*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12401:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe80000f; valaddr_reg:x3; val_offset:37203*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37203*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12402:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe80001f; valaddr_reg:x3; val_offset:37206*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37206*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12403:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe80003f; valaddr_reg:x3; val_offset:37209*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37209*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12404:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe80007f; valaddr_reg:x3; val_offset:37212*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37212*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12405:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe8000ff; valaddr_reg:x3; val_offset:37215*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37215*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12406:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe8001ff; valaddr_reg:x3; val_offset:37218*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37218*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12407:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe8003ff; valaddr_reg:x3; val_offset:37221*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37221*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12408:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe8007ff; valaddr_reg:x3; val_offset:37224*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37224*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12409:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe800fff; valaddr_reg:x3; val_offset:37227*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37227*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12410:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe801fff; valaddr_reg:x3; val_offset:37230*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37230*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12411:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe803fff; valaddr_reg:x3; val_offset:37233*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37233*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12412:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe807fff; valaddr_reg:x3; val_offset:37236*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37236*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12413:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe80ffff; valaddr_reg:x3; val_offset:37239*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37239*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12414:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe81ffff; valaddr_reg:x3; val_offset:37242*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37242*0 + 3*96*FLEN/8, x4, x1, x2)

inst_12415:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe83ffff; valaddr_reg:x3; val_offset:37245*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37245*0 + 3*96*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090519551,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090520063,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090521087,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090523135,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090527231,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090535423,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090551807,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090584575,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090650111,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1090781183,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1091043327,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1091567615,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1092616191,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1094713343,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1094713344,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1096810496,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1097859072,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098383360,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098645504,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098776576,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098842112,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098874880,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098891264,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098899456,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098903552,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098905600,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098906624,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098907136,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098907392,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098907520,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098907584,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098907616,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098907632,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098907640,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098907644,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098907646,32,FLEN)
NAN_BOXED(2122047415,32,FLEN)
NAN_BOXED(8526027,32,FLEN)
NAN_BOXED(1098907647,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(127,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(511,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1023,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2047,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4095,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8191,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16383,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32767,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65535,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(131071,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262143,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(524287,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1048575,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194303,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194304,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6291456,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7340032,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7864320,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8126464,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8257536,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8323072,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8355840,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8372224,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8380416,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8384512,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8386560,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8387584,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388096,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388352,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388480,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388544,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388576,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388592,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2122120589,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269632,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269633,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269635,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269639,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269647,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269663,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269695,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269759,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269887,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243270143,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243270655,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243271679,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243273727,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243277823,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243286015,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243302399,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243335167,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243400703,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243531775,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
