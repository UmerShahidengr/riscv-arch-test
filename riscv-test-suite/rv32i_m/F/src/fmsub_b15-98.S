
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_12416:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe87ffff; valaddr_reg:x3; val_offset:37248*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37248*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12417:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe8fffff; valaddr_reg:x3; val_offset:37251*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37251*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12418:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xe9fffff; valaddr_reg:x3; val_offset:37254*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37254*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12419:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xebfffff; valaddr_reg:x3; val_offset:37257*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37257*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12420:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xec00000; valaddr_reg:x3; val_offset:37260*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37260*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12421:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xee00000; valaddr_reg:x3; val_offset:37263*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37263*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12422:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xef00000; valaddr_reg:x3; val_offset:37266*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37266*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12423:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xef80000; valaddr_reg:x3; val_offset:37269*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37269*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12424:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xefc0000; valaddr_reg:x3; val_offset:37272*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37272*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12425:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xefe0000; valaddr_reg:x3; val_offset:37275*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37275*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12426:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xeff0000; valaddr_reg:x3; val_offset:37278*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37278*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12427:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xeff8000; valaddr_reg:x3; val_offset:37281*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37281*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12428:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xeffc000; valaddr_reg:x3; val_offset:37284*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37284*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12429:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xeffe000; valaddr_reg:x3; val_offset:37287*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37287*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12430:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xefff000; valaddr_reg:x3; val_offset:37290*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37290*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12431:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xefff800; valaddr_reg:x3; val_offset:37293*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37293*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12432:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xefffc00; valaddr_reg:x3; val_offset:37296*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37296*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12433:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xefffe00; valaddr_reg:x3; val_offset:37299*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37299*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12434:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xeffff00; valaddr_reg:x3; val_offset:37302*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37302*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12435:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xeffff80; valaddr_reg:x3; val_offset:37305*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37305*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12436:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xeffffc0; valaddr_reg:x3; val_offset:37308*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37308*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12437:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xeffffe0; valaddr_reg:x3; val_offset:37311*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37311*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12438:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xefffff0; valaddr_reg:x3; val_offset:37314*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37314*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12439:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xefffff8; valaddr_reg:x3; val_offset:37317*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37317*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12440:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xefffffc; valaddr_reg:x3; val_offset:37320*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37320*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12441:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xefffffe; valaddr_reg:x3; val_offset:37323*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37323*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12442:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7dffab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7dffab; op2val:0x0;
op3val:0xeffffff; valaddr_reg:x3; val_offset:37326*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37326*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12443:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:37329*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37329*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12444:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:37332*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37332*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12445:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:37335*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37335*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12446:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:37338*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37338*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12447:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:37341*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37341*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12448:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:37344*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37344*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12449:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:37347*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37347*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12450:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:37350*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37350*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12451:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:37353*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37353*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12452:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:37356*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37356*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12453:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:37359*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37359*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12454:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:37362*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37362*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12455:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:37365*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37365*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12456:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:37368*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37368*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12457:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:37371*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37371*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12458:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:37374*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37374*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12459:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a000000; valaddr_reg:x3; val_offset:37377*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37377*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12460:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a000001; valaddr_reg:x3; val_offset:37380*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37380*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12461:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a000003; valaddr_reg:x3; val_offset:37383*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37383*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12462:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a000007; valaddr_reg:x3; val_offset:37386*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37386*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12463:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a00000f; valaddr_reg:x3; val_offset:37389*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37389*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12464:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a00001f; valaddr_reg:x3; val_offset:37392*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37392*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12465:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a00003f; valaddr_reg:x3; val_offset:37395*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37395*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12466:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a00007f; valaddr_reg:x3; val_offset:37398*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37398*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12467:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a0000ff; valaddr_reg:x3; val_offset:37401*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37401*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12468:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a0001ff; valaddr_reg:x3; val_offset:37404*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37404*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12469:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a0003ff; valaddr_reg:x3; val_offset:37407*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37407*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12470:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a0007ff; valaddr_reg:x3; val_offset:37410*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37410*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12471:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a000fff; valaddr_reg:x3; val_offset:37413*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37413*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12472:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a001fff; valaddr_reg:x3; val_offset:37416*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37416*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12473:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a003fff; valaddr_reg:x3; val_offset:37419*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37419*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12474:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a007fff; valaddr_reg:x3; val_offset:37422*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37422*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12475:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a00ffff; valaddr_reg:x3; val_offset:37425*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37425*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12476:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a01ffff; valaddr_reg:x3; val_offset:37428*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37428*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12477:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a03ffff; valaddr_reg:x3; val_offset:37431*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37431*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12478:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a07ffff; valaddr_reg:x3; val_offset:37434*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37434*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12479:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a0fffff; valaddr_reg:x3; val_offset:37437*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37437*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12480:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a1fffff; valaddr_reg:x3; val_offset:37440*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37440*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12481:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a3fffff; valaddr_reg:x3; val_offset:37443*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37443*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12482:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a400000; valaddr_reg:x3; val_offset:37446*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37446*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12483:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a600000; valaddr_reg:x3; val_offset:37449*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37449*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12484:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a700000; valaddr_reg:x3; val_offset:37452*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37452*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12485:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a780000; valaddr_reg:x3; val_offset:37455*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37455*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12486:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7c0000; valaddr_reg:x3; val_offset:37458*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37458*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12487:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7e0000; valaddr_reg:x3; val_offset:37461*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37461*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12488:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7f0000; valaddr_reg:x3; val_offset:37464*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37464*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12489:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7f8000; valaddr_reg:x3; val_offset:37467*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37467*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12490:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7fc000; valaddr_reg:x3; val_offset:37470*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37470*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12491:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7fe000; valaddr_reg:x3; val_offset:37473*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37473*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12492:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7ff000; valaddr_reg:x3; val_offset:37476*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37476*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12493:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7ff800; valaddr_reg:x3; val_offset:37479*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37479*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12494:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7ffc00; valaddr_reg:x3; val_offset:37482*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37482*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12495:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7ffe00; valaddr_reg:x3; val_offset:37485*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37485*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12496:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7fff00; valaddr_reg:x3; val_offset:37488*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37488*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12497:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7fff80; valaddr_reg:x3; val_offset:37491*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37491*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12498:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7fffc0; valaddr_reg:x3; val_offset:37494*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37494*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12499:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7fffe0; valaddr_reg:x3; val_offset:37497*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37497*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12500:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7ffff0; valaddr_reg:x3; val_offset:37500*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37500*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12501:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7ffff8; valaddr_reg:x3; val_offset:37503*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37503*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12502:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7ffffc; valaddr_reg:x3; val_offset:37506*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37506*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12503:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7ffffe; valaddr_reg:x3; val_offset:37509*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37509*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12504:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e766c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e766c; op2val:0x80000000;
op3val:0x8a7fffff; valaddr_reg:x3; val_offset:37512*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37512*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb000000; valaddr_reg:x3; val_offset:37515*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37515*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb000001; valaddr_reg:x3; val_offset:37518*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37518*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb000003; valaddr_reg:x3; val_offset:37521*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37521*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb000007; valaddr_reg:x3; val_offset:37524*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37524*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb00000f; valaddr_reg:x3; val_offset:37527*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37527*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb00001f; valaddr_reg:x3; val_offset:37530*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37530*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb00003f; valaddr_reg:x3; val_offset:37533*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37533*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb00007f; valaddr_reg:x3; val_offset:37536*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37536*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb0000ff; valaddr_reg:x3; val_offset:37539*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37539*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb0001ff; valaddr_reg:x3; val_offset:37542*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37542*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb0003ff; valaddr_reg:x3; val_offset:37545*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37545*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb0007ff; valaddr_reg:x3; val_offset:37548*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37548*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb000fff; valaddr_reg:x3; val_offset:37551*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37551*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb001fff; valaddr_reg:x3; val_offset:37554*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37554*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb003fff; valaddr_reg:x3; val_offset:37557*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37557*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb007fff; valaddr_reg:x3; val_offset:37560*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37560*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb00ffff; valaddr_reg:x3; val_offset:37563*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37563*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb01ffff; valaddr_reg:x3; val_offset:37566*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37566*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb03ffff; valaddr_reg:x3; val_offset:37569*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37569*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb07ffff; valaddr_reg:x3; val_offset:37572*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37572*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb0fffff; valaddr_reg:x3; val_offset:37575*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37575*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb1fffff; valaddr_reg:x3; val_offset:37578*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37578*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb3fffff; valaddr_reg:x3; val_offset:37581*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37581*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb400000; valaddr_reg:x3; val_offset:37584*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37584*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb600000; valaddr_reg:x3; val_offset:37587*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37587*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb700000; valaddr_reg:x3; val_offset:37590*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37590*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb780000; valaddr_reg:x3; val_offset:37593*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37593*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7c0000; valaddr_reg:x3; val_offset:37596*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37596*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7e0000; valaddr_reg:x3; val_offset:37599*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37599*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7f0000; valaddr_reg:x3; val_offset:37602*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37602*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7f8000; valaddr_reg:x3; val_offset:37605*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37605*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7fc000; valaddr_reg:x3; val_offset:37608*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37608*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7fe000; valaddr_reg:x3; val_offset:37611*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37611*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7ff000; valaddr_reg:x3; val_offset:37614*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37614*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7ff800; valaddr_reg:x3; val_offset:37617*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37617*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7ffc00; valaddr_reg:x3; val_offset:37620*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37620*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7ffe00; valaddr_reg:x3; val_offset:37623*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37623*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7fff00; valaddr_reg:x3; val_offset:37626*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37626*0 + 3*97*FLEN/8, x4, x1, x2)

inst_12543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7fff80; valaddr_reg:x3; val_offset:37629*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37629*0 + 3*97*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243793919,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(244318207,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(245366783,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(247463935,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(247463936,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(249561088,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(250609664,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251133952,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251396096,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251527168,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251592704,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251625472,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251641856,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251650048,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251654144,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251656192,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657216,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657728,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657984,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658112,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658176,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658208,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658224,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658232,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658236,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658238,32,FLEN)
NAN_BOXED(2122186667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658239,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255808,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255809,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255811,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255815,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255823,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255839,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255871,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255935,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256063,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256319,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256831,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315257855,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315259903,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315263999,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315272191,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315288575,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315321343,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315386879,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315517951,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315780095,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2316304383,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2317352959,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2319450111,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2319450112,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2321547264,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2322595840,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323120128,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323382272,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323513344,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323578880,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323611648,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323628032,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323636224,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323640320,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323642368,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323643392,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323643904,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644160,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644288,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644352,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644384,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644400,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644408,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644412,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644414,32,FLEN)
NAN_BOXED(2122217068,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644415,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137339392,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137339393,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137339395,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137339399,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137339407,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137339423,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137339455,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137339519,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137339647,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137339903,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137340415,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137341439,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137343487,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137347583,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137355775,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137372159,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137404927,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137470463,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137601535,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3137863679,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3138387967,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3139436543,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3141533695,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3141533696,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3143630848,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3144679424,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145203712,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145465856,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145596928,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145662464,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145695232,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145711616,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145719808,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145723904,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145725952,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145726976,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145727488,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145727744,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145727872,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
