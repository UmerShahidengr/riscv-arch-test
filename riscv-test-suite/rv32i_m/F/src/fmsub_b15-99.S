
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_12544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7fffc0; valaddr_reg:x3; val_offset:37632*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37632*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7fffe0; valaddr_reg:x3; val_offset:37635*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37635*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7ffff0; valaddr_reg:x3; val_offset:37638*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37638*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7ffff8; valaddr_reg:x3; val_offset:37641*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37641*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7ffffc; valaddr_reg:x3; val_offset:37644*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37644*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7ffffe; valaddr_reg:x3; val_offset:37647*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37647*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbb7fffff; valaddr_reg:x3; val_offset:37650*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37650*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbf800001; valaddr_reg:x3; val_offset:37653*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37653*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbf800003; valaddr_reg:x3; val_offset:37656*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37656*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbf800007; valaddr_reg:x3; val_offset:37659*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37659*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbf999999; valaddr_reg:x3; val_offset:37662*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37662*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:37665*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37665*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:37668*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37668*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:37671*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37671*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:37674*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37674*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:37677*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37677*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:37680*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37680*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:37683*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37683*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:37686*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37686*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:37689*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37689*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:37692*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37692*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:37695*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37695*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007108 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8f5a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e807108; op2val:0x807f8f5a;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:37698*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37698*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f800000; valaddr_reg:x3; val_offset:37701*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37701*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f800001; valaddr_reg:x3; val_offset:37704*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37704*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f800003; valaddr_reg:x3; val_offset:37707*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37707*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f800007; valaddr_reg:x3; val_offset:37710*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37710*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f80000f; valaddr_reg:x3; val_offset:37713*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37713*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f80001f; valaddr_reg:x3; val_offset:37716*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37716*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f80003f; valaddr_reg:x3; val_offset:37719*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37719*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f80007f; valaddr_reg:x3; val_offset:37722*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37722*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f8000ff; valaddr_reg:x3; val_offset:37725*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37725*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f8001ff; valaddr_reg:x3; val_offset:37728*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37728*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f8003ff; valaddr_reg:x3; val_offset:37731*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37731*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f8007ff; valaddr_reg:x3; val_offset:37734*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37734*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f800fff; valaddr_reg:x3; val_offset:37737*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37737*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f801fff; valaddr_reg:x3; val_offset:37740*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37740*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f803fff; valaddr_reg:x3; val_offset:37743*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37743*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f807fff; valaddr_reg:x3; val_offset:37746*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37746*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f80ffff; valaddr_reg:x3; val_offset:37749*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37749*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f81ffff; valaddr_reg:x3; val_offset:37752*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37752*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f83ffff; valaddr_reg:x3; val_offset:37755*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37755*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f87ffff; valaddr_reg:x3; val_offset:37758*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37758*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f8fffff; valaddr_reg:x3; val_offset:37761*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37761*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5f9fffff; valaddr_reg:x3; val_offset:37764*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37764*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5fbfffff; valaddr_reg:x3; val_offset:37767*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37767*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5fc00000; valaddr_reg:x3; val_offset:37770*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37770*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5fe00000; valaddr_reg:x3; val_offset:37773*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37773*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5ff00000; valaddr_reg:x3; val_offset:37776*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37776*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5ff80000; valaddr_reg:x3; val_offset:37779*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37779*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5ffc0000; valaddr_reg:x3; val_offset:37782*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37782*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5ffe0000; valaddr_reg:x3; val_offset:37785*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37785*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5fff0000; valaddr_reg:x3; val_offset:37788*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37788*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5fff8000; valaddr_reg:x3; val_offset:37791*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37791*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5fffc000; valaddr_reg:x3; val_offset:37794*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37794*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5fffe000; valaddr_reg:x3; val_offset:37797*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37797*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5ffff000; valaddr_reg:x3; val_offset:37800*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37800*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5ffff800; valaddr_reg:x3; val_offset:37803*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37803*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5ffffc00; valaddr_reg:x3; val_offset:37806*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37806*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5ffffe00; valaddr_reg:x3; val_offset:37809*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37809*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5fffff00; valaddr_reg:x3; val_offset:37812*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37812*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5fffff80; valaddr_reg:x3; val_offset:37815*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37815*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5fffffc0; valaddr_reg:x3; val_offset:37818*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37818*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5fffffe0; valaddr_reg:x3; val_offset:37821*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37821*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5ffffff0; valaddr_reg:x3; val_offset:37824*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37824*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5ffffff8; valaddr_reg:x3; val_offset:37827*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37827*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5ffffffc; valaddr_reg:x3; val_offset:37830*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37830*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5ffffffe; valaddr_reg:x3; val_offset:37833*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37833*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x5fffffff; valaddr_reg:x3; val_offset:37836*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37836*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x7f000001; valaddr_reg:x3; val_offset:37839*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37839*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x7f000003; valaddr_reg:x3; val_offset:37842*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37842*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x7f000007; valaddr_reg:x3; val_offset:37845*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37845*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x7f199999; valaddr_reg:x3; val_offset:37848*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37848*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x7f249249; valaddr_reg:x3; val_offset:37851*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37851*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x7f333333; valaddr_reg:x3; val_offset:37854*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37854*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:37857*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37857*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:37860*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37860*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x7f444444; valaddr_reg:x3; val_offset:37863*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37863*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:37866*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37866*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:37869*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37869*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x7f666666; valaddr_reg:x3; val_offset:37872*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37872*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:37875*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37875*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:37878*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37878*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:37881*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37881*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ceda and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c6f2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81ceda; op2val:0x407c6f2e;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:37884*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37884*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe2000000; valaddr_reg:x3; val_offset:37887*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37887*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe2000001; valaddr_reg:x3; val_offset:37890*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37890*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe2000003; valaddr_reg:x3; val_offset:37893*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37893*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe2000007; valaddr_reg:x3; val_offset:37896*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37896*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe200000f; valaddr_reg:x3; val_offset:37899*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37899*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe200001f; valaddr_reg:x3; val_offset:37902*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37902*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe200003f; valaddr_reg:x3; val_offset:37905*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37905*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe200007f; valaddr_reg:x3; val_offset:37908*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37908*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe20000ff; valaddr_reg:x3; val_offset:37911*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37911*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe20001ff; valaddr_reg:x3; val_offset:37914*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37914*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe20003ff; valaddr_reg:x3; val_offset:37917*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37917*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe20007ff; valaddr_reg:x3; val_offset:37920*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37920*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe2000fff; valaddr_reg:x3; val_offset:37923*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37923*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe2001fff; valaddr_reg:x3; val_offset:37926*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37926*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe2003fff; valaddr_reg:x3; val_offset:37929*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37929*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe2007fff; valaddr_reg:x3; val_offset:37932*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37932*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe200ffff; valaddr_reg:x3; val_offset:37935*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37935*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe201ffff; valaddr_reg:x3; val_offset:37938*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37938*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe203ffff; valaddr_reg:x3; val_offset:37941*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37941*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe207ffff; valaddr_reg:x3; val_offset:37944*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37944*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe20fffff; valaddr_reg:x3; val_offset:37947*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37947*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe21fffff; valaddr_reg:x3; val_offset:37950*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37950*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe23fffff; valaddr_reg:x3; val_offset:37953*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37953*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe2400000; valaddr_reg:x3; val_offset:37956*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37956*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe2600000; valaddr_reg:x3; val_offset:37959*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37959*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe2700000; valaddr_reg:x3; val_offset:37962*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37962*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe2780000; valaddr_reg:x3; val_offset:37965*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37965*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe27c0000; valaddr_reg:x3; val_offset:37968*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37968*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe27e0000; valaddr_reg:x3; val_offset:37971*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37971*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe27f0000; valaddr_reg:x3; val_offset:37974*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37974*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe27f8000; valaddr_reg:x3; val_offset:37977*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37977*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe27fc000; valaddr_reg:x3; val_offset:37980*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37980*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe27fe000; valaddr_reg:x3; val_offset:37983*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37983*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe27ff000; valaddr_reg:x3; val_offset:37986*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37986*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe27ff800; valaddr_reg:x3; val_offset:37989*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37989*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe27ffc00; valaddr_reg:x3; val_offset:37992*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37992*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe27ffe00; valaddr_reg:x3; val_offset:37995*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37995*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe27fff00; valaddr_reg:x3; val_offset:37998*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 37998*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe27fff80; valaddr_reg:x3; val_offset:38001*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38001*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe27fffc0; valaddr_reg:x3; val_offset:38004*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38004*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe27fffe0; valaddr_reg:x3; val_offset:38007*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38007*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe27ffff0; valaddr_reg:x3; val_offset:38010*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38010*0 + 3*98*FLEN/8, x4, x1, x2)

inst_12671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ce1a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7a8296 and fs3 == 1 and fe3 == 0xc4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82ce1a; op2val:0xc07a8296;
op3val:0xe27ffff8; valaddr_reg:x3; val_offset:38013*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38013*0 + 3*98*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145727936,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145727968,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145727984,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145727992,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145727996,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145727998,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3145727999,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2122346760,32,FLEN)
NAN_BOXED(2155843418,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602224128,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602224129,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602224131,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602224135,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602224143,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602224159,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602224191,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602224255,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602224383,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602224639,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602225151,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602226175,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602228223,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602232319,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602240511,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602256895,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602289663,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602355199,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602486271,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1602748415,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1603272703,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1604321279,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1606418431,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1606418432,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1608515584,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1609564160,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610088448,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610350592,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610481664,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610547200,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610579968,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610596352,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610604544,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610608640,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610610688,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610611712,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610612224,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610612480,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610612608,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610612672,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610612704,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610612720,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610612728,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610612732,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610612734,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(1610612735,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2122436314,32,FLEN)
NAN_BOXED(1081896750,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791650816,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791650817,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791650819,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791650823,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791650831,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791650847,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791650879,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791650943,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791651071,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791651327,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791651839,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791652863,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791654911,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791659007,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791667199,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791683583,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791716351,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791781887,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3791912959,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3792175103,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3792699391,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3793747967,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3795845119,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3795845120,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3797942272,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3798990848,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3799515136,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3799777280,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3799908352,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3799973888,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3800006656,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3800023040,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3800031232,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3800035328,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3800037376,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3800038400,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3800038912,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3800039168,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3800039296,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3800039360,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3800039392,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3800039408,32,FLEN)
NAN_BOXED(2122501658,32,FLEN)
NAN_BOXED(3229254294,32,FLEN)
NAN_BOXED(3800039416,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
