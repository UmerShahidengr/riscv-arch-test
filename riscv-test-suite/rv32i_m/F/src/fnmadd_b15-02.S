
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_128:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7200000f; valaddr_reg:x3; val_offset:384*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 384*0 + 3*1*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7200001f; valaddr_reg:x3; val_offset:387*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 387*0 + 3*1*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7200003f; valaddr_reg:x3; val_offset:390*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 390*0 + 3*1*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7200007f; valaddr_reg:x3; val_offset:393*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 393*0 + 3*1*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x720000ff; valaddr_reg:x3; val_offset:396*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 396*0 + 3*1*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x720001ff; valaddr_reg:x3; val_offset:399*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 399*0 + 3*1*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x720003ff; valaddr_reg:x3; val_offset:402*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 402*0 + 3*1*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x720007ff; valaddr_reg:x3; val_offset:405*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 405*0 + 3*1*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x72000fff; valaddr_reg:x3; val_offset:408*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 408*0 + 3*1*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x72001fff; valaddr_reg:x3; val_offset:411*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 411*0 + 3*1*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x72003fff; valaddr_reg:x3; val_offset:414*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 414*0 + 3*1*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x72007fff; valaddr_reg:x3; val_offset:417*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 417*0 + 3*1*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7200ffff; valaddr_reg:x3; val_offset:420*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 420*0 + 3*1*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7201ffff; valaddr_reg:x3; val_offset:423*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 423*0 + 3*1*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7203ffff; valaddr_reg:x3; val_offset:426*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 426*0 + 3*1*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7207ffff; valaddr_reg:x3; val_offset:429*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 429*0 + 3*1*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x720fffff; valaddr_reg:x3; val_offset:432*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 432*0 + 3*1*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x721fffff; valaddr_reg:x3; val_offset:435*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 435*0 + 3*1*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x723fffff; valaddr_reg:x3; val_offset:438*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 438*0 + 3*1*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x72400000; valaddr_reg:x3; val_offset:441*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 441*0 + 3*1*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x72600000; valaddr_reg:x3; val_offset:444*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 444*0 + 3*1*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x72700000; valaddr_reg:x3; val_offset:447*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 447*0 + 3*1*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x72780000; valaddr_reg:x3; val_offset:450*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 450*0 + 3*1*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727c0000; valaddr_reg:x3; val_offset:453*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 453*0 + 3*1*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727e0000; valaddr_reg:x3; val_offset:456*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 456*0 + 3*1*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727f0000; valaddr_reg:x3; val_offset:459*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 459*0 + 3*1*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727f8000; valaddr_reg:x3; val_offset:462*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 462*0 + 3*1*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727fc000; valaddr_reg:x3; val_offset:465*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 465*0 + 3*1*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727fe000; valaddr_reg:x3; val_offset:468*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 468*0 + 3*1*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727ff000; valaddr_reg:x3; val_offset:471*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 471*0 + 3*1*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727ff800; valaddr_reg:x3; val_offset:474*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 474*0 + 3*1*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727ffc00; valaddr_reg:x3; val_offset:477*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 477*0 + 3*1*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727ffe00; valaddr_reg:x3; val_offset:480*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 480*0 + 3*1*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727fff00; valaddr_reg:x3; val_offset:483*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 483*0 + 3*1*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727fff80; valaddr_reg:x3; val_offset:486*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 486*0 + 3*1*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727fffc0; valaddr_reg:x3; val_offset:489*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 489*0 + 3*1*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727fffe0; valaddr_reg:x3; val_offset:492*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 492*0 + 3*1*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727ffff0; valaddr_reg:x3; val_offset:495*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 495*0 + 3*1*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727ffff8; valaddr_reg:x3; val_offset:498*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 498*0 + 3*1*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727ffffc; valaddr_reg:x3; val_offset:501*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 501*0 + 3*1*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727ffffe; valaddr_reg:x3; val_offset:504*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 504*0 + 3*1*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x727fffff; valaddr_reg:x3; val_offset:507*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 507*0 + 3*1*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7f000001; valaddr_reg:x3; val_offset:510*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 510*0 + 3*1*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7f000003; valaddr_reg:x3; val_offset:513*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 513*0 + 3*1*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7f000007; valaddr_reg:x3; val_offset:516*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 516*0 + 3*1*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7f199999; valaddr_reg:x3; val_offset:519*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 519*0 + 3*1*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7f249249; valaddr_reg:x3; val_offset:522*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 522*0 + 3*1*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7f333333; valaddr_reg:x3; val_offset:525*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 525*0 + 3*1*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:528*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 528*0 + 3*1*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:531*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 531*0 + 3*1*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7f444444; valaddr_reg:x3; val_offset:534*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 534*0 + 3*1*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:537*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 537*0 + 3*1*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:540*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 540*0 + 3*1*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7f666666; valaddr_reg:x3; val_offset:543*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 543*0 + 3*1*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:546*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 546*0 + 3*1*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:549*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 549*0 + 3*1*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:552*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 552*0 + 3*1*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:555*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 555*0 + 3*1*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69800000; valaddr_reg:x3; val_offset:558*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 558*0 + 3*1*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69800001; valaddr_reg:x3; val_offset:561*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 561*0 + 3*1*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69800003; valaddr_reg:x3; val_offset:564*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 564*0 + 3*1*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69800007; valaddr_reg:x3; val_offset:567*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 567*0 + 3*1*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x6980000f; valaddr_reg:x3; val_offset:570*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 570*0 + 3*1*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x6980001f; valaddr_reg:x3; val_offset:573*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 573*0 + 3*1*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x6980003f; valaddr_reg:x3; val_offset:576*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 576*0 + 3*1*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x6980007f; valaddr_reg:x3; val_offset:579*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 579*0 + 3*1*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x698000ff; valaddr_reg:x3; val_offset:582*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 582*0 + 3*1*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x698001ff; valaddr_reg:x3; val_offset:585*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 585*0 + 3*1*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x698003ff; valaddr_reg:x3; val_offset:588*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 588*0 + 3*1*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x698007ff; valaddr_reg:x3; val_offset:591*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 591*0 + 3*1*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69800fff; valaddr_reg:x3; val_offset:594*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 594*0 + 3*1*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69801fff; valaddr_reg:x3; val_offset:597*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 597*0 + 3*1*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69803fff; valaddr_reg:x3; val_offset:600*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 600*0 + 3*1*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69807fff; valaddr_reg:x3; val_offset:603*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 603*0 + 3*1*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x6980ffff; valaddr_reg:x3; val_offset:606*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 606*0 + 3*1*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x6981ffff; valaddr_reg:x3; val_offset:609*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 609*0 + 3*1*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x6983ffff; valaddr_reg:x3; val_offset:612*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 612*0 + 3*1*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x6987ffff; valaddr_reg:x3; val_offset:615*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 615*0 + 3*1*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x698fffff; valaddr_reg:x3; val_offset:618*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 618*0 + 3*1*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x699fffff; valaddr_reg:x3; val_offset:621*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 621*0 + 3*1*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69bfffff; valaddr_reg:x3; val_offset:624*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 624*0 + 3*1*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69c00000; valaddr_reg:x3; val_offset:627*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 627*0 + 3*1*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69e00000; valaddr_reg:x3; val_offset:630*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 630*0 + 3*1*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69f00000; valaddr_reg:x3; val_offset:633*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 633*0 + 3*1*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69f80000; valaddr_reg:x3; val_offset:636*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 636*0 + 3*1*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69fc0000; valaddr_reg:x3; val_offset:639*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 639*0 + 3*1*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69fe0000; valaddr_reg:x3; val_offset:642*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 642*0 + 3*1*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69ff0000; valaddr_reg:x3; val_offset:645*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 645*0 + 3*1*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69ff8000; valaddr_reg:x3; val_offset:648*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 648*0 + 3*1*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69ffc000; valaddr_reg:x3; val_offset:651*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 651*0 + 3*1*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69ffe000; valaddr_reg:x3; val_offset:654*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 654*0 + 3*1*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69fff000; valaddr_reg:x3; val_offset:657*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 657*0 + 3*1*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69fff800; valaddr_reg:x3; val_offset:660*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 660*0 + 3*1*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69fffc00; valaddr_reg:x3; val_offset:663*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 663*0 + 3*1*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69fffe00; valaddr_reg:x3; val_offset:666*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 666*0 + 3*1*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69ffff00; valaddr_reg:x3; val_offset:669*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 669*0 + 3*1*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69ffff80; valaddr_reg:x3; val_offset:672*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 672*0 + 3*1*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69ffffc0; valaddr_reg:x3; val_offset:675*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 675*0 + 3*1*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69ffffe0; valaddr_reg:x3; val_offset:678*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 678*0 + 3*1*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69fffff0; valaddr_reg:x3; val_offset:681*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 681*0 + 3*1*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69fffff8; valaddr_reg:x3; val_offset:684*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 684*0 + 3*1*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69fffffc; valaddr_reg:x3; val_offset:687*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 687*0 + 3*1*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69fffffe; valaddr_reg:x3; val_offset:690*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 690*0 + 3*1*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x69ffffff; valaddr_reg:x3; val_offset:693*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 693*0 + 3*1*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x7f000001; valaddr_reg:x3; val_offset:696*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 696*0 + 3*1*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x7f000003; valaddr_reg:x3; val_offset:699*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 699*0 + 3*1*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x7f000007; valaddr_reg:x3; val_offset:702*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 702*0 + 3*1*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x7f199999; valaddr_reg:x3; val_offset:705*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 705*0 + 3*1*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x7f249249; valaddr_reg:x3; val_offset:708*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 708*0 + 3*1*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x7f333333; valaddr_reg:x3; val_offset:711*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 711*0 + 3*1*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:714*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 714*0 + 3*1*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:717*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 717*0 + 3*1*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x7f444444; valaddr_reg:x3; val_offset:720*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 720*0 + 3*1*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:723*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 723*0 + 3*1*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:726*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 726*0 + 3*1*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x7f666666; valaddr_reg:x3; val_offset:729*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 729*0 + 3*1*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:732*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 732*0 + 3*1*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:735*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 735*0 + 3*1*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:738*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 738*0 + 3*1*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x3e7f0f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2c0388 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b3e7f0f; op2val:0x43ac0388;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:741*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 741*0 + 3*1*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:744*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 744*0 + 3*1*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:747*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 747*0 + 3*1*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:750*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 750*0 + 3*1*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:753*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 753*0 + 3*1*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:756*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 756*0 + 3*1*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:759*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 759*0 + 3*1*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:762*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 762*0 + 3*1*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:765*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 765*0 + 3*1*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912602639,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912602655,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912602687,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912602751,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912602879,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912603135,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912603647,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912604671,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912606719,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912610815,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912619007,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912635391,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912668159,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912733695,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912864767,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1913126911,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1913651199,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1914699775,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1916796927,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1916796928,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1918894080,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1919942656,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920466944,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920729088,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920860160,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920925696,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920958464,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920974848,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920983040,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920987136,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920989184,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920990208,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920990720,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920990976,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920991104,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920991168,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920991200,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920991216,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920991224,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920991228,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920991230,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1920991231,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1769996288,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1769996289,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1769996291,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1769996295,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1769996303,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1769996319,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1769996351,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1769996415,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1769996543,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1769996799,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1769997311,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1769998335,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1770000383,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1770004479,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1770012671,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1770029055,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1770061823,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1770127359,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1770258431,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1770520575,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1771044863,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1772093439,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1774190591,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1774190592,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1776287744,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1777336320,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1777860608,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778122752,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778253824,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778319360,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778352128,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778368512,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778376704,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778380800,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778382848,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778383872,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778384384,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778384640,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778384768,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778384832,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778384864,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778384880,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778384888,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778384892,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778384894,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(1778384895,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2067693327,32,FLEN)
NAN_BOXED(1135346568,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
