
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_256:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:768*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 768*0 + 3*2*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:771*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 771*0 + 3*2*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:774*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 774*0 + 3*2*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:777*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 777*0 + 3*2*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:780*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 780*0 + 3*2*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:783*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 783*0 + 3*2*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:786*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 786*0 + 3*2*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:789*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 789*0 + 3*2*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9800000; valaddr_reg:x3; val_offset:792*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 792*0 + 3*2*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9800001; valaddr_reg:x3; val_offset:795*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 795*0 + 3*2*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9800003; valaddr_reg:x3; val_offset:798*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 798*0 + 3*2*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9800007; valaddr_reg:x3; val_offset:801*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 801*0 + 3*2*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x980000f; valaddr_reg:x3; val_offset:804*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 804*0 + 3*2*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x980001f; valaddr_reg:x3; val_offset:807*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 807*0 + 3*2*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x980003f; valaddr_reg:x3; val_offset:810*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 810*0 + 3*2*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x980007f; valaddr_reg:x3; val_offset:813*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 813*0 + 3*2*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x98000ff; valaddr_reg:x3; val_offset:816*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 816*0 + 3*2*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x98001ff; valaddr_reg:x3; val_offset:819*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 819*0 + 3*2*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x98003ff; valaddr_reg:x3; val_offset:822*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 822*0 + 3*2*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x98007ff; valaddr_reg:x3; val_offset:825*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 825*0 + 3*2*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9800fff; valaddr_reg:x3; val_offset:828*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 828*0 + 3*2*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9801fff; valaddr_reg:x3; val_offset:831*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 831*0 + 3*2*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9803fff; valaddr_reg:x3; val_offset:834*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 834*0 + 3*2*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9807fff; valaddr_reg:x3; val_offset:837*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 837*0 + 3*2*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x980ffff; valaddr_reg:x3; val_offset:840*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 840*0 + 3*2*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x981ffff; valaddr_reg:x3; val_offset:843*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 843*0 + 3*2*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x983ffff; valaddr_reg:x3; val_offset:846*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 846*0 + 3*2*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x987ffff; valaddr_reg:x3; val_offset:849*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 849*0 + 3*2*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x98fffff; valaddr_reg:x3; val_offset:852*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 852*0 + 3*2*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x99fffff; valaddr_reg:x3; val_offset:855*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 855*0 + 3*2*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9bfffff; valaddr_reg:x3; val_offset:858*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 858*0 + 3*2*FLEN/8, x4, x1, x2)

inst_287:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9c00000; valaddr_reg:x3; val_offset:861*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 861*0 + 3*2*FLEN/8, x4, x1, x2)

inst_288:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9e00000; valaddr_reg:x3; val_offset:864*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 864*0 + 3*2*FLEN/8, x4, x1, x2)

inst_289:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9f00000; valaddr_reg:x3; val_offset:867*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 867*0 + 3*2*FLEN/8, x4, x1, x2)

inst_290:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9f80000; valaddr_reg:x3; val_offset:870*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 870*0 + 3*2*FLEN/8, x4, x1, x2)

inst_291:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9fc0000; valaddr_reg:x3; val_offset:873*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 873*0 + 3*2*FLEN/8, x4, x1, x2)

inst_292:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9fe0000; valaddr_reg:x3; val_offset:876*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 876*0 + 3*2*FLEN/8, x4, x1, x2)

inst_293:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9ff0000; valaddr_reg:x3; val_offset:879*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 879*0 + 3*2*FLEN/8, x4, x1, x2)

inst_294:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9ff8000; valaddr_reg:x3; val_offset:882*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 882*0 + 3*2*FLEN/8, x4, x1, x2)

inst_295:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9ffc000; valaddr_reg:x3; val_offset:885*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 885*0 + 3*2*FLEN/8, x4, x1, x2)

inst_296:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9ffe000; valaddr_reg:x3; val_offset:888*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 888*0 + 3*2*FLEN/8, x4, x1, x2)

inst_297:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9fff000; valaddr_reg:x3; val_offset:891*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 891*0 + 3*2*FLEN/8, x4, x1, x2)

inst_298:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9fff800; valaddr_reg:x3; val_offset:894*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 894*0 + 3*2*FLEN/8, x4, x1, x2)

inst_299:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9fffc00; valaddr_reg:x3; val_offset:897*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 897*0 + 3*2*FLEN/8, x4, x1, x2)

inst_300:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9fffe00; valaddr_reg:x3; val_offset:900*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 900*0 + 3*2*FLEN/8, x4, x1, x2)

inst_301:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9ffff00; valaddr_reg:x3; val_offset:903*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 903*0 + 3*2*FLEN/8, x4, x1, x2)

inst_302:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9ffff80; valaddr_reg:x3; val_offset:906*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 906*0 + 3*2*FLEN/8, x4, x1, x2)

inst_303:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9ffffc0; valaddr_reg:x3; val_offset:909*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 909*0 + 3*2*FLEN/8, x4, x1, x2)

inst_304:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9ffffe0; valaddr_reg:x3; val_offset:912*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 912*0 + 3*2*FLEN/8, x4, x1, x2)

inst_305:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9fffff0; valaddr_reg:x3; val_offset:915*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 915*0 + 3*2*FLEN/8, x4, x1, x2)

inst_306:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9fffff8; valaddr_reg:x3; val_offset:918*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 918*0 + 3*2*FLEN/8, x4, x1, x2)

inst_307:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9fffffc; valaddr_reg:x3; val_offset:921*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 921*0 + 3*2*FLEN/8, x4, x1, x2)

inst_308:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9fffffe; valaddr_reg:x3; val_offset:924*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 924*0 + 3*2*FLEN/8, x4, x1, x2)

inst_309:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x623876 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7be23876; op2val:0x0;
op3val:0x9ffffff; valaddr_reg:x3; val_offset:927*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 927*0 + 3*2*FLEN/8, x4, x1, x2)

inst_310:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:930*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 930*0 + 3*2*FLEN/8, x4, x1, x2)

inst_311:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:933*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 933*0 + 3*2*FLEN/8, x4, x1, x2)

inst_312:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:936*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 936*0 + 3*2*FLEN/8, x4, x1, x2)

inst_313:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:939*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 939*0 + 3*2*FLEN/8, x4, x1, x2)

inst_314:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:942*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 942*0 + 3*2*FLEN/8, x4, x1, x2)

inst_315:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:945*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 945*0 + 3*2*FLEN/8, x4, x1, x2)

inst_316:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:948*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 948*0 + 3*2*FLEN/8, x4, x1, x2)

inst_317:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:951*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 951*0 + 3*2*FLEN/8, x4, x1, x2)

inst_318:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:954*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 954*0 + 3*2*FLEN/8, x4, x1, x2)

inst_319:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:957*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 957*0 + 3*2*FLEN/8, x4, x1, x2)

inst_320:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:960*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 960*0 + 3*2*FLEN/8, x4, x1, x2)

inst_321:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:963*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 963*0 + 3*2*FLEN/8, x4, x1, x2)

inst_322:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:966*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 966*0 + 3*2*FLEN/8, x4, x1, x2)

inst_323:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:969*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 969*0 + 3*2*FLEN/8, x4, x1, x2)

inst_324:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:972*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 972*0 + 3*2*FLEN/8, x4, x1, x2)

inst_325:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:975*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 975*0 + 3*2*FLEN/8, x4, x1, x2)

inst_326:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x88000000; valaddr_reg:x3; val_offset:978*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 978*0 + 3*2*FLEN/8, x4, x1, x2)

inst_327:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x88000001; valaddr_reg:x3; val_offset:981*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 981*0 + 3*2*FLEN/8, x4, x1, x2)

inst_328:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x88000003; valaddr_reg:x3; val_offset:984*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 984*0 + 3*2*FLEN/8, x4, x1, x2)

inst_329:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x88000007; valaddr_reg:x3; val_offset:987*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 987*0 + 3*2*FLEN/8, x4, x1, x2)

inst_330:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x8800000f; valaddr_reg:x3; val_offset:990*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 990*0 + 3*2*FLEN/8, x4, x1, x2)

inst_331:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x8800001f; valaddr_reg:x3; val_offset:993*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 993*0 + 3*2*FLEN/8, x4, x1, x2)

inst_332:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x8800003f; valaddr_reg:x3; val_offset:996*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 996*0 + 3*2*FLEN/8, x4, x1, x2)

inst_333:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x8800007f; valaddr_reg:x3; val_offset:999*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 999*0 + 3*2*FLEN/8, x4, x1, x2)

inst_334:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x880000ff; valaddr_reg:x3; val_offset:1002*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1002*0 + 3*2*FLEN/8, x4, x1, x2)

inst_335:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x880001ff; valaddr_reg:x3; val_offset:1005*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1005*0 + 3*2*FLEN/8, x4, x1, x2)

inst_336:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x880003ff; valaddr_reg:x3; val_offset:1008*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1008*0 + 3*2*FLEN/8, x4, x1, x2)

inst_337:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x880007ff; valaddr_reg:x3; val_offset:1011*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1011*0 + 3*2*FLEN/8, x4, x1, x2)

inst_338:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x88000fff; valaddr_reg:x3; val_offset:1014*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1014*0 + 3*2*FLEN/8, x4, x1, x2)

inst_339:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x88001fff; valaddr_reg:x3; val_offset:1017*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1017*0 + 3*2*FLEN/8, x4, x1, x2)

inst_340:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x88003fff; valaddr_reg:x3; val_offset:1020*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1020*0 + 3*2*FLEN/8, x4, x1, x2)

inst_341:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x88007fff; valaddr_reg:x3; val_offset:1023*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1023*0 + 3*2*FLEN/8, x4, x1, x2)

inst_342:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x8800ffff; valaddr_reg:x3; val_offset:1026*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1026*0 + 3*2*FLEN/8, x4, x1, x2)

inst_343:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x8801ffff; valaddr_reg:x3; val_offset:1029*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1029*0 + 3*2*FLEN/8, x4, x1, x2)

inst_344:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x8803ffff; valaddr_reg:x3; val_offset:1032*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1032*0 + 3*2*FLEN/8, x4, x1, x2)

inst_345:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x8807ffff; valaddr_reg:x3; val_offset:1035*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1035*0 + 3*2*FLEN/8, x4, x1, x2)

inst_346:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x880fffff; valaddr_reg:x3; val_offset:1038*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1038*0 + 3*2*FLEN/8, x4, x1, x2)

inst_347:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x881fffff; valaddr_reg:x3; val_offset:1041*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1041*0 + 3*2*FLEN/8, x4, x1, x2)

inst_348:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x883fffff; valaddr_reg:x3; val_offset:1044*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1044*0 + 3*2*FLEN/8, x4, x1, x2)

inst_349:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x88400000; valaddr_reg:x3; val_offset:1047*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1047*0 + 3*2*FLEN/8, x4, x1, x2)

inst_350:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x88600000; valaddr_reg:x3; val_offset:1050*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1050*0 + 3*2*FLEN/8, x4, x1, x2)

inst_351:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x88700000; valaddr_reg:x3; val_offset:1053*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1053*0 + 3*2*FLEN/8, x4, x1, x2)

inst_352:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x88780000; valaddr_reg:x3; val_offset:1056*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1056*0 + 3*2*FLEN/8, x4, x1, x2)

inst_353:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887c0000; valaddr_reg:x3; val_offset:1059*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1059*0 + 3*2*FLEN/8, x4, x1, x2)

inst_354:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887e0000; valaddr_reg:x3; val_offset:1062*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1062*0 + 3*2*FLEN/8, x4, x1, x2)

inst_355:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887f0000; valaddr_reg:x3; val_offset:1065*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1065*0 + 3*2*FLEN/8, x4, x1, x2)

inst_356:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887f8000; valaddr_reg:x3; val_offset:1068*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1068*0 + 3*2*FLEN/8, x4, x1, x2)

inst_357:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887fc000; valaddr_reg:x3; val_offset:1071*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1071*0 + 3*2*FLEN/8, x4, x1, x2)

inst_358:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887fe000; valaddr_reg:x3; val_offset:1074*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1074*0 + 3*2*FLEN/8, x4, x1, x2)

inst_359:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887ff000; valaddr_reg:x3; val_offset:1077*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1077*0 + 3*2*FLEN/8, x4, x1, x2)

inst_360:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887ff800; valaddr_reg:x3; val_offset:1080*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1080*0 + 3*2*FLEN/8, x4, x1, x2)

inst_361:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887ffc00; valaddr_reg:x3; val_offset:1083*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1083*0 + 3*2*FLEN/8, x4, x1, x2)

inst_362:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887ffe00; valaddr_reg:x3; val_offset:1086*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1086*0 + 3*2*FLEN/8, x4, x1, x2)

inst_363:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887fff00; valaddr_reg:x3; val_offset:1089*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1089*0 + 3*2*FLEN/8, x4, x1, x2)

inst_364:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887fff80; valaddr_reg:x3; val_offset:1092*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1092*0 + 3*2*FLEN/8, x4, x1, x2)

inst_365:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887fffc0; valaddr_reg:x3; val_offset:1095*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1095*0 + 3*2*FLEN/8, x4, x1, x2)

inst_366:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887fffe0; valaddr_reg:x3; val_offset:1098*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1098*0 + 3*2*FLEN/8, x4, x1, x2)

inst_367:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887ffff0; valaddr_reg:x3; val_offset:1101*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1101*0 + 3*2*FLEN/8, x4, x1, x2)

inst_368:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887ffff8; valaddr_reg:x3; val_offset:1104*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1104*0 + 3*2*FLEN/8, x4, x1, x2)

inst_369:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887ffffc; valaddr_reg:x3; val_offset:1107*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1107*0 + 3*2*FLEN/8, x4, x1, x2)

inst_370:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887ffffe; valaddr_reg:x3; val_offset:1110*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1110*0 + 3*2*FLEN/8, x4, x1, x2)

inst_371:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x73b822 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bf3b822; op2val:0x80000000;
op3val:0x887fffff; valaddr_reg:x3; val_offset:1113*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1113*0 + 3*2*FLEN/8, x4, x1, x2)

inst_372:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x01197e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c01197e; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:1116*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1116*0 + 3*2*FLEN/8, x4, x1, x2)

inst_373:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x01197e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c01197e; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:1119*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1119*0 + 3*2*FLEN/8, x4, x1, x2)

inst_374:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x01197e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c01197e; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:1122*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1122*0 + 3*2*FLEN/8, x4, x1, x2)

inst_375:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x01197e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c01197e; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:1125*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1125*0 + 3*2*FLEN/8, x4, x1, x2)

inst_376:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x01197e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c01197e; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:1128*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1128*0 + 3*2*FLEN/8, x4, x1, x2)

inst_377:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x01197e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c01197e; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:1131*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1131*0 + 3*2*FLEN/8, x4, x1, x2)

inst_378:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x01197e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c01197e; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:1134*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1134*0 + 3*2*FLEN/8, x4, x1, x2)

inst_379:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x01197e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c01197e; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:1137*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1137*0 + 3*2*FLEN/8, x4, x1, x2)

inst_380:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x01197e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c01197e; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:1140*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1140*0 + 3*2*FLEN/8, x4, x1, x2)

inst_381:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x01197e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c01197e; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:1143*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1143*0 + 3*2*FLEN/8, x4, x1, x2)

inst_382:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x01197e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c01197e; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:1146*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1146*0 + 3*2*FLEN/8, x4, x1, x2)

inst_383:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x01197e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c01197e; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:1149*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1149*0 + 3*2*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383552,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383553,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383555,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383559,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383567,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383583,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383615,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383679,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383807,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159384063,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159384575,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159385599,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159387647,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159391743,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159399935,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159416319,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159449087,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159514623,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159645695,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159907839,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(160432127,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(161480703,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(163577855,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(163577856,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(165675008,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(166723584,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167247872,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167510016,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167641088,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167706624,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167739392,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167755776,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167763968,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167768064,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167770112,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167771136,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167771648,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167771904,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772032,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772096,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772128,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772144,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772152,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772156,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772158,32,FLEN)
NAN_BOXED(2078423158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772159,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701376,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701377,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701379,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701383,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701391,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701407,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701439,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701503,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701631,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701887,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281702399,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281703423,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281705471,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281709567,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281717759,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281734143,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281766911,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281832447,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281963519,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282225663,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282749951,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2283798527,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895679,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895680,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2287992832,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289041408,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289565696,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289827840,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289958912,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290024448,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290057216,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290073600,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290081792,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290085888,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290087936,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290088960,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089472,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089728,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089856,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089920,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089952,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089968,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089976,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089980,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089982,32,FLEN)
NAN_BOXED(2079569954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089983,32,FLEN)
NAN_BOXED(2080446846,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2080446846,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2080446846,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2080446846,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2080446846,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2080446846,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2080446846,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2080446846,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2080446846,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2080446846,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2080446846,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2080446846,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
