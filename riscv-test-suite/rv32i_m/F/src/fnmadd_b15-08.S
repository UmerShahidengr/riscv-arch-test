
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_896:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86800fff; valaddr_reg:x3; val_offset:2688*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2688*0 + 3*7*FLEN/8, x4, x1, x2)

inst_897:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86801fff; valaddr_reg:x3; val_offset:2691*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2691*0 + 3*7*FLEN/8, x4, x1, x2)

inst_898:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86803fff; valaddr_reg:x3; val_offset:2694*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2694*0 + 3*7*FLEN/8, x4, x1, x2)

inst_899:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86807fff; valaddr_reg:x3; val_offset:2697*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2697*0 + 3*7*FLEN/8, x4, x1, x2)

inst_900:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x8680ffff; valaddr_reg:x3; val_offset:2700*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2700*0 + 3*7*FLEN/8, x4, x1, x2)

inst_901:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x8681ffff; valaddr_reg:x3; val_offset:2703*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2703*0 + 3*7*FLEN/8, x4, x1, x2)

inst_902:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x8683ffff; valaddr_reg:x3; val_offset:2706*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2706*0 + 3*7*FLEN/8, x4, x1, x2)

inst_903:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x8687ffff; valaddr_reg:x3; val_offset:2709*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2709*0 + 3*7*FLEN/8, x4, x1, x2)

inst_904:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x868fffff; valaddr_reg:x3; val_offset:2712*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2712*0 + 3*7*FLEN/8, x4, x1, x2)

inst_905:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x869fffff; valaddr_reg:x3; val_offset:2715*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2715*0 + 3*7*FLEN/8, x4, x1, x2)

inst_906:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86bfffff; valaddr_reg:x3; val_offset:2718*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2718*0 + 3*7*FLEN/8, x4, x1, x2)

inst_907:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86c00000; valaddr_reg:x3; val_offset:2721*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2721*0 + 3*7*FLEN/8, x4, x1, x2)

inst_908:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86e00000; valaddr_reg:x3; val_offset:2724*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2724*0 + 3*7*FLEN/8, x4, x1, x2)

inst_909:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86f00000; valaddr_reg:x3; val_offset:2727*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2727*0 + 3*7*FLEN/8, x4, x1, x2)

inst_910:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86f80000; valaddr_reg:x3; val_offset:2730*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2730*0 + 3*7*FLEN/8, x4, x1, x2)

inst_911:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86fc0000; valaddr_reg:x3; val_offset:2733*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2733*0 + 3*7*FLEN/8, x4, x1, x2)

inst_912:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86fe0000; valaddr_reg:x3; val_offset:2736*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2736*0 + 3*7*FLEN/8, x4, x1, x2)

inst_913:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86ff0000; valaddr_reg:x3; val_offset:2739*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2739*0 + 3*7*FLEN/8, x4, x1, x2)

inst_914:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86ff8000; valaddr_reg:x3; val_offset:2742*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2742*0 + 3*7*FLEN/8, x4, x1, x2)

inst_915:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86ffc000; valaddr_reg:x3; val_offset:2745*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2745*0 + 3*7*FLEN/8, x4, x1, x2)

inst_916:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86ffe000; valaddr_reg:x3; val_offset:2748*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2748*0 + 3*7*FLEN/8, x4, x1, x2)

inst_917:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86fff000; valaddr_reg:x3; val_offset:2751*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2751*0 + 3*7*FLEN/8, x4, x1, x2)

inst_918:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86fff800; valaddr_reg:x3; val_offset:2754*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2754*0 + 3*7*FLEN/8, x4, x1, x2)

inst_919:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86fffc00; valaddr_reg:x3; val_offset:2757*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2757*0 + 3*7*FLEN/8, x4, x1, x2)

inst_920:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86fffe00; valaddr_reg:x3; val_offset:2760*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2760*0 + 3*7*FLEN/8, x4, x1, x2)

inst_921:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86ffff00; valaddr_reg:x3; val_offset:2763*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2763*0 + 3*7*FLEN/8, x4, x1, x2)

inst_922:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86ffff80; valaddr_reg:x3; val_offset:2766*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2766*0 + 3*7*FLEN/8, x4, x1, x2)

inst_923:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86ffffc0; valaddr_reg:x3; val_offset:2769*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2769*0 + 3*7*FLEN/8, x4, x1, x2)

inst_924:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86ffffe0; valaddr_reg:x3; val_offset:2772*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2772*0 + 3*7*FLEN/8, x4, x1, x2)

inst_925:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86fffff0; valaddr_reg:x3; val_offset:2775*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2775*0 + 3*7*FLEN/8, x4, x1, x2)

inst_926:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86fffff8; valaddr_reg:x3; val_offset:2778*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2778*0 + 3*7*FLEN/8, x4, x1, x2)

inst_927:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86fffffc; valaddr_reg:x3; val_offset:2781*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2781*0 + 3*7*FLEN/8, x4, x1, x2)

inst_928:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86fffffe; valaddr_reg:x3; val_offset:2784*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2784*0 + 3*7*FLEN/8, x4, x1, x2)

inst_929:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4969 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbd4969; op2val:0x80000000;
op3val:0x86ffffff; valaddr_reg:x3; val_offset:2787*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2787*0 + 3*7*FLEN/8, x4, x1, x2)

inst_930:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:2790*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2790*0 + 3*7*FLEN/8, x4, x1, x2)

inst_931:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:2793*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2793*0 + 3*7*FLEN/8, x4, x1, x2)

inst_932:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:2796*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2796*0 + 3*7*FLEN/8, x4, x1, x2)

inst_933:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:2799*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2799*0 + 3*7*FLEN/8, x4, x1, x2)

inst_934:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:2802*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2802*0 + 3*7*FLEN/8, x4, x1, x2)

inst_935:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:2805*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2805*0 + 3*7*FLEN/8, x4, x1, x2)

inst_936:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:2808*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2808*0 + 3*7*FLEN/8, x4, x1, x2)

inst_937:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:2811*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2811*0 + 3*7*FLEN/8, x4, x1, x2)

inst_938:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:2814*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2814*0 + 3*7*FLEN/8, x4, x1, x2)

inst_939:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:2817*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2817*0 + 3*7*FLEN/8, x4, x1, x2)

inst_940:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:2820*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2820*0 + 3*7*FLEN/8, x4, x1, x2)

inst_941:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:2823*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2823*0 + 3*7*FLEN/8, x4, x1, x2)

inst_942:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:2826*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2826*0 + 3*7*FLEN/8, x4, x1, x2)

inst_943:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:2829*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2829*0 + 3*7*FLEN/8, x4, x1, x2)

inst_944:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:2832*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2832*0 + 3*7*FLEN/8, x4, x1, x2)

inst_945:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:2835*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2835*0 + 3*7*FLEN/8, x4, x1, x2)

inst_946:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x1000000; valaddr_reg:x3; val_offset:2838*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2838*0 + 3*7*FLEN/8, x4, x1, x2)

inst_947:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x1000001; valaddr_reg:x3; val_offset:2841*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2841*0 + 3*7*FLEN/8, x4, x1, x2)

inst_948:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x1000003; valaddr_reg:x3; val_offset:2844*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2844*0 + 3*7*FLEN/8, x4, x1, x2)

inst_949:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x1000007; valaddr_reg:x3; val_offset:2847*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2847*0 + 3*7*FLEN/8, x4, x1, x2)

inst_950:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x100000f; valaddr_reg:x3; val_offset:2850*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2850*0 + 3*7*FLEN/8, x4, x1, x2)

inst_951:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x100001f; valaddr_reg:x3; val_offset:2853*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2853*0 + 3*7*FLEN/8, x4, x1, x2)

inst_952:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x100003f; valaddr_reg:x3; val_offset:2856*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2856*0 + 3*7*FLEN/8, x4, x1, x2)

inst_953:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x100007f; valaddr_reg:x3; val_offset:2859*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2859*0 + 3*7*FLEN/8, x4, x1, x2)

inst_954:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x10000ff; valaddr_reg:x3; val_offset:2862*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2862*0 + 3*7*FLEN/8, x4, x1, x2)

inst_955:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x10001ff; valaddr_reg:x3; val_offset:2865*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2865*0 + 3*7*FLEN/8, x4, x1, x2)

inst_956:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x10003ff; valaddr_reg:x3; val_offset:2868*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2868*0 + 3*7*FLEN/8, x4, x1, x2)

inst_957:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x10007ff; valaddr_reg:x3; val_offset:2871*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2871*0 + 3*7*FLEN/8, x4, x1, x2)

inst_958:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x1000fff; valaddr_reg:x3; val_offset:2874*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2874*0 + 3*7*FLEN/8, x4, x1, x2)

inst_959:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x1001fff; valaddr_reg:x3; val_offset:2877*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2877*0 + 3*7*FLEN/8, x4, x1, x2)

inst_960:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x1003fff; valaddr_reg:x3; val_offset:2880*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2880*0 + 3*7*FLEN/8, x4, x1, x2)

inst_961:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x1007fff; valaddr_reg:x3; val_offset:2883*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2883*0 + 3*7*FLEN/8, x4, x1, x2)

inst_962:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x100ffff; valaddr_reg:x3; val_offset:2886*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2886*0 + 3*7*FLEN/8, x4, x1, x2)

inst_963:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x101ffff; valaddr_reg:x3; val_offset:2889*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2889*0 + 3*7*FLEN/8, x4, x1, x2)

inst_964:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x103ffff; valaddr_reg:x3; val_offset:2892*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2892*0 + 3*7*FLEN/8, x4, x1, x2)

inst_965:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x107ffff; valaddr_reg:x3; val_offset:2895*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2895*0 + 3*7*FLEN/8, x4, x1, x2)

inst_966:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x10fffff; valaddr_reg:x3; val_offset:2898*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2898*0 + 3*7*FLEN/8, x4, x1, x2)

inst_967:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x11fffff; valaddr_reg:x3; val_offset:2901*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2901*0 + 3*7*FLEN/8, x4, x1, x2)

inst_968:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x13fffff; valaddr_reg:x3; val_offset:2904*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2904*0 + 3*7*FLEN/8, x4, x1, x2)

inst_969:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x1400000; valaddr_reg:x3; val_offset:2907*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2907*0 + 3*7*FLEN/8, x4, x1, x2)

inst_970:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x1600000; valaddr_reg:x3; val_offset:2910*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2910*0 + 3*7*FLEN/8, x4, x1, x2)

inst_971:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x1700000; valaddr_reg:x3; val_offset:2913*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2913*0 + 3*7*FLEN/8, x4, x1, x2)

inst_972:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x1780000; valaddr_reg:x3; val_offset:2916*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2916*0 + 3*7*FLEN/8, x4, x1, x2)

inst_973:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17c0000; valaddr_reg:x3; val_offset:2919*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2919*0 + 3*7*FLEN/8, x4, x1, x2)

inst_974:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17e0000; valaddr_reg:x3; val_offset:2922*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2922*0 + 3*7*FLEN/8, x4, x1, x2)

inst_975:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17f0000; valaddr_reg:x3; val_offset:2925*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2925*0 + 3*7*FLEN/8, x4, x1, x2)

inst_976:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17f8000; valaddr_reg:x3; val_offset:2928*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2928*0 + 3*7*FLEN/8, x4, x1, x2)

inst_977:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17fc000; valaddr_reg:x3; val_offset:2931*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2931*0 + 3*7*FLEN/8, x4, x1, x2)

inst_978:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17fe000; valaddr_reg:x3; val_offset:2934*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2934*0 + 3*7*FLEN/8, x4, x1, x2)

inst_979:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17ff000; valaddr_reg:x3; val_offset:2937*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2937*0 + 3*7*FLEN/8, x4, x1, x2)

inst_980:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17ff800; valaddr_reg:x3; val_offset:2940*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2940*0 + 3*7*FLEN/8, x4, x1, x2)

inst_981:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17ffc00; valaddr_reg:x3; val_offset:2943*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2943*0 + 3*7*FLEN/8, x4, x1, x2)

inst_982:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17ffe00; valaddr_reg:x3; val_offset:2946*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2946*0 + 3*7*FLEN/8, x4, x1, x2)

inst_983:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17fff00; valaddr_reg:x3; val_offset:2949*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2949*0 + 3*7*FLEN/8, x4, x1, x2)

inst_984:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17fff80; valaddr_reg:x3; val_offset:2952*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2952*0 + 3*7*FLEN/8, x4, x1, x2)

inst_985:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17fffc0; valaddr_reg:x3; val_offset:2955*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2955*0 + 3*7*FLEN/8, x4, x1, x2)

inst_986:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17fffe0; valaddr_reg:x3; val_offset:2958*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2958*0 + 3*7*FLEN/8, x4, x1, x2)

inst_987:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17ffff0; valaddr_reg:x3; val_offset:2961*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2961*0 + 3*7*FLEN/8, x4, x1, x2)

inst_988:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17ffff8; valaddr_reg:x3; val_offset:2964*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2964*0 + 3*7*FLEN/8, x4, x1, x2)

inst_989:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17ffffc; valaddr_reg:x3; val_offset:2967*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2967*0 + 3*7*FLEN/8, x4, x1, x2)

inst_990:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17ffffe; valaddr_reg:x3; val_offset:2970*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2970*0 + 3*7*FLEN/8, x4, x1, x2)

inst_991:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x432212 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc32212; op2val:0x0;
op3val:0x17fffff; valaddr_reg:x3; val_offset:2973*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2973*0 + 3*7*FLEN/8, x4, x1, x2)

inst_992:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x36000000; valaddr_reg:x3; val_offset:2976*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2976*0 + 3*7*FLEN/8, x4, x1, x2)

inst_993:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x36000001; valaddr_reg:x3; val_offset:2979*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2979*0 + 3*7*FLEN/8, x4, x1, x2)

inst_994:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x36000003; valaddr_reg:x3; val_offset:2982*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2982*0 + 3*7*FLEN/8, x4, x1, x2)

inst_995:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x36000007; valaddr_reg:x3; val_offset:2985*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2985*0 + 3*7*FLEN/8, x4, x1, x2)

inst_996:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x3600000f; valaddr_reg:x3; val_offset:2988*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2988*0 + 3*7*FLEN/8, x4, x1, x2)

inst_997:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x3600001f; valaddr_reg:x3; val_offset:2991*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2991*0 + 3*7*FLEN/8, x4, x1, x2)

inst_998:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x3600003f; valaddr_reg:x3; val_offset:2994*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2994*0 + 3*7*FLEN/8, x4, x1, x2)

inst_999:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x3600007f; valaddr_reg:x3; val_offset:2997*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2997*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1000:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x360000ff; valaddr_reg:x3; val_offset:3000*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3000*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1001:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x360001ff; valaddr_reg:x3; val_offset:3003*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3003*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1002:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x360003ff; valaddr_reg:x3; val_offset:3006*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3006*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1003:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x360007ff; valaddr_reg:x3; val_offset:3009*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3009*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1004:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x36000fff; valaddr_reg:x3; val_offset:3012*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3012*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1005:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x36001fff; valaddr_reg:x3; val_offset:3015*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3015*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1006:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x36003fff; valaddr_reg:x3; val_offset:3018*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3018*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1007:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x36007fff; valaddr_reg:x3; val_offset:3021*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3021*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1008:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x3600ffff; valaddr_reg:x3; val_offset:3024*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3024*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1009:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x3601ffff; valaddr_reg:x3; val_offset:3027*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3027*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1010:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x3603ffff; valaddr_reg:x3; val_offset:3030*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3030*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1011:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x3607ffff; valaddr_reg:x3; val_offset:3033*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3033*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1012:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x360fffff; valaddr_reg:x3; val_offset:3036*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3036*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1013:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x361fffff; valaddr_reg:x3; val_offset:3039*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3039*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1014:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x363fffff; valaddr_reg:x3; val_offset:3042*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3042*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1015:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x36400000; valaddr_reg:x3; val_offset:3045*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3045*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1016:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x36600000; valaddr_reg:x3; val_offset:3048*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3048*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1017:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x36700000; valaddr_reg:x3; val_offset:3051*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3051*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1018:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x36780000; valaddr_reg:x3; val_offset:3054*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3054*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1019:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x367c0000; valaddr_reg:x3; val_offset:3057*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3057*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1020:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x367e0000; valaddr_reg:x3; val_offset:3060*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3060*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1021:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x367f0000; valaddr_reg:x3; val_offset:3063*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3063*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1022:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x367f8000; valaddr_reg:x3; val_offset:3066*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3066*0 + 3*7*FLEN/8, x4, x1, x2)

inst_1023:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x476dcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x244f27 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc76dcc; op2val:0x2244f27;
op3val:0x367fc000; valaddr_reg:x3; val_offset:3069*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3069*0 + 3*7*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256539647,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256543743,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256551935,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256568319,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256601087,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256666623,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256797695,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2257059839,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2257584127,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2258632703,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2260729855,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2260729856,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2262827008,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2263875584,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264399872,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264662016,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264793088,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264858624,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264891392,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264907776,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264915968,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264920064,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264922112,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264923136,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264923648,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264923904,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924032,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924096,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924128,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924144,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924152,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924156,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924158,32,FLEN)
NAN_BOXED(2092779881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924159,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777216,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777217,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777219,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777223,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777231,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777247,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777279,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777343,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777471,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777727,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16778239,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16779263,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16781311,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16785407,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16793599,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16809983,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16842751,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16908287,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17039359,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17301503,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17825791,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(18874367,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971519,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971520,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(23068672,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24117248,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24641536,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24903680,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25034752,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25100288,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25133056,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25149440,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25157632,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25161728,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25163776,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25164800,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165312,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165568,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165696,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165760,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165792,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165808,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165816,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165820,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165822,32,FLEN)
NAN_BOXED(2093163026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165823,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(905969664,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(905969665,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(905969667,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(905969671,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(905969679,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(905969695,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(905969727,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(905969791,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(905969919,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(905970175,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(905970687,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(905971711,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(905973759,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(905977855,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(905986047,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(906002431,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(906035199,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(906100735,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(906231807,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(906493951,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(907018239,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(908066815,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(910163967,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(910163968,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(912261120,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(913309696,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(913833984,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(914096128,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(914227200,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(914292736,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(914325504,32,FLEN)
NAN_BOXED(2093444556,32,FLEN)
NAN_BOXED(35933991,32,FLEN)
NAN_BOXED(914341888,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
