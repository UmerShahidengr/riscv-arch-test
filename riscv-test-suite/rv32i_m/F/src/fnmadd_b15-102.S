
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_12928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x637ffe00; valaddr_reg:x3; val_offset:38784*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38784*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x637fff00; valaddr_reg:x3; val_offset:38787*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38787*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x637fff80; valaddr_reg:x3; val_offset:38790*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38790*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x637fffc0; valaddr_reg:x3; val_offset:38793*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38793*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x637fffe0; valaddr_reg:x3; val_offset:38796*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38796*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x637ffff0; valaddr_reg:x3; val_offset:38799*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38799*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x637ffff8; valaddr_reg:x3; val_offset:38802*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38802*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x637ffffc; valaddr_reg:x3; val_offset:38805*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38805*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x637ffffe; valaddr_reg:x3; val_offset:38808*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38808*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x637fffff; valaddr_reg:x3; val_offset:38811*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38811*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x7f000001; valaddr_reg:x3; val_offset:38814*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38814*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x7f000003; valaddr_reg:x3; val_offset:38817*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38817*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x7f000007; valaddr_reg:x3; val_offset:38820*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38820*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x7f199999; valaddr_reg:x3; val_offset:38823*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38823*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x7f249249; valaddr_reg:x3; val_offset:38826*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38826*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x7f333333; valaddr_reg:x3; val_offset:38829*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38829*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:38832*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38832*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:38835*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38835*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x7f444444; valaddr_reg:x3; val_offset:38838*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38838*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:38841*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38841*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:38844*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38844*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x7f666666; valaddr_reg:x3; val_offset:38847*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38847*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:38850*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38850*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:38853*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38853*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:38856*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38856*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0904b5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6f267d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8904b5; op2val:0x406f267d;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:38859*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38859*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:38862*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38862*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:38865*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38865*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:38868*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38868*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:38871*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38871*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:38874*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38874*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:38877*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38877*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:38880*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38880*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:38883*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38883*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:38886*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38886*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:38889*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38889*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:38892*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38892*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:38895*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38895*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:38898*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38898*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:38901*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38901*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:38904*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38904*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:38907*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38907*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d800000; valaddr_reg:x3; val_offset:38910*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38910*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d800001; valaddr_reg:x3; val_offset:38913*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38913*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d800003; valaddr_reg:x3; val_offset:38916*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38916*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d800007; valaddr_reg:x3; val_offset:38919*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38919*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d80000f; valaddr_reg:x3; val_offset:38922*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38922*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d80001f; valaddr_reg:x3; val_offset:38925*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38925*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d80003f; valaddr_reg:x3; val_offset:38928*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38928*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d80007f; valaddr_reg:x3; val_offset:38931*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38931*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d8000ff; valaddr_reg:x3; val_offset:38934*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38934*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d8001ff; valaddr_reg:x3; val_offset:38937*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38937*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d8003ff; valaddr_reg:x3; val_offset:38940*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38940*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d8007ff; valaddr_reg:x3; val_offset:38943*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38943*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d800fff; valaddr_reg:x3; val_offset:38946*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38946*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d801fff; valaddr_reg:x3; val_offset:38949*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38949*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d803fff; valaddr_reg:x3; val_offset:38952*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38952*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d807fff; valaddr_reg:x3; val_offset:38955*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38955*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d80ffff; valaddr_reg:x3; val_offset:38958*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38958*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d81ffff; valaddr_reg:x3; val_offset:38961*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38961*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d83ffff; valaddr_reg:x3; val_offset:38964*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38964*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d87ffff; valaddr_reg:x3; val_offset:38967*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38967*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d8fffff; valaddr_reg:x3; val_offset:38970*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38970*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8d9fffff; valaddr_reg:x3; val_offset:38973*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38973*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dbfffff; valaddr_reg:x3; val_offset:38976*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38976*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dc00000; valaddr_reg:x3; val_offset:38979*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38979*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8de00000; valaddr_reg:x3; val_offset:38982*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38982*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8df00000; valaddr_reg:x3; val_offset:38985*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38985*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8df80000; valaddr_reg:x3; val_offset:38988*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38988*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dfc0000; valaddr_reg:x3; val_offset:38991*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38991*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dfe0000; valaddr_reg:x3; val_offset:38994*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38994*0 + 3*101*FLEN/8, x4, x1, x2)

inst_12999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dff0000; valaddr_reg:x3; val_offset:38997*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38997*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dff8000; valaddr_reg:x3; val_offset:39000*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39000*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dffc000; valaddr_reg:x3; val_offset:39003*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39003*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dffe000; valaddr_reg:x3; val_offset:39006*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39006*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dfff000; valaddr_reg:x3; val_offset:39009*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39009*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dfff800; valaddr_reg:x3; val_offset:39012*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39012*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dfffc00; valaddr_reg:x3; val_offset:39015*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39015*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dfffe00; valaddr_reg:x3; val_offset:39018*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39018*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dffff00; valaddr_reg:x3; val_offset:39021*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39021*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dffff80; valaddr_reg:x3; val_offset:39024*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39024*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dffffc0; valaddr_reg:x3; val_offset:39027*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39027*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dffffe0; valaddr_reg:x3; val_offset:39030*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39030*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dfffff0; valaddr_reg:x3; val_offset:39033*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39033*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dfffff8; valaddr_reg:x3; val_offset:39036*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39036*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dfffffc; valaddr_reg:x3; val_offset:39039*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39039*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dfffffe; valaddr_reg:x3; val_offset:39042*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39042*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x091225 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e891225; op2val:0x80000000;
op3val:0x8dffffff; valaddr_reg:x3; val_offset:39045*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39045*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:39048*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39048*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:39051*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39051*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:39054*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39054*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:39057*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39057*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:39060*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39060*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:39063*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39063*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:39066*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39066*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:39069*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39069*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:39072*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39072*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:39075*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39075*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:39078*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39078*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:39081*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39081*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:39084*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39084*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:39087*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39087*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:39090*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39090*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:39093*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39093*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x89000000; valaddr_reg:x3; val_offset:39096*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39096*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x89000001; valaddr_reg:x3; val_offset:39099*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39099*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x89000003; valaddr_reg:x3; val_offset:39102*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39102*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x89000007; valaddr_reg:x3; val_offset:39105*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39105*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x8900000f; valaddr_reg:x3; val_offset:39108*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39108*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x8900001f; valaddr_reg:x3; val_offset:39111*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39111*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x8900003f; valaddr_reg:x3; val_offset:39114*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39114*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x8900007f; valaddr_reg:x3; val_offset:39117*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39117*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x890000ff; valaddr_reg:x3; val_offset:39120*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39120*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x890001ff; valaddr_reg:x3; val_offset:39123*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39123*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x890003ff; valaddr_reg:x3; val_offset:39126*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39126*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x890007ff; valaddr_reg:x3; val_offset:39129*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39129*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x89000fff; valaddr_reg:x3; val_offset:39132*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39132*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x89001fff; valaddr_reg:x3; val_offset:39135*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39135*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x89003fff; valaddr_reg:x3; val_offset:39138*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39138*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x89007fff; valaddr_reg:x3; val_offset:39141*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39141*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x8900ffff; valaddr_reg:x3; val_offset:39144*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39144*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x8901ffff; valaddr_reg:x3; val_offset:39147*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39147*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x8903ffff; valaddr_reg:x3; val_offset:39150*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39150*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x8907ffff; valaddr_reg:x3; val_offset:39153*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39153*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x890fffff; valaddr_reg:x3; val_offset:39156*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39156*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x891fffff; valaddr_reg:x3; val_offset:39159*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39159*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x893fffff; valaddr_reg:x3; val_offset:39162*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39162*0 + 3*101*FLEN/8, x4, x1, x2)

inst_13055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x89400000; valaddr_reg:x3; val_offset:39165*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39165*0 + 3*101*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(1669332480,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(1669332736,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(1669332864,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(1669332928,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(1669332960,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(1669332976,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(1669332984,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(1669332988,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(1669332990,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(1669332991,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2122908853,32,FLEN)
NAN_BOXED(1081026173,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976064,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976065,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976067,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976071,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976079,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976095,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976127,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976191,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976319,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976575,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373977087,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373978111,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373980159,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373984255,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373992447,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374008831,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374041599,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374107135,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374238207,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374500351,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2375024639,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2376073215,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2378170367,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2378170368,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2380267520,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2381316096,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2381840384,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382102528,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382233600,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382299136,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382331904,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382348288,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382356480,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382360576,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382362624,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382363648,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364160,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364416,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364544,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364608,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364640,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364656,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364664,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364668,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364670,32,FLEN)
NAN_BOXED(2122912293,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364671,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478592,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478593,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478595,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478599,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478607,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478623,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478655,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478719,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478847,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298479103,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298479615,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298480639,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298482687,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298486783,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298494975,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298511359,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298544127,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298609663,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298740735,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2299002879,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2299527167,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2300575743,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2302672895,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2302672896,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
