
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_13056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x89600000; valaddr_reg:x3; val_offset:39168*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39168*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x89700000; valaddr_reg:x3; val_offset:39171*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39171*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x89780000; valaddr_reg:x3; val_offset:39174*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39174*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897c0000; valaddr_reg:x3; val_offset:39177*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39177*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897e0000; valaddr_reg:x3; val_offset:39180*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39180*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897f0000; valaddr_reg:x3; val_offset:39183*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39183*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897f8000; valaddr_reg:x3; val_offset:39186*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39186*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897fc000; valaddr_reg:x3; val_offset:39189*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39189*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897fe000; valaddr_reg:x3; val_offset:39192*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39192*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897ff000; valaddr_reg:x3; val_offset:39195*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39195*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897ff800; valaddr_reg:x3; val_offset:39198*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39198*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897ffc00; valaddr_reg:x3; val_offset:39201*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39201*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897ffe00; valaddr_reg:x3; val_offset:39204*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39204*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897fff00; valaddr_reg:x3; val_offset:39207*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39207*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897fff80; valaddr_reg:x3; val_offset:39210*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39210*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897fffc0; valaddr_reg:x3; val_offset:39213*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39213*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897fffe0; valaddr_reg:x3; val_offset:39216*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39216*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897ffff0; valaddr_reg:x3; val_offset:39219*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39219*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897ffff8; valaddr_reg:x3; val_offset:39222*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39222*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897ffffc; valaddr_reg:x3; val_offset:39225*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39225*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897ffffe; valaddr_reg:x3; val_offset:39228*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39228*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09edf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e89edf2; op2val:0x80000000;
op3val:0x897fffff; valaddr_reg:x3; val_offset:39231*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39231*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71800000; valaddr_reg:x3; val_offset:39234*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39234*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71800001; valaddr_reg:x3; val_offset:39237*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39237*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71800003; valaddr_reg:x3; val_offset:39240*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39240*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71800007; valaddr_reg:x3; val_offset:39243*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39243*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7180000f; valaddr_reg:x3; val_offset:39246*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39246*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7180001f; valaddr_reg:x3; val_offset:39249*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39249*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7180003f; valaddr_reg:x3; val_offset:39252*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39252*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7180007f; valaddr_reg:x3; val_offset:39255*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39255*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x718000ff; valaddr_reg:x3; val_offset:39258*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39258*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x718001ff; valaddr_reg:x3; val_offset:39261*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39261*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x718003ff; valaddr_reg:x3; val_offset:39264*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39264*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x718007ff; valaddr_reg:x3; val_offset:39267*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39267*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71800fff; valaddr_reg:x3; val_offset:39270*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39270*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71801fff; valaddr_reg:x3; val_offset:39273*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39273*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71803fff; valaddr_reg:x3; val_offset:39276*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39276*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71807fff; valaddr_reg:x3; val_offset:39279*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39279*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7180ffff; valaddr_reg:x3; val_offset:39282*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39282*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7181ffff; valaddr_reg:x3; val_offset:39285*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39285*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7183ffff; valaddr_reg:x3; val_offset:39288*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39288*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7187ffff; valaddr_reg:x3; val_offset:39291*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39291*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x718fffff; valaddr_reg:x3; val_offset:39294*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39294*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x719fffff; valaddr_reg:x3; val_offset:39297*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39297*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71bfffff; valaddr_reg:x3; val_offset:39300*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39300*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71c00000; valaddr_reg:x3; val_offset:39303*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39303*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71e00000; valaddr_reg:x3; val_offset:39306*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39306*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71f00000; valaddr_reg:x3; val_offset:39309*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39309*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71f80000; valaddr_reg:x3; val_offset:39312*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39312*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71fc0000; valaddr_reg:x3; val_offset:39315*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39315*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71fe0000; valaddr_reg:x3; val_offset:39318*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39318*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71ff0000; valaddr_reg:x3; val_offset:39321*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39321*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71ff8000; valaddr_reg:x3; val_offset:39324*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39324*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71ffc000; valaddr_reg:x3; val_offset:39327*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39327*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71ffe000; valaddr_reg:x3; val_offset:39330*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39330*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71fff000; valaddr_reg:x3; val_offset:39333*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39333*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71fff800; valaddr_reg:x3; val_offset:39336*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39336*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71fffc00; valaddr_reg:x3; val_offset:39339*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39339*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71fffe00; valaddr_reg:x3; val_offset:39342*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39342*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71ffff00; valaddr_reg:x3; val_offset:39345*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39345*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71ffff80; valaddr_reg:x3; val_offset:39348*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39348*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71ffffc0; valaddr_reg:x3; val_offset:39351*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39351*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71ffffe0; valaddr_reg:x3; val_offset:39354*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39354*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71fffff0; valaddr_reg:x3; val_offset:39357*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39357*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71fffff8; valaddr_reg:x3; val_offset:39360*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39360*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71fffffc; valaddr_reg:x3; val_offset:39363*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39363*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71fffffe; valaddr_reg:x3; val_offset:39366*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39366*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x71ffffff; valaddr_reg:x3; val_offset:39369*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39369*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7f000001; valaddr_reg:x3; val_offset:39372*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39372*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7f000003; valaddr_reg:x3; val_offset:39375*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39375*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7f000007; valaddr_reg:x3; val_offset:39378*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39378*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7f199999; valaddr_reg:x3; val_offset:39381*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39381*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7f249249; valaddr_reg:x3; val_offset:39384*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39384*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7f333333; valaddr_reg:x3; val_offset:39387*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39387*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:39390*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39390*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:39393*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39393*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7f444444; valaddr_reg:x3; val_offset:39396*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39396*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:39399*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39399*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:39402*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39402*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7f666666; valaddr_reg:x3; val_offset:39405*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39405*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:39408*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39408*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:39411*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39411*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:39414*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39414*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a049f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6d6b0f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a049f; op2val:0x406d6b0f;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:39417*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39417*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c800000; valaddr_reg:x3; val_offset:39420*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39420*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c800001; valaddr_reg:x3; val_offset:39423*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39423*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c800003; valaddr_reg:x3; val_offset:39426*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39426*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c800007; valaddr_reg:x3; val_offset:39429*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39429*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c80000f; valaddr_reg:x3; val_offset:39432*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39432*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c80001f; valaddr_reg:x3; val_offset:39435*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39435*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c80003f; valaddr_reg:x3; val_offset:39438*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39438*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c80007f; valaddr_reg:x3; val_offset:39441*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39441*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c8000ff; valaddr_reg:x3; val_offset:39444*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39444*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c8001ff; valaddr_reg:x3; val_offset:39447*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39447*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c8003ff; valaddr_reg:x3; val_offset:39450*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39450*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c8007ff; valaddr_reg:x3; val_offset:39453*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39453*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c800fff; valaddr_reg:x3; val_offset:39456*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39456*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c801fff; valaddr_reg:x3; val_offset:39459*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39459*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c803fff; valaddr_reg:x3; val_offset:39462*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39462*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c807fff; valaddr_reg:x3; val_offset:39465*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39465*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c80ffff; valaddr_reg:x3; val_offset:39468*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39468*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c81ffff; valaddr_reg:x3; val_offset:39471*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39471*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c83ffff; valaddr_reg:x3; val_offset:39474*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39474*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c87ffff; valaddr_reg:x3; val_offset:39477*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39477*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c8fffff; valaddr_reg:x3; val_offset:39480*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39480*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2c9fffff; valaddr_reg:x3; val_offset:39483*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39483*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cbfffff; valaddr_reg:x3; val_offset:39486*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39486*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cc00000; valaddr_reg:x3; val_offset:39489*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39489*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2ce00000; valaddr_reg:x3; val_offset:39492*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39492*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cf00000; valaddr_reg:x3; val_offset:39495*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39495*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cf80000; valaddr_reg:x3; val_offset:39498*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39498*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cfc0000; valaddr_reg:x3; val_offset:39501*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39501*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cfe0000; valaddr_reg:x3; val_offset:39504*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39504*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cff0000; valaddr_reg:x3; val_offset:39507*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39507*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cff8000; valaddr_reg:x3; val_offset:39510*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39510*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cffc000; valaddr_reg:x3; val_offset:39513*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39513*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cffe000; valaddr_reg:x3; val_offset:39516*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39516*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cfff000; valaddr_reg:x3; val_offset:39519*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39519*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cfff800; valaddr_reg:x3; val_offset:39522*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39522*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cfffc00; valaddr_reg:x3; val_offset:39525*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39525*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cfffe00; valaddr_reg:x3; val_offset:39528*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39528*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cffff00; valaddr_reg:x3; val_offset:39531*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39531*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cffff80; valaddr_reg:x3; val_offset:39534*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39534*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cffffc0; valaddr_reg:x3; val_offset:39537*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39537*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cffffe0; valaddr_reg:x3; val_offset:39540*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39540*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cfffff0; valaddr_reg:x3; val_offset:39543*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39543*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cfffff8; valaddr_reg:x3; val_offset:39546*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39546*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c0f02 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x74fac5 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8c0f02; op2val:0x74fac5;
op3val:0x2cfffffc; valaddr_reg:x3; val_offset:39549*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39549*0 + 3*102*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2304770048,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2305818624,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306342912,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306605056,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306736128,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306801664,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306834432,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306850816,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306859008,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306863104,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306865152,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866176,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866688,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866944,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867072,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867136,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867168,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867184,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867192,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867196,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867198,32,FLEN)
NAN_BOXED(2122968562,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867199,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904214016,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904214017,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904214019,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904214023,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904214031,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904214047,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904214079,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904214143,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904214271,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904214527,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904215039,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904216063,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904218111,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904222207,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904230399,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904246783,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904279551,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904345087,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904476159,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1904738303,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1905262591,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1906311167,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1908408319,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1908408320,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1910505472,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1911554048,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912078336,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912340480,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912471552,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912537088,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912569856,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912586240,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912594432,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912598528,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912600576,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912601600,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912602112,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912602368,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912602496,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912602560,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912602592,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912602608,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912602616,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912602620,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912602622,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(1912602623,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2122974367,32,FLEN)
NAN_BOXED(1080912655,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746586112,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746586113,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746586115,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746586119,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746586127,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746586143,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746586175,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746586239,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746586367,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746586623,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746587135,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746588159,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746590207,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746594303,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746602495,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746618879,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746651647,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746717183,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(746848255,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(747110399,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(747634687,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(748683263,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(750780415,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(750780416,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(752877568,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(753926144,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754450432,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754712576,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754843648,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754909184,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754941952,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754958336,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754966528,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754970624,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754972672,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754973696,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754974208,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754974464,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754974592,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754974656,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754974688,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754974704,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754974712,32,FLEN)
NAN_BOXED(2123108098,32,FLEN)
NAN_BOXED(7666373,32,FLEN)
NAN_BOXED(754974716,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
