
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_13568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x117a6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e917a6b; op2val:0x80000000;
op3val:0x847fffe0; valaddr_reg:x3; val_offset:40704*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40704*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x117a6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e917a6b; op2val:0x80000000;
op3val:0x847ffff0; valaddr_reg:x3; val_offset:40707*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40707*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x117a6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e917a6b; op2val:0x80000000;
op3val:0x847ffff8; valaddr_reg:x3; val_offset:40710*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40710*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x117a6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e917a6b; op2val:0x80000000;
op3val:0x847ffffc; valaddr_reg:x3; val_offset:40713*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40713*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x117a6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e917a6b; op2val:0x80000000;
op3val:0x847ffffe; valaddr_reg:x3; val_offset:40716*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40716*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x117a6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e917a6b; op2val:0x80000000;
op3val:0x847fffff; valaddr_reg:x3; val_offset:40719*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40719*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb1000000; valaddr_reg:x3; val_offset:40722*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40722*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb1000001; valaddr_reg:x3; val_offset:40725*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40725*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb1000003; valaddr_reg:x3; val_offset:40728*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40728*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb1000007; valaddr_reg:x3; val_offset:40731*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40731*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb100000f; valaddr_reg:x3; val_offset:40734*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40734*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb100001f; valaddr_reg:x3; val_offset:40737*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40737*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb100003f; valaddr_reg:x3; val_offset:40740*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40740*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb100007f; valaddr_reg:x3; val_offset:40743*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40743*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb10000ff; valaddr_reg:x3; val_offset:40746*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40746*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb10001ff; valaddr_reg:x3; val_offset:40749*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40749*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb10003ff; valaddr_reg:x3; val_offset:40752*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40752*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb10007ff; valaddr_reg:x3; val_offset:40755*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40755*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb1000fff; valaddr_reg:x3; val_offset:40758*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40758*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb1001fff; valaddr_reg:x3; val_offset:40761*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40761*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb1003fff; valaddr_reg:x3; val_offset:40764*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40764*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb1007fff; valaddr_reg:x3; val_offset:40767*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40767*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb100ffff; valaddr_reg:x3; val_offset:40770*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40770*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb101ffff; valaddr_reg:x3; val_offset:40773*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40773*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb103ffff; valaddr_reg:x3; val_offset:40776*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40776*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb107ffff; valaddr_reg:x3; val_offset:40779*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40779*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb10fffff; valaddr_reg:x3; val_offset:40782*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40782*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb11fffff; valaddr_reg:x3; val_offset:40785*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40785*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb13fffff; valaddr_reg:x3; val_offset:40788*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40788*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb1400000; valaddr_reg:x3; val_offset:40791*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40791*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb1600000; valaddr_reg:x3; val_offset:40794*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40794*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb1700000; valaddr_reg:x3; val_offset:40797*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40797*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb1780000; valaddr_reg:x3; val_offset:40800*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40800*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17c0000; valaddr_reg:x3; val_offset:40803*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40803*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17e0000; valaddr_reg:x3; val_offset:40806*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40806*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17f0000; valaddr_reg:x3; val_offset:40809*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40809*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17f8000; valaddr_reg:x3; val_offset:40812*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40812*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17fc000; valaddr_reg:x3; val_offset:40815*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40815*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17fe000; valaddr_reg:x3; val_offset:40818*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40818*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17ff000; valaddr_reg:x3; val_offset:40821*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40821*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17ff800; valaddr_reg:x3; val_offset:40824*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40824*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17ffc00; valaddr_reg:x3; val_offset:40827*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40827*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17ffe00; valaddr_reg:x3; val_offset:40830*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40830*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17fff00; valaddr_reg:x3; val_offset:40833*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40833*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17fff80; valaddr_reg:x3; val_offset:40836*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40836*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17fffc0; valaddr_reg:x3; val_offset:40839*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40839*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17fffe0; valaddr_reg:x3; val_offset:40842*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40842*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17ffff0; valaddr_reg:x3; val_offset:40845*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40845*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17ffff8; valaddr_reg:x3; val_offset:40848*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40848*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17ffffc; valaddr_reg:x3; val_offset:40851*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40851*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17ffffe; valaddr_reg:x3; val_offset:40854*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40854*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xb17fffff; valaddr_reg:x3; val_offset:40857*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40857*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xbf800001; valaddr_reg:x3; val_offset:40860*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40860*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xbf800003; valaddr_reg:x3; val_offset:40863*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40863*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xbf800007; valaddr_reg:x3; val_offset:40866*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40866*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xbf999999; valaddr_reg:x3; val_offset:40869*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40869*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:40872*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40872*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:40875*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40875*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:40878*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40878*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:40881*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40881*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:40884*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40884*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:40887*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40887*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:40890*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40890*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:40893*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40893*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:40896*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40896*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:40899*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40899*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:40902*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40902*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11a030 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7081f1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91a030; op2val:0x807081f1;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:40905*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40905*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:40908*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40908*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:40911*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40911*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:40914*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40914*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:40917*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40917*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:40920*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40920*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:40923*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40923*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:40926*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40926*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:40929*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40929*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:40932*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40932*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:40935*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40935*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:40938*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40938*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:40941*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40941*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:40944*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40944*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:40947*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40947*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:40950*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40950*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:40953*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40953*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x2000000; valaddr_reg:x3; val_offset:40956*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40956*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x2000001; valaddr_reg:x3; val_offset:40959*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40959*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x2000003; valaddr_reg:x3; val_offset:40962*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40962*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x2000007; valaddr_reg:x3; val_offset:40965*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40965*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x200000f; valaddr_reg:x3; val_offset:40968*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40968*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x200001f; valaddr_reg:x3; val_offset:40971*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40971*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x200003f; valaddr_reg:x3; val_offset:40974*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40974*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x200007f; valaddr_reg:x3; val_offset:40977*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40977*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x20000ff; valaddr_reg:x3; val_offset:40980*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40980*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x20001ff; valaddr_reg:x3; val_offset:40983*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40983*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x20003ff; valaddr_reg:x3; val_offset:40986*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40986*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x20007ff; valaddr_reg:x3; val_offset:40989*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40989*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x2000fff; valaddr_reg:x3; val_offset:40992*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40992*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x2001fff; valaddr_reg:x3; val_offset:40995*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40995*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x2003fff; valaddr_reg:x3; val_offset:40998*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40998*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x2007fff; valaddr_reg:x3; val_offset:41001*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41001*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x200ffff; valaddr_reg:x3; val_offset:41004*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41004*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x201ffff; valaddr_reg:x3; val_offset:41007*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41007*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x203ffff; valaddr_reg:x3; val_offset:41010*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41010*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x207ffff; valaddr_reg:x3; val_offset:41013*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41013*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x20fffff; valaddr_reg:x3; val_offset:41016*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41016*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x21fffff; valaddr_reg:x3; val_offset:41019*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41019*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x23fffff; valaddr_reg:x3; val_offset:41022*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41022*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x2400000; valaddr_reg:x3; val_offset:41025*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41025*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x2600000; valaddr_reg:x3; val_offset:41028*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41028*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x2700000; valaddr_reg:x3; val_offset:41031*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41031*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x2780000; valaddr_reg:x3; val_offset:41034*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41034*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27c0000; valaddr_reg:x3; val_offset:41037*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41037*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27e0000; valaddr_reg:x3; val_offset:41040*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41040*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27f0000; valaddr_reg:x3; val_offset:41043*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41043*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27f8000; valaddr_reg:x3; val_offset:41046*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41046*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27fc000; valaddr_reg:x3; val_offset:41049*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41049*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27fe000; valaddr_reg:x3; val_offset:41052*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41052*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27ff000; valaddr_reg:x3; val_offset:41055*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41055*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27ff800; valaddr_reg:x3; val_offset:41058*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41058*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27ffc00; valaddr_reg:x3; val_offset:41061*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41061*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27ffe00; valaddr_reg:x3; val_offset:41064*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41064*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27fff00; valaddr_reg:x3; val_offset:41067*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41067*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27fff80; valaddr_reg:x3; val_offset:41070*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41070*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27fffc0; valaddr_reg:x3; val_offset:41073*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41073*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27fffe0; valaddr_reg:x3; val_offset:41076*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41076*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27ffff0; valaddr_reg:x3; val_offset:41079*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41079*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27ffff8; valaddr_reg:x3; val_offset:41082*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41082*0 + 3*106*FLEN/8, x4, x1, x2)

inst_13695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27ffffc; valaddr_reg:x3; val_offset:41085*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41085*0 + 3*106*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2123463275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981088,32,FLEN)
NAN_BOXED(2123463275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981104,32,FLEN)
NAN_BOXED(2123463275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981112,32,FLEN)
NAN_BOXED(2123463275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981116,32,FLEN)
NAN_BOXED(2123463275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981118,32,FLEN)
NAN_BOXED(2123463275,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981119,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969567232,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969567233,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969567235,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969567239,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969567247,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969567263,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969567295,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969567359,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969567487,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969567743,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969568255,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969569279,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969571327,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969575423,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969583615,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969599999,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969632767,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969698303,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2969829375,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2970091519,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2970615807,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2971664383,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2973761535,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2973761536,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2975858688,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2976907264,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977431552,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977693696,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977824768,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977890304,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977923072,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977939456,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977947648,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977951744,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977953792,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977954816,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977955328,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977955584,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977955712,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977955776,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977955808,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977955824,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977955832,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977955836,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977955838,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(2977955839,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2123472944,32,FLEN)
NAN_BOXED(2154856945,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554432,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554433,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554435,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554439,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554447,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554463,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554495,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554559,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554687,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554943,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33555455,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33556479,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33558527,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33562623,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33570815,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33587199,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33619967,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33685503,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33816575,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(34078719,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(34603007,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(35651583,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(37748735,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(37748736,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(39845888,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(40894464,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41418752,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41680896,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41811968,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41877504,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41910272,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41926656,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41934848,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41938944,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41940992,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41942016,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41942528,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41942784,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41942912,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41942976,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943008,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943024,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943032,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943036,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
