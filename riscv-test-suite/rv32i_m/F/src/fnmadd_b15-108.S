
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_13696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27ffffe; valaddr_reg:x3; val_offset:41088*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41088*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11c5b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91c5b1; op2val:0x0;
op3val:0x27fffff; valaddr_reg:x3; val_offset:41091*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41091*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe800000; valaddr_reg:x3; val_offset:41094*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41094*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe800001; valaddr_reg:x3; val_offset:41097*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41097*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe800003; valaddr_reg:x3; val_offset:41100*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41100*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe800007; valaddr_reg:x3; val_offset:41103*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41103*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe80000f; valaddr_reg:x3; val_offset:41106*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41106*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe80001f; valaddr_reg:x3; val_offset:41109*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41109*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe80003f; valaddr_reg:x3; val_offset:41112*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41112*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe80007f; valaddr_reg:x3; val_offset:41115*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41115*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe8000ff; valaddr_reg:x3; val_offset:41118*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41118*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe8001ff; valaddr_reg:x3; val_offset:41121*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41121*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe8003ff; valaddr_reg:x3; val_offset:41124*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41124*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe8007ff; valaddr_reg:x3; val_offset:41127*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41127*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe800fff; valaddr_reg:x3; val_offset:41130*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41130*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe801fff; valaddr_reg:x3; val_offset:41133*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41133*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe803fff; valaddr_reg:x3; val_offset:41136*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41136*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe807fff; valaddr_reg:x3; val_offset:41139*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41139*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe80ffff; valaddr_reg:x3; val_offset:41142*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41142*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe81ffff; valaddr_reg:x3; val_offset:41145*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41145*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe83ffff; valaddr_reg:x3; val_offset:41148*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41148*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe87ffff; valaddr_reg:x3; val_offset:41151*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41151*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe8fffff; valaddr_reg:x3; val_offset:41154*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41154*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbe9fffff; valaddr_reg:x3; val_offset:41157*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41157*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbebfffff; valaddr_reg:x3; val_offset:41160*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41160*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbec00000; valaddr_reg:x3; val_offset:41163*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41163*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbee00000; valaddr_reg:x3; val_offset:41166*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41166*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbef00000; valaddr_reg:x3; val_offset:41169*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41169*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbef80000; valaddr_reg:x3; val_offset:41172*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41172*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbefc0000; valaddr_reg:x3; val_offset:41175*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41175*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbefe0000; valaddr_reg:x3; val_offset:41178*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41178*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbeff0000; valaddr_reg:x3; val_offset:41181*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41181*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbeff8000; valaddr_reg:x3; val_offset:41184*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41184*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbeffc000; valaddr_reg:x3; val_offset:41187*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41187*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbeffe000; valaddr_reg:x3; val_offset:41190*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41190*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbefff000; valaddr_reg:x3; val_offset:41193*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41193*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbefff800; valaddr_reg:x3; val_offset:41196*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41196*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbefffc00; valaddr_reg:x3; val_offset:41199*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41199*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbefffe00; valaddr_reg:x3; val_offset:41202*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41202*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbeffff00; valaddr_reg:x3; val_offset:41205*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41205*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbeffff80; valaddr_reg:x3; val_offset:41208*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41208*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbeffffc0; valaddr_reg:x3; val_offset:41211*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41211*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbeffffe0; valaddr_reg:x3; val_offset:41214*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41214*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbefffff0; valaddr_reg:x3; val_offset:41217*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41217*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbefffff8; valaddr_reg:x3; val_offset:41220*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41220*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbefffffc; valaddr_reg:x3; val_offset:41223*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41223*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbefffffe; valaddr_reg:x3; val_offset:41226*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41226*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbeffffff; valaddr_reg:x3; val_offset:41229*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41229*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbf800001; valaddr_reg:x3; val_offset:41232*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41232*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbf800003; valaddr_reg:x3; val_offset:41235*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41235*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbf800007; valaddr_reg:x3; val_offset:41238*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41238*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbf999999; valaddr_reg:x3; val_offset:41241*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41241*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:41244*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41244*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:41247*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41247*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:41250*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41250*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:41253*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41253*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:41256*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41256*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:41259*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41259*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:41262*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41262*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:41265*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41265*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:41268*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41268*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:41271*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41271*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:41274*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41274*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120226 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x703674 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920226; op2val:0x80703674;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:41277*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41277*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:41280*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41280*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:41283*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41283*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:41286*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41286*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:41289*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41289*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:41292*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41292*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:41295*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41295*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:41298*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41298*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:41301*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41301*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:41304*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41304*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:41307*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41307*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:41310*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41310*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:41313*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41313*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:41316*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41316*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:41319*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41319*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:41322*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41322*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:41325*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41325*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf800000; valaddr_reg:x3; val_offset:41328*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41328*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf800001; valaddr_reg:x3; val_offset:41331*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41331*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf800003; valaddr_reg:x3; val_offset:41334*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41334*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf800007; valaddr_reg:x3; val_offset:41337*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41337*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf80000f; valaddr_reg:x3; val_offset:41340*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41340*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf80001f; valaddr_reg:x3; val_offset:41343*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41343*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf80003f; valaddr_reg:x3; val_offset:41346*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41346*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf80007f; valaddr_reg:x3; val_offset:41349*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41349*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf8000ff; valaddr_reg:x3; val_offset:41352*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41352*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf8001ff; valaddr_reg:x3; val_offset:41355*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41355*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf8003ff; valaddr_reg:x3; val_offset:41358*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41358*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf8007ff; valaddr_reg:x3; val_offset:41361*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41361*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf800fff; valaddr_reg:x3; val_offset:41364*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41364*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf801fff; valaddr_reg:x3; val_offset:41367*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41367*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf803fff; valaddr_reg:x3; val_offset:41370*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41370*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf807fff; valaddr_reg:x3; val_offset:41373*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41373*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf80ffff; valaddr_reg:x3; val_offset:41376*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41376*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf81ffff; valaddr_reg:x3; val_offset:41379*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41379*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf83ffff; valaddr_reg:x3; val_offset:41382*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41382*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf87ffff; valaddr_reg:x3; val_offset:41385*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41385*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf8fffff; valaddr_reg:x3; val_offset:41388*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41388*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xf9fffff; valaddr_reg:x3; val_offset:41391*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41391*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xfbfffff; valaddr_reg:x3; val_offset:41394*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41394*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xfc00000; valaddr_reg:x3; val_offset:41397*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41397*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xfe00000; valaddr_reg:x3; val_offset:41400*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41400*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xff00000; valaddr_reg:x3; val_offset:41403*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41403*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xff80000; valaddr_reg:x3; val_offset:41406*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41406*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xffc0000; valaddr_reg:x3; val_offset:41409*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41409*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xffe0000; valaddr_reg:x3; val_offset:41412*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41412*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xfff0000; valaddr_reg:x3; val_offset:41415*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41415*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xfff8000; valaddr_reg:x3; val_offset:41418*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41418*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xfffc000; valaddr_reg:x3; val_offset:41421*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41421*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xfffe000; valaddr_reg:x3; val_offset:41424*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41424*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xffff000; valaddr_reg:x3; val_offset:41427*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41427*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xffff800; valaddr_reg:x3; val_offset:41430*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41430*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xffffc00; valaddr_reg:x3; val_offset:41433*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41433*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xffffe00; valaddr_reg:x3; val_offset:41436*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41436*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xfffff00; valaddr_reg:x3; val_offset:41439*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41439*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xfffff80; valaddr_reg:x3; val_offset:41442*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41442*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xfffffc0; valaddr_reg:x3; val_offset:41445*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41445*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xfffffe0; valaddr_reg:x3; val_offset:41448*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41448*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xffffff0; valaddr_reg:x3; val_offset:41451*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41451*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xffffff8; valaddr_reg:x3; val_offset:41454*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41454*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xffffffc; valaddr_reg:x3; val_offset:41457*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41457*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xffffffe; valaddr_reg:x3; val_offset:41460*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41460*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d2db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e92d2db; op2val:0x0;
op3val:0xfffffff; valaddr_reg:x3; val_offset:41463*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41463*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x135639 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6f3374 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e935639; op2val:0x6f3374;
op3val:0x27800000; valaddr_reg:x3; val_offset:41466*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41466*0 + 3*107*FLEN/8, x4, x1, x2)

inst_13823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x135639 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6f3374 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e935639; op2val:0x6f3374;
op3val:0x27800001; valaddr_reg:x3; val_offset:41469*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41469*0 + 3*107*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943038,32,FLEN)
NAN_BOXED(2123482545,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943039,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196059648,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196059649,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196059651,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196059655,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196059663,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196059679,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196059711,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196059775,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196059903,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196060159,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196060671,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196061695,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196063743,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196067839,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196076031,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196092415,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196125183,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196190719,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196321791,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3196583935,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3197108223,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3198156799,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3200253951,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3200253952,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3202351104,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3203399680,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3203923968,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204186112,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204317184,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204382720,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204415488,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204431872,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204440064,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204444160,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204446208,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204447232,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204447744,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204448000,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204448128,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204448192,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204448224,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204448240,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204448248,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204448252,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204448254,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3204448255,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2123498022,32,FLEN)
NAN_BOXED(2154837620,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046848,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046849,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046851,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046855,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046863,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046879,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046911,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046975,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047103,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047359,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047871,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260048895,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260050943,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260055039,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260063231,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260079615,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260112383,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260177919,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260308991,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260571135,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(261095423,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262143999,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(264241151,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(264241152,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(266338304,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(267386880,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(267911168,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268173312,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268304384,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268369920,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268402688,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268419072,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268427264,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268431360,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268433408,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268434432,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268434944,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435200,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435328,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435392,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435424,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435440,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435448,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435452,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435454,32,FLEN)
NAN_BOXED(2123551451,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435455,32,FLEN)
NAN_BOXED(2123585081,32,FLEN)
NAN_BOXED(7287668,32,FLEN)
NAN_BOXED(662700032,32,FLEN)
NAN_BOXED(2123585081,32,FLEN)
NAN_BOXED(7287668,32,FLEN)
NAN_BOXED(662700033,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
