
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_14080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x800003ff; valaddr_reg:x3; val_offset:42240*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42240*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x800007ff; valaddr_reg:x3; val_offset:42243*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42243*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x80000fff; valaddr_reg:x3; val_offset:42246*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42246*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x80001fff; valaddr_reg:x3; val_offset:42249*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42249*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x80003fff; valaddr_reg:x3; val_offset:42252*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42252*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x80007fff; valaddr_reg:x3; val_offset:42255*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42255*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x8000ffff; valaddr_reg:x3; val_offset:42258*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42258*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x8001ffff; valaddr_reg:x3; val_offset:42261*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42261*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x8003ffff; valaddr_reg:x3; val_offset:42264*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42264*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x8007ffff; valaddr_reg:x3; val_offset:42267*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42267*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x800fffff; valaddr_reg:x3; val_offset:42270*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42270*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:42273*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42273*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x801fffff; valaddr_reg:x3; val_offset:42276*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42276*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:42279*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42279*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:42282*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42282*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:42285*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42285*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:42288*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42288*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x803fffff; valaddr_reg:x3; val_offset:42291*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42291*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x80400000; valaddr_reg:x3; val_offset:42294*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42294*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:42297*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42297*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:42300*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42300*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:42303*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42303*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x80600000; valaddr_reg:x3; val_offset:42306*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42306*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:42309*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42309*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:42312*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42312*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x80700000; valaddr_reg:x3; val_offset:42315*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42315*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x80780000; valaddr_reg:x3; val_offset:42318*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42318*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807c0000; valaddr_reg:x3; val_offset:42321*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42321*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807e0000; valaddr_reg:x3; val_offset:42324*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42324*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807f0000; valaddr_reg:x3; val_offset:42327*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42327*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807f8000; valaddr_reg:x3; val_offset:42330*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42330*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807fc000; valaddr_reg:x3; val_offset:42333*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42333*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807fe000; valaddr_reg:x3; val_offset:42336*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42336*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807ff000; valaddr_reg:x3; val_offset:42339*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42339*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807ff800; valaddr_reg:x3; val_offset:42342*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42342*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807ffc00; valaddr_reg:x3; val_offset:42345*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42345*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807ffe00; valaddr_reg:x3; val_offset:42348*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42348*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807fff00; valaddr_reg:x3; val_offset:42351*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42351*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807fff80; valaddr_reg:x3; val_offset:42354*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42354*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807fffc0; valaddr_reg:x3; val_offset:42357*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42357*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807fffe0; valaddr_reg:x3; val_offset:42360*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42360*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807ffff0; valaddr_reg:x3; val_offset:42363*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42363*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:42366*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42366*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:42369*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42369*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:42372*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42372*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x15f19a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e95f19a; op2val:0x80000000;
op3val:0x807fffff; valaddr_reg:x3; val_offset:42375*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42375*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee800000; valaddr_reg:x3; val_offset:42378*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42378*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee800001; valaddr_reg:x3; val_offset:42381*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42381*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee800003; valaddr_reg:x3; val_offset:42384*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42384*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee800007; valaddr_reg:x3; val_offset:42387*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42387*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee80000f; valaddr_reg:x3; val_offset:42390*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42390*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee80001f; valaddr_reg:x3; val_offset:42393*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42393*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee80003f; valaddr_reg:x3; val_offset:42396*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42396*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee80007f; valaddr_reg:x3; val_offset:42399*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42399*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee8000ff; valaddr_reg:x3; val_offset:42402*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42402*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee8001ff; valaddr_reg:x3; val_offset:42405*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42405*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee8003ff; valaddr_reg:x3; val_offset:42408*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42408*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee8007ff; valaddr_reg:x3; val_offset:42411*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42411*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee800fff; valaddr_reg:x3; val_offset:42414*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42414*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee801fff; valaddr_reg:x3; val_offset:42417*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42417*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee803fff; valaddr_reg:x3; val_offset:42420*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42420*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee807fff; valaddr_reg:x3; val_offset:42423*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42423*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee80ffff; valaddr_reg:x3; val_offset:42426*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42426*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee81ffff; valaddr_reg:x3; val_offset:42429*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42429*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee83ffff; valaddr_reg:x3; val_offset:42432*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42432*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee87ffff; valaddr_reg:x3; val_offset:42435*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42435*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee8fffff; valaddr_reg:x3; val_offset:42438*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42438*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xee9fffff; valaddr_reg:x3; val_offset:42441*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42441*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeebfffff; valaddr_reg:x3; val_offset:42444*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42444*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeec00000; valaddr_reg:x3; val_offset:42447*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42447*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeee00000; valaddr_reg:x3; val_offset:42450*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42450*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeef00000; valaddr_reg:x3; val_offset:42453*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42453*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeef80000; valaddr_reg:x3; val_offset:42456*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42456*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeefc0000; valaddr_reg:x3; val_offset:42459*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42459*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeefe0000; valaddr_reg:x3; val_offset:42462*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42462*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeeff0000; valaddr_reg:x3; val_offset:42465*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42465*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeeff8000; valaddr_reg:x3; val_offset:42468*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42468*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeeffc000; valaddr_reg:x3; val_offset:42471*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42471*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeeffe000; valaddr_reg:x3; val_offset:42474*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42474*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeefff000; valaddr_reg:x3; val_offset:42477*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42477*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeefff800; valaddr_reg:x3; val_offset:42480*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42480*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeefffc00; valaddr_reg:x3; val_offset:42483*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42483*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeefffe00; valaddr_reg:x3; val_offset:42486*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42486*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeeffff00; valaddr_reg:x3; val_offset:42489*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42489*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeeffff80; valaddr_reg:x3; val_offset:42492*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42492*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeeffffc0; valaddr_reg:x3; val_offset:42495*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42495*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeeffffe0; valaddr_reg:x3; val_offset:42498*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42498*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeefffff0; valaddr_reg:x3; val_offset:42501*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42501*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeefffff8; valaddr_reg:x3; val_offset:42504*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42504*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeefffffc; valaddr_reg:x3; val_offset:42507*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42507*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeefffffe; valaddr_reg:x3; val_offset:42510*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42510*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xdd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xeeffffff; valaddr_reg:x3; val_offset:42513*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42513*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xff000001; valaddr_reg:x3; val_offset:42516*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42516*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xff000003; valaddr_reg:x3; val_offset:42519*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42519*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xff000007; valaddr_reg:x3; val_offset:42522*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42522*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xff199999; valaddr_reg:x3; val_offset:42525*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42525*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xff249249; valaddr_reg:x3; val_offset:42528*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42528*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xff333333; valaddr_reg:x3; val_offset:42531*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42531*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:42534*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42534*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:42537*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42537*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xff444444; valaddr_reg:x3; val_offset:42540*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42540*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:42543*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42543*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:42546*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42546*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xff666666; valaddr_reg:x3; val_offset:42549*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42549*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:42552*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42552*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:42555*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42555*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:42558*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42558*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16be21 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x596084 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e96be21; op2val:0xc0596084;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:42561*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42561*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:42564*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42564*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:42567*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42567*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:42570*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42570*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:42573*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42573*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:42576*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42576*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:42579*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42579*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:42582*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42582*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:42585*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42585*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:42588*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42588*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:42591*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42591*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:42594*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42594*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:42597*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42597*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:42600*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42600*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:42603*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42603*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:42606*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42606*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:42609*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42609*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x88000000; valaddr_reg:x3; val_offset:42612*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42612*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x88000001; valaddr_reg:x3; val_offset:42615*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42615*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x88000003; valaddr_reg:x3; val_offset:42618*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42618*0 + 3*110*FLEN/8, x4, x1, x2)

inst_14207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x88000007; valaddr_reg:x3; val_offset:42621*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42621*0 + 3*110*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484671,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147485695,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147487743,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147491839,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147500031,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147516415,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147549183,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147614719,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147745791,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148007935,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148532223,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149580799,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677951,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677952,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153775104,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154823680,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155347968,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155610112,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155741184,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155806720,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155839488,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155855872,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155864064,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155868160,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155870208,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871232,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871744,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872000,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872128,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872192,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872224,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872240,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2123755930,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001366016,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001366017,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001366019,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001366023,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001366031,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001366047,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001366079,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001366143,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001366271,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001366527,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001367039,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001368063,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001370111,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001374207,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001382399,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001398783,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001431551,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001497087,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001628159,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4001890303,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4002414591,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4003463167,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4005560319,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4005560320,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4007657472,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4008706048,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009230336,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009492480,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009623552,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009689088,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009721856,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009738240,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009746432,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009750528,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009752576,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009753600,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009754112,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009754368,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009754496,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009754560,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009754592,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009754608,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009754616,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009754620,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009754622,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4009754623,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2123808289,32,FLEN)
NAN_BOXED(3227082884,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701376,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701377,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701379,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701383,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
