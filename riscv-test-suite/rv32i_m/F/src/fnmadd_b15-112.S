
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_14208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x8800000f; valaddr_reg:x3; val_offset:42624*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42624*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x8800001f; valaddr_reg:x3; val_offset:42627*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42627*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x8800003f; valaddr_reg:x3; val_offset:42630*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42630*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x8800007f; valaddr_reg:x3; val_offset:42633*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42633*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x880000ff; valaddr_reg:x3; val_offset:42636*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42636*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x880001ff; valaddr_reg:x3; val_offset:42639*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42639*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x880003ff; valaddr_reg:x3; val_offset:42642*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42642*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x880007ff; valaddr_reg:x3; val_offset:42645*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42645*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x88000fff; valaddr_reg:x3; val_offset:42648*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42648*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x88001fff; valaddr_reg:x3; val_offset:42651*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42651*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x88003fff; valaddr_reg:x3; val_offset:42654*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42654*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x88007fff; valaddr_reg:x3; val_offset:42657*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42657*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x8800ffff; valaddr_reg:x3; val_offset:42660*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42660*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x8801ffff; valaddr_reg:x3; val_offset:42663*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42663*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x8803ffff; valaddr_reg:x3; val_offset:42666*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42666*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x8807ffff; valaddr_reg:x3; val_offset:42669*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42669*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x880fffff; valaddr_reg:x3; val_offset:42672*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42672*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x881fffff; valaddr_reg:x3; val_offset:42675*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42675*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x883fffff; valaddr_reg:x3; val_offset:42678*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42678*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x88400000; valaddr_reg:x3; val_offset:42681*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42681*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x88600000; valaddr_reg:x3; val_offset:42684*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42684*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x88700000; valaddr_reg:x3; val_offset:42687*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42687*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x88780000; valaddr_reg:x3; val_offset:42690*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42690*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887c0000; valaddr_reg:x3; val_offset:42693*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42693*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887e0000; valaddr_reg:x3; val_offset:42696*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42696*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887f0000; valaddr_reg:x3; val_offset:42699*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42699*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887f8000; valaddr_reg:x3; val_offset:42702*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42702*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887fc000; valaddr_reg:x3; val_offset:42705*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42705*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887fe000; valaddr_reg:x3; val_offset:42708*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42708*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887ff000; valaddr_reg:x3; val_offset:42711*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42711*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887ff800; valaddr_reg:x3; val_offset:42714*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42714*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887ffc00; valaddr_reg:x3; val_offset:42717*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42717*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887ffe00; valaddr_reg:x3; val_offset:42720*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42720*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887fff00; valaddr_reg:x3; val_offset:42723*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42723*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887fff80; valaddr_reg:x3; val_offset:42726*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42726*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887fffc0; valaddr_reg:x3; val_offset:42729*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42729*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887fffe0; valaddr_reg:x3; val_offset:42732*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42732*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887ffff0; valaddr_reg:x3; val_offset:42735*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42735*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887ffff8; valaddr_reg:x3; val_offset:42738*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42738*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887ffffc; valaddr_reg:x3; val_offset:42741*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42741*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887ffffe; valaddr_reg:x3; val_offset:42744*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42744*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x170c3b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e970c3b; op2val:0x80000000;
op3val:0x887fffff; valaddr_reg:x3; val_offset:42747*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42747*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:42750*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42750*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:42753*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42753*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:42756*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42756*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:42759*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42759*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:42762*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42762*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:42765*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42765*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:42768*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42768*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:42771*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42771*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:42774*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42774*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:42777*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42777*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:42780*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42780*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:42783*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42783*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:42786*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42786*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:42789*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42789*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:42792*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42792*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:42795*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42795*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb800000; valaddr_reg:x3; val_offset:42798*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42798*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb800001; valaddr_reg:x3; val_offset:42801*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42801*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb800003; valaddr_reg:x3; val_offset:42804*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42804*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb800007; valaddr_reg:x3; val_offset:42807*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42807*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb80000f; valaddr_reg:x3; val_offset:42810*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42810*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb80001f; valaddr_reg:x3; val_offset:42813*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42813*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb80003f; valaddr_reg:x3; val_offset:42816*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42816*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb80007f; valaddr_reg:x3; val_offset:42819*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42819*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb8000ff; valaddr_reg:x3; val_offset:42822*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42822*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb8001ff; valaddr_reg:x3; val_offset:42825*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42825*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb8003ff; valaddr_reg:x3; val_offset:42828*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42828*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb8007ff; valaddr_reg:x3; val_offset:42831*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42831*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb800fff; valaddr_reg:x3; val_offset:42834*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42834*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb801fff; valaddr_reg:x3; val_offset:42837*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42837*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb803fff; valaddr_reg:x3; val_offset:42840*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42840*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb807fff; valaddr_reg:x3; val_offset:42843*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42843*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb80ffff; valaddr_reg:x3; val_offset:42846*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42846*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb81ffff; valaddr_reg:x3; val_offset:42849*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42849*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb83ffff; valaddr_reg:x3; val_offset:42852*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42852*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb87ffff; valaddr_reg:x3; val_offset:42855*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42855*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb8fffff; valaddr_reg:x3; val_offset:42858*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42858*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xb9fffff; valaddr_reg:x3; val_offset:42861*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42861*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbbfffff; valaddr_reg:x3; val_offset:42864*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42864*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbc00000; valaddr_reg:x3; val_offset:42867*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42867*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbe00000; valaddr_reg:x3; val_offset:42870*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42870*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbf00000; valaddr_reg:x3; val_offset:42873*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42873*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbf80000; valaddr_reg:x3; val_offset:42876*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42876*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbfc0000; valaddr_reg:x3; val_offset:42879*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42879*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbfe0000; valaddr_reg:x3; val_offset:42882*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42882*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbff0000; valaddr_reg:x3; val_offset:42885*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42885*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbff8000; valaddr_reg:x3; val_offset:42888*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42888*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbffc000; valaddr_reg:x3; val_offset:42891*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42891*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbffe000; valaddr_reg:x3; val_offset:42894*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42894*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbfff000; valaddr_reg:x3; val_offset:42897*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42897*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbfff800; valaddr_reg:x3; val_offset:42900*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42900*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbfffc00; valaddr_reg:x3; val_offset:42903*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42903*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbfffe00; valaddr_reg:x3; val_offset:42906*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42906*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbffff00; valaddr_reg:x3; val_offset:42909*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42909*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbffff80; valaddr_reg:x3; val_offset:42912*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42912*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbffffc0; valaddr_reg:x3; val_offset:42915*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42915*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbffffe0; valaddr_reg:x3; val_offset:42918*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42918*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbfffff0; valaddr_reg:x3; val_offset:42921*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42921*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbfffff8; valaddr_reg:x3; val_offset:42924*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42924*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbfffffc; valaddr_reg:x3; val_offset:42927*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42927*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbfffffe; valaddr_reg:x3; val_offset:42930*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42930*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e97f3eb; op2val:0x0;
op3val:0xbffffff; valaddr_reg:x3; val_offset:42933*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42933*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x3f800001; valaddr_reg:x3; val_offset:42936*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42936*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x3f800003; valaddr_reg:x3; val_offset:42939*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42939*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x3f800007; valaddr_reg:x3; val_offset:42942*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42942*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x3f999999; valaddr_reg:x3; val_offset:42945*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42945*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:42948*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42948*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:42951*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42951*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:42954*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42954*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:42957*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42957*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:42960*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42960*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:42963*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42963*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:42966*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42966*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:42969*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42969*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:42972*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42972*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:42975*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42975*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:42978*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42978*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:42981*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42981*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x8b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x45800000; valaddr_reg:x3; val_offset:42984*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42984*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x8b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x45800001; valaddr_reg:x3; val_offset:42987*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42987*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x8b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x45800003; valaddr_reg:x3; val_offset:42990*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42990*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x8b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x45800007; valaddr_reg:x3; val_offset:42993*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42993*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x8b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x4580000f; valaddr_reg:x3; val_offset:42996*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42996*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x8b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x4580001f; valaddr_reg:x3; val_offset:42999*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42999*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x8b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x4580003f; valaddr_reg:x3; val_offset:43002*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43002*0 + 3*111*FLEN/8, x4, x1, x2)

inst_14335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1891b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6b632d and fs3 == 0 and fe3 == 0x8b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9891b0; op2val:0x6b632d;
op3val:0x4580007f; valaddr_reg:x3; val_offset:43005*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43005*0 + 3*111*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701391,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701407,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701439,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701503,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701631,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701887,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281702399,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281703423,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281705471,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281709567,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281717759,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281734143,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281766911,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281832447,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281963519,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282225663,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282749951,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2283798527,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895679,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895680,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2287992832,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289041408,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289565696,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289827840,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289958912,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290024448,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290057216,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290073600,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290081792,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290085888,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290087936,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290088960,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089472,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089728,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089856,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089920,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089952,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089968,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089976,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089980,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089982,32,FLEN)
NAN_BOXED(2123828283,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089983,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937984,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937985,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937987,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937991,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937999,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192938015,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192938047,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192938111,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192938239,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192938495,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192939007,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192940031,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192942079,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192946175,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192954367,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192970751,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(193003519,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(193069055,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(193200127,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(193462271,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(193986559,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(195035135,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(197132287,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(197132288,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(199229440,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(200278016,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(200802304,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201064448,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201195520,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201261056,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201293824,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201310208,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201318400,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201322496,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201324544,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201325568,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326080,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326336,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326464,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326528,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326560,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326576,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326584,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326588,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326590,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(201326591,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1166016512,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1166016513,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1166016515,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1166016519,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1166016527,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1166016543,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1166016575,32,FLEN)
NAN_BOXED(2123927984,32,FLEN)
NAN_BOXED(7037741,32,FLEN)
NAN_BOXED(1166016639,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
