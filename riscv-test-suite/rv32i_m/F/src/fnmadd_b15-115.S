
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_14592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x8580ffff; valaddr_reg:x3; val_offset:43776*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43776*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x8581ffff; valaddr_reg:x3; val_offset:43779*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43779*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x8583ffff; valaddr_reg:x3; val_offset:43782*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43782*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x8587ffff; valaddr_reg:x3; val_offset:43785*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43785*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x858fffff; valaddr_reg:x3; val_offset:43788*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43788*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x859fffff; valaddr_reg:x3; val_offset:43791*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43791*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85bfffff; valaddr_reg:x3; val_offset:43794*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43794*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85c00000; valaddr_reg:x3; val_offset:43797*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43797*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85e00000; valaddr_reg:x3; val_offset:43800*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43800*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85f00000; valaddr_reg:x3; val_offset:43803*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43803*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85f80000; valaddr_reg:x3; val_offset:43806*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43806*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85fc0000; valaddr_reg:x3; val_offset:43809*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43809*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85fe0000; valaddr_reg:x3; val_offset:43812*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43812*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85ff0000; valaddr_reg:x3; val_offset:43815*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43815*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85ff8000; valaddr_reg:x3; val_offset:43818*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43818*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85ffc000; valaddr_reg:x3; val_offset:43821*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43821*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85ffe000; valaddr_reg:x3; val_offset:43824*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43824*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85fff000; valaddr_reg:x3; val_offset:43827*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43827*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85fff800; valaddr_reg:x3; val_offset:43830*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43830*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85fffc00; valaddr_reg:x3; val_offset:43833*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43833*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85fffe00; valaddr_reg:x3; val_offset:43836*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43836*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85ffff00; valaddr_reg:x3; val_offset:43839*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43839*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85ffff80; valaddr_reg:x3; val_offset:43842*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43842*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85ffffc0; valaddr_reg:x3; val_offset:43845*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43845*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85ffffe0; valaddr_reg:x3; val_offset:43848*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43848*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85fffff0; valaddr_reg:x3; val_offset:43851*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43851*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85fffff8; valaddr_reg:x3; val_offset:43854*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43854*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85fffffc; valaddr_reg:x3; val_offset:43857*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43857*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85fffffe; valaddr_reg:x3; val_offset:43860*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43860*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a47f4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a47f4; op2val:0x80000000;
op3val:0x85ffffff; valaddr_reg:x3; val_offset:43863*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43863*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac000000; valaddr_reg:x3; val_offset:43866*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43866*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac000001; valaddr_reg:x3; val_offset:43869*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43869*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac000003; valaddr_reg:x3; val_offset:43872*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43872*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac000007; valaddr_reg:x3; val_offset:43875*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43875*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac00000f; valaddr_reg:x3; val_offset:43878*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43878*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac00001f; valaddr_reg:x3; val_offset:43881*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43881*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac00003f; valaddr_reg:x3; val_offset:43884*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43884*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac00007f; valaddr_reg:x3; val_offset:43887*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43887*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac0000ff; valaddr_reg:x3; val_offset:43890*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43890*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac0001ff; valaddr_reg:x3; val_offset:43893*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43893*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac0003ff; valaddr_reg:x3; val_offset:43896*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43896*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac0007ff; valaddr_reg:x3; val_offset:43899*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43899*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac000fff; valaddr_reg:x3; val_offset:43902*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43902*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac001fff; valaddr_reg:x3; val_offset:43905*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43905*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac003fff; valaddr_reg:x3; val_offset:43908*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43908*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac007fff; valaddr_reg:x3; val_offset:43911*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43911*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac00ffff; valaddr_reg:x3; val_offset:43914*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43914*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac01ffff; valaddr_reg:x3; val_offset:43917*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43917*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac03ffff; valaddr_reg:x3; val_offset:43920*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43920*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac07ffff; valaddr_reg:x3; val_offset:43923*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43923*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac0fffff; valaddr_reg:x3; val_offset:43926*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43926*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac1fffff; valaddr_reg:x3; val_offset:43929*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43929*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac3fffff; valaddr_reg:x3; val_offset:43932*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43932*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac400000; valaddr_reg:x3; val_offset:43935*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43935*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac600000; valaddr_reg:x3; val_offset:43938*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43938*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac700000; valaddr_reg:x3; val_offset:43941*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43941*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac780000; valaddr_reg:x3; val_offset:43944*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43944*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7c0000; valaddr_reg:x3; val_offset:43947*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43947*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7e0000; valaddr_reg:x3; val_offset:43950*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43950*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7f0000; valaddr_reg:x3; val_offset:43953*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43953*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7f8000; valaddr_reg:x3; val_offset:43956*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43956*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7fc000; valaddr_reg:x3; val_offset:43959*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43959*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7fe000; valaddr_reg:x3; val_offset:43962*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43962*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7ff000; valaddr_reg:x3; val_offset:43965*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43965*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7ff800; valaddr_reg:x3; val_offset:43968*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43968*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7ffc00; valaddr_reg:x3; val_offset:43971*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43971*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7ffe00; valaddr_reg:x3; val_offset:43974*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43974*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7fff00; valaddr_reg:x3; val_offset:43977*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43977*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7fff80; valaddr_reg:x3; val_offset:43980*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43980*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7fffc0; valaddr_reg:x3; val_offset:43983*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43983*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7fffe0; valaddr_reg:x3; val_offset:43986*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43986*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7ffff0; valaddr_reg:x3; val_offset:43989*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43989*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7ffff8; valaddr_reg:x3; val_offset:43992*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43992*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7ffffc; valaddr_reg:x3; val_offset:43995*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43995*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7ffffe; valaddr_reg:x3; val_offset:43998*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43998*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xac7fffff; valaddr_reg:x3; val_offset:44001*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44001*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xbf800001; valaddr_reg:x3; val_offset:44004*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44004*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xbf800003; valaddr_reg:x3; val_offset:44007*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44007*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xbf800007; valaddr_reg:x3; val_offset:44010*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44010*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xbf999999; valaddr_reg:x3; val_offset:44013*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44013*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:44016*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44016*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:44019*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44019*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:44022*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44022*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:44025*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44025*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:44028*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44028*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:44031*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44031*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:44034*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44034*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:44037*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44037*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:44040*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44040*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:44043*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44043*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:44046*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44046*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7e20 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6a0ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7e20; op2val:0x806a0ce2;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:44049*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44049*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4800000; valaddr_reg:x3; val_offset:44052*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44052*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4800001; valaddr_reg:x3; val_offset:44055*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44055*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4800003; valaddr_reg:x3; val_offset:44058*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44058*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4800007; valaddr_reg:x3; val_offset:44061*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44061*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf480000f; valaddr_reg:x3; val_offset:44064*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44064*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf480001f; valaddr_reg:x3; val_offset:44067*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44067*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf480003f; valaddr_reg:x3; val_offset:44070*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44070*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf480007f; valaddr_reg:x3; val_offset:44073*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44073*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf48000ff; valaddr_reg:x3; val_offset:44076*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44076*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf48001ff; valaddr_reg:x3; val_offset:44079*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44079*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf48003ff; valaddr_reg:x3; val_offset:44082*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44082*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf48007ff; valaddr_reg:x3; val_offset:44085*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44085*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4800fff; valaddr_reg:x3; val_offset:44088*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44088*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4801fff; valaddr_reg:x3; val_offset:44091*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44091*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4803fff; valaddr_reg:x3; val_offset:44094*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44094*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4807fff; valaddr_reg:x3; val_offset:44097*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44097*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf480ffff; valaddr_reg:x3; val_offset:44100*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44100*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf481ffff; valaddr_reg:x3; val_offset:44103*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44103*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf483ffff; valaddr_reg:x3; val_offset:44106*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44106*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf487ffff; valaddr_reg:x3; val_offset:44109*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44109*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf48fffff; valaddr_reg:x3; val_offset:44112*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44112*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf49fffff; valaddr_reg:x3; val_offset:44115*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44115*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4bfffff; valaddr_reg:x3; val_offset:44118*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44118*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4c00000; valaddr_reg:x3; val_offset:44121*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44121*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4e00000; valaddr_reg:x3; val_offset:44124*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44124*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4f00000; valaddr_reg:x3; val_offset:44127*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44127*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4f80000; valaddr_reg:x3; val_offset:44130*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44130*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4fc0000; valaddr_reg:x3; val_offset:44133*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44133*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4fe0000; valaddr_reg:x3; val_offset:44136*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44136*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4ff0000; valaddr_reg:x3; val_offset:44139*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44139*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4ff8000; valaddr_reg:x3; val_offset:44142*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44142*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4ffc000; valaddr_reg:x3; val_offset:44145*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44145*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4ffe000; valaddr_reg:x3; val_offset:44148*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44148*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4fff000; valaddr_reg:x3; val_offset:44151*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44151*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4fff800; valaddr_reg:x3; val_offset:44154*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44154*0 + 3*114*FLEN/8, x4, x1, x2)

inst_14719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4fffc00; valaddr_reg:x3; val_offset:44157*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44157*0 + 3*114*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239823871,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239889407,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2240020479,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2240282623,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2240806911,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2241855487,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2243952639,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2243952640,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2246049792,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2247098368,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2247622656,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2247884800,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248015872,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248081408,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248114176,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248130560,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248138752,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248142848,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248144896,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248145920,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146432,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146688,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146816,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146880,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146912,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146928,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146936,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146940,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146942,32,FLEN)
NAN_BOXED(2124040180,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146943,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885681152,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885681153,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885681155,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885681159,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885681167,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885681183,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885681215,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885681279,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885681407,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885681663,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885682175,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885683199,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885685247,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885689343,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885697535,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885713919,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885746687,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885812223,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2885943295,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2886205439,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2886729727,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2887778303,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2889875455,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2889875456,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2891972608,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2893021184,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2893545472,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2893807616,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2893938688,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2894004224,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2894036992,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2894053376,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2894061568,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2894065664,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2894067712,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2894068736,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2894069248,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2894069504,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2894069632,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2894069696,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2894069728,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2894069744,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2894069752,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2894069756,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2894069758,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(2894069759,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2124054048,32,FLEN)
NAN_BOXED(2154433762,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102029312,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102029313,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102029315,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102029319,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102029327,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102029343,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102029375,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102029439,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102029567,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102029823,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102030335,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102031359,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102033407,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102037503,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102045695,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102062079,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102094847,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102160383,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102291455,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4102553599,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4103077887,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4104126463,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4106223615,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4106223616,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4108320768,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4109369344,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4109893632,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110155776,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110286848,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110352384,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110385152,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110401536,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110409728,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110413824,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110415872,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110416896,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
