
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_14720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4fffe00; valaddr_reg:x3; val_offset:44160*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44160*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4ffff00; valaddr_reg:x3; val_offset:44163*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44163*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4ffff80; valaddr_reg:x3; val_offset:44166*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44166*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4ffffc0; valaddr_reg:x3; val_offset:44169*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44169*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4ffffe0; valaddr_reg:x3; val_offset:44172*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44172*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4fffff0; valaddr_reg:x3; val_offset:44175*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44175*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4fffff8; valaddr_reg:x3; val_offset:44178*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44178*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4fffffc; valaddr_reg:x3; val_offset:44181*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44181*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4fffffe; valaddr_reg:x3; val_offset:44184*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44184*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xf4ffffff; valaddr_reg:x3; val_offset:44187*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44187*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xff000001; valaddr_reg:x3; val_offset:44190*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44190*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xff000003; valaddr_reg:x3; val_offset:44193*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44193*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xff000007; valaddr_reg:x3; val_offset:44196*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44196*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xff199999; valaddr_reg:x3; val_offset:44199*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44199*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xff249249; valaddr_reg:x3; val_offset:44202*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44202*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xff333333; valaddr_reg:x3; val_offset:44205*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44205*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:44208*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44208*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:44211*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44211*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xff444444; valaddr_reg:x3; val_offset:44214*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44214*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:44217*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44217*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:44220*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44220*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xff666666; valaddr_reg:x3; val_offset:44223*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44223*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:44226*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44226*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:44229*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44229*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:44232*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44232*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a9908 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x53f4d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a9908; op2val:0xc053f4d9;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:44235*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44235*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:44238*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44238*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:44241*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44241*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:44244*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44244*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:44247*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44247*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:44250*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44250*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:44253*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44253*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:44256*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44256*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:44259*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44259*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:44262*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44262*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:44265*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44265*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:44268*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44268*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:44271*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44271*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:44274*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44274*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:44277*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44277*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:44280*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44280*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:44283*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44283*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a000000; valaddr_reg:x3; val_offset:44286*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44286*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a000001; valaddr_reg:x3; val_offset:44289*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44289*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a000003; valaddr_reg:x3; val_offset:44292*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44292*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a000007; valaddr_reg:x3; val_offset:44295*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44295*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a00000f; valaddr_reg:x3; val_offset:44298*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44298*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a00001f; valaddr_reg:x3; val_offset:44301*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44301*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a00003f; valaddr_reg:x3; val_offset:44304*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44304*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a00007f; valaddr_reg:x3; val_offset:44307*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44307*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a0000ff; valaddr_reg:x3; val_offset:44310*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44310*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a0001ff; valaddr_reg:x3; val_offset:44313*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44313*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a0003ff; valaddr_reg:x3; val_offset:44316*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44316*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a0007ff; valaddr_reg:x3; val_offset:44319*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44319*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a000fff; valaddr_reg:x3; val_offset:44322*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44322*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a001fff; valaddr_reg:x3; val_offset:44325*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44325*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a003fff; valaddr_reg:x3; val_offset:44328*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44328*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a007fff; valaddr_reg:x3; val_offset:44331*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44331*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a00ffff; valaddr_reg:x3; val_offset:44334*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44334*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a01ffff; valaddr_reg:x3; val_offset:44337*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44337*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a03ffff; valaddr_reg:x3; val_offset:44340*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44340*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a07ffff; valaddr_reg:x3; val_offset:44343*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44343*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a0fffff; valaddr_reg:x3; val_offset:44346*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44346*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a1fffff; valaddr_reg:x3; val_offset:44349*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44349*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a3fffff; valaddr_reg:x3; val_offset:44352*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44352*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a400000; valaddr_reg:x3; val_offset:44355*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44355*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a600000; valaddr_reg:x3; val_offset:44358*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44358*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a700000; valaddr_reg:x3; val_offset:44361*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44361*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a780000; valaddr_reg:x3; val_offset:44364*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44364*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7c0000; valaddr_reg:x3; val_offset:44367*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44367*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7e0000; valaddr_reg:x3; val_offset:44370*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44370*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7f0000; valaddr_reg:x3; val_offset:44373*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44373*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7f8000; valaddr_reg:x3; val_offset:44376*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44376*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7fc000; valaddr_reg:x3; val_offset:44379*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44379*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7fe000; valaddr_reg:x3; val_offset:44382*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44382*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7ff000; valaddr_reg:x3; val_offset:44385*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44385*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7ff800; valaddr_reg:x3; val_offset:44388*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44388*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7ffc00; valaddr_reg:x3; val_offset:44391*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44391*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7ffe00; valaddr_reg:x3; val_offset:44394*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44394*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7fff00; valaddr_reg:x3; val_offset:44397*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44397*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7fff80; valaddr_reg:x3; val_offset:44400*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44400*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7fffc0; valaddr_reg:x3; val_offset:44403*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44403*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7fffe0; valaddr_reg:x3; val_offset:44406*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44406*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7ffff0; valaddr_reg:x3; val_offset:44409*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44409*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7ffff8; valaddr_reg:x3; val_offset:44412*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44412*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7ffffc; valaddr_reg:x3; val_offset:44415*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44415*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7ffffe; valaddr_reg:x3; val_offset:44418*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44418*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b3f22 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b3f22; op2val:0x80000000;
op3val:0x8a7fffff; valaddr_reg:x3; val_offset:44421*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44421*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23800000; valaddr_reg:x3; val_offset:44424*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44424*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23800001; valaddr_reg:x3; val_offset:44427*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44427*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23800003; valaddr_reg:x3; val_offset:44430*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44430*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23800007; valaddr_reg:x3; val_offset:44433*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44433*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x2380000f; valaddr_reg:x3; val_offset:44436*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44436*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x2380001f; valaddr_reg:x3; val_offset:44439*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44439*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x2380003f; valaddr_reg:x3; val_offset:44442*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44442*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x2380007f; valaddr_reg:x3; val_offset:44445*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44445*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x238000ff; valaddr_reg:x3; val_offset:44448*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44448*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x238001ff; valaddr_reg:x3; val_offset:44451*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44451*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x238003ff; valaddr_reg:x3; val_offset:44454*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44454*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x238007ff; valaddr_reg:x3; val_offset:44457*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44457*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23800fff; valaddr_reg:x3; val_offset:44460*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44460*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23801fff; valaddr_reg:x3; val_offset:44463*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44463*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23803fff; valaddr_reg:x3; val_offset:44466*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44466*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23807fff; valaddr_reg:x3; val_offset:44469*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44469*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x2380ffff; valaddr_reg:x3; val_offset:44472*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44472*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x2381ffff; valaddr_reg:x3; val_offset:44475*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44475*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x2383ffff; valaddr_reg:x3; val_offset:44478*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44478*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x2387ffff; valaddr_reg:x3; val_offset:44481*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44481*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x238fffff; valaddr_reg:x3; val_offset:44484*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44484*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x239fffff; valaddr_reg:x3; val_offset:44487*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44487*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23bfffff; valaddr_reg:x3; val_offset:44490*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44490*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23c00000; valaddr_reg:x3; val_offset:44493*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44493*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23e00000; valaddr_reg:x3; val_offset:44496*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44496*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23f00000; valaddr_reg:x3; val_offset:44499*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44499*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23f80000; valaddr_reg:x3; val_offset:44502*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44502*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23fc0000; valaddr_reg:x3; val_offset:44505*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44505*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23fe0000; valaddr_reg:x3; val_offset:44508*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44508*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23ff0000; valaddr_reg:x3; val_offset:44511*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44511*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23ff8000; valaddr_reg:x3; val_offset:44514*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44514*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23ffc000; valaddr_reg:x3; val_offset:44517*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44517*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23ffe000; valaddr_reg:x3; val_offset:44520*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44520*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23fff000; valaddr_reg:x3; val_offset:44523*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44523*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23fff800; valaddr_reg:x3; val_offset:44526*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44526*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23fffc00; valaddr_reg:x3; val_offset:44529*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44529*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23fffe00; valaddr_reg:x3; val_offset:44532*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44532*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23ffff00; valaddr_reg:x3; val_offset:44535*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44535*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23ffff80; valaddr_reg:x3; val_offset:44538*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44538*0 + 3*115*FLEN/8, x4, x1, x2)

inst_14847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23ffffc0; valaddr_reg:x3; val_offset:44541*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44541*0 + 3*115*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110417408,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110417664,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110417792,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110417856,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110417888,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110417904,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110417912,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110417916,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110417918,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4110417919,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2124060936,32,FLEN)
NAN_BOXED(3226727641,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255808,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255809,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255811,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255815,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255823,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255839,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255871,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255935,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256063,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256319,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256831,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315257855,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315259903,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315263999,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315272191,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315288575,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315321343,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315386879,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315517951,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315780095,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2316304383,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2317352959,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2319450111,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2319450112,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2321547264,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2322595840,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323120128,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323382272,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323513344,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323578880,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323611648,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323628032,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323636224,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323640320,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323642368,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323643392,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323643904,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644160,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644288,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644352,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644384,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644400,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644408,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644412,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644414,32,FLEN)
NAN_BOXED(2124103458,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644415,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595591168,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595591169,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595591171,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595591175,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595591183,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595591199,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595591231,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595591295,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595591423,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595591679,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595592191,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595593215,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595595263,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595599359,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595607551,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595623935,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595656703,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595722239,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(595853311,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(596115455,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(596639743,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(597688319,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(599785471,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(599785472,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(601882624,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(602931200,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603455488,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603717632,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603848704,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603914240,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603947008,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603963392,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603971584,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603975680,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603977728,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603978752,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603979264,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603979520,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603979648,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603979712,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
