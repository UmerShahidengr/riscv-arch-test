
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_14848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23ffffe0; valaddr_reg:x3; val_offset:44544*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44544*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23fffff0; valaddr_reg:x3; val_offset:44547*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44547*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23fffff8; valaddr_reg:x3; val_offset:44550*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44550*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23fffffc; valaddr_reg:x3; val_offset:44553*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44553*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23fffffe; valaddr_reg:x3; val_offset:44556*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44556*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x23ffffff; valaddr_reg:x3; val_offset:44559*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44559*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x3f800001; valaddr_reg:x3; val_offset:44562*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44562*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x3f800003; valaddr_reg:x3; val_offset:44565*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44565*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x3f800007; valaddr_reg:x3; val_offset:44568*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44568*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x3f999999; valaddr_reg:x3; val_offset:44571*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44571*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:44574*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44574*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:44577*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44577*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:44580*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44580*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:44583*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44583*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:44586*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44586*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:44589*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44589*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:44592*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44592*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:44595*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44595*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:44598*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44598*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:44601*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44601*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:44604*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44604*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b4f87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x697de6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b4f87; op2val:0x697de6;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:44607*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44607*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73800000; valaddr_reg:x3; val_offset:44610*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44610*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73800001; valaddr_reg:x3; val_offset:44613*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44613*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73800003; valaddr_reg:x3; val_offset:44616*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44616*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73800007; valaddr_reg:x3; val_offset:44619*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44619*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7380000f; valaddr_reg:x3; val_offset:44622*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44622*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7380001f; valaddr_reg:x3; val_offset:44625*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44625*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7380003f; valaddr_reg:x3; val_offset:44628*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44628*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7380007f; valaddr_reg:x3; val_offset:44631*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44631*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x738000ff; valaddr_reg:x3; val_offset:44634*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44634*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x738001ff; valaddr_reg:x3; val_offset:44637*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44637*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x738003ff; valaddr_reg:x3; val_offset:44640*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44640*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x738007ff; valaddr_reg:x3; val_offset:44643*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44643*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73800fff; valaddr_reg:x3; val_offset:44646*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44646*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73801fff; valaddr_reg:x3; val_offset:44649*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44649*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73803fff; valaddr_reg:x3; val_offset:44652*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44652*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73807fff; valaddr_reg:x3; val_offset:44655*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44655*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7380ffff; valaddr_reg:x3; val_offset:44658*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44658*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7381ffff; valaddr_reg:x3; val_offset:44661*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44661*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7383ffff; valaddr_reg:x3; val_offset:44664*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44664*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7387ffff; valaddr_reg:x3; val_offset:44667*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44667*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x738fffff; valaddr_reg:x3; val_offset:44670*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44670*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x739fffff; valaddr_reg:x3; val_offset:44673*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44673*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73bfffff; valaddr_reg:x3; val_offset:44676*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44676*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73c00000; valaddr_reg:x3; val_offset:44679*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44679*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73e00000; valaddr_reg:x3; val_offset:44682*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44682*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73f00000; valaddr_reg:x3; val_offset:44685*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44685*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73f80000; valaddr_reg:x3; val_offset:44688*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44688*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73fc0000; valaddr_reg:x3; val_offset:44691*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44691*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73fe0000; valaddr_reg:x3; val_offset:44694*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44694*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73ff0000; valaddr_reg:x3; val_offset:44697*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44697*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73ff8000; valaddr_reg:x3; val_offset:44700*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44700*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73ffc000; valaddr_reg:x3; val_offset:44703*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44703*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73ffe000; valaddr_reg:x3; val_offset:44706*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44706*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73fff000; valaddr_reg:x3; val_offset:44709*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44709*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73fff800; valaddr_reg:x3; val_offset:44712*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44712*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73fffc00; valaddr_reg:x3; val_offset:44715*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44715*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73fffe00; valaddr_reg:x3; val_offset:44718*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44718*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73ffff00; valaddr_reg:x3; val_offset:44721*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44721*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73ffff80; valaddr_reg:x3; val_offset:44724*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44724*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73ffffc0; valaddr_reg:x3; val_offset:44727*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44727*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73ffffe0; valaddr_reg:x3; val_offset:44730*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44730*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73fffff0; valaddr_reg:x3; val_offset:44733*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44733*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73fffff8; valaddr_reg:x3; val_offset:44736*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44736*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73fffffc; valaddr_reg:x3; val_offset:44739*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44739*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73fffffe; valaddr_reg:x3; val_offset:44742*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44742*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xe7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x73ffffff; valaddr_reg:x3; val_offset:44745*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44745*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7f000001; valaddr_reg:x3; val_offset:44748*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44748*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7f000003; valaddr_reg:x3; val_offset:44751*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44751*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7f000007; valaddr_reg:x3; val_offset:44754*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44754*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7f199999; valaddr_reg:x3; val_offset:44757*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44757*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7f249249; valaddr_reg:x3; val_offset:44760*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44760*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7f333333; valaddr_reg:x3; val_offset:44763*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44763*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:44766*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44766*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:44769*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44769*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7f444444; valaddr_reg:x3; val_offset:44772*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44772*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:44775*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44775*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:44778*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44778*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7f666666; valaddr_reg:x3; val_offset:44781*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44781*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:44784*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44784*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:44787*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44787*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:44790*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44790*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b9de5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x52918a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b9de5; op2val:0x4052918a;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:44793*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44793*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe000000; valaddr_reg:x3; val_offset:44796*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44796*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe000001; valaddr_reg:x3; val_offset:44799*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44799*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe000003; valaddr_reg:x3; val_offset:44802*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44802*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe000007; valaddr_reg:x3; val_offset:44805*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44805*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe00000f; valaddr_reg:x3; val_offset:44808*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44808*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe00001f; valaddr_reg:x3; val_offset:44811*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44811*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe00003f; valaddr_reg:x3; val_offset:44814*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44814*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe00007f; valaddr_reg:x3; val_offset:44817*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44817*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe0000ff; valaddr_reg:x3; val_offset:44820*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44820*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe0001ff; valaddr_reg:x3; val_offset:44823*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44823*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe0003ff; valaddr_reg:x3; val_offset:44826*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44826*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe0007ff; valaddr_reg:x3; val_offset:44829*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44829*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe000fff; valaddr_reg:x3; val_offset:44832*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44832*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe001fff; valaddr_reg:x3; val_offset:44835*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44835*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe003fff; valaddr_reg:x3; val_offset:44838*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44838*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe007fff; valaddr_reg:x3; val_offset:44841*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44841*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe00ffff; valaddr_reg:x3; val_offset:44844*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44844*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe01ffff; valaddr_reg:x3; val_offset:44847*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44847*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe03ffff; valaddr_reg:x3; val_offset:44850*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44850*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe07ffff; valaddr_reg:x3; val_offset:44853*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44853*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe0fffff; valaddr_reg:x3; val_offset:44856*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44856*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe1fffff; valaddr_reg:x3; val_offset:44859*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44859*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe3fffff; valaddr_reg:x3; val_offset:44862*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44862*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe400000; valaddr_reg:x3; val_offset:44865*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44865*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe600000; valaddr_reg:x3; val_offset:44868*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44868*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe700000; valaddr_reg:x3; val_offset:44871*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44871*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe780000; valaddr_reg:x3; val_offset:44874*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44874*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe7c0000; valaddr_reg:x3; val_offset:44877*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44877*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe7e0000; valaddr_reg:x3; val_offset:44880*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44880*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe7f0000; valaddr_reg:x3; val_offset:44883*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44883*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe7f8000; valaddr_reg:x3; val_offset:44886*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44886*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe7fc000; valaddr_reg:x3; val_offset:44889*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44889*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe7fe000; valaddr_reg:x3; val_offset:44892*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44892*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe7ff000; valaddr_reg:x3; val_offset:44895*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44895*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe7ff800; valaddr_reg:x3; val_offset:44898*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44898*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe7ffc00; valaddr_reg:x3; val_offset:44901*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44901*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe7ffe00; valaddr_reg:x3; val_offset:44904*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44904*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe7fff00; valaddr_reg:x3; val_offset:44907*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44907*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe7fff80; valaddr_reg:x3; val_offset:44910*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44910*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe7fffc0; valaddr_reg:x3; val_offset:44913*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44913*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe7fffe0; valaddr_reg:x3; val_offset:44916*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44916*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe7ffff0; valaddr_reg:x3; val_offset:44919*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44919*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe7ffff8; valaddr_reg:x3; val_offset:44922*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44922*0 + 3*116*FLEN/8, x4, x1, x2)

inst_14975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c224c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x68ef7e and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c224c; op2val:0x8068ef7e;
op3val:0xbe7ffffc; valaddr_reg:x3; val_offset:44925*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 44925*0 + 3*116*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603979744,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603979760,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603979768,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603979772,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603979774,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(603979775,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2124107655,32,FLEN)
NAN_BOXED(6913510,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937768448,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937768449,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937768451,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937768455,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937768463,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937768479,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937768511,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937768575,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937768703,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937768959,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937769471,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937770495,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937772543,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937776639,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937784831,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937801215,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937833983,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1937899519,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1938030591,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1938292735,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1938817023,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1939865599,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1941962751,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1941962752,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1944059904,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1945108480,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1945632768,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1945894912,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946025984,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946091520,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946124288,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946140672,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946148864,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946152960,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946155008,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946156032,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946156544,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946156800,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946156928,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946156992,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946157024,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946157040,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946157048,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946157052,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946157054,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(1946157055,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2124127717,32,FLEN)
NAN_BOXED(1079153034,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187671040,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187671041,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187671043,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187671047,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187671055,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187671071,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187671103,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187671167,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187671295,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187671551,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187672063,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187673087,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187675135,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187679231,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187687423,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187703807,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187736575,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187802111,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3187933183,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3188195327,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3188719615,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3189768191,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3191865343,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3191865344,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3193962496,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3195011072,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3195535360,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3195797504,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3195928576,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3195994112,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3196026880,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3196043264,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3196051456,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3196055552,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3196057600,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3196058624,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3196059136,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3196059392,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3196059520,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3196059584,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3196059616,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3196059632,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3196059640,32,FLEN)
NAN_BOXED(2124161612,32,FLEN)
NAN_BOXED(2154360702,32,FLEN)
NAN_BOXED(3196059644,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
