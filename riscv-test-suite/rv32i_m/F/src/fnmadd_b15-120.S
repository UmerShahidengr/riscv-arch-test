
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_15232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ecc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x672cf4 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ecc16; op2val:0x80672cf4;
op3val:0xc97ffe00; valaddr_reg:x3; val_offset:45696*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45696*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ecc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x672cf4 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ecc16; op2val:0x80672cf4;
op3val:0xc97fff00; valaddr_reg:x3; val_offset:45699*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45699*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ecc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x672cf4 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ecc16; op2val:0x80672cf4;
op3val:0xc97fff80; valaddr_reg:x3; val_offset:45702*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45702*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ecc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x672cf4 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ecc16; op2val:0x80672cf4;
op3val:0xc97fffc0; valaddr_reg:x3; val_offset:45705*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45705*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ecc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x672cf4 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ecc16; op2val:0x80672cf4;
op3val:0xc97fffe0; valaddr_reg:x3; val_offset:45708*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45708*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ecc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x672cf4 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ecc16; op2val:0x80672cf4;
op3val:0xc97ffff0; valaddr_reg:x3; val_offset:45711*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45711*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ecc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x672cf4 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ecc16; op2val:0x80672cf4;
op3val:0xc97ffff8; valaddr_reg:x3; val_offset:45714*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45714*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ecc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x672cf4 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ecc16; op2val:0x80672cf4;
op3val:0xc97ffffc; valaddr_reg:x3; val_offset:45717*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45717*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ecc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x672cf4 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ecc16; op2val:0x80672cf4;
op3val:0xc97ffffe; valaddr_reg:x3; val_offset:45720*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45720*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ecc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x672cf4 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ecc16; op2val:0x80672cf4;
op3val:0xc97fffff; valaddr_reg:x3; val_offset:45723*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45723*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f000000; valaddr_reg:x3; val_offset:45726*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45726*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f000001; valaddr_reg:x3; val_offset:45729*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45729*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f000003; valaddr_reg:x3; val_offset:45732*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45732*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f000007; valaddr_reg:x3; val_offset:45735*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45735*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f00000f; valaddr_reg:x3; val_offset:45738*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45738*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f00001f; valaddr_reg:x3; val_offset:45741*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45741*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f00003f; valaddr_reg:x3; val_offset:45744*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45744*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f00007f; valaddr_reg:x3; val_offset:45747*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45747*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f0000ff; valaddr_reg:x3; val_offset:45750*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45750*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f0001ff; valaddr_reg:x3; val_offset:45753*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45753*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f0003ff; valaddr_reg:x3; val_offset:45756*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45756*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f0007ff; valaddr_reg:x3; val_offset:45759*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45759*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f000fff; valaddr_reg:x3; val_offset:45762*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45762*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f001fff; valaddr_reg:x3; val_offset:45765*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45765*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f003fff; valaddr_reg:x3; val_offset:45768*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45768*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f007fff; valaddr_reg:x3; val_offset:45771*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45771*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f00ffff; valaddr_reg:x3; val_offset:45774*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45774*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f01ffff; valaddr_reg:x3; val_offset:45777*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45777*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f03ffff; valaddr_reg:x3; val_offset:45780*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45780*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f07ffff; valaddr_reg:x3; val_offset:45783*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45783*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f0fffff; valaddr_reg:x3; val_offset:45786*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45786*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f1fffff; valaddr_reg:x3; val_offset:45789*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45789*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f3fffff; valaddr_reg:x3; val_offset:45792*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45792*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f400000; valaddr_reg:x3; val_offset:45795*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45795*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f600000; valaddr_reg:x3; val_offset:45798*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45798*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f700000; valaddr_reg:x3; val_offset:45801*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45801*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f780000; valaddr_reg:x3; val_offset:45804*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45804*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7c0000; valaddr_reg:x3; val_offset:45807*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45807*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7e0000; valaddr_reg:x3; val_offset:45810*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45810*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7f0000; valaddr_reg:x3; val_offset:45813*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45813*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7f8000; valaddr_reg:x3; val_offset:45816*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45816*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7fc000; valaddr_reg:x3; val_offset:45819*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45819*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7fe000; valaddr_reg:x3; val_offset:45822*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45822*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7ff000; valaddr_reg:x3; val_offset:45825*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45825*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7ff800; valaddr_reg:x3; val_offset:45828*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45828*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7ffc00; valaddr_reg:x3; val_offset:45831*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45831*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7ffe00; valaddr_reg:x3; val_offset:45834*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45834*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7fff00; valaddr_reg:x3; val_offset:45837*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45837*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7fff80; valaddr_reg:x3; val_offset:45840*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45840*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7fffc0; valaddr_reg:x3; val_offset:45843*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45843*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7fffe0; valaddr_reg:x3; val_offset:45846*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45846*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7ffff0; valaddr_reg:x3; val_offset:45849*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45849*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7ffff8; valaddr_reg:x3; val_offset:45852*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45852*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7ffffc; valaddr_reg:x3; val_offset:45855*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45855*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7ffffe; valaddr_reg:x3; val_offset:45858*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45858*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x5e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x2f7fffff; valaddr_reg:x3; val_offset:45861*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45861*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x3f800001; valaddr_reg:x3; val_offset:45864*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45864*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x3f800003; valaddr_reg:x3; val_offset:45867*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45867*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x3f800007; valaddr_reg:x3; val_offset:45870*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45870*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x3f999999; valaddr_reg:x3; val_offset:45873*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45873*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:45876*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45876*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:45879*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45879*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:45882*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45882*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:45885*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45885*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:45888*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45888*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:45891*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45891*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:45894*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45894*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:45897*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45897*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:45900*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45900*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:45903*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45903*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:45906*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45906*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f2396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x66f43a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f2396; op2val:0x66f43a;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:45909*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45909*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x80000000; valaddr_reg:x3; val_offset:45912*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45912*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:45915*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45915*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:45918*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45918*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:45921*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45921*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x8000000f; valaddr_reg:x3; val_offset:45924*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45924*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x8000001f; valaddr_reg:x3; val_offset:45927*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45927*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x8000003f; valaddr_reg:x3; val_offset:45930*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45930*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x8000007f; valaddr_reg:x3; val_offset:45933*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45933*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x800000ff; valaddr_reg:x3; val_offset:45936*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45936*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x800001ff; valaddr_reg:x3; val_offset:45939*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45939*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x800003ff; valaddr_reg:x3; val_offset:45942*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45942*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x800007ff; valaddr_reg:x3; val_offset:45945*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45945*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x80000fff; valaddr_reg:x3; val_offset:45948*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45948*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x80001fff; valaddr_reg:x3; val_offset:45951*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45951*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x80003fff; valaddr_reg:x3; val_offset:45954*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45954*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x80007fff; valaddr_reg:x3; val_offset:45957*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45957*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x8000ffff; valaddr_reg:x3; val_offset:45960*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45960*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x8001ffff; valaddr_reg:x3; val_offset:45963*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45963*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x8003ffff; valaddr_reg:x3; val_offset:45966*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45966*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x8007ffff; valaddr_reg:x3; val_offset:45969*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45969*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x800fffff; valaddr_reg:x3; val_offset:45972*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45972*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:45975*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45975*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x801fffff; valaddr_reg:x3; val_offset:45978*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45978*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:45981*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45981*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:45984*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45984*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:45987*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45987*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:45990*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45990*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x803fffff; valaddr_reg:x3; val_offset:45993*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45993*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x80400000; valaddr_reg:x3; val_offset:45996*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45996*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:45999*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45999*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:46002*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46002*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:46005*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46005*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x80600000; valaddr_reg:x3; val_offset:46008*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46008*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:46011*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46011*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:46014*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46014*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x80700000; valaddr_reg:x3; val_offset:46017*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46017*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x80780000; valaddr_reg:x3; val_offset:46020*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46020*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807c0000; valaddr_reg:x3; val_offset:46023*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46023*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807e0000; valaddr_reg:x3; val_offset:46026*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46026*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807f0000; valaddr_reg:x3; val_offset:46029*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46029*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807f8000; valaddr_reg:x3; val_offset:46032*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46032*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807fc000; valaddr_reg:x3; val_offset:46035*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46035*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807fe000; valaddr_reg:x3; val_offset:46038*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46038*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807ff000; valaddr_reg:x3; val_offset:46041*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46041*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807ff800; valaddr_reg:x3; val_offset:46044*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46044*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807ffc00; valaddr_reg:x3; val_offset:46047*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46047*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807ffe00; valaddr_reg:x3; val_offset:46050*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46050*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807fff00; valaddr_reg:x3; val_offset:46053*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46053*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807fff80; valaddr_reg:x3; val_offset:46056*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46056*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807fffc0; valaddr_reg:x3; val_offset:46059*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46059*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807fffe0; valaddr_reg:x3; val_offset:46062*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46062*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807ffff0; valaddr_reg:x3; val_offset:46065*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46065*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:46068*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46068*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:46071*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46071*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:46074*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46074*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fd026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9fd026; op2val:0x80000000;
op3val:0x807fffff; valaddr_reg:x3; val_offset:46077*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46077*0 + 3*119*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124336150,32,FLEN)
NAN_BOXED(2154245364,32,FLEN)
NAN_BOXED(3380608512,32,FLEN)
NAN_BOXED(2124336150,32,FLEN)
NAN_BOXED(2154245364,32,FLEN)
NAN_BOXED(3380608768,32,FLEN)
NAN_BOXED(2124336150,32,FLEN)
NAN_BOXED(2154245364,32,FLEN)
NAN_BOXED(3380608896,32,FLEN)
NAN_BOXED(2124336150,32,FLEN)
NAN_BOXED(2154245364,32,FLEN)
NAN_BOXED(3380608960,32,FLEN)
NAN_BOXED(2124336150,32,FLEN)
NAN_BOXED(2154245364,32,FLEN)
NAN_BOXED(3380608992,32,FLEN)
NAN_BOXED(2124336150,32,FLEN)
NAN_BOXED(2154245364,32,FLEN)
NAN_BOXED(3380609008,32,FLEN)
NAN_BOXED(2124336150,32,FLEN)
NAN_BOXED(2154245364,32,FLEN)
NAN_BOXED(3380609016,32,FLEN)
NAN_BOXED(2124336150,32,FLEN)
NAN_BOXED(2154245364,32,FLEN)
NAN_BOXED(3380609020,32,FLEN)
NAN_BOXED(2124336150,32,FLEN)
NAN_BOXED(2154245364,32,FLEN)
NAN_BOXED(3380609022,32,FLEN)
NAN_BOXED(2124336150,32,FLEN)
NAN_BOXED(2154245364,32,FLEN)
NAN_BOXED(3380609023,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788529152,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788529153,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788529155,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788529159,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788529167,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788529183,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788529215,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788529279,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788529407,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788529663,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788530175,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788531199,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788533247,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788537343,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788545535,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788561919,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788594687,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788660223,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(788791295,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(789053439,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(789577727,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(790626303,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(792723455,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(792723456,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(794820608,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(795869184,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796393472,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796655616,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796786688,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796852224,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796884992,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796901376,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796909568,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796913664,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796915712,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796916736,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796917248,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796917504,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796917632,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796917696,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796917728,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796917744,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796917752,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796917756,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796917758,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(796917759,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2124358550,32,FLEN)
NAN_BOXED(6747194,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483663,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483679,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483711,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483775,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483903,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484159,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484671,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147485695,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147487743,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147491839,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147500031,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147516415,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147549183,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147614719,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147745791,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148007935,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148532223,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149580799,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677951,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677952,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153775104,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154823680,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155347968,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155610112,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155741184,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155806720,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155839488,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155855872,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155864064,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155868160,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155870208,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871232,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871744,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872000,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872128,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872192,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872224,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872240,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2124402726,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
