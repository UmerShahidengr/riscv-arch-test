
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_15616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:46848*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46848*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:46851*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46851*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:46854*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46854*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:46857*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46857*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:46860*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46860*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:46863*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46863*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:46866*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46866*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:46869*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46869*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48000000; valaddr_reg:x3; val_offset:46872*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46872*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48000001; valaddr_reg:x3; val_offset:46875*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46875*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48000003; valaddr_reg:x3; val_offset:46878*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46878*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48000007; valaddr_reg:x3; val_offset:46881*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46881*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x4800000f; valaddr_reg:x3; val_offset:46884*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46884*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x4800001f; valaddr_reg:x3; val_offset:46887*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46887*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x4800003f; valaddr_reg:x3; val_offset:46890*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46890*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x4800007f; valaddr_reg:x3; val_offset:46893*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46893*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x480000ff; valaddr_reg:x3; val_offset:46896*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46896*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x480001ff; valaddr_reg:x3; val_offset:46899*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46899*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x480003ff; valaddr_reg:x3; val_offset:46902*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46902*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x480007ff; valaddr_reg:x3; val_offset:46905*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46905*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48000fff; valaddr_reg:x3; val_offset:46908*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46908*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48001fff; valaddr_reg:x3; val_offset:46911*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46911*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48003fff; valaddr_reg:x3; val_offset:46914*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46914*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48007fff; valaddr_reg:x3; val_offset:46917*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46917*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x4800ffff; valaddr_reg:x3; val_offset:46920*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46920*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x4801ffff; valaddr_reg:x3; val_offset:46923*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46923*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x4803ffff; valaddr_reg:x3; val_offset:46926*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46926*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x4807ffff; valaddr_reg:x3; val_offset:46929*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46929*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x480fffff; valaddr_reg:x3; val_offset:46932*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46932*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x481fffff; valaddr_reg:x3; val_offset:46935*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46935*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x483fffff; valaddr_reg:x3; val_offset:46938*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46938*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48400000; valaddr_reg:x3; val_offset:46941*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46941*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48600000; valaddr_reg:x3; val_offset:46944*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46944*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48700000; valaddr_reg:x3; val_offset:46947*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46947*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48780000; valaddr_reg:x3; val_offset:46950*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46950*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487c0000; valaddr_reg:x3; val_offset:46953*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46953*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487e0000; valaddr_reg:x3; val_offset:46956*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46956*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487f0000; valaddr_reg:x3; val_offset:46959*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46959*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487f8000; valaddr_reg:x3; val_offset:46962*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46962*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487fc000; valaddr_reg:x3; val_offset:46965*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46965*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487fe000; valaddr_reg:x3; val_offset:46968*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46968*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487ff000; valaddr_reg:x3; val_offset:46971*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46971*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487ff800; valaddr_reg:x3; val_offset:46974*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46974*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487ffc00; valaddr_reg:x3; val_offset:46977*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46977*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487ffe00; valaddr_reg:x3; val_offset:46980*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46980*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487fff00; valaddr_reg:x3; val_offset:46983*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46983*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487fff80; valaddr_reg:x3; val_offset:46986*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46986*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487fffc0; valaddr_reg:x3; val_offset:46989*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46989*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487fffe0; valaddr_reg:x3; val_offset:46992*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46992*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487ffff0; valaddr_reg:x3; val_offset:46995*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46995*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487ffff8; valaddr_reg:x3; val_offset:46998*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46998*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487ffffc; valaddr_reg:x3; val_offset:47001*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47001*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487ffffe; valaddr_reg:x3; val_offset:47004*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47004*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487fffff; valaddr_reg:x3; val_offset:47007*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47007*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf800000; valaddr_reg:x3; val_offset:47010*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47010*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf800001; valaddr_reg:x3; val_offset:47013*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47013*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf800003; valaddr_reg:x3; val_offset:47016*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47016*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf800007; valaddr_reg:x3; val_offset:47019*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47019*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf80000f; valaddr_reg:x3; val_offset:47022*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47022*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf80001f; valaddr_reg:x3; val_offset:47025*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47025*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf80003f; valaddr_reg:x3; val_offset:47028*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47028*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf80007f; valaddr_reg:x3; val_offset:47031*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47031*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf8000ff; valaddr_reg:x3; val_offset:47034*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47034*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf8001ff; valaddr_reg:x3; val_offset:47037*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47037*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf8003ff; valaddr_reg:x3; val_offset:47040*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47040*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf8007ff; valaddr_reg:x3; val_offset:47043*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47043*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf800fff; valaddr_reg:x3; val_offset:47046*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47046*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf801fff; valaddr_reg:x3; val_offset:47049*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47049*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf803fff; valaddr_reg:x3; val_offset:47052*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47052*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf807fff; valaddr_reg:x3; val_offset:47055*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47055*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf80ffff; valaddr_reg:x3; val_offset:47058*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47058*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf81ffff; valaddr_reg:x3; val_offset:47061*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47061*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf83ffff; valaddr_reg:x3; val_offset:47064*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47064*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf87ffff; valaddr_reg:x3; val_offset:47067*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47067*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf8fffff; valaddr_reg:x3; val_offset:47070*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47070*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf9fffff; valaddr_reg:x3; val_offset:47073*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47073*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafbfffff; valaddr_reg:x3; val_offset:47076*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47076*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafc00000; valaddr_reg:x3; val_offset:47079*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47079*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafe00000; valaddr_reg:x3; val_offset:47082*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47082*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaff00000; valaddr_reg:x3; val_offset:47085*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47085*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaff80000; valaddr_reg:x3; val_offset:47088*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47088*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffc0000; valaddr_reg:x3; val_offset:47091*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47091*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffe0000; valaddr_reg:x3; val_offset:47094*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47094*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafff0000; valaddr_reg:x3; val_offset:47097*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47097*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafff8000; valaddr_reg:x3; val_offset:47100*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47100*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafffc000; valaddr_reg:x3; val_offset:47103*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47103*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafffe000; valaddr_reg:x3; val_offset:47106*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47106*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffff000; valaddr_reg:x3; val_offset:47109*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47109*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffff800; valaddr_reg:x3; val_offset:47112*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47112*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffffc00; valaddr_reg:x3; val_offset:47115*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47115*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffffe00; valaddr_reg:x3; val_offset:47118*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47118*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafffff00; valaddr_reg:x3; val_offset:47121*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47121*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafffff80; valaddr_reg:x3; val_offset:47124*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47124*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafffffc0; valaddr_reg:x3; val_offset:47127*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47127*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafffffe0; valaddr_reg:x3; val_offset:47130*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47130*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffffff0; valaddr_reg:x3; val_offset:47133*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47133*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffffff8; valaddr_reg:x3; val_offset:47136*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47136*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffffffc; valaddr_reg:x3; val_offset:47139*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47139*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffffffe; valaddr_reg:x3; val_offset:47142*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47142*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafffffff; valaddr_reg:x3; val_offset:47145*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47145*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbf800001; valaddr_reg:x3; val_offset:47148*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47148*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbf800003; valaddr_reg:x3; val_offset:47151*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47151*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbf800007; valaddr_reg:x3; val_offset:47154*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47154*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbf999999; valaddr_reg:x3; val_offset:47157*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47157*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:47160*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47160*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:47163*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47163*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:47166*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47166*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:47169*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47169*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:47172*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47172*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:47175*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47175*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:47178*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47178*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:47181*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47181*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:47184*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47184*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:47187*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47187*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:47190*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47190*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:47193*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47193*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:47196*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47196*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:47199*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47199*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:47202*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47202*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:47205*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47205*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:47208*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47208*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:47211*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47211*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:47214*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47214*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:47217*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47217*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:47220*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47220*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:47223*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47223*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:47226*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47226*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:47229*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47229*0 + 3*122*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1207959552,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1207959553,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1207959555,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1207959559,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1207959567,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1207959583,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1207959615,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1207959679,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1207959807,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1207960063,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1207960575,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1207961599,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1207963647,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1207967743,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1207975935,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1207992319,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1208025087,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1208090623,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1208221695,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1208483839,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1209008127,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1210056703,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1212153855,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1212153856,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1214251008,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1215299584,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1215823872,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216086016,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216217088,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216282624,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216315392,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216331776,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216339968,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216344064,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216346112,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216347136,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216347648,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216347904,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216348032,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216348096,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216348128,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216348144,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216348152,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216348156,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216348158,32,FLEN)
NAN_BOXED(2124666592,32,FLEN)
NAN_BOXED(6553625,32,FLEN)
NAN_BOXED(1216348159,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944401408,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944401409,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944401411,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944401415,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944401423,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944401439,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944401471,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944401535,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944401663,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944401919,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944402431,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944403455,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944405503,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944409599,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944417791,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944434175,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944466943,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944532479,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944663551,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2944925695,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2945449983,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2946498559,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2948595711,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2948595712,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2950692864,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2951741440,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952265728,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952527872,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952658944,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952724480,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952757248,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952773632,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952781824,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952785920,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952787968,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952788992,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952789504,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952789760,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952789888,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952789952,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952789984,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952790000,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952790008,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952790012,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952790014,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(2952790015,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2124731404,32,FLEN)
NAN_BOXED(2153997952,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
