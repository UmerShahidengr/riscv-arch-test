
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_15744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:47232*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47232*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:47235*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47235*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:47238*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47238*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:47241*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47241*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81800000; valaddr_reg:x3; val_offset:47244*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47244*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81800001; valaddr_reg:x3; val_offset:47247*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47247*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81800003; valaddr_reg:x3; val_offset:47250*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47250*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81800007; valaddr_reg:x3; val_offset:47253*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47253*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x8180000f; valaddr_reg:x3; val_offset:47256*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47256*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x8180001f; valaddr_reg:x3; val_offset:47259*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47259*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x8180003f; valaddr_reg:x3; val_offset:47262*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47262*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x8180007f; valaddr_reg:x3; val_offset:47265*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47265*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x818000ff; valaddr_reg:x3; val_offset:47268*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47268*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x818001ff; valaddr_reg:x3; val_offset:47271*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47271*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x818003ff; valaddr_reg:x3; val_offset:47274*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47274*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x818007ff; valaddr_reg:x3; val_offset:47277*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47277*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81800fff; valaddr_reg:x3; val_offset:47280*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47280*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81801fff; valaddr_reg:x3; val_offset:47283*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47283*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81803fff; valaddr_reg:x3; val_offset:47286*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47286*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81807fff; valaddr_reg:x3; val_offset:47289*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47289*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x8180ffff; valaddr_reg:x3; val_offset:47292*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47292*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x8181ffff; valaddr_reg:x3; val_offset:47295*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47295*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x8183ffff; valaddr_reg:x3; val_offset:47298*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47298*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x8187ffff; valaddr_reg:x3; val_offset:47301*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47301*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x818fffff; valaddr_reg:x3; val_offset:47304*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47304*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x819fffff; valaddr_reg:x3; val_offset:47307*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47307*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81bfffff; valaddr_reg:x3; val_offset:47310*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47310*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81c00000; valaddr_reg:x3; val_offset:47313*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47313*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81e00000; valaddr_reg:x3; val_offset:47316*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47316*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81f00000; valaddr_reg:x3; val_offset:47319*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47319*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81f80000; valaddr_reg:x3; val_offset:47322*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47322*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fc0000; valaddr_reg:x3; val_offset:47325*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47325*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fe0000; valaddr_reg:x3; val_offset:47328*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47328*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ff0000; valaddr_reg:x3; val_offset:47331*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47331*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ff8000; valaddr_reg:x3; val_offset:47334*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47334*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ffc000; valaddr_reg:x3; val_offset:47337*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47337*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ffe000; valaddr_reg:x3; val_offset:47340*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47340*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fff000; valaddr_reg:x3; val_offset:47343*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47343*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fff800; valaddr_reg:x3; val_offset:47346*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47346*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fffc00; valaddr_reg:x3; val_offset:47349*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47349*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fffe00; valaddr_reg:x3; val_offset:47352*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47352*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ffff00; valaddr_reg:x3; val_offset:47355*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47355*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ffff80; valaddr_reg:x3; val_offset:47358*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47358*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ffffc0; valaddr_reg:x3; val_offset:47361*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47361*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ffffe0; valaddr_reg:x3; val_offset:47364*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47364*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fffff0; valaddr_reg:x3; val_offset:47367*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47367*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fffff8; valaddr_reg:x3; val_offset:47370*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47370*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fffffc; valaddr_reg:x3; val_offset:47373*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47373*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fffffe; valaddr_reg:x3; val_offset:47376*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47376*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ffffff; valaddr_reg:x3; val_offset:47379*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47379*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3f800001; valaddr_reg:x3; val_offset:47382*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47382*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3f800003; valaddr_reg:x3; val_offset:47385*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47385*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3f800007; valaddr_reg:x3; val_offset:47388*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47388*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3f999999; valaddr_reg:x3; val_offset:47391*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47391*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:47394*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47394*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:47397*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47397*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:47400*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47400*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:47403*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47403*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:47406*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47406*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:47409*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47409*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:47412*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47412*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:47415*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47415*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:47418*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47418*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:47421*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47421*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:47424*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47424*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:47427*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47427*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44000000; valaddr_reg:x3; val_offset:47430*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47430*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44000001; valaddr_reg:x3; val_offset:47433*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47433*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44000003; valaddr_reg:x3; val_offset:47436*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47436*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44000007; valaddr_reg:x3; val_offset:47439*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47439*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x4400000f; valaddr_reg:x3; val_offset:47442*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47442*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x4400001f; valaddr_reg:x3; val_offset:47445*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47445*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x4400003f; valaddr_reg:x3; val_offset:47448*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47448*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x4400007f; valaddr_reg:x3; val_offset:47451*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47451*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x440000ff; valaddr_reg:x3; val_offset:47454*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47454*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x440001ff; valaddr_reg:x3; val_offset:47457*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47457*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x440003ff; valaddr_reg:x3; val_offset:47460*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47460*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x440007ff; valaddr_reg:x3; val_offset:47463*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47463*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44000fff; valaddr_reg:x3; val_offset:47466*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47466*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44001fff; valaddr_reg:x3; val_offset:47469*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47469*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44003fff; valaddr_reg:x3; val_offset:47472*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47472*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44007fff; valaddr_reg:x3; val_offset:47475*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47475*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x4400ffff; valaddr_reg:x3; val_offset:47478*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47478*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x4401ffff; valaddr_reg:x3; val_offset:47481*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47481*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x4403ffff; valaddr_reg:x3; val_offset:47484*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47484*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x4407ffff; valaddr_reg:x3; val_offset:47487*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47487*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x440fffff; valaddr_reg:x3; val_offset:47490*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47490*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x441fffff; valaddr_reg:x3; val_offset:47493*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47493*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x443fffff; valaddr_reg:x3; val_offset:47496*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47496*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44400000; valaddr_reg:x3; val_offset:47499*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47499*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44600000; valaddr_reg:x3; val_offset:47502*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47502*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44700000; valaddr_reg:x3; val_offset:47505*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47505*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44780000; valaddr_reg:x3; val_offset:47508*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47508*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447c0000; valaddr_reg:x3; val_offset:47511*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47511*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447e0000; valaddr_reg:x3; val_offset:47514*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47514*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447f0000; valaddr_reg:x3; val_offset:47517*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47517*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447f8000; valaddr_reg:x3; val_offset:47520*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47520*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447fc000; valaddr_reg:x3; val_offset:47523*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47523*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447fe000; valaddr_reg:x3; val_offset:47526*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47526*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447ff000; valaddr_reg:x3; val_offset:47529*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47529*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447ff800; valaddr_reg:x3; val_offset:47532*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47532*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447ffc00; valaddr_reg:x3; val_offset:47535*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47535*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447ffe00; valaddr_reg:x3; val_offset:47538*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47538*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447fff00; valaddr_reg:x3; val_offset:47541*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47541*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447fff80; valaddr_reg:x3; val_offset:47544*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47544*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447fffc0; valaddr_reg:x3; val_offset:47547*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47547*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447fffe0; valaddr_reg:x3; val_offset:47550*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47550*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447ffff0; valaddr_reg:x3; val_offset:47553*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47553*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447ffff8; valaddr_reg:x3; val_offset:47556*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47556*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447ffffc; valaddr_reg:x3; val_offset:47559*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47559*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447ffffe; valaddr_reg:x3; val_offset:47562*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47562*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447fffff; valaddr_reg:x3; val_offset:47565*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47565*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:47568*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47568*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:47571*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47571*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:47574*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47574*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:47577*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47577*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:47580*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47580*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:47583*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47583*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:47586*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47586*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:47589*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47589*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:47592*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47592*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:47595*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47595*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:47598*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47598*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:47601*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47601*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:47604*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47604*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:47607*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47607*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:47610*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47610*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:47613*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47613*0 + 3*123*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649472,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649473,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649475,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649479,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649487,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649503,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649535,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649599,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649727,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649983,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172650495,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172651519,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172653567,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172657663,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172665855,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172682239,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172715007,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172780543,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172911615,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2173173759,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2173698047,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2174746623,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2176843775,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2176843776,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2178940928,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2179989504,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180513792,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180775936,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180907008,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180972544,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181005312,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181021696,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181029888,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181033984,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181036032,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037056,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037568,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037824,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037952,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038016,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038048,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038064,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038072,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038076,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038078,32,FLEN)
NAN_BOXED(2124782241,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038079,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140850688,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140850689,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140850691,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140850695,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140850703,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140850719,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140850751,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140850815,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140850943,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140851199,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140851711,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140852735,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140854783,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140858879,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140867071,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140883455,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140916223,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1140981759,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1141112831,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1141374975,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1141899263,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1142947839,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1145044991,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1145044992,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1147142144,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1148190720,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1148715008,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1148977152,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149108224,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149173760,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149206528,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149222912,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149231104,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149235200,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149237248,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149238272,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149238784,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149239040,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149239168,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149239232,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149239264,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149239280,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149239288,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149239292,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149239294,32,FLEN)
NAN_BOXED(2124792183,32,FLEN)
NAN_BOXED(6477856,32,FLEN)
NAN_BOXED(1149239295,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
