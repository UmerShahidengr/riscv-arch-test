
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_16000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce80000f; valaddr_reg:x3; val_offset:48000*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48000*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce80001f; valaddr_reg:x3; val_offset:48003*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48003*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce80003f; valaddr_reg:x3; val_offset:48006*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48006*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce80007f; valaddr_reg:x3; val_offset:48009*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48009*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce8000ff; valaddr_reg:x3; val_offset:48012*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48012*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce8001ff; valaddr_reg:x3; val_offset:48015*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48015*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce8003ff; valaddr_reg:x3; val_offset:48018*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48018*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce8007ff; valaddr_reg:x3; val_offset:48021*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48021*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce800fff; valaddr_reg:x3; val_offset:48024*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48024*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce801fff; valaddr_reg:x3; val_offset:48027*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48027*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce803fff; valaddr_reg:x3; val_offset:48030*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48030*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce807fff; valaddr_reg:x3; val_offset:48033*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48033*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce80ffff; valaddr_reg:x3; val_offset:48036*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48036*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce81ffff; valaddr_reg:x3; val_offset:48039*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48039*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce83ffff; valaddr_reg:x3; val_offset:48042*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48042*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce87ffff; valaddr_reg:x3; val_offset:48045*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48045*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce8fffff; valaddr_reg:x3; val_offset:48048*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48048*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce9fffff; valaddr_reg:x3; val_offset:48051*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48051*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcebfffff; valaddr_reg:x3; val_offset:48054*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48054*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcec00000; valaddr_reg:x3; val_offset:48057*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48057*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcee00000; valaddr_reg:x3; val_offset:48060*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48060*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcef00000; valaddr_reg:x3; val_offset:48063*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48063*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcef80000; valaddr_reg:x3; val_offset:48066*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48066*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefc0000; valaddr_reg:x3; val_offset:48069*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48069*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefe0000; valaddr_reg:x3; val_offset:48072*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48072*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceff0000; valaddr_reg:x3; val_offset:48075*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48075*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceff8000; valaddr_reg:x3; val_offset:48078*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48078*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceffc000; valaddr_reg:x3; val_offset:48081*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48081*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceffe000; valaddr_reg:x3; val_offset:48084*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48084*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefff000; valaddr_reg:x3; val_offset:48087*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48087*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefff800; valaddr_reg:x3; val_offset:48090*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48090*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefffc00; valaddr_reg:x3; val_offset:48093*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48093*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefffe00; valaddr_reg:x3; val_offset:48096*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48096*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceffff00; valaddr_reg:x3; val_offset:48099*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48099*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceffff80; valaddr_reg:x3; val_offset:48102*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48102*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceffffc0; valaddr_reg:x3; val_offset:48105*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48105*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceffffe0; valaddr_reg:x3; val_offset:48108*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48108*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefffff0; valaddr_reg:x3; val_offset:48111*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48111*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefffff8; valaddr_reg:x3; val_offset:48114*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48114*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefffffc; valaddr_reg:x3; val_offset:48117*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48117*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefffffe; valaddr_reg:x3; val_offset:48120*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48120*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceffffff; valaddr_reg:x3; val_offset:48123*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48123*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:48126*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48126*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:48129*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48129*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:48132*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48132*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:48135*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48135*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:48138*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48138*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:48141*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48141*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:48144*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48144*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:48147*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48147*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:48150*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48150*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:48153*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48153*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:48156*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48156*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:48159*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48159*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:48162*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48162*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:48165*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48165*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:48168*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48168*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:48171*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48171*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba800000; valaddr_reg:x3; val_offset:48174*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48174*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba800001; valaddr_reg:x3; val_offset:48177*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48177*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba800003; valaddr_reg:x3; val_offset:48180*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48180*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba800007; valaddr_reg:x3; val_offset:48183*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48183*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba80000f; valaddr_reg:x3; val_offset:48186*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48186*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba80001f; valaddr_reg:x3; val_offset:48189*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48189*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba80003f; valaddr_reg:x3; val_offset:48192*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48192*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba80007f; valaddr_reg:x3; val_offset:48195*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48195*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba8000ff; valaddr_reg:x3; val_offset:48198*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48198*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba8001ff; valaddr_reg:x3; val_offset:48201*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48201*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba8003ff; valaddr_reg:x3; val_offset:48204*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48204*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba8007ff; valaddr_reg:x3; val_offset:48207*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48207*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba800fff; valaddr_reg:x3; val_offset:48210*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48210*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba801fff; valaddr_reg:x3; val_offset:48213*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48213*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba803fff; valaddr_reg:x3; val_offset:48216*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48216*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba807fff; valaddr_reg:x3; val_offset:48219*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48219*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba80ffff; valaddr_reg:x3; val_offset:48222*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48222*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba81ffff; valaddr_reg:x3; val_offset:48225*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48225*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba83ffff; valaddr_reg:x3; val_offset:48228*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48228*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba87ffff; valaddr_reg:x3; val_offset:48231*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48231*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba8fffff; valaddr_reg:x3; val_offset:48234*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48234*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba9fffff; valaddr_reg:x3; val_offset:48237*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48237*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbabfffff; valaddr_reg:x3; val_offset:48240*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48240*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbac00000; valaddr_reg:x3; val_offset:48243*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48243*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbae00000; valaddr_reg:x3; val_offset:48246*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48246*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaf00000; valaddr_reg:x3; val_offset:48249*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48249*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaf80000; valaddr_reg:x3; val_offset:48252*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48252*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafc0000; valaddr_reg:x3; val_offset:48255*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48255*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafe0000; valaddr_reg:x3; val_offset:48258*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48258*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaff0000; valaddr_reg:x3; val_offset:48261*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48261*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaff8000; valaddr_reg:x3; val_offset:48264*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48264*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaffc000; valaddr_reg:x3; val_offset:48267*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48267*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaffe000; valaddr_reg:x3; val_offset:48270*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48270*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafff000; valaddr_reg:x3; val_offset:48273*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48273*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafff800; valaddr_reg:x3; val_offset:48276*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48276*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafffc00; valaddr_reg:x3; val_offset:48279*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48279*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafffe00; valaddr_reg:x3; val_offset:48282*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48282*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaffff00; valaddr_reg:x3; val_offset:48285*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48285*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaffff80; valaddr_reg:x3; val_offset:48288*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48288*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaffffc0; valaddr_reg:x3; val_offset:48291*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48291*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaffffe0; valaddr_reg:x3; val_offset:48294*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48294*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafffff0; valaddr_reg:x3; val_offset:48297*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48297*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafffff8; valaddr_reg:x3; val_offset:48300*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48300*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafffffc; valaddr_reg:x3; val_offset:48303*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48303*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafffffe; valaddr_reg:x3; val_offset:48306*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48306*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaffffff; valaddr_reg:x3; val_offset:48309*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48309*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd000000; valaddr_reg:x3; val_offset:48312*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48312*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd000001; valaddr_reg:x3; val_offset:48315*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48315*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd000003; valaddr_reg:x3; val_offset:48318*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48318*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd000007; valaddr_reg:x3; val_offset:48321*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48321*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd00000f; valaddr_reg:x3; val_offset:48324*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48324*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd00001f; valaddr_reg:x3; val_offset:48327*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48327*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd00003f; valaddr_reg:x3; val_offset:48330*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48330*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd00007f; valaddr_reg:x3; val_offset:48333*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48333*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd0000ff; valaddr_reg:x3; val_offset:48336*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48336*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd0001ff; valaddr_reg:x3; val_offset:48339*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48339*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd0003ff; valaddr_reg:x3; val_offset:48342*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48342*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd0007ff; valaddr_reg:x3; val_offset:48345*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48345*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd000fff; valaddr_reg:x3; val_offset:48348*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48348*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd001fff; valaddr_reg:x3; val_offset:48351*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48351*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd003fff; valaddr_reg:x3; val_offset:48354*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48354*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd007fff; valaddr_reg:x3; val_offset:48357*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48357*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd00ffff; valaddr_reg:x3; val_offset:48360*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48360*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd01ffff; valaddr_reg:x3; val_offset:48363*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48363*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd03ffff; valaddr_reg:x3; val_offset:48366*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48366*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd07ffff; valaddr_reg:x3; val_offset:48369*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48369*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd0fffff; valaddr_reg:x3; val_offset:48372*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48372*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd1fffff; valaddr_reg:x3; val_offset:48375*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48375*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd3fffff; valaddr_reg:x3; val_offset:48378*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48378*0 + 3*125*FLEN/8, x4, x1, x2)

inst_16127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd400000; valaddr_reg:x3; val_offset:48381*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48381*0 + 3*125*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3464495119,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3464495135,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3464495167,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3464495231,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3464495359,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3464495615,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3464496127,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3464497151,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3464499199,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3464503295,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3464511487,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3464527871,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3464560639,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3464626175,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3464757247,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3465019391,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3465543679,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3466592255,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3468689407,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3468689408,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3470786560,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3471835136,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472359424,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472621568,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472752640,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472818176,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472850944,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472867328,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472875520,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472879616,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472881664,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472882688,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472883200,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472883456,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472883584,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472883648,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472883680,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472883696,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472883704,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472883708,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472883710,32,FLEN)
NAN_BOXED(2124878936,32,FLEN)
NAN_BOXED(2153910181,32,FLEN)
NAN_BOXED(3472883711,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3128950784,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3128950785,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3128950787,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3128950791,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3128950799,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3128950815,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3128950847,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3128950911,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3128951039,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3128951295,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3128951807,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3128952831,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3128954879,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3128958975,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3128967167,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3128983551,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3129016319,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3129081855,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3129212927,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3129475071,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3129999359,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3131047935,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3133145087,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3133145088,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3135242240,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3136290816,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3136815104,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137077248,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137208320,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137273856,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137306624,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137323008,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137331200,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137335296,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137337344,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137338368,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137338880,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137339136,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137339264,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137339328,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137339360,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137339376,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137339384,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137339388,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137339390,32,FLEN)
NAN_BOXED(2124955091,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3137339391,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244635648,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244635649,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244635651,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244635655,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244635663,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244635679,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244635711,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244635775,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244635903,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244636159,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244636671,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244637695,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244639743,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244643839,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244652031,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244668415,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244701183,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244766719,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4244897791,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4245159935,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4245684223,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4246732799,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4248829951,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4248829952,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
