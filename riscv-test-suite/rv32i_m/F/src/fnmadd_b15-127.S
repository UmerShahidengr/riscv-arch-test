
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_16128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd600000; valaddr_reg:x3; val_offset:48384*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48384*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd700000; valaddr_reg:x3; val_offset:48387*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48387*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd780000; valaddr_reg:x3; val_offset:48390*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48390*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7c0000; valaddr_reg:x3; val_offset:48393*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48393*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7e0000; valaddr_reg:x3; val_offset:48396*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48396*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7f0000; valaddr_reg:x3; val_offset:48399*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48399*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7f8000; valaddr_reg:x3; val_offset:48402*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48402*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7fc000; valaddr_reg:x3; val_offset:48405*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48405*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7fe000; valaddr_reg:x3; val_offset:48408*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48408*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7ff000; valaddr_reg:x3; val_offset:48411*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48411*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7ff800; valaddr_reg:x3; val_offset:48414*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48414*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7ffc00; valaddr_reg:x3; val_offset:48417*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48417*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7ffe00; valaddr_reg:x3; val_offset:48420*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48420*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7fff00; valaddr_reg:x3; val_offset:48423*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48423*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7fff80; valaddr_reg:x3; val_offset:48426*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48426*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7fffc0; valaddr_reg:x3; val_offset:48429*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48429*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7fffe0; valaddr_reg:x3; val_offset:48432*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48432*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7ffff0; valaddr_reg:x3; val_offset:48435*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48435*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7ffff8; valaddr_reg:x3; val_offset:48438*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48438*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7ffffc; valaddr_reg:x3; val_offset:48441*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48441*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7ffffe; valaddr_reg:x3; val_offset:48444*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48444*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd7fffff; valaddr_reg:x3; val_offset:48447*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48447*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xff000001; valaddr_reg:x3; val_offset:48450*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48450*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xff000003; valaddr_reg:x3; val_offset:48453*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48453*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xff000007; valaddr_reg:x3; val_offset:48456*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48456*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xff199999; valaddr_reg:x3; val_offset:48459*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48459*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xff249249; valaddr_reg:x3; val_offset:48462*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48462*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xff333333; valaddr_reg:x3; val_offset:48465*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48465*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:48468*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48468*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:48471*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48471*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xff444444; valaddr_reg:x3; val_offset:48474*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48474*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:48477*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48477*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:48480*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48480*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xff666666; valaddr_reg:x3; val_offset:48483*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48483*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:48486*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48486*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:48489*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48489*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:48492*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48492*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:48495*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48495*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64800000; valaddr_reg:x3; val_offset:48498*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48498*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64800001; valaddr_reg:x3; val_offset:48501*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48501*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64800003; valaddr_reg:x3; val_offset:48504*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48504*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64800007; valaddr_reg:x3; val_offset:48507*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48507*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x6480000f; valaddr_reg:x3; val_offset:48510*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48510*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x6480001f; valaddr_reg:x3; val_offset:48513*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48513*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x6480003f; valaddr_reg:x3; val_offset:48516*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48516*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x6480007f; valaddr_reg:x3; val_offset:48519*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48519*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x648000ff; valaddr_reg:x3; val_offset:48522*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48522*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x648001ff; valaddr_reg:x3; val_offset:48525*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48525*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x648003ff; valaddr_reg:x3; val_offset:48528*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48528*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x648007ff; valaddr_reg:x3; val_offset:48531*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48531*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64800fff; valaddr_reg:x3; val_offset:48534*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48534*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64801fff; valaddr_reg:x3; val_offset:48537*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48537*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64803fff; valaddr_reg:x3; val_offset:48540*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48540*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64807fff; valaddr_reg:x3; val_offset:48543*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48543*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x6480ffff; valaddr_reg:x3; val_offset:48546*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48546*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x6481ffff; valaddr_reg:x3; val_offset:48549*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48549*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x6483ffff; valaddr_reg:x3; val_offset:48552*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48552*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x6487ffff; valaddr_reg:x3; val_offset:48555*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48555*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x648fffff; valaddr_reg:x3; val_offset:48558*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48558*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x649fffff; valaddr_reg:x3; val_offset:48561*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48561*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64bfffff; valaddr_reg:x3; val_offset:48564*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48564*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64c00000; valaddr_reg:x3; val_offset:48567*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48567*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64e00000; valaddr_reg:x3; val_offset:48570*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48570*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64f00000; valaddr_reg:x3; val_offset:48573*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48573*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64f80000; valaddr_reg:x3; val_offset:48576*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48576*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64fc0000; valaddr_reg:x3; val_offset:48579*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48579*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64fe0000; valaddr_reg:x3; val_offset:48582*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48582*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64ff0000; valaddr_reg:x3; val_offset:48585*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48585*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64ff8000; valaddr_reg:x3; val_offset:48588*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48588*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64ffc000; valaddr_reg:x3; val_offset:48591*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48591*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64ffe000; valaddr_reg:x3; val_offset:48594*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48594*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64fff000; valaddr_reg:x3; val_offset:48597*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48597*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64fff800; valaddr_reg:x3; val_offset:48600*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48600*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64fffc00; valaddr_reg:x3; val_offset:48603*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48603*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64fffe00; valaddr_reg:x3; val_offset:48606*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48606*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64ffff00; valaddr_reg:x3; val_offset:48609*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48609*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64ffff80; valaddr_reg:x3; val_offset:48612*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48612*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64ffffc0; valaddr_reg:x3; val_offset:48615*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48615*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64ffffe0; valaddr_reg:x3; val_offset:48618*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48618*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64fffff0; valaddr_reg:x3; val_offset:48621*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48621*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64fffff8; valaddr_reg:x3; val_offset:48624*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48624*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64fffffc; valaddr_reg:x3; val_offset:48627*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48627*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64fffffe; valaddr_reg:x3; val_offset:48630*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48630*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x64ffffff; valaddr_reg:x3; val_offset:48633*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48633*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x7f000001; valaddr_reg:x3; val_offset:48636*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48636*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x7f000003; valaddr_reg:x3; val_offset:48639*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48639*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x7f000007; valaddr_reg:x3; val_offset:48642*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48642*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x7f199999; valaddr_reg:x3; val_offset:48645*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48645*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x7f249249; valaddr_reg:x3; val_offset:48648*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48648*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x7f333333; valaddr_reg:x3; val_offset:48651*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48651*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:48654*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48654*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:48657*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48657*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x7f444444; valaddr_reg:x3; val_offset:48660*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48660*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:48663*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48663*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:48666*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48666*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x7f666666; valaddr_reg:x3; val_offset:48669*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48669*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:48672*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48672*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:48675*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48675*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:48678*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48678*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d944 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40ecb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9d944; op2val:0x4040ecb4;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:48681*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48681*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe2800000; valaddr_reg:x3; val_offset:48684*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48684*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe2800001; valaddr_reg:x3; val_offset:48687*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48687*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe2800003; valaddr_reg:x3; val_offset:48690*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48690*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe2800007; valaddr_reg:x3; val_offset:48693*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48693*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe280000f; valaddr_reg:x3; val_offset:48696*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48696*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe280001f; valaddr_reg:x3; val_offset:48699*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48699*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe280003f; valaddr_reg:x3; val_offset:48702*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48702*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe280007f; valaddr_reg:x3; val_offset:48705*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48705*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe28000ff; valaddr_reg:x3; val_offset:48708*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48708*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe28001ff; valaddr_reg:x3; val_offset:48711*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48711*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe28003ff; valaddr_reg:x3; val_offset:48714*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48714*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe28007ff; valaddr_reg:x3; val_offset:48717*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48717*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe2800fff; valaddr_reg:x3; val_offset:48720*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48720*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe2801fff; valaddr_reg:x3; val_offset:48723*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48723*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe2803fff; valaddr_reg:x3; val_offset:48726*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48726*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe2807fff; valaddr_reg:x3; val_offset:48729*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48729*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe280ffff; valaddr_reg:x3; val_offset:48732*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48732*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe281ffff; valaddr_reg:x3; val_offset:48735*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48735*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe283ffff; valaddr_reg:x3; val_offset:48738*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48738*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe287ffff; valaddr_reg:x3; val_offset:48741*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48741*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe28fffff; valaddr_reg:x3; val_offset:48744*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48744*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe29fffff; valaddr_reg:x3; val_offset:48747*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48747*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe2bfffff; valaddr_reg:x3; val_offset:48750*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48750*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe2c00000; valaddr_reg:x3; val_offset:48753*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48753*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe2e00000; valaddr_reg:x3; val_offset:48756*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48756*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe2f00000; valaddr_reg:x3; val_offset:48759*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48759*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe2f80000; valaddr_reg:x3; val_offset:48762*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48762*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29e9e5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40d9d2 and fs3 == 1 and fe3 == 0xc5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea9e9e5; op2val:0xc040d9d2;
op3val:0xe2fc0000; valaddr_reg:x3; val_offset:48765*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48765*0 + 3*126*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4250927104,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4251975680,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4252499968,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4252762112,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4252893184,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4252958720,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4252991488,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4253007872,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4253016064,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4253020160,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4253022208,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4253023232,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4253023744,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4253024000,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4253024128,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4253024192,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4253024224,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4253024240,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4253024248,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4253024252,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4253024254,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4253024255,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2125019325,32,FLEN)
NAN_BOXED(3225527223,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686110208,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686110209,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686110211,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686110215,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686110223,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686110239,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686110271,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686110335,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686110463,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686110719,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686111231,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686112255,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686114303,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686118399,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686126591,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686142975,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686175743,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686241279,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686372351,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1686634495,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1687158783,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1688207359,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1690304511,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1690304512,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1692401664,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1693450240,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1693974528,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694236672,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694367744,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694433280,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694466048,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694482432,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694490624,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694494720,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694496768,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694497792,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694498304,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694498560,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694498688,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694498752,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694498784,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694498800,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694498808,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694498812,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694498814,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(1694498815,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2125060420,32,FLEN)
NAN_BOXED(1077996724,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039424,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039425,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039427,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039431,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039439,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039455,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039487,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039551,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039679,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800039935,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800040447,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800041471,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800043519,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800047615,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800055807,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800072191,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800104959,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800170495,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800301567,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3800563711,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3801087999,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3802136575,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3804233727,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3804233728,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3806330880,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3807379456,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3807903744,32,FLEN)
NAN_BOXED(2125064677,32,FLEN)
NAN_BOXED(3225475538,32,FLEN)
NAN_BOXED(3808165888,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
