
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_16512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xe8fffff; valaddr_reg:x3; val_offset:49536*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49536*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xe9fffff; valaddr_reg:x3; val_offset:49539*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49539*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xebfffff; valaddr_reg:x3; val_offset:49542*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49542*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xec00000; valaddr_reg:x3; val_offset:49545*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49545*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xee00000; valaddr_reg:x3; val_offset:49548*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49548*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xef00000; valaddr_reg:x3; val_offset:49551*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49551*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xef80000; valaddr_reg:x3; val_offset:49554*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49554*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xefc0000; valaddr_reg:x3; val_offset:49557*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49557*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xefe0000; valaddr_reg:x3; val_offset:49560*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49560*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xeff0000; valaddr_reg:x3; val_offset:49563*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49563*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xeff8000; valaddr_reg:x3; val_offset:49566*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49566*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xeffc000; valaddr_reg:x3; val_offset:49569*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49569*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xeffe000; valaddr_reg:x3; val_offset:49572*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49572*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xefff000; valaddr_reg:x3; val_offset:49575*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49575*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xefff800; valaddr_reg:x3; val_offset:49578*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49578*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xefffc00; valaddr_reg:x3; val_offset:49581*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49581*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xefffe00; valaddr_reg:x3; val_offset:49584*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49584*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xeffff00; valaddr_reg:x3; val_offset:49587*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49587*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xeffff80; valaddr_reg:x3; val_offset:49590*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49590*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xeffffc0; valaddr_reg:x3; val_offset:49593*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49593*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xeffffe0; valaddr_reg:x3; val_offset:49596*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49596*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xefffff0; valaddr_reg:x3; val_offset:49599*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49599*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xefffff8; valaddr_reg:x3; val_offset:49602*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49602*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xefffffc; valaddr_reg:x3; val_offset:49605*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49605*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xefffffe; valaddr_reg:x3; val_offset:49608*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49608*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bfe94 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabfe94; op2val:0x0;
op3val:0xeffffff; valaddr_reg:x3; val_offset:49611*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49611*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x65000000; valaddr_reg:x3; val_offset:49614*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49614*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x65000001; valaddr_reg:x3; val_offset:49617*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49617*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x65000003; valaddr_reg:x3; val_offset:49620*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49620*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x65000007; valaddr_reg:x3; val_offset:49623*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49623*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x6500000f; valaddr_reg:x3; val_offset:49626*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49626*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x6500001f; valaddr_reg:x3; val_offset:49629*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49629*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x6500003f; valaddr_reg:x3; val_offset:49632*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49632*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x6500007f; valaddr_reg:x3; val_offset:49635*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49635*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x650000ff; valaddr_reg:x3; val_offset:49638*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49638*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x650001ff; valaddr_reg:x3; val_offset:49641*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49641*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x650003ff; valaddr_reg:x3; val_offset:49644*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49644*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x650007ff; valaddr_reg:x3; val_offset:49647*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49647*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x65000fff; valaddr_reg:x3; val_offset:49650*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49650*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x65001fff; valaddr_reg:x3; val_offset:49653*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49653*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x65003fff; valaddr_reg:x3; val_offset:49656*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49656*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x65007fff; valaddr_reg:x3; val_offset:49659*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49659*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x6500ffff; valaddr_reg:x3; val_offset:49662*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49662*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x6501ffff; valaddr_reg:x3; val_offset:49665*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49665*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x6503ffff; valaddr_reg:x3; val_offset:49668*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49668*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x6507ffff; valaddr_reg:x3; val_offset:49671*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49671*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x650fffff; valaddr_reg:x3; val_offset:49674*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49674*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x651fffff; valaddr_reg:x3; val_offset:49677*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49677*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x653fffff; valaddr_reg:x3; val_offset:49680*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49680*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x65400000; valaddr_reg:x3; val_offset:49683*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49683*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x65600000; valaddr_reg:x3; val_offset:49686*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49686*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x65700000; valaddr_reg:x3; val_offset:49689*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49689*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x65780000; valaddr_reg:x3; val_offset:49692*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49692*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657c0000; valaddr_reg:x3; val_offset:49695*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49695*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657e0000; valaddr_reg:x3; val_offset:49698*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49698*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657f0000; valaddr_reg:x3; val_offset:49701*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49701*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657f8000; valaddr_reg:x3; val_offset:49704*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49704*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657fc000; valaddr_reg:x3; val_offset:49707*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49707*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657fe000; valaddr_reg:x3; val_offset:49710*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49710*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657ff000; valaddr_reg:x3; val_offset:49713*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49713*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657ff800; valaddr_reg:x3; val_offset:49716*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49716*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657ffc00; valaddr_reg:x3; val_offset:49719*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49719*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657ffe00; valaddr_reg:x3; val_offset:49722*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49722*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657fff00; valaddr_reg:x3; val_offset:49725*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49725*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657fff80; valaddr_reg:x3; val_offset:49728*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49728*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657fffc0; valaddr_reg:x3; val_offset:49731*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49731*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657fffe0; valaddr_reg:x3; val_offset:49734*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49734*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657ffff0; valaddr_reg:x3; val_offset:49737*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49737*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657ffff8; valaddr_reg:x3; val_offset:49740*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49740*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657ffffc; valaddr_reg:x3; val_offset:49743*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49743*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657ffffe; valaddr_reg:x3; val_offset:49746*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49746*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xca and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x657fffff; valaddr_reg:x3; val_offset:49749*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49749*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x7f000001; valaddr_reg:x3; val_offset:49752*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49752*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x7f000003; valaddr_reg:x3; val_offset:49755*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49755*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x7f000007; valaddr_reg:x3; val_offset:49758*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49758*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x7f199999; valaddr_reg:x3; val_offset:49761*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49761*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x7f249249; valaddr_reg:x3; val_offset:49764*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49764*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x7f333333; valaddr_reg:x3; val_offset:49767*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49767*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:49770*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49770*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:49773*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49773*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x7f444444; valaddr_reg:x3; val_offset:49776*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49776*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:49779*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49779*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:49782*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49782*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x7f666666; valaddr_reg:x3; val_offset:49785*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49785*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:49788*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49788*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:49791*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49791*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:49794*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49794*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ca0c5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dd18b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaca0c5; op2val:0x403dd18b;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:49797*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49797*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:49800*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49800*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:49803*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49803*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:49806*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49806*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:49809*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49809*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:49812*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49812*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:49815*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49815*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:49818*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49818*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:49821*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49821*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:49824*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49824*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:49827*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49827*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:49830*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49830*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:49833*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49833*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:49836*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49836*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:49839*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49839*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:49842*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49842*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:49845*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49845*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4800000; valaddr_reg:x3; val_offset:49848*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49848*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4800001; valaddr_reg:x3; val_offset:49851*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49851*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4800003; valaddr_reg:x3; val_offset:49854*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49854*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4800007; valaddr_reg:x3; val_offset:49857*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49857*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x480000f; valaddr_reg:x3; val_offset:49860*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49860*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x480001f; valaddr_reg:x3; val_offset:49863*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49863*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x480003f; valaddr_reg:x3; val_offset:49866*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49866*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x480007f; valaddr_reg:x3; val_offset:49869*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49869*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x48000ff; valaddr_reg:x3; val_offset:49872*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49872*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x48001ff; valaddr_reg:x3; val_offset:49875*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49875*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x48003ff; valaddr_reg:x3; val_offset:49878*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49878*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x48007ff; valaddr_reg:x3; val_offset:49881*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49881*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4800fff; valaddr_reg:x3; val_offset:49884*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49884*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4801fff; valaddr_reg:x3; val_offset:49887*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49887*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4803fff; valaddr_reg:x3; val_offset:49890*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49890*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4807fff; valaddr_reg:x3; val_offset:49893*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49893*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x480ffff; valaddr_reg:x3; val_offset:49896*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49896*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x481ffff; valaddr_reg:x3; val_offset:49899*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49899*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x483ffff; valaddr_reg:x3; val_offset:49902*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49902*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x487ffff; valaddr_reg:x3; val_offset:49905*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49905*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x48fffff; valaddr_reg:x3; val_offset:49908*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49908*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x49fffff; valaddr_reg:x3; val_offset:49911*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49911*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4bfffff; valaddr_reg:x3; val_offset:49914*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49914*0 + 3*129*FLEN/8, x4, x1, x2)

inst_16639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4c00000; valaddr_reg:x3; val_offset:49917*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49917*0 + 3*129*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(244318207,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(245366783,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(247463935,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(247463936,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(249561088,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(250609664,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251133952,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251396096,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251527168,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251592704,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251625472,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251641856,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251650048,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251654144,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251656192,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657216,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657728,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657984,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658112,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658176,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658208,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658224,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658232,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658236,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658238,32,FLEN)
NAN_BOXED(2125201044,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658239,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694498816,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694498817,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694498819,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694498823,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694498831,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694498847,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694498879,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694498943,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694499071,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694499327,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694499839,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694500863,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694502911,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694507007,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694515199,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694531583,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694564351,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694629887,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1694760959,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1695023103,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1695547391,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1696595967,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1698693119,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1698693120,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1700790272,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1701838848,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702363136,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702625280,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702756352,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702821888,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702854656,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702871040,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702879232,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702883328,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702885376,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702886400,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702886912,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702887168,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702887296,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702887360,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702887392,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702887408,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702887416,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702887420,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702887422,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(1702887423,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2125242565,32,FLEN)
NAN_BOXED(1077793163,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497472,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497473,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497475,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497479,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497487,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497503,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497535,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497599,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497727,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497983,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75498495,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75499519,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75501567,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75505663,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75513855,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75530239,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75563007,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75628543,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75759615,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(76021759,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(76546047,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(77594623,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691775,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691776,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
