
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_16640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4e00000; valaddr_reg:x3; val_offset:49920*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49920*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4f00000; valaddr_reg:x3; val_offset:49923*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49923*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4f80000; valaddr_reg:x3; val_offset:49926*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49926*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4fc0000; valaddr_reg:x3; val_offset:49929*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49929*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4fe0000; valaddr_reg:x3; val_offset:49932*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49932*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4ff0000; valaddr_reg:x3; val_offset:49935*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49935*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4ff8000; valaddr_reg:x3; val_offset:49938*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49938*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4ffc000; valaddr_reg:x3; val_offset:49941*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49941*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4ffe000; valaddr_reg:x3; val_offset:49944*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49944*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4fff000; valaddr_reg:x3; val_offset:49947*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49947*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4fff800; valaddr_reg:x3; val_offset:49950*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49950*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4fffc00; valaddr_reg:x3; val_offset:49953*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49953*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4fffe00; valaddr_reg:x3; val_offset:49956*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49956*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4ffff00; valaddr_reg:x3; val_offset:49959*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49959*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4ffff80; valaddr_reg:x3; val_offset:49962*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49962*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4ffffc0; valaddr_reg:x3; val_offset:49965*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49965*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4ffffe0; valaddr_reg:x3; val_offset:49968*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49968*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4fffff0; valaddr_reg:x3; val_offset:49971*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49971*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4fffff8; valaddr_reg:x3; val_offset:49974*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49974*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4fffffc; valaddr_reg:x3; val_offset:49977*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49977*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4fffffe; valaddr_reg:x3; val_offset:49980*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49980*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cbd83 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacbd83; op2val:0x0;
op3val:0x4ffffff; valaddr_reg:x3; val_offset:49983*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49983*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x3f800001; valaddr_reg:x3; val_offset:49986*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49986*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x3f800003; valaddr_reg:x3; val_offset:49989*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49989*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x3f800007; valaddr_reg:x3; val_offset:49992*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49992*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x3f999999; valaddr_reg:x3; val_offset:49995*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49995*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:49998*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49998*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:50001*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50001*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:50004*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50004*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:50007*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50007*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:50010*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50010*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:50013*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50013*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:50016*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50016*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:50019*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50019*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:50022*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50022*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:50025*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50025*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:50028*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50028*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:50031*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50031*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a800000; valaddr_reg:x3; val_offset:50034*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50034*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a800001; valaddr_reg:x3; val_offset:50037*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50037*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a800003; valaddr_reg:x3; val_offset:50040*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50040*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a800007; valaddr_reg:x3; val_offset:50043*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50043*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a80000f; valaddr_reg:x3; val_offset:50046*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50046*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a80001f; valaddr_reg:x3; val_offset:50049*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50049*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a80003f; valaddr_reg:x3; val_offset:50052*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50052*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a80007f; valaddr_reg:x3; val_offset:50055*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50055*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a8000ff; valaddr_reg:x3; val_offset:50058*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50058*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a8001ff; valaddr_reg:x3; val_offset:50061*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50061*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a8003ff; valaddr_reg:x3; val_offset:50064*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50064*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a8007ff; valaddr_reg:x3; val_offset:50067*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50067*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a800fff; valaddr_reg:x3; val_offset:50070*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50070*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a801fff; valaddr_reg:x3; val_offset:50073*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50073*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a803fff; valaddr_reg:x3; val_offset:50076*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50076*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a807fff; valaddr_reg:x3; val_offset:50079*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50079*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a80ffff; valaddr_reg:x3; val_offset:50082*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50082*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a81ffff; valaddr_reg:x3; val_offset:50085*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50085*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a83ffff; valaddr_reg:x3; val_offset:50088*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50088*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a87ffff; valaddr_reg:x3; val_offset:50091*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50091*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a8fffff; valaddr_reg:x3; val_offset:50094*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50094*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4a9fffff; valaddr_reg:x3; val_offset:50097*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50097*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4abfffff; valaddr_reg:x3; val_offset:50100*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50100*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4ac00000; valaddr_reg:x3; val_offset:50103*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50103*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4ae00000; valaddr_reg:x3; val_offset:50106*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50106*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4af00000; valaddr_reg:x3; val_offset:50109*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50109*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4af80000; valaddr_reg:x3; val_offset:50112*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50112*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4afc0000; valaddr_reg:x3; val_offset:50115*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50115*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4afe0000; valaddr_reg:x3; val_offset:50118*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50118*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4aff0000; valaddr_reg:x3; val_offset:50121*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50121*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4aff8000; valaddr_reg:x3; val_offset:50124*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50124*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4affc000; valaddr_reg:x3; val_offset:50127*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50127*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4affe000; valaddr_reg:x3; val_offset:50130*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50130*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4afff000; valaddr_reg:x3; val_offset:50133*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50133*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4afff800; valaddr_reg:x3; val_offset:50136*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50136*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4afffc00; valaddr_reg:x3; val_offset:50139*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50139*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4afffe00; valaddr_reg:x3; val_offset:50142*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50142*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4affff00; valaddr_reg:x3; val_offset:50145*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50145*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4affff80; valaddr_reg:x3; val_offset:50148*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50148*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4affffc0; valaddr_reg:x3; val_offset:50151*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50151*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4affffe0; valaddr_reg:x3; val_offset:50154*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50154*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4afffff0; valaddr_reg:x3; val_offset:50157*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50157*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4afffff8; valaddr_reg:x3; val_offset:50160*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50160*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4afffffc; valaddr_reg:x3; val_offset:50163*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50163*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4afffffe; valaddr_reg:x3; val_offset:50166*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50166*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d1fde and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5ea319 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead1fde; op2val:0x5ea319;
op3val:0x4affffff; valaddr_reg:x3; val_offset:50169*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50169*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xbf800001; valaddr_reg:x3; val_offset:50172*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50172*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xbf800003; valaddr_reg:x3; val_offset:50175*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50175*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xbf800007; valaddr_reg:x3; val_offset:50178*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50178*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xbf999999; valaddr_reg:x3; val_offset:50181*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50181*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:50184*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50184*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:50187*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50187*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:50190*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50190*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:50193*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50193*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:50196*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50196*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:50199*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50199*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:50202*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50202*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:50205*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50205*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:50208*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50208*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:50211*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50211*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:50214*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50214*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:50217*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50217*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc800000; valaddr_reg:x3; val_offset:50220*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50220*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc800001; valaddr_reg:x3; val_offset:50223*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50223*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc800003; valaddr_reg:x3; val_offset:50226*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50226*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc800007; valaddr_reg:x3; val_offset:50229*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50229*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc80000f; valaddr_reg:x3; val_offset:50232*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50232*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc80001f; valaddr_reg:x3; val_offset:50235*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50235*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc80003f; valaddr_reg:x3; val_offset:50238*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50238*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc80007f; valaddr_reg:x3; val_offset:50241*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50241*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc8000ff; valaddr_reg:x3; val_offset:50244*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50244*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc8001ff; valaddr_reg:x3; val_offset:50247*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50247*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc8003ff; valaddr_reg:x3; val_offset:50250*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50250*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc8007ff; valaddr_reg:x3; val_offset:50253*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50253*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc800fff; valaddr_reg:x3; val_offset:50256*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50256*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc801fff; valaddr_reg:x3; val_offset:50259*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50259*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc803fff; valaddr_reg:x3; val_offset:50262*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50262*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc807fff; valaddr_reg:x3; val_offset:50265*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50265*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc80ffff; valaddr_reg:x3; val_offset:50268*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50268*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc81ffff; valaddr_reg:x3; val_offset:50271*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50271*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc83ffff; valaddr_reg:x3; val_offset:50274*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50274*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc87ffff; valaddr_reg:x3; val_offset:50277*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50277*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc8fffff; valaddr_reg:x3; val_offset:50280*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50280*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcc9fffff; valaddr_reg:x3; val_offset:50283*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50283*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccbfffff; valaddr_reg:x3; val_offset:50286*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50286*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccc00000; valaddr_reg:x3; val_offset:50289*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50289*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xcce00000; valaddr_reg:x3; val_offset:50292*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50292*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccf00000; valaddr_reg:x3; val_offset:50295*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50295*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccf80000; valaddr_reg:x3; val_offset:50298*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50298*0 + 3*130*FLEN/8, x4, x1, x2)

inst_16767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccfc0000; valaddr_reg:x3; val_offset:50301*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50301*0 + 3*130*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(81788928,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(82837504,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83361792,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83623936,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83755008,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83820544,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83853312,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83869696,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83877888,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83881984,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83884032,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885056,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885568,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885824,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885952,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886016,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886048,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886064,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886072,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886076,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886078,32,FLEN)
NAN_BOXED(2125249923,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886079,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1249902592,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1249902593,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1249902595,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1249902599,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1249902607,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1249902623,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1249902655,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1249902719,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1249902847,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1249903103,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1249903615,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1249904639,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1249906687,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1249910783,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1249918975,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1249935359,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1249968127,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1250033663,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1250164735,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1250426879,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1250951167,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1251999743,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1254096895,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1254096896,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1256194048,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1257242624,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1257766912,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258029056,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258160128,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258225664,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258258432,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258274816,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258283008,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258287104,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258289152,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258290176,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258290688,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258290944,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258291072,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258291136,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258291168,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258291184,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258291192,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258291196,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258291198,32,FLEN)
NAN_BOXED(2125275102,32,FLEN)
NAN_BOXED(6202137,32,FLEN)
NAN_BOXED(1258291199,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3430940672,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3430940673,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3430940675,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3430940679,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3430940687,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3430940703,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3430940735,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3430940799,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3430940927,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3430941183,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3430941695,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3430942719,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3430944767,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3430948863,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3430957055,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3430973439,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3431006207,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3431071743,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3431202815,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3431464959,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3431989247,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3433037823,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3435134975,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3435134976,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3437232128,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3438280704,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3438804992,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439067136,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
