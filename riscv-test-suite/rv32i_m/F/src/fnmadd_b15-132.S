
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_16768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccfe0000; valaddr_reg:x3; val_offset:50304*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50304*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccff0000; valaddr_reg:x3; val_offset:50307*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50307*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccff8000; valaddr_reg:x3; val_offset:50310*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50310*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccffc000; valaddr_reg:x3; val_offset:50313*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50313*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccffe000; valaddr_reg:x3; val_offset:50316*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50316*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccfff000; valaddr_reg:x3; val_offset:50319*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50319*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccfff800; valaddr_reg:x3; val_offset:50322*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50322*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccfffc00; valaddr_reg:x3; val_offset:50325*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50325*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccfffe00; valaddr_reg:x3; val_offset:50328*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50328*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccffff00; valaddr_reg:x3; val_offset:50331*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50331*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccffff80; valaddr_reg:x3; val_offset:50334*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50334*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccffffc0; valaddr_reg:x3; val_offset:50337*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50337*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccffffe0; valaddr_reg:x3; val_offset:50340*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50340*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccfffff0; valaddr_reg:x3; val_offset:50343*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50343*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccfffff8; valaddr_reg:x3; val_offset:50346*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50346*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccfffffc; valaddr_reg:x3; val_offset:50349*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50349*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccfffffe; valaddr_reg:x3; val_offset:50352*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50352*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d261e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5e9fae and fs3 == 1 and fe3 == 0x99 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead261e; op2val:0x805e9fae;
op3val:0xccffffff; valaddr_reg:x3; val_offset:50355*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50355*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x38000000; valaddr_reg:x3; val_offset:50358*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50358*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x38000001; valaddr_reg:x3; val_offset:50361*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50361*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x38000003; valaddr_reg:x3; val_offset:50364*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50364*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x38000007; valaddr_reg:x3; val_offset:50367*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50367*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3800000f; valaddr_reg:x3; val_offset:50370*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50370*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3800001f; valaddr_reg:x3; val_offset:50373*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50373*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3800003f; valaddr_reg:x3; val_offset:50376*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50376*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3800007f; valaddr_reg:x3; val_offset:50379*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50379*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x380000ff; valaddr_reg:x3; val_offset:50382*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50382*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x380001ff; valaddr_reg:x3; val_offset:50385*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50385*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x380003ff; valaddr_reg:x3; val_offset:50388*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50388*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x380007ff; valaddr_reg:x3; val_offset:50391*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50391*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x38000fff; valaddr_reg:x3; val_offset:50394*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50394*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x38001fff; valaddr_reg:x3; val_offset:50397*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50397*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x38003fff; valaddr_reg:x3; val_offset:50400*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50400*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x38007fff; valaddr_reg:x3; val_offset:50403*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50403*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3800ffff; valaddr_reg:x3; val_offset:50406*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50406*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3801ffff; valaddr_reg:x3; val_offset:50409*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50409*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3803ffff; valaddr_reg:x3; val_offset:50412*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50412*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3807ffff; valaddr_reg:x3; val_offset:50415*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50415*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x380fffff; valaddr_reg:x3; val_offset:50418*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50418*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x381fffff; valaddr_reg:x3; val_offset:50421*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50421*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x383fffff; valaddr_reg:x3; val_offset:50424*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50424*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x38400000; valaddr_reg:x3; val_offset:50427*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50427*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x38600000; valaddr_reg:x3; val_offset:50430*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50430*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x38700000; valaddr_reg:x3; val_offset:50433*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50433*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x38780000; valaddr_reg:x3; val_offset:50436*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50436*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387c0000; valaddr_reg:x3; val_offset:50439*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50439*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387e0000; valaddr_reg:x3; val_offset:50442*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50442*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387f0000; valaddr_reg:x3; val_offset:50445*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50445*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387f8000; valaddr_reg:x3; val_offset:50448*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50448*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387fc000; valaddr_reg:x3; val_offset:50451*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50451*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387fe000; valaddr_reg:x3; val_offset:50454*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50454*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387ff000; valaddr_reg:x3; val_offset:50457*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50457*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387ff800; valaddr_reg:x3; val_offset:50460*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50460*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387ffc00; valaddr_reg:x3; val_offset:50463*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50463*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387ffe00; valaddr_reg:x3; val_offset:50466*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50466*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387fff00; valaddr_reg:x3; val_offset:50469*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50469*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387fff80; valaddr_reg:x3; val_offset:50472*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50472*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387fffc0; valaddr_reg:x3; val_offset:50475*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50475*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387fffe0; valaddr_reg:x3; val_offset:50478*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50478*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387ffff0; valaddr_reg:x3; val_offset:50481*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50481*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387ffff8; valaddr_reg:x3; val_offset:50484*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50484*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387ffffc; valaddr_reg:x3; val_offset:50487*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50487*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387ffffe; valaddr_reg:x3; val_offset:50490*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50490*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x387fffff; valaddr_reg:x3; val_offset:50493*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50493*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3f800001; valaddr_reg:x3; val_offset:50496*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50496*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3f800003; valaddr_reg:x3; val_offset:50499*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50499*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3f800007; valaddr_reg:x3; val_offset:50502*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50502*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3f999999; valaddr_reg:x3; val_offset:50505*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50505*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:50508*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50508*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:50511*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50511*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:50514*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50514*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:50517*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50517*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:50520*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50520*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:50523*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50523*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:50526*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50526*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:50529*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50529*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:50532*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50532*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:50535*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50535*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:50538*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50538*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2df397 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e2fe9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadf397; op2val:0x5e2fe9;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:50541*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50541*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:50544*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50544*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:50547*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50547*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:50550*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50550*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:50553*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50553*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:50556*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50556*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:50559*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50559*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:50562*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50562*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:50565*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50565*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:50568*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50568*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:50571*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50571*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:50574*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50574*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:50577*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50577*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:50580*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50580*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:50583*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50583*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:50586*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50586*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:50589*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50589*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb000000; valaddr_reg:x3; val_offset:50592*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50592*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb000001; valaddr_reg:x3; val_offset:50595*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50595*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb000003; valaddr_reg:x3; val_offset:50598*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50598*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb000007; valaddr_reg:x3; val_offset:50601*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50601*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb00000f; valaddr_reg:x3; val_offset:50604*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50604*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb00001f; valaddr_reg:x3; val_offset:50607*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50607*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb00003f; valaddr_reg:x3; val_offset:50610*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50610*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb00007f; valaddr_reg:x3; val_offset:50613*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50613*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb0000ff; valaddr_reg:x3; val_offset:50616*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50616*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb0001ff; valaddr_reg:x3; val_offset:50619*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50619*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb0003ff; valaddr_reg:x3; val_offset:50622*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50622*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb0007ff; valaddr_reg:x3; val_offset:50625*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50625*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb000fff; valaddr_reg:x3; val_offset:50628*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50628*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb001fff; valaddr_reg:x3; val_offset:50631*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50631*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb003fff; valaddr_reg:x3; val_offset:50634*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50634*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb007fff; valaddr_reg:x3; val_offset:50637*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50637*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb00ffff; valaddr_reg:x3; val_offset:50640*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50640*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb01ffff; valaddr_reg:x3; val_offset:50643*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50643*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb03ffff; valaddr_reg:x3; val_offset:50646*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50646*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb07ffff; valaddr_reg:x3; val_offset:50649*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50649*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb0fffff; valaddr_reg:x3; val_offset:50652*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50652*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb1fffff; valaddr_reg:x3; val_offset:50655*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50655*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb3fffff; valaddr_reg:x3; val_offset:50658*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50658*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb400000; valaddr_reg:x3; val_offset:50661*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50661*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb600000; valaddr_reg:x3; val_offset:50664*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50664*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb700000; valaddr_reg:x3; val_offset:50667*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50667*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb780000; valaddr_reg:x3; val_offset:50670*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50670*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb7c0000; valaddr_reg:x3; val_offset:50673*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50673*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb7e0000; valaddr_reg:x3; val_offset:50676*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50676*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb7f0000; valaddr_reg:x3; val_offset:50679*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50679*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb7f8000; valaddr_reg:x3; val_offset:50682*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50682*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1227 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1227; op2val:0x0;
op3val:0xb7fc000; valaddr_reg:x3; val_offset:50685*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50685*0 + 3*131*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439198208,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439263744,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439296512,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439312896,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439321088,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439325184,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439327232,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439328256,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439328768,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439329024,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439329152,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439329216,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439329248,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439329264,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439329272,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439329276,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439329278,32,FLEN)
NAN_BOXED(2125276702,32,FLEN)
NAN_BOXED(2153684910,32,FLEN)
NAN_BOXED(3439329279,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939524096,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939524097,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939524099,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939524103,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939524111,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939524127,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939524159,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939524223,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939524351,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939524607,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939525119,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939526143,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939528191,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939532287,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939540479,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939556863,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939589631,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939655167,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(939786239,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(940048383,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(940572671,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(941621247,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(943718399,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(943718400,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(945815552,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(946864128,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947388416,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947650560,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947781632,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947847168,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947879936,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947896320,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947904512,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947908608,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947910656,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947911680,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947912192,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947912448,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947912576,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947912640,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947912672,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947912688,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947912696,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947912700,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947912702,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(947912703,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2125329303,32,FLEN)
NAN_BOXED(6172649,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549376,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549377,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549379,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549383,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549391,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549407,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549439,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549503,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549631,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549887,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184550399,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184551423,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184553471,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184557567,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184565759,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184582143,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184614911,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184680447,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184811519,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(185073663,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(185597951,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(186646527,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(188743679,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(188743680,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(190840832,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(191889408,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192413696,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192675840,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192806912,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192872448,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192905216,32,FLEN)
NAN_BOXED(2125337127,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192921600,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
