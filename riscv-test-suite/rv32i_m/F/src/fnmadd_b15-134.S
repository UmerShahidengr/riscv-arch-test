
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_17024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30f7a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c9501 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0f7a4; op2val:0x805c9501;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:51072*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51072*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30f7a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c9501 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0f7a4; op2val:0x805c9501;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:51075*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51075*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30f7a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c9501 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0f7a4; op2val:0x805c9501;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:51078*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51078*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30f7a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c9501 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0f7a4; op2val:0x805c9501;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:51081*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51081*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30f7a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c9501 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0f7a4; op2val:0x805c9501;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:51084*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51084*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30f7a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c9501 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0f7a4; op2val:0x805c9501;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:51087*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51087*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30f7a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c9501 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0f7a4; op2val:0x805c9501;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:51090*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51090*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30f7a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c9501 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0f7a4; op2val:0x805c9501;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:51093*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51093*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30f7a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c9501 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0f7a4; op2val:0x805c9501;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:51096*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51096*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x30f7a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5c9501 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb0f7a4; op2val:0x805c9501;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:51099*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51099*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d000000; valaddr_reg:x3; val_offset:51102*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51102*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d000001; valaddr_reg:x3; val_offset:51105*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51105*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d000003; valaddr_reg:x3; val_offset:51108*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51108*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d000007; valaddr_reg:x3; val_offset:51111*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51111*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d00000f; valaddr_reg:x3; val_offset:51114*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51114*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d00001f; valaddr_reg:x3; val_offset:51117*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51117*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d00003f; valaddr_reg:x3; val_offset:51120*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51120*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d00007f; valaddr_reg:x3; val_offset:51123*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51123*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d0000ff; valaddr_reg:x3; val_offset:51126*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51126*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d0001ff; valaddr_reg:x3; val_offset:51129*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51129*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d0003ff; valaddr_reg:x3; val_offset:51132*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51132*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d0007ff; valaddr_reg:x3; val_offset:51135*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51135*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d000fff; valaddr_reg:x3; val_offset:51138*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51138*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d001fff; valaddr_reg:x3; val_offset:51141*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51141*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d003fff; valaddr_reg:x3; val_offset:51144*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51144*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d007fff; valaddr_reg:x3; val_offset:51147*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51147*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d00ffff; valaddr_reg:x3; val_offset:51150*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51150*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d01ffff; valaddr_reg:x3; val_offset:51153*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51153*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d03ffff; valaddr_reg:x3; val_offset:51156*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51156*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d07ffff; valaddr_reg:x3; val_offset:51159*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51159*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d0fffff; valaddr_reg:x3; val_offset:51162*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51162*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d1fffff; valaddr_reg:x3; val_offset:51165*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51165*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d3fffff; valaddr_reg:x3; val_offset:51168*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51168*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d400000; valaddr_reg:x3; val_offset:51171*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51171*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d600000; valaddr_reg:x3; val_offset:51174*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51174*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d700000; valaddr_reg:x3; val_offset:51177*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51177*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d780000; valaddr_reg:x3; val_offset:51180*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51180*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7c0000; valaddr_reg:x3; val_offset:51183*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51183*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7e0000; valaddr_reg:x3; val_offset:51186*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51186*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7f0000; valaddr_reg:x3; val_offset:51189*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51189*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7f8000; valaddr_reg:x3; val_offset:51192*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51192*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7fc000; valaddr_reg:x3; val_offset:51195*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51195*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7fe000; valaddr_reg:x3; val_offset:51198*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51198*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7ff000; valaddr_reg:x3; val_offset:51201*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51201*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7ff800; valaddr_reg:x3; val_offset:51204*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51204*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7ffc00; valaddr_reg:x3; val_offset:51207*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51207*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7ffe00; valaddr_reg:x3; val_offset:51210*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51210*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7fff00; valaddr_reg:x3; val_offset:51213*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51213*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7fff80; valaddr_reg:x3; val_offset:51216*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51216*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7fffc0; valaddr_reg:x3; val_offset:51219*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51219*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7fffe0; valaddr_reg:x3; val_offset:51222*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51222*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7ffff0; valaddr_reg:x3; val_offset:51225*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51225*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7ffff8; valaddr_reg:x3; val_offset:51228*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51228*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7ffffc; valaddr_reg:x3; val_offset:51231*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51231*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7ffffe; valaddr_reg:x3; val_offset:51234*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51234*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x6d7fffff; valaddr_reg:x3; val_offset:51237*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51237*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x7f000001; valaddr_reg:x3; val_offset:51240*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51240*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x7f000003; valaddr_reg:x3; val_offset:51243*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51243*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x7f000007; valaddr_reg:x3; val_offset:51246*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51246*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x7f199999; valaddr_reg:x3; val_offset:51249*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51249*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x7f249249; valaddr_reg:x3; val_offset:51252*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51252*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x7f333333; valaddr_reg:x3; val_offset:51255*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51255*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:51258*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51258*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:51261*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51261*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x7f444444; valaddr_reg:x3; val_offset:51264*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51264*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:51267*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51267*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:51270*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51270*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x7f666666; valaddr_reg:x3; val_offset:51273*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51273*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:51276*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51276*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:51279*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51279*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:51282*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51282*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x313f41 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38df31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb13f41; op2val:0x4038df31;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:51285*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51285*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff000001; valaddr_reg:x3; val_offset:51288*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51288*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff000003; valaddr_reg:x3; val_offset:51291*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51291*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff000007; valaddr_reg:x3; val_offset:51294*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51294*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff199999; valaddr_reg:x3; val_offset:51297*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51297*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff249249; valaddr_reg:x3; val_offset:51300*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51300*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff333333; valaddr_reg:x3; val_offset:51303*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51303*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:51306*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51306*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:51309*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51309*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff444444; valaddr_reg:x3; val_offset:51312*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51312*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:51315*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51315*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:51318*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51318*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff666666; valaddr_reg:x3; val_offset:51321*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51321*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:51324*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51324*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:51327*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51327*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:51330*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51330*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:51333*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51333*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x316f67 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38ad07 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb16f67; op2val:0xc038ad07;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:51336*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51336*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea000000; valaddr_reg:x3; val_offset:51339*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51339*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea000001; valaddr_reg:x3; val_offset:51342*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51342*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea000003; valaddr_reg:x3; val_offset:51345*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51345*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea000007; valaddr_reg:x3; val_offset:51348*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51348*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea00000f; valaddr_reg:x3; val_offset:51351*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51351*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea00001f; valaddr_reg:x3; val_offset:51354*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51354*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea00003f; valaddr_reg:x3; val_offset:51357*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51357*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea00007f; valaddr_reg:x3; val_offset:51360*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51360*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea0000ff; valaddr_reg:x3; val_offset:51363*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51363*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea0001ff; valaddr_reg:x3; val_offset:51366*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51366*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea0003ff; valaddr_reg:x3; val_offset:51369*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51369*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea0007ff; valaddr_reg:x3; val_offset:51372*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51372*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea000fff; valaddr_reg:x3; val_offset:51375*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51375*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea001fff; valaddr_reg:x3; val_offset:51378*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51378*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea003fff; valaddr_reg:x3; val_offset:51381*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51381*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea007fff; valaddr_reg:x3; val_offset:51384*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51384*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea00ffff; valaddr_reg:x3; val_offset:51387*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51387*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea01ffff; valaddr_reg:x3; val_offset:51390*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51390*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea03ffff; valaddr_reg:x3; val_offset:51393*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51393*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea07ffff; valaddr_reg:x3; val_offset:51396*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51396*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea0fffff; valaddr_reg:x3; val_offset:51399*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51399*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea1fffff; valaddr_reg:x3; val_offset:51402*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51402*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea3fffff; valaddr_reg:x3; val_offset:51405*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51405*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea400000; valaddr_reg:x3; val_offset:51408*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51408*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea600000; valaddr_reg:x3; val_offset:51411*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51411*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea700000; valaddr_reg:x3; val_offset:51414*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51414*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea780000; valaddr_reg:x3; val_offset:51417*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51417*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea7c0000; valaddr_reg:x3; val_offset:51420*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51420*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea7e0000; valaddr_reg:x3; val_offset:51423*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51423*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea7f0000; valaddr_reg:x3; val_offset:51426*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51426*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea7f8000; valaddr_reg:x3; val_offset:51429*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51429*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea7fc000; valaddr_reg:x3; val_offset:51432*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51432*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea7fe000; valaddr_reg:x3; val_offset:51435*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51435*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea7ff000; valaddr_reg:x3; val_offset:51438*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51438*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea7ff800; valaddr_reg:x3; val_offset:51441*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51441*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea7ffc00; valaddr_reg:x3; val_offset:51444*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51444*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea7ffe00; valaddr_reg:x3; val_offset:51447*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51447*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea7fff00; valaddr_reg:x3; val_offset:51450*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51450*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33b00a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x365c62 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3b00a; op2val:0xc0365c62;
op3val:0xea7fff80; valaddr_reg:x3; val_offset:51453*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51453*0 + 3*133*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125526948,32,FLEN)
NAN_BOXED(2153551105,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2125526948,32,FLEN)
NAN_BOXED(2153551105,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2125526948,32,FLEN)
NAN_BOXED(2153551105,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2125526948,32,FLEN)
NAN_BOXED(2153551105,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2125526948,32,FLEN)
NAN_BOXED(2153551105,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2125526948,32,FLEN)
NAN_BOXED(2153551105,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2125526948,32,FLEN)
NAN_BOXED(2153551105,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2125526948,32,FLEN)
NAN_BOXED(2153551105,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2125526948,32,FLEN)
NAN_BOXED(2153551105,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2125526948,32,FLEN)
NAN_BOXED(2153551105,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828716544,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828716545,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828716547,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828716551,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828716559,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828716575,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828716607,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828716671,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828716799,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828717055,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828717567,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828718591,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828720639,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828724735,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828732927,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828749311,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828782079,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828847615,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1828978687,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1829240831,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1829765119,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1830813695,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1832910847,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1832910848,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1835008000,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1836056576,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1836580864,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1836843008,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1836974080,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1837039616,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1837072384,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1837088768,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1837096960,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1837101056,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1837103104,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1837104128,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1837104640,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1837104896,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1837105024,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1837105088,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1837105120,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1837105136,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1837105144,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1837105148,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1837105150,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(1837105151,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2125545281,32,FLEN)
NAN_BOXED(1077468977,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2125557607,32,FLEN)
NAN_BOXED(3224939783,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925868544,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925868545,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925868547,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925868551,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925868559,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925868575,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925868607,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925868671,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925868799,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925869055,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925869567,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925870591,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925872639,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925876735,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925884927,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925901311,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925934079,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3925999615,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3926130687,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3926392831,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3926917119,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3927965695,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3930062847,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3930062848,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3932160000,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3933208576,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3933732864,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3933995008,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3934126080,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3934191616,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3934224384,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3934240768,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3934248960,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3934253056,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3934255104,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3934256128,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3934256640,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3934256896,32,FLEN)
NAN_BOXED(2125705226,32,FLEN)
NAN_BOXED(3224788066,32,FLEN)
NAN_BOXED(3934257024,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
