
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_17408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38683b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8683b; op2val:0x80000000;
op3val:0x897fc000; valaddr_reg:x3; val_offset:52224*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52224*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38683b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8683b; op2val:0x80000000;
op3val:0x897fe000; valaddr_reg:x3; val_offset:52227*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52227*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38683b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8683b; op2val:0x80000000;
op3val:0x897ff000; valaddr_reg:x3; val_offset:52230*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52230*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38683b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8683b; op2val:0x80000000;
op3val:0x897ff800; valaddr_reg:x3; val_offset:52233*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52233*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38683b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8683b; op2val:0x80000000;
op3val:0x897ffc00; valaddr_reg:x3; val_offset:52236*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52236*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38683b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8683b; op2val:0x80000000;
op3val:0x897ffe00; valaddr_reg:x3; val_offset:52239*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52239*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38683b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8683b; op2val:0x80000000;
op3val:0x897fff00; valaddr_reg:x3; val_offset:52242*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52242*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38683b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8683b; op2val:0x80000000;
op3val:0x897fff80; valaddr_reg:x3; val_offset:52245*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52245*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38683b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8683b; op2val:0x80000000;
op3val:0x897fffc0; valaddr_reg:x3; val_offset:52248*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52248*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38683b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8683b; op2val:0x80000000;
op3val:0x897fffe0; valaddr_reg:x3; val_offset:52251*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52251*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38683b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8683b; op2val:0x80000000;
op3val:0x897ffff0; valaddr_reg:x3; val_offset:52254*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52254*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38683b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8683b; op2val:0x80000000;
op3val:0x897ffff8; valaddr_reg:x3; val_offset:52257*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52257*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38683b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8683b; op2val:0x80000000;
op3val:0x897ffffc; valaddr_reg:x3; val_offset:52260*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52260*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38683b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8683b; op2val:0x80000000;
op3val:0x897ffffe; valaddr_reg:x3; val_offset:52263*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52263*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38683b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8683b; op2val:0x80000000;
op3val:0x897fffff; valaddr_reg:x3; val_offset:52266*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52266*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c000000; valaddr_reg:x3; val_offset:52269*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52269*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c000001; valaddr_reg:x3; val_offset:52272*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52272*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c000003; valaddr_reg:x3; val_offset:52275*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52275*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c000007; valaddr_reg:x3; val_offset:52278*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52278*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c00000f; valaddr_reg:x3; val_offset:52281*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52281*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c00001f; valaddr_reg:x3; val_offset:52284*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52284*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c00003f; valaddr_reg:x3; val_offset:52287*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52287*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c00007f; valaddr_reg:x3; val_offset:52290*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52290*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c0000ff; valaddr_reg:x3; val_offset:52293*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52293*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c0001ff; valaddr_reg:x3; val_offset:52296*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52296*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c0003ff; valaddr_reg:x3; val_offset:52299*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52299*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c0007ff; valaddr_reg:x3; val_offset:52302*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52302*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c000fff; valaddr_reg:x3; val_offset:52305*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52305*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c001fff; valaddr_reg:x3; val_offset:52308*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52308*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c003fff; valaddr_reg:x3; val_offset:52311*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52311*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c007fff; valaddr_reg:x3; val_offset:52314*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52314*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c00ffff; valaddr_reg:x3; val_offset:52317*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52317*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c01ffff; valaddr_reg:x3; val_offset:52320*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52320*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c03ffff; valaddr_reg:x3; val_offset:52323*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52323*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c07ffff; valaddr_reg:x3; val_offset:52326*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52326*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c0fffff; valaddr_reg:x3; val_offset:52329*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52329*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c1fffff; valaddr_reg:x3; val_offset:52332*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52332*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c3fffff; valaddr_reg:x3; val_offset:52335*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52335*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c400000; valaddr_reg:x3; val_offset:52338*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52338*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c600000; valaddr_reg:x3; val_offset:52341*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52341*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c700000; valaddr_reg:x3; val_offset:52344*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52344*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c780000; valaddr_reg:x3; val_offset:52347*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52347*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7c0000; valaddr_reg:x3; val_offset:52350*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52350*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7e0000; valaddr_reg:x3; val_offset:52353*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52353*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7f0000; valaddr_reg:x3; val_offset:52356*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52356*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7f8000; valaddr_reg:x3; val_offset:52359*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52359*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7fc000; valaddr_reg:x3; val_offset:52362*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52362*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7fe000; valaddr_reg:x3; val_offset:52365*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52365*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7ff000; valaddr_reg:x3; val_offset:52368*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52368*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7ff800; valaddr_reg:x3; val_offset:52371*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52371*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7ffc00; valaddr_reg:x3; val_offset:52374*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52374*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7ffe00; valaddr_reg:x3; val_offset:52377*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52377*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7fff00; valaddr_reg:x3; val_offset:52380*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52380*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7fff80; valaddr_reg:x3; val_offset:52383*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52383*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7fffc0; valaddr_reg:x3; val_offset:52386*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52386*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7fffe0; valaddr_reg:x3; val_offset:52389*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52389*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7ffff0; valaddr_reg:x3; val_offset:52392*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52392*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7ffff8; valaddr_reg:x3; val_offset:52395*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52395*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7ffffc; valaddr_reg:x3; val_offset:52398*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52398*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7ffffe; valaddr_reg:x3; val_offset:52401*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52401*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x2c7fffff; valaddr_reg:x3; val_offset:52404*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52404*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x3f800001; valaddr_reg:x3; val_offset:52407*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52407*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x3f800003; valaddr_reg:x3; val_offset:52410*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52410*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x3f800007; valaddr_reg:x3; val_offset:52413*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52413*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x3f999999; valaddr_reg:x3; val_offset:52416*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52416*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:52419*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52419*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:52422*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52422*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:52425*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52425*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:52428*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52428*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:52431*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52431*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:52434*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52434*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:52437*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52437*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:52440*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52440*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:52443*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52443*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:52446*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52446*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:52449*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52449*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38be3b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x58af71 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8be3b; op2val:0x58af71;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:52452*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52452*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef800000; valaddr_reg:x3; val_offset:52455*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52455*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef800001; valaddr_reg:x3; val_offset:52458*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52458*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef800003; valaddr_reg:x3; val_offset:52461*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52461*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef800007; valaddr_reg:x3; val_offset:52464*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52464*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef80000f; valaddr_reg:x3; val_offset:52467*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52467*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef80001f; valaddr_reg:x3; val_offset:52470*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52470*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef80003f; valaddr_reg:x3; val_offset:52473*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52473*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef80007f; valaddr_reg:x3; val_offset:52476*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52476*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef8000ff; valaddr_reg:x3; val_offset:52479*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52479*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef8001ff; valaddr_reg:x3; val_offset:52482*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52482*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef8003ff; valaddr_reg:x3; val_offset:52485*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52485*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef8007ff; valaddr_reg:x3; val_offset:52488*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52488*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef800fff; valaddr_reg:x3; val_offset:52491*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52491*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef801fff; valaddr_reg:x3; val_offset:52494*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52494*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef803fff; valaddr_reg:x3; val_offset:52497*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52497*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef807fff; valaddr_reg:x3; val_offset:52500*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52500*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef80ffff; valaddr_reg:x3; val_offset:52503*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52503*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef81ffff; valaddr_reg:x3; val_offset:52506*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52506*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef83ffff; valaddr_reg:x3; val_offset:52509*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52509*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef87ffff; valaddr_reg:x3; val_offset:52512*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52512*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef8fffff; valaddr_reg:x3; val_offset:52515*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52515*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xef9fffff; valaddr_reg:x3; val_offset:52518*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52518*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xefbfffff; valaddr_reg:x3; val_offset:52521*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52521*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xefc00000; valaddr_reg:x3; val_offset:52524*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52524*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xefe00000; valaddr_reg:x3; val_offset:52527*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52527*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xeff00000; valaddr_reg:x3; val_offset:52530*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52530*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xeff80000; valaddr_reg:x3; val_offset:52533*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52533*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xeffc0000; valaddr_reg:x3; val_offset:52536*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52536*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xeffe0000; valaddr_reg:x3; val_offset:52539*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52539*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xefff0000; valaddr_reg:x3; val_offset:52542*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52542*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xefff8000; valaddr_reg:x3; val_offset:52545*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52545*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xefffc000; valaddr_reg:x3; val_offset:52548*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52548*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xefffe000; valaddr_reg:x3; val_offset:52551*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52551*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xeffff000; valaddr_reg:x3; val_offset:52554*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52554*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xeffff800; valaddr_reg:x3; val_offset:52557*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52557*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xeffffc00; valaddr_reg:x3; val_offset:52560*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52560*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xeffffe00; valaddr_reg:x3; val_offset:52563*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52563*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xefffff00; valaddr_reg:x3; val_offset:52566*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52566*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xefffff80; valaddr_reg:x3; val_offset:52569*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52569*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xefffffc0; valaddr_reg:x3; val_offset:52572*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52572*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xefffffe0; valaddr_reg:x3; val_offset:52575*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52575*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xeffffff0; valaddr_reg:x3; val_offset:52578*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52578*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xeffffff8; valaddr_reg:x3; val_offset:52581*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52581*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xeffffffc; valaddr_reg:x3; val_offset:52584*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52584*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xeffffffe; valaddr_reg:x3; val_offset:52587*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52587*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xdf and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xefffffff; valaddr_reg:x3; val_offset:52590*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52590*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xff000001; valaddr_reg:x3; val_offset:52593*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52593*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xff000003; valaddr_reg:x3; val_offset:52596*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52596*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xff000007; valaddr_reg:x3; val_offset:52599*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52599*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xff199999; valaddr_reg:x3; val_offset:52602*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52602*0 + 3*136*FLEN/8, x4, x1, x2)

inst_17535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39b62c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x307213 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9b62c; op2val:0xc0307213;
op3val:0xff249249; valaddr_reg:x3; val_offset:52605*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52605*0 + 3*136*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2126014523,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306850816,32,FLEN)
NAN_BOXED(2126014523,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306859008,32,FLEN)
NAN_BOXED(2126014523,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306863104,32,FLEN)
NAN_BOXED(2126014523,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306865152,32,FLEN)
NAN_BOXED(2126014523,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866176,32,FLEN)
NAN_BOXED(2126014523,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866688,32,FLEN)
NAN_BOXED(2126014523,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866944,32,FLEN)
NAN_BOXED(2126014523,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867072,32,FLEN)
NAN_BOXED(2126014523,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867136,32,FLEN)
NAN_BOXED(2126014523,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867168,32,FLEN)
NAN_BOXED(2126014523,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867184,32,FLEN)
NAN_BOXED(2126014523,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867192,32,FLEN)
NAN_BOXED(2126014523,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867196,32,FLEN)
NAN_BOXED(2126014523,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867198,32,FLEN)
NAN_BOXED(2126014523,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867199,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738197504,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738197505,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738197507,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738197511,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738197519,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738197535,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738197567,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738197631,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738197759,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738198015,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738198527,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738199551,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738201599,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738205695,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738213887,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738230271,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738263039,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738328575,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738459647,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(738721791,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(739246079,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(740294655,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(742391807,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(742391808,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(744488960,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(745537536,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746061824,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746323968,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746455040,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746520576,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746553344,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746569728,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746577920,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746582016,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746584064,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746585088,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746585600,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746585856,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746585984,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746586048,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746586080,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746586096,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746586104,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746586108,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746586110,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(746586111,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2126036539,32,FLEN)
NAN_BOXED(5812081,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018143232,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018143233,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018143235,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018143239,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018143247,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018143263,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018143295,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018143359,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018143487,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018143743,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018144255,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018145279,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018147327,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018151423,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018159615,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018175999,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018208767,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018274303,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018405375,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4018667519,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4019191807,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4020240383,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4022337535,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4022337536,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4024434688,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4025483264,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026007552,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026269696,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026400768,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026466304,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026499072,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026515456,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026523648,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026527744,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026529792,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026530816,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026531328,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026531584,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026531712,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026531776,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026531808,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026531824,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026531832,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026531836,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026531838,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4026531839,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2126100012,32,FLEN)
NAN_BOXED(3224400403,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
