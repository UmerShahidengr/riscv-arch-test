
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_18176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:54528*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54528*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83800000; valaddr_reg:x3; val_offset:54531*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54531*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83800001; valaddr_reg:x3; val_offset:54534*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54534*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83800003; valaddr_reg:x3; val_offset:54537*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54537*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83800007; valaddr_reg:x3; val_offset:54540*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54540*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x8380000f; valaddr_reg:x3; val_offset:54543*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54543*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x8380001f; valaddr_reg:x3; val_offset:54546*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54546*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x8380003f; valaddr_reg:x3; val_offset:54549*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54549*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x8380007f; valaddr_reg:x3; val_offset:54552*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54552*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x838000ff; valaddr_reg:x3; val_offset:54555*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54555*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x838001ff; valaddr_reg:x3; val_offset:54558*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54558*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x838003ff; valaddr_reg:x3; val_offset:54561*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54561*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x838007ff; valaddr_reg:x3; val_offset:54564*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54564*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83800fff; valaddr_reg:x3; val_offset:54567*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54567*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83801fff; valaddr_reg:x3; val_offset:54570*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54570*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83803fff; valaddr_reg:x3; val_offset:54573*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54573*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83807fff; valaddr_reg:x3; val_offset:54576*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54576*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x8380ffff; valaddr_reg:x3; val_offset:54579*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54579*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x8381ffff; valaddr_reg:x3; val_offset:54582*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54582*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x8383ffff; valaddr_reg:x3; val_offset:54585*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54585*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x8387ffff; valaddr_reg:x3; val_offset:54588*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54588*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x838fffff; valaddr_reg:x3; val_offset:54591*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54591*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x839fffff; valaddr_reg:x3; val_offset:54594*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54594*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83bfffff; valaddr_reg:x3; val_offset:54597*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54597*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83c00000; valaddr_reg:x3; val_offset:54600*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54600*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83e00000; valaddr_reg:x3; val_offset:54603*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54603*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83f00000; valaddr_reg:x3; val_offset:54606*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54606*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83f80000; valaddr_reg:x3; val_offset:54609*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54609*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83fc0000; valaddr_reg:x3; val_offset:54612*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54612*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83fe0000; valaddr_reg:x3; val_offset:54615*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54615*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83ff0000; valaddr_reg:x3; val_offset:54618*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54618*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83ff8000; valaddr_reg:x3; val_offset:54621*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54621*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83ffc000; valaddr_reg:x3; val_offset:54624*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54624*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83ffe000; valaddr_reg:x3; val_offset:54627*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54627*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83fff000; valaddr_reg:x3; val_offset:54630*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54630*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83fff800; valaddr_reg:x3; val_offset:54633*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54633*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83fffc00; valaddr_reg:x3; val_offset:54636*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54636*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83fffe00; valaddr_reg:x3; val_offset:54639*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54639*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83ffff00; valaddr_reg:x3; val_offset:54642*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54642*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83ffff80; valaddr_reg:x3; val_offset:54645*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54645*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83ffffc0; valaddr_reg:x3; val_offset:54648*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54648*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83ffffe0; valaddr_reg:x3; val_offset:54651*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54651*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83fffff0; valaddr_reg:x3; val_offset:54654*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54654*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83fffff8; valaddr_reg:x3; val_offset:54657*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54657*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83fffffc; valaddr_reg:x3; val_offset:54660*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54660*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83fffffe; valaddr_reg:x3; val_offset:54663*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54663*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x404e9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec04e9c; op2val:0x80000000;
op3val:0x83ffffff; valaddr_reg:x3; val_offset:54666*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54666*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62800000; valaddr_reg:x3; val_offset:54669*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54669*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62800001; valaddr_reg:x3; val_offset:54672*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54672*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62800003; valaddr_reg:x3; val_offset:54675*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54675*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62800007; valaddr_reg:x3; val_offset:54678*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54678*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x6280000f; valaddr_reg:x3; val_offset:54681*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54681*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x6280001f; valaddr_reg:x3; val_offset:54684*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54684*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x6280003f; valaddr_reg:x3; val_offset:54687*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54687*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x6280007f; valaddr_reg:x3; val_offset:54690*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54690*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x628000ff; valaddr_reg:x3; val_offset:54693*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54693*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x628001ff; valaddr_reg:x3; val_offset:54696*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54696*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x628003ff; valaddr_reg:x3; val_offset:54699*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54699*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x628007ff; valaddr_reg:x3; val_offset:54702*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54702*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62800fff; valaddr_reg:x3; val_offset:54705*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54705*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62801fff; valaddr_reg:x3; val_offset:54708*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54708*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62803fff; valaddr_reg:x3; val_offset:54711*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54711*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62807fff; valaddr_reg:x3; val_offset:54714*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54714*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x6280ffff; valaddr_reg:x3; val_offset:54717*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54717*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x6281ffff; valaddr_reg:x3; val_offset:54720*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54720*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x6283ffff; valaddr_reg:x3; val_offset:54723*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54723*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x6287ffff; valaddr_reg:x3; val_offset:54726*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54726*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x628fffff; valaddr_reg:x3; val_offset:54729*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54729*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x629fffff; valaddr_reg:x3; val_offset:54732*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54732*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62bfffff; valaddr_reg:x3; val_offset:54735*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54735*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62c00000; valaddr_reg:x3; val_offset:54738*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54738*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62e00000; valaddr_reg:x3; val_offset:54741*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54741*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62f00000; valaddr_reg:x3; val_offset:54744*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54744*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62f80000; valaddr_reg:x3; val_offset:54747*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54747*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62fc0000; valaddr_reg:x3; val_offset:54750*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54750*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62fe0000; valaddr_reg:x3; val_offset:54753*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54753*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62ff0000; valaddr_reg:x3; val_offset:54756*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54756*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62ff8000; valaddr_reg:x3; val_offset:54759*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54759*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62ffc000; valaddr_reg:x3; val_offset:54762*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54762*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62ffe000; valaddr_reg:x3; val_offset:54765*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54765*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62fff000; valaddr_reg:x3; val_offset:54768*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54768*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62fff800; valaddr_reg:x3; val_offset:54771*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54771*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62fffc00; valaddr_reg:x3; val_offset:54774*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54774*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62fffe00; valaddr_reg:x3; val_offset:54777*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54777*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62ffff00; valaddr_reg:x3; val_offset:54780*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54780*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62ffff80; valaddr_reg:x3; val_offset:54783*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54783*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62ffffc0; valaddr_reg:x3; val_offset:54786*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54786*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62ffffe0; valaddr_reg:x3; val_offset:54789*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54789*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62fffff0; valaddr_reg:x3; val_offset:54792*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54792*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62fffff8; valaddr_reg:x3; val_offset:54795*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54795*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62fffffc; valaddr_reg:x3; val_offset:54798*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54798*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62fffffe; valaddr_reg:x3; val_offset:54801*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54801*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x62ffffff; valaddr_reg:x3; val_offset:54804*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54804*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x7f000001; valaddr_reg:x3; val_offset:54807*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54807*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x7f000003; valaddr_reg:x3; val_offset:54810*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54810*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x7f000007; valaddr_reg:x3; val_offset:54813*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54813*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x7f199999; valaddr_reg:x3; val_offset:54816*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54816*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x7f249249; valaddr_reg:x3; val_offset:54819*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54819*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x7f333333; valaddr_reg:x3; val_offset:54822*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54822*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:54825*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54825*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:54828*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54828*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x7f444444; valaddr_reg:x3; val_offset:54831*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54831*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:54834*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54834*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:54837*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54837*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x7f666666; valaddr_reg:x3; val_offset:54840*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54840*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:54843*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54843*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:54846*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54846*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:54849*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54849*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x412a1a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a347 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec12a1a; op2val:0x4029a347;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:54852*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54852*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa800000; valaddr_reg:x3; val_offset:54855*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54855*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa800001; valaddr_reg:x3; val_offset:54858*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54858*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa800003; valaddr_reg:x3; val_offset:54861*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54861*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa800007; valaddr_reg:x3; val_offset:54864*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54864*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa80000f; valaddr_reg:x3; val_offset:54867*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54867*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa80001f; valaddr_reg:x3; val_offset:54870*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54870*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa80003f; valaddr_reg:x3; val_offset:54873*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54873*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa80007f; valaddr_reg:x3; val_offset:54876*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54876*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa8000ff; valaddr_reg:x3; val_offset:54879*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54879*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa8001ff; valaddr_reg:x3; val_offset:54882*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54882*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa8003ff; valaddr_reg:x3; val_offset:54885*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54885*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa8007ff; valaddr_reg:x3; val_offset:54888*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54888*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa800fff; valaddr_reg:x3; val_offset:54891*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54891*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa801fff; valaddr_reg:x3; val_offset:54894*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54894*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa803fff; valaddr_reg:x3; val_offset:54897*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54897*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa807fff; valaddr_reg:x3; val_offset:54900*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54900*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa80ffff; valaddr_reg:x3; val_offset:54903*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54903*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa81ffff; valaddr_reg:x3; val_offset:54906*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54906*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa83ffff; valaddr_reg:x3; val_offset:54909*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54909*0 + 3*142*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203904,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203905,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203907,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203911,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203919,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203935,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203967,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204031,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204159,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204415,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204927,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206205951,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206207999,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206212095,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206220287,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206236671,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206269439,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206334975,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206466047,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206728191,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2207252479,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2208301055,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2210398207,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2210398208,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2212495360,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2213543936,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214068224,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214330368,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214461440,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214526976,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214559744,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214576128,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214584320,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214588416,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214590464,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214591488,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592000,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592256,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592384,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592448,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592480,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592496,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592504,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592508,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592510,32,FLEN)
NAN_BOXED(2126532252,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592511,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652555776,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652555777,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652555779,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652555783,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652555791,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652555807,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652555839,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652555903,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652556031,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652556287,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652556799,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652557823,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652559871,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652563967,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652572159,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652588543,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652621311,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652686847,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1652817919,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1653080063,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1653604351,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1654652927,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1656750079,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1656750080,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1658847232,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1659895808,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660420096,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660682240,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660813312,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660878848,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660911616,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660928000,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660936192,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660940288,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660942336,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660943360,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660943872,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660944128,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660944256,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660944320,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660944352,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660944368,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660944376,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660944380,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660944382,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(1660944383,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2126588442,32,FLEN)
NAN_BOXED(1076470599,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860515328,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860515329,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860515331,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860515335,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860515343,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860515359,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860515391,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860515455,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860515583,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860515839,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860516351,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860517375,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860519423,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860523519,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860531711,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860548095,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860580863,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860646399,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2860777471,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
