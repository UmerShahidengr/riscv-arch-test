
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_18304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa87ffff; valaddr_reg:x3; val_offset:54912*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54912*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa8fffff; valaddr_reg:x3; val_offset:54915*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54915*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaa9fffff; valaddr_reg:x3; val_offset:54918*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54918*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaabfffff; valaddr_reg:x3; val_offset:54921*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54921*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaac00000; valaddr_reg:x3; val_offset:54924*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54924*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaae00000; valaddr_reg:x3; val_offset:54927*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54927*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaaf00000; valaddr_reg:x3; val_offset:54930*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54930*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaaf80000; valaddr_reg:x3; val_offset:54933*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54933*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaafc0000; valaddr_reg:x3; val_offset:54936*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54936*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaafe0000; valaddr_reg:x3; val_offset:54939*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54939*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaaff0000; valaddr_reg:x3; val_offset:54942*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54942*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaaff8000; valaddr_reg:x3; val_offset:54945*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54945*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaaffc000; valaddr_reg:x3; val_offset:54948*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54948*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaaffe000; valaddr_reg:x3; val_offset:54951*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54951*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaafff000; valaddr_reg:x3; val_offset:54954*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54954*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaafff800; valaddr_reg:x3; val_offset:54957*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54957*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaafffc00; valaddr_reg:x3; val_offset:54960*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54960*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaafffe00; valaddr_reg:x3; val_offset:54963*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54963*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaaffff00; valaddr_reg:x3; val_offset:54966*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54966*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaaffff80; valaddr_reg:x3; val_offset:54969*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54969*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaaffffc0; valaddr_reg:x3; val_offset:54972*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54972*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaaffffe0; valaddr_reg:x3; val_offset:54975*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54975*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaafffff0; valaddr_reg:x3; val_offset:54978*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54978*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaafffff8; valaddr_reg:x3; val_offset:54981*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54981*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaafffffc; valaddr_reg:x3; val_offset:54984*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54984*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaafffffe; valaddr_reg:x3; val_offset:54987*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54987*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x55 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xaaffffff; valaddr_reg:x3; val_offset:54990*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54990*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xbf800001; valaddr_reg:x3; val_offset:54993*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54993*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xbf800003; valaddr_reg:x3; val_offset:54996*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54996*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xbf800007; valaddr_reg:x3; val_offset:54999*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54999*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xbf999999; valaddr_reg:x3; val_offset:55002*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55002*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:55005*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55005*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:55008*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55008*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:55011*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55011*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:55014*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55014*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:55017*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55017*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:55020*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55020*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:55023*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55023*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:55026*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55026*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:55029*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55029*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:55032*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55032*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:55035*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55035*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4193c4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54a357 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec193c4; op2val:0x8054a357;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:55038*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55038*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb8000000; valaddr_reg:x3; val_offset:55041*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55041*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb8000001; valaddr_reg:x3; val_offset:55044*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55044*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb8000003; valaddr_reg:x3; val_offset:55047*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55047*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb8000007; valaddr_reg:x3; val_offset:55050*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55050*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb800000f; valaddr_reg:x3; val_offset:55053*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55053*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb800001f; valaddr_reg:x3; val_offset:55056*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55056*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb800003f; valaddr_reg:x3; val_offset:55059*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55059*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb800007f; valaddr_reg:x3; val_offset:55062*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55062*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb80000ff; valaddr_reg:x3; val_offset:55065*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55065*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb80001ff; valaddr_reg:x3; val_offset:55068*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55068*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb80003ff; valaddr_reg:x3; val_offset:55071*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55071*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb80007ff; valaddr_reg:x3; val_offset:55074*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55074*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb8000fff; valaddr_reg:x3; val_offset:55077*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55077*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb8001fff; valaddr_reg:x3; val_offset:55080*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55080*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb8003fff; valaddr_reg:x3; val_offset:55083*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55083*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb8007fff; valaddr_reg:x3; val_offset:55086*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55086*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb800ffff; valaddr_reg:x3; val_offset:55089*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55089*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb801ffff; valaddr_reg:x3; val_offset:55092*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55092*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb803ffff; valaddr_reg:x3; val_offset:55095*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55095*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb807ffff; valaddr_reg:x3; val_offset:55098*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55098*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb80fffff; valaddr_reg:x3; val_offset:55101*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55101*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb81fffff; valaddr_reg:x3; val_offset:55104*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55104*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb83fffff; valaddr_reg:x3; val_offset:55107*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55107*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb8400000; valaddr_reg:x3; val_offset:55110*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55110*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb8600000; valaddr_reg:x3; val_offset:55113*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55113*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb8700000; valaddr_reg:x3; val_offset:55116*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55116*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb8780000; valaddr_reg:x3; val_offset:55119*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55119*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87c0000; valaddr_reg:x3; val_offset:55122*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55122*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87e0000; valaddr_reg:x3; val_offset:55125*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55125*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87f0000; valaddr_reg:x3; val_offset:55128*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55128*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87f8000; valaddr_reg:x3; val_offset:55131*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55131*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87fc000; valaddr_reg:x3; val_offset:55134*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55134*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87fe000; valaddr_reg:x3; val_offset:55137*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55137*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87ff000; valaddr_reg:x3; val_offset:55140*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55140*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87ff800; valaddr_reg:x3; val_offset:55143*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55143*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87ffc00; valaddr_reg:x3; val_offset:55146*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55146*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87ffe00; valaddr_reg:x3; val_offset:55149*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55149*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87fff00; valaddr_reg:x3; val_offset:55152*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55152*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87fff80; valaddr_reg:x3; val_offset:55155*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55155*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87fffc0; valaddr_reg:x3; val_offset:55158*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55158*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87fffe0; valaddr_reg:x3; val_offset:55161*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55161*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87ffff0; valaddr_reg:x3; val_offset:55164*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55164*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87ffff8; valaddr_reg:x3; val_offset:55167*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55167*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87ffffc; valaddr_reg:x3; val_offset:55170*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55170*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87ffffe; valaddr_reg:x3; val_offset:55173*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55173*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x70 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xb87fffff; valaddr_reg:x3; val_offset:55176*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55176*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xbf800001; valaddr_reg:x3; val_offset:55179*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55179*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xbf800003; valaddr_reg:x3; val_offset:55182*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55182*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xbf800007; valaddr_reg:x3; val_offset:55185*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55185*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xbf999999; valaddr_reg:x3; val_offset:55188*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55188*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:55191*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55191*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:55194*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55194*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:55197*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55197*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:55200*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55200*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:55203*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55203*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:55206*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55206*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:55209*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55209*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:55212*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55212*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:55215*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55215*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:55218*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55218*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:55221*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55221*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4242dc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x54570e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec242dc; op2val:0x8054570e;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:55224*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55224*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x3f800001; valaddr_reg:x3; val_offset:55227*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55227*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x3f800003; valaddr_reg:x3; val_offset:55230*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55230*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x3f800007; valaddr_reg:x3; val_offset:55233*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55233*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x3f999999; valaddr_reg:x3; val_offset:55236*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55236*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:55239*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55239*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:55242*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55242*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:55245*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55245*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:55248*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55248*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:55251*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55251*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:55254*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55254*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:55257*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55257*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:55260*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55260*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:55263*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55263*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:55266*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55266*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:55269*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55269*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:55272*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55272*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47800000; valaddr_reg:x3; val_offset:55275*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55275*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47800001; valaddr_reg:x3; val_offset:55278*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55278*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47800003; valaddr_reg:x3; val_offset:55281*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55281*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47800007; valaddr_reg:x3; val_offset:55284*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55284*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x4780000f; valaddr_reg:x3; val_offset:55287*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55287*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x4780001f; valaddr_reg:x3; val_offset:55290*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55290*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x4780003f; valaddr_reg:x3; val_offset:55293*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55293*0 + 3*143*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2861039615,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2861563903,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2862612479,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2864709631,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2864709632,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2866806784,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2867855360,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868379648,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868641792,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868772864,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868838400,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868871168,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868887552,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868895744,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868899840,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868901888,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868902912,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868903424,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868903680,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868903808,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868903872,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868903904,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868903920,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868903928,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868903932,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868903934,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(2868903935,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2126615492,32,FLEN)
NAN_BOXED(2153030487,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087007744,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087007745,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087007747,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087007751,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087007759,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087007775,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087007807,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087007871,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087007999,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087008255,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087008767,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087009791,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087011839,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087015935,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087024127,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087040511,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087073279,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087138815,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087269887,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3087532031,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3088056319,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3089104895,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3091202047,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3091202048,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3093299200,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3094347776,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3094872064,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095134208,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095265280,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095330816,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095363584,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095379968,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095388160,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095392256,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095394304,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095395328,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095395840,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095396096,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095396224,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095396288,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095396320,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095396336,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095396344,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095396348,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095396350,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3095396351,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2126660316,32,FLEN)
NAN_BOXED(2153010958,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199570944,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199570945,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199570947,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199570951,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199570959,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199570975,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199571007,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
