
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_18432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x4780007f; valaddr_reg:x3; val_offset:55296*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55296*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x478000ff; valaddr_reg:x3; val_offset:55299*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55299*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x478001ff; valaddr_reg:x3; val_offset:55302*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55302*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x478003ff; valaddr_reg:x3; val_offset:55305*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55305*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x478007ff; valaddr_reg:x3; val_offset:55308*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55308*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47800fff; valaddr_reg:x3; val_offset:55311*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55311*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47801fff; valaddr_reg:x3; val_offset:55314*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55314*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47803fff; valaddr_reg:x3; val_offset:55317*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55317*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47807fff; valaddr_reg:x3; val_offset:55320*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55320*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x4780ffff; valaddr_reg:x3; val_offset:55323*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55323*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x4781ffff; valaddr_reg:x3; val_offset:55326*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55326*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x4783ffff; valaddr_reg:x3; val_offset:55329*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55329*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x4787ffff; valaddr_reg:x3; val_offset:55332*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55332*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x478fffff; valaddr_reg:x3; val_offset:55335*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55335*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x479fffff; valaddr_reg:x3; val_offset:55338*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55338*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47bfffff; valaddr_reg:x3; val_offset:55341*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55341*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47c00000; valaddr_reg:x3; val_offset:55344*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55344*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47e00000; valaddr_reg:x3; val_offset:55347*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55347*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47f00000; valaddr_reg:x3; val_offset:55350*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55350*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47f80000; valaddr_reg:x3; val_offset:55353*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55353*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47fc0000; valaddr_reg:x3; val_offset:55356*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55356*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47fe0000; valaddr_reg:x3; val_offset:55359*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55359*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47ff0000; valaddr_reg:x3; val_offset:55362*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55362*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47ff8000; valaddr_reg:x3; val_offset:55365*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55365*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47ffc000; valaddr_reg:x3; val_offset:55368*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55368*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47ffe000; valaddr_reg:x3; val_offset:55371*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55371*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47fff000; valaddr_reg:x3; val_offset:55374*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55374*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47fff800; valaddr_reg:x3; val_offset:55377*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55377*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47fffc00; valaddr_reg:x3; val_offset:55380*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55380*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47fffe00; valaddr_reg:x3; val_offset:55383*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55383*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47ffff00; valaddr_reg:x3; val_offset:55386*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55386*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47ffff80; valaddr_reg:x3; val_offset:55389*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55389*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47ffffc0; valaddr_reg:x3; val_offset:55392*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55392*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47ffffe0; valaddr_reg:x3; val_offset:55395*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55395*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47fffff0; valaddr_reg:x3; val_offset:55398*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55398*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47fffff8; valaddr_reg:x3; val_offset:55401*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55401*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47fffffc; valaddr_reg:x3; val_offset:55404*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55404*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47fffffe; valaddr_reg:x3; val_offset:55407*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55407*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x426c3a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x54451c and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec26c3a; op2val:0x54451c;
op3val:0x47ffffff; valaddr_reg:x3; val_offset:55410*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55410*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:55413*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55413*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:55416*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55416*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:55419*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55419*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:55422*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55422*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:55425*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55425*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:55428*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55428*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:55431*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55431*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:55434*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55434*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:55437*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55437*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:55440*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55440*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:55443*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55443*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:55446*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55446*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:55449*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55449*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:55452*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55452*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:55455*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55455*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:55458*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55458*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84800000; valaddr_reg:x3; val_offset:55461*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55461*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84800001; valaddr_reg:x3; val_offset:55464*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55464*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84800003; valaddr_reg:x3; val_offset:55467*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55467*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84800007; valaddr_reg:x3; val_offset:55470*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55470*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x8480000f; valaddr_reg:x3; val_offset:55473*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55473*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x8480001f; valaddr_reg:x3; val_offset:55476*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55476*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x8480003f; valaddr_reg:x3; val_offset:55479*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55479*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x8480007f; valaddr_reg:x3; val_offset:55482*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55482*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x848000ff; valaddr_reg:x3; val_offset:55485*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55485*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x848001ff; valaddr_reg:x3; val_offset:55488*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55488*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x848003ff; valaddr_reg:x3; val_offset:55491*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55491*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x848007ff; valaddr_reg:x3; val_offset:55494*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55494*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84800fff; valaddr_reg:x3; val_offset:55497*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55497*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84801fff; valaddr_reg:x3; val_offset:55500*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55500*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84803fff; valaddr_reg:x3; val_offset:55503*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55503*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84807fff; valaddr_reg:x3; val_offset:55506*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55506*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x8480ffff; valaddr_reg:x3; val_offset:55509*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55509*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x8481ffff; valaddr_reg:x3; val_offset:55512*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55512*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x8483ffff; valaddr_reg:x3; val_offset:55515*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55515*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x8487ffff; valaddr_reg:x3; val_offset:55518*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55518*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x848fffff; valaddr_reg:x3; val_offset:55521*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55521*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x849fffff; valaddr_reg:x3; val_offset:55524*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55524*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84bfffff; valaddr_reg:x3; val_offset:55527*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55527*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84c00000; valaddr_reg:x3; val_offset:55530*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55530*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84e00000; valaddr_reg:x3; val_offset:55533*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55533*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84f00000; valaddr_reg:x3; val_offset:55536*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55536*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84f80000; valaddr_reg:x3; val_offset:55539*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55539*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84fc0000; valaddr_reg:x3; val_offset:55542*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55542*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84fe0000; valaddr_reg:x3; val_offset:55545*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55545*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84ff0000; valaddr_reg:x3; val_offset:55548*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55548*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84ff8000; valaddr_reg:x3; val_offset:55551*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55551*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84ffc000; valaddr_reg:x3; val_offset:55554*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55554*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84ffe000; valaddr_reg:x3; val_offset:55557*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55557*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84fff000; valaddr_reg:x3; val_offset:55560*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55560*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84fff800; valaddr_reg:x3; val_offset:55563*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55563*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84fffc00; valaddr_reg:x3; val_offset:55566*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55566*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84fffe00; valaddr_reg:x3; val_offset:55569*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55569*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84ffff00; valaddr_reg:x3; val_offset:55572*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55572*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84ffff80; valaddr_reg:x3; val_offset:55575*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55575*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84ffffc0; valaddr_reg:x3; val_offset:55578*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55578*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84ffffe0; valaddr_reg:x3; val_offset:55581*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55581*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84fffff0; valaddr_reg:x3; val_offset:55584*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55584*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84fffff8; valaddr_reg:x3; val_offset:55587*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55587*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84fffffc; valaddr_reg:x3; val_offset:55590*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55590*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84fffffe; valaddr_reg:x3; val_offset:55593*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55593*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42f6a2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2f6a2; op2val:0x80000000;
op3val:0x84ffffff; valaddr_reg:x3; val_offset:55596*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55596*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:55599*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55599*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:55602*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55602*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:55605*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55605*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:55608*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55608*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:55611*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55611*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:55614*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55614*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:55617*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55617*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:55620*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55620*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:55623*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55623*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:55626*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55626*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:55629*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55629*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:55632*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55632*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:55635*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55635*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:55638*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55638*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:55641*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55641*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:55644*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55644*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c000000; valaddr_reg:x3; val_offset:55647*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55647*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c000001; valaddr_reg:x3; val_offset:55650*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55650*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c000003; valaddr_reg:x3; val_offset:55653*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55653*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c000007; valaddr_reg:x3; val_offset:55656*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55656*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c00000f; valaddr_reg:x3; val_offset:55659*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55659*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c00001f; valaddr_reg:x3; val_offset:55662*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55662*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c00003f; valaddr_reg:x3; val_offset:55665*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55665*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c00007f; valaddr_reg:x3; val_offset:55668*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55668*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c0000ff; valaddr_reg:x3; val_offset:55671*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55671*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c0001ff; valaddr_reg:x3; val_offset:55674*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55674*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c0003ff; valaddr_reg:x3; val_offset:55677*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55677*0 + 3*144*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199571071,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199571199,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199571455,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199571967,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199572991,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199575039,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199579135,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199587327,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199603711,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199636479,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199702015,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1199833087,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1200095231,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1200619519,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1201668095,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1203765247,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1203765248,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1205862400,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1206910976,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207435264,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207697408,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207828480,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207894016,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207926784,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207943168,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207951360,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207955456,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207957504,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207958528,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207959040,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207959296,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207959424,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207959488,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207959520,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207959536,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207959544,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207959548,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207959550,32,FLEN)
NAN_BOXED(2126670906,32,FLEN)
NAN_BOXED(5522716,32,FLEN)
NAN_BOXED(1207959551,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981120,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981121,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981123,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981127,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981135,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981151,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981183,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981247,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981375,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981631,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222982143,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222983167,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222985215,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222989311,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222997503,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223013887,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223046655,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223112191,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223243263,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223505407,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2224029695,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2225078271,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2227175423,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2227175424,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2229272576,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2230321152,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2230845440,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231107584,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231238656,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231304192,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231336960,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231353344,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231361536,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231365632,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231367680,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231368704,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369216,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369472,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369600,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369664,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369696,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369712,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369720,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369724,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369726,32,FLEN)
NAN_BOXED(2126706338,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369727,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810240,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810241,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810243,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810247,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810255,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810271,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810303,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810367,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810495,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810751,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348811263,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
