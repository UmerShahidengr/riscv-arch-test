
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_18560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c0007ff; valaddr_reg:x3; val_offset:55680*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55680*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c000fff; valaddr_reg:x3; val_offset:55683*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55683*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c001fff; valaddr_reg:x3; val_offset:55686*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55686*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c003fff; valaddr_reg:x3; val_offset:55689*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55689*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c007fff; valaddr_reg:x3; val_offset:55692*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55692*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c00ffff; valaddr_reg:x3; val_offset:55695*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55695*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c01ffff; valaddr_reg:x3; val_offset:55698*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55698*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c03ffff; valaddr_reg:x3; val_offset:55701*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55701*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c07ffff; valaddr_reg:x3; val_offset:55704*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55704*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c0fffff; valaddr_reg:x3; val_offset:55707*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55707*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c1fffff; valaddr_reg:x3; val_offset:55710*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55710*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c3fffff; valaddr_reg:x3; val_offset:55713*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55713*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c400000; valaddr_reg:x3; val_offset:55716*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55716*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c600000; valaddr_reg:x3; val_offset:55719*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55719*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c700000; valaddr_reg:x3; val_offset:55722*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55722*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c780000; valaddr_reg:x3; val_offset:55725*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55725*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7c0000; valaddr_reg:x3; val_offset:55728*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55728*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7e0000; valaddr_reg:x3; val_offset:55731*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55731*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7f0000; valaddr_reg:x3; val_offset:55734*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55734*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7f8000; valaddr_reg:x3; val_offset:55737*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55737*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7fc000; valaddr_reg:x3; val_offset:55740*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55740*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7fe000; valaddr_reg:x3; val_offset:55743*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55743*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7ff000; valaddr_reg:x3; val_offset:55746*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55746*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7ff800; valaddr_reg:x3; val_offset:55749*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55749*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7ffc00; valaddr_reg:x3; val_offset:55752*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55752*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7ffe00; valaddr_reg:x3; val_offset:55755*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55755*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7fff00; valaddr_reg:x3; val_offset:55758*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55758*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7fff80; valaddr_reg:x3; val_offset:55761*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55761*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7fffc0; valaddr_reg:x3; val_offset:55764*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55764*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7fffe0; valaddr_reg:x3; val_offset:55767*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55767*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7ffff0; valaddr_reg:x3; val_offset:55770*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55770*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7ffff8; valaddr_reg:x3; val_offset:55773*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55773*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7ffffc; valaddr_reg:x3; val_offset:55776*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55776*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7ffffe; valaddr_reg:x3; val_offset:55779*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55779*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x438f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec38f47; op2val:0x80000000;
op3val:0x8c7fffff; valaddr_reg:x3; val_offset:55782*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55782*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf800000; valaddr_reg:x3; val_offset:55785*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55785*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf800001; valaddr_reg:x3; val_offset:55788*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55788*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf800003; valaddr_reg:x3; val_offset:55791*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55791*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf800007; valaddr_reg:x3; val_offset:55794*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55794*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf80000f; valaddr_reg:x3; val_offset:55797*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55797*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf80001f; valaddr_reg:x3; val_offset:55800*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55800*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf80003f; valaddr_reg:x3; val_offset:55803*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55803*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf80007f; valaddr_reg:x3; val_offset:55806*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55806*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf8000ff; valaddr_reg:x3; val_offset:55809*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55809*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf8001ff; valaddr_reg:x3; val_offset:55812*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55812*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf8003ff; valaddr_reg:x3; val_offset:55815*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55815*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf8007ff; valaddr_reg:x3; val_offset:55818*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55818*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf800fff; valaddr_reg:x3; val_offset:55821*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55821*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf801fff; valaddr_reg:x3; val_offset:55824*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55824*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf803fff; valaddr_reg:x3; val_offset:55827*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55827*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf807fff; valaddr_reg:x3; val_offset:55830*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55830*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf80ffff; valaddr_reg:x3; val_offset:55833*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55833*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf81ffff; valaddr_reg:x3; val_offset:55836*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55836*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf83ffff; valaddr_reg:x3; val_offset:55839*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55839*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf87ffff; valaddr_reg:x3; val_offset:55842*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55842*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf8fffff; valaddr_reg:x3; val_offset:55845*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55845*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdf9fffff; valaddr_reg:x3; val_offset:55848*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55848*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfbfffff; valaddr_reg:x3; val_offset:55851*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55851*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfc00000; valaddr_reg:x3; val_offset:55854*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55854*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfe00000; valaddr_reg:x3; val_offset:55857*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55857*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdff00000; valaddr_reg:x3; val_offset:55860*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55860*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdff80000; valaddr_reg:x3; val_offset:55863*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55863*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffc0000; valaddr_reg:x3; val_offset:55866*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55866*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffe0000; valaddr_reg:x3; val_offset:55869*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55869*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfff0000; valaddr_reg:x3; val_offset:55872*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55872*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfff8000; valaddr_reg:x3; val_offset:55875*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55875*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfffc000; valaddr_reg:x3; val_offset:55878*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55878*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfffe000; valaddr_reg:x3; val_offset:55881*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55881*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffff000; valaddr_reg:x3; val_offset:55884*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55884*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffff800; valaddr_reg:x3; val_offset:55887*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55887*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffffc00; valaddr_reg:x3; val_offset:55890*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55890*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffffe00; valaddr_reg:x3; val_offset:55893*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55893*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfffff00; valaddr_reg:x3; val_offset:55896*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55896*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfffff80; valaddr_reg:x3; val_offset:55899*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55899*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfffffc0; valaddr_reg:x3; val_offset:55902*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55902*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfffffe0; valaddr_reg:x3; val_offset:55905*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55905*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffffff0; valaddr_reg:x3; val_offset:55908*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55908*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffffff8; valaddr_reg:x3; val_offset:55911*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55911*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffffffc; valaddr_reg:x3; val_offset:55914*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55914*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdffffffe; valaddr_reg:x3; val_offset:55917*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55917*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xdfffffff; valaddr_reg:x3; val_offset:55920*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55920*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff000001; valaddr_reg:x3; val_offset:55923*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55923*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff000003; valaddr_reg:x3; val_offset:55926*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55926*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff000007; valaddr_reg:x3; val_offset:55929*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55929*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff199999; valaddr_reg:x3; val_offset:55932*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55932*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff249249; valaddr_reg:x3; val_offset:55935*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55935*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff333333; valaddr_reg:x3; val_offset:55938*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55938*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:55941*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55941*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:55944*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55944*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff444444; valaddr_reg:x3; val_offset:55947*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55947*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:55950*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55950*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:55953*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55953*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff666666; valaddr_reg:x3; val_offset:55956*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55956*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:55959*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55959*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:55962*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55962*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:55965*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55965*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43f721 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x273695 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec3f721; op2val:0xc0273695;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:55968*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55968*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c000000; valaddr_reg:x3; val_offset:55971*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55971*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c000001; valaddr_reg:x3; val_offset:55974*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55974*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c000003; valaddr_reg:x3; val_offset:55977*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55977*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c000007; valaddr_reg:x3; val_offset:55980*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55980*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c00000f; valaddr_reg:x3; val_offset:55983*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55983*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c00001f; valaddr_reg:x3; val_offset:55986*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55986*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c00003f; valaddr_reg:x3; val_offset:55989*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55989*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c00007f; valaddr_reg:x3; val_offset:55992*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55992*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c0000ff; valaddr_reg:x3; val_offset:55995*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55995*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c0001ff; valaddr_reg:x3; val_offset:55998*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55998*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c0003ff; valaddr_reg:x3; val_offset:56001*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56001*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c0007ff; valaddr_reg:x3; val_offset:56004*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56004*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c000fff; valaddr_reg:x3; val_offset:56007*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56007*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c001fff; valaddr_reg:x3; val_offset:56010*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56010*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c003fff; valaddr_reg:x3; val_offset:56013*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56013*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c007fff; valaddr_reg:x3; val_offset:56016*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56016*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c00ffff; valaddr_reg:x3; val_offset:56019*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56019*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c01ffff; valaddr_reg:x3; val_offset:56022*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56022*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c03ffff; valaddr_reg:x3; val_offset:56025*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56025*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c07ffff; valaddr_reg:x3; val_offset:56028*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56028*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c0fffff; valaddr_reg:x3; val_offset:56031*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56031*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c1fffff; valaddr_reg:x3; val_offset:56034*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56034*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c3fffff; valaddr_reg:x3; val_offset:56037*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56037*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c400000; valaddr_reg:x3; val_offset:56040*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56040*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c600000; valaddr_reg:x3; val_offset:56043*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56043*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c700000; valaddr_reg:x3; val_offset:56046*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56046*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c780000; valaddr_reg:x3; val_offset:56049*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56049*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c7c0000; valaddr_reg:x3; val_offset:56052*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56052*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c7e0000; valaddr_reg:x3; val_offset:56055*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56055*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c7f0000; valaddr_reg:x3; val_offset:56058*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56058*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44356e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27017d and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4356e; op2val:0x4027017d;
op3val:0x6c7f8000; valaddr_reg:x3; val_offset:56061*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56061*0 + 3*145*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348812287,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348814335,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348818431,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348826623,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348843007,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348875775,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348941311,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349072383,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349334527,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349858815,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2350907391,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004543,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004544,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2355101696,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356150272,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356674560,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356936704,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357067776,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357133312,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357166080,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357182464,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357190656,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357194752,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357196800,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357197824,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198336,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198592,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198720,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198784,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198816,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198832,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198840,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198844,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198846,32,FLEN)
NAN_BOXED(2126745415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198847,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749707776,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749707777,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749707779,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749707783,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749707791,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749707807,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749707839,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749707903,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749708031,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749708287,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749708799,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749709823,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749711871,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749715967,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749724159,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749740543,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749773311,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749838847,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3749969919,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3750232063,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3750756351,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3751804927,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3753902079,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3753902080,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3755999232,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3757047808,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3757572096,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3757834240,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3757965312,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758030848,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758063616,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758080000,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758088192,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758092288,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758094336,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758095360,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758095872,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096128,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096256,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096320,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096352,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096368,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096376,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096380,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096382,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(3758096383,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2126772001,32,FLEN)
NAN_BOXED(3223795349,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1811939328,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1811939329,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1811939331,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1811939335,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1811939343,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1811939359,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1811939391,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1811939455,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1811939583,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1811939839,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1811940351,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1811941375,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1811943423,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1811947519,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1811955711,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1811972095,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1812004863,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1812070399,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1812201471,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1812463615,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1812987903,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1814036479,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1816133631,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1816133632,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1818230784,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1819279360,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1819803648,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1820065792,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1820196864,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1820262400,32,FLEN)
NAN_BOXED(2126787950,32,FLEN)
NAN_BOXED(1076298109,32,FLEN)
NAN_BOXED(1820295168,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
