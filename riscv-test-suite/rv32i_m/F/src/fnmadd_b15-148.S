
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_18816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x29fffc00; valaddr_reg:x3; val_offset:56448*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56448*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x29fffe00; valaddr_reg:x3; val_offset:56451*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56451*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x29ffff00; valaddr_reg:x3; val_offset:56454*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56454*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x29ffff80; valaddr_reg:x3; val_offset:56457*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56457*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x29ffffc0; valaddr_reg:x3; val_offset:56460*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56460*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x29ffffe0; valaddr_reg:x3; val_offset:56463*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56463*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x29fffff0; valaddr_reg:x3; val_offset:56466*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56466*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x29fffff8; valaddr_reg:x3; val_offset:56469*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56469*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x29fffffc; valaddr_reg:x3; val_offset:56472*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56472*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x29fffffe; valaddr_reg:x3; val_offset:56475*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56475*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x29ffffff; valaddr_reg:x3; val_offset:56478*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56478*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x3f800001; valaddr_reg:x3; val_offset:56481*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56481*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x3f800003; valaddr_reg:x3; val_offset:56484*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56484*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x3f800007; valaddr_reg:x3; val_offset:56487*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56487*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x3f999999; valaddr_reg:x3; val_offset:56490*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56490*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:56493*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56493*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:56496*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56496*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:56499*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56499*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:56502*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56502*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:56505*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56505*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:56508*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56508*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:56511*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56511*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:56514*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56514*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:56517*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56517*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:56520*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56520*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:56523*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56523*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ccca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x534086 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4ccca; op2val:0x534086;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:56526*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56526*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:56529*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56529*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:56532*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56532*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:56535*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56535*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:56538*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56538*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:56541*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56541*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:56544*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56544*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:56547*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56547*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:56550*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56550*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:56553*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56553*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:56556*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56556*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:56559*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56559*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:56562*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56562*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:56565*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56565*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:56568*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56568*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:56571*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56571*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:56574*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56574*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6800000; valaddr_reg:x3; val_offset:56577*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56577*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6800001; valaddr_reg:x3; val_offset:56580*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56580*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6800003; valaddr_reg:x3; val_offset:56583*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56583*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6800007; valaddr_reg:x3; val_offset:56586*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56586*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x680000f; valaddr_reg:x3; val_offset:56589*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56589*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x680001f; valaddr_reg:x3; val_offset:56592*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56592*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x680003f; valaddr_reg:x3; val_offset:56595*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56595*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x680007f; valaddr_reg:x3; val_offset:56598*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56598*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x68000ff; valaddr_reg:x3; val_offset:56601*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56601*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x68001ff; valaddr_reg:x3; val_offset:56604*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56604*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x68003ff; valaddr_reg:x3; val_offset:56607*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56607*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x68007ff; valaddr_reg:x3; val_offset:56610*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56610*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6800fff; valaddr_reg:x3; val_offset:56613*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56613*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6801fff; valaddr_reg:x3; val_offset:56616*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56616*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6803fff; valaddr_reg:x3; val_offset:56619*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56619*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6807fff; valaddr_reg:x3; val_offset:56622*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56622*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x680ffff; valaddr_reg:x3; val_offset:56625*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56625*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x681ffff; valaddr_reg:x3; val_offset:56628*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56628*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x683ffff; valaddr_reg:x3; val_offset:56631*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56631*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x687ffff; valaddr_reg:x3; val_offset:56634*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56634*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x68fffff; valaddr_reg:x3; val_offset:56637*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56637*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x69fffff; valaddr_reg:x3; val_offset:56640*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56640*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6bfffff; valaddr_reg:x3; val_offset:56643*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56643*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6c00000; valaddr_reg:x3; val_offset:56646*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56646*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6e00000; valaddr_reg:x3; val_offset:56649*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56649*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6f00000; valaddr_reg:x3; val_offset:56652*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56652*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6f80000; valaddr_reg:x3; val_offset:56655*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56655*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6fc0000; valaddr_reg:x3; val_offset:56658*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56658*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6fe0000; valaddr_reg:x3; val_offset:56661*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56661*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6ff0000; valaddr_reg:x3; val_offset:56664*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56664*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6ff8000; valaddr_reg:x3; val_offset:56667*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56667*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6ffc000; valaddr_reg:x3; val_offset:56670*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56670*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6ffe000; valaddr_reg:x3; val_offset:56673*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56673*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6fff000; valaddr_reg:x3; val_offset:56676*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56676*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6fff800; valaddr_reg:x3; val_offset:56679*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56679*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6fffc00; valaddr_reg:x3; val_offset:56682*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56682*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6fffe00; valaddr_reg:x3; val_offset:56685*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56685*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6ffff00; valaddr_reg:x3; val_offset:56688*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56688*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6ffff80; valaddr_reg:x3; val_offset:56691*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56691*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6ffffc0; valaddr_reg:x3; val_offset:56694*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56694*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6ffffe0; valaddr_reg:x3; val_offset:56697*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56697*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6fffff0; valaddr_reg:x3; val_offset:56700*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56700*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6fffff8; valaddr_reg:x3; val_offset:56703*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56703*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6fffffc; valaddr_reg:x3; val_offset:56706*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56706*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6fffffe; valaddr_reg:x3; val_offset:56709*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56709*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45c80b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5c80b; op2val:0x0;
op3val:0x6ffffff; valaddr_reg:x3; val_offset:56712*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56712*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x3f800001; valaddr_reg:x3; val_offset:56715*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56715*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x3f800003; valaddr_reg:x3; val_offset:56718*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56718*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x3f800007; valaddr_reg:x3; val_offset:56721*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56721*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x3f999999; valaddr_reg:x3; val_offset:56724*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56724*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:56727*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56727*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:56730*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56730*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:56733*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56733*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:56736*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56736*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:56739*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56739*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:56742*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56742*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:56745*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56745*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:56748*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56748*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:56751*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56751*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:56754*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56754*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:56757*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56757*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:56760*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56760*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b000000; valaddr_reg:x3; val_offset:56763*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56763*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b000001; valaddr_reg:x3; val_offset:56766*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56766*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b000003; valaddr_reg:x3; val_offset:56769*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56769*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b000007; valaddr_reg:x3; val_offset:56772*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56772*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b00000f; valaddr_reg:x3; val_offset:56775*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56775*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b00001f; valaddr_reg:x3; val_offset:56778*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56778*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b00003f; valaddr_reg:x3; val_offset:56781*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56781*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b00007f; valaddr_reg:x3; val_offset:56784*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56784*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b0000ff; valaddr_reg:x3; val_offset:56787*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56787*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b0001ff; valaddr_reg:x3; val_offset:56790*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56790*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b0003ff; valaddr_reg:x3; val_offset:56793*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56793*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b0007ff; valaddr_reg:x3; val_offset:56796*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56796*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b000fff; valaddr_reg:x3; val_offset:56799*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56799*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b001fff; valaddr_reg:x3; val_offset:56802*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56802*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b003fff; valaddr_reg:x3; val_offset:56805*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56805*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b007fff; valaddr_reg:x3; val_offset:56808*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56808*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b00ffff; valaddr_reg:x3; val_offset:56811*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56811*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b01ffff; valaddr_reg:x3; val_offset:56814*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56814*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b03ffff; valaddr_reg:x3; val_offset:56817*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56817*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b07ffff; valaddr_reg:x3; val_offset:56820*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56820*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b0fffff; valaddr_reg:x3; val_offset:56823*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56823*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b1fffff; valaddr_reg:x3; val_offset:56826*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56826*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x492d03 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5170f1 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec92d03; op2val:0x5170f1;
op3val:0x4b3fffff; valaddr_reg:x3; val_offset:56829*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56829*0 + 3*147*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(704642048,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(704642560,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(704642816,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(704642944,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(704643008,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(704643040,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(704643056,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(704643064,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(704643068,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(704643070,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(704643071,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2126826698,32,FLEN)
NAN_BOXED(5456006,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051904,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051905,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051907,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051911,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051919,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051935,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051967,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052031,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052159,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052415,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052927,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109053951,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109055999,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109060095,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109068287,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109084671,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109117439,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109182975,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109314047,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109576191,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(110100479,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(111149055,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(113246207,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(113246208,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(115343360,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(116391936,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(116916224,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117178368,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117309440,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117374976,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117407744,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117424128,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117432320,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117436416,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117438464,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117439488,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440000,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440256,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440384,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440448,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440480,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440496,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440504,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440508,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440510,32,FLEN)
NAN_BOXED(2126891019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440511,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258291200,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258291201,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258291203,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258291207,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258291215,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258291231,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258291263,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258291327,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258291455,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258291711,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258292223,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258293247,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258295295,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258299391,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258307583,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258323967,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258356735,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258422271,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258553343,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1258815487,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1259339775,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1260388351,32,FLEN)
NAN_BOXED(2127113475,32,FLEN)
NAN_BOXED(5337329,32,FLEN)
NAN_BOXED(1262485503,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
