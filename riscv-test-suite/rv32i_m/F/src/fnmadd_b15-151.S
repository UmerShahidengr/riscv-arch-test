
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_19200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ae73d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x217ee3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecae73d; op2val:0x40217ee3;
op3val:0x7f000003; valaddr_reg:x3; val_offset:57600*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57600*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ae73d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x217ee3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecae73d; op2val:0x40217ee3;
op3val:0x7f000007; valaddr_reg:x3; val_offset:57603*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57603*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ae73d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x217ee3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecae73d; op2val:0x40217ee3;
op3val:0x7f199999; valaddr_reg:x3; val_offset:57606*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57606*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ae73d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x217ee3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecae73d; op2val:0x40217ee3;
op3val:0x7f249249; valaddr_reg:x3; val_offset:57609*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57609*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ae73d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x217ee3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecae73d; op2val:0x40217ee3;
op3val:0x7f333333; valaddr_reg:x3; val_offset:57612*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57612*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ae73d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x217ee3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecae73d; op2val:0x40217ee3;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:57615*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57615*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ae73d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x217ee3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecae73d; op2val:0x40217ee3;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:57618*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57618*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ae73d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x217ee3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecae73d; op2val:0x40217ee3;
op3val:0x7f444444; valaddr_reg:x3; val_offset:57621*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57621*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ae73d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x217ee3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecae73d; op2val:0x40217ee3;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:57624*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57624*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ae73d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x217ee3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecae73d; op2val:0x40217ee3;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:57627*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57627*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ae73d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x217ee3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecae73d; op2val:0x40217ee3;
op3val:0x7f666666; valaddr_reg:x3; val_offset:57630*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57630*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ae73d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x217ee3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecae73d; op2val:0x40217ee3;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:57633*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57633*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ae73d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x217ee3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecae73d; op2val:0x40217ee3;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:57636*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57636*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ae73d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x217ee3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecae73d; op2val:0x40217ee3;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:57639*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57639*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ae73d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x217ee3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecae73d; op2val:0x40217ee3;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:57642*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57642*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x71000000; valaddr_reg:x3; val_offset:57645*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57645*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x71000001; valaddr_reg:x3; val_offset:57648*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57648*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x71000003; valaddr_reg:x3; val_offset:57651*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57651*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x71000007; valaddr_reg:x3; val_offset:57654*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57654*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7100000f; valaddr_reg:x3; val_offset:57657*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57657*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7100001f; valaddr_reg:x3; val_offset:57660*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57660*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7100003f; valaddr_reg:x3; val_offset:57663*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57663*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7100007f; valaddr_reg:x3; val_offset:57666*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57666*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x710000ff; valaddr_reg:x3; val_offset:57669*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57669*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x710001ff; valaddr_reg:x3; val_offset:57672*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57672*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x710003ff; valaddr_reg:x3; val_offset:57675*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57675*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x710007ff; valaddr_reg:x3; val_offset:57678*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57678*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x71000fff; valaddr_reg:x3; val_offset:57681*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57681*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x71001fff; valaddr_reg:x3; val_offset:57684*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57684*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x71003fff; valaddr_reg:x3; val_offset:57687*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57687*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x71007fff; valaddr_reg:x3; val_offset:57690*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57690*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7100ffff; valaddr_reg:x3; val_offset:57693*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57693*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7101ffff; valaddr_reg:x3; val_offset:57696*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57696*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7103ffff; valaddr_reg:x3; val_offset:57699*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57699*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7107ffff; valaddr_reg:x3; val_offset:57702*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57702*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x710fffff; valaddr_reg:x3; val_offset:57705*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57705*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x711fffff; valaddr_reg:x3; val_offset:57708*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57708*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x713fffff; valaddr_reg:x3; val_offset:57711*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57711*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x71400000; valaddr_reg:x3; val_offset:57714*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57714*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x71600000; valaddr_reg:x3; val_offset:57717*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57717*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x71700000; valaddr_reg:x3; val_offset:57720*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57720*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x71780000; valaddr_reg:x3; val_offset:57723*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57723*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717c0000; valaddr_reg:x3; val_offset:57726*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57726*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717e0000; valaddr_reg:x3; val_offset:57729*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57729*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717f0000; valaddr_reg:x3; val_offset:57732*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57732*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717f8000; valaddr_reg:x3; val_offset:57735*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57735*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717fc000; valaddr_reg:x3; val_offset:57738*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57738*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717fe000; valaddr_reg:x3; val_offset:57741*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57741*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717ff000; valaddr_reg:x3; val_offset:57744*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57744*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717ff800; valaddr_reg:x3; val_offset:57747*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57747*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717ffc00; valaddr_reg:x3; val_offset:57750*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57750*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717ffe00; valaddr_reg:x3; val_offset:57753*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57753*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717fff00; valaddr_reg:x3; val_offset:57756*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57756*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717fff80; valaddr_reg:x3; val_offset:57759*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57759*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717fffc0; valaddr_reg:x3; val_offset:57762*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57762*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717fffe0; valaddr_reg:x3; val_offset:57765*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57765*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717ffff0; valaddr_reg:x3; val_offset:57768*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57768*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717ffff8; valaddr_reg:x3; val_offset:57771*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57771*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717ffffc; valaddr_reg:x3; val_offset:57774*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57774*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717ffffe; valaddr_reg:x3; val_offset:57777*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57777*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x717fffff; valaddr_reg:x3; val_offset:57780*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57780*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7f000001; valaddr_reg:x3; val_offset:57783*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57783*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7f000003; valaddr_reg:x3; val_offset:57786*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57786*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7f000007; valaddr_reg:x3; val_offset:57789*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57789*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7f199999; valaddr_reg:x3; val_offset:57792*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57792*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7f249249; valaddr_reg:x3; val_offset:57795*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57795*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7f333333; valaddr_reg:x3; val_offset:57798*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57798*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:57801*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57801*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:57804*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57804*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7f444444; valaddr_reg:x3; val_offset:57807*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57807*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:57810*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57810*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:57813*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57813*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7f666666; valaddr_reg:x3; val_offset:57816*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57816*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:57819*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57819*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:57822*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57822*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:57825*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57825*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4be31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20b761 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecbe31d; op2val:0x4020b761;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:57828*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57828*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb4000000; valaddr_reg:x3; val_offset:57831*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57831*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb4000001; valaddr_reg:x3; val_offset:57834*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57834*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb4000003; valaddr_reg:x3; val_offset:57837*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57837*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb4000007; valaddr_reg:x3; val_offset:57840*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57840*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb400000f; valaddr_reg:x3; val_offset:57843*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57843*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb400001f; valaddr_reg:x3; val_offset:57846*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57846*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb400003f; valaddr_reg:x3; val_offset:57849*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57849*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb400007f; valaddr_reg:x3; val_offset:57852*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57852*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb40000ff; valaddr_reg:x3; val_offset:57855*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57855*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb40001ff; valaddr_reg:x3; val_offset:57858*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57858*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb40003ff; valaddr_reg:x3; val_offset:57861*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57861*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb40007ff; valaddr_reg:x3; val_offset:57864*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57864*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb4000fff; valaddr_reg:x3; val_offset:57867*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57867*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb4001fff; valaddr_reg:x3; val_offset:57870*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57870*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb4003fff; valaddr_reg:x3; val_offset:57873*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57873*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb4007fff; valaddr_reg:x3; val_offset:57876*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57876*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb400ffff; valaddr_reg:x3; val_offset:57879*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57879*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb401ffff; valaddr_reg:x3; val_offset:57882*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57882*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb403ffff; valaddr_reg:x3; val_offset:57885*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57885*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb407ffff; valaddr_reg:x3; val_offset:57888*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57888*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb40fffff; valaddr_reg:x3; val_offset:57891*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57891*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb41fffff; valaddr_reg:x3; val_offset:57894*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57894*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb43fffff; valaddr_reg:x3; val_offset:57897*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57897*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb4400000; valaddr_reg:x3; val_offset:57900*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57900*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb4600000; valaddr_reg:x3; val_offset:57903*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57903*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb4700000; valaddr_reg:x3; val_offset:57906*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57906*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb4780000; valaddr_reg:x3; val_offset:57909*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57909*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47c0000; valaddr_reg:x3; val_offset:57912*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57912*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47e0000; valaddr_reg:x3; val_offset:57915*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57915*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47f0000; valaddr_reg:x3; val_offset:57918*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57918*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47f8000; valaddr_reg:x3; val_offset:57921*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57921*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47fc000; valaddr_reg:x3; val_offset:57924*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57924*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47fe000; valaddr_reg:x3; val_offset:57927*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57927*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47ff000; valaddr_reg:x3; val_offset:57930*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57930*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47ff800; valaddr_reg:x3; val_offset:57933*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57933*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47ffc00; valaddr_reg:x3; val_offset:57936*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57936*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47ffe00; valaddr_reg:x3; val_offset:57939*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57939*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47fff00; valaddr_reg:x3; val_offset:57942*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57942*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47fff80; valaddr_reg:x3; val_offset:57945*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57945*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47fffc0; valaddr_reg:x3; val_offset:57948*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57948*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47fffe0; valaddr_reg:x3; val_offset:57951*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57951*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47ffff0; valaddr_reg:x3; val_offset:57954*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57954*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47ffff8; valaddr_reg:x3; val_offset:57957*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57957*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47ffffc; valaddr_reg:x3; val_offset:57960*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57960*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47ffffe; valaddr_reg:x3; val_offset:57963*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57963*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x68 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xb47fffff; valaddr_reg:x3; val_offset:57966*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57966*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xbf800001; valaddr_reg:x3; val_offset:57969*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57969*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xbf800003; valaddr_reg:x3; val_offset:57972*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57972*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xbf800007; valaddr_reg:x3; val_offset:57975*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57975*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xbf999999; valaddr_reg:x3; val_offset:57978*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57978*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:57981*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57981*0 + 3*150*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127226685,32,FLEN)
NAN_BOXED(1075936995,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2127226685,32,FLEN)
NAN_BOXED(1075936995,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2127226685,32,FLEN)
NAN_BOXED(1075936995,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2127226685,32,FLEN)
NAN_BOXED(1075936995,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2127226685,32,FLEN)
NAN_BOXED(1075936995,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2127226685,32,FLEN)
NAN_BOXED(1075936995,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2127226685,32,FLEN)
NAN_BOXED(1075936995,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2127226685,32,FLEN)
NAN_BOXED(1075936995,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2127226685,32,FLEN)
NAN_BOXED(1075936995,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2127226685,32,FLEN)
NAN_BOXED(1075936995,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2127226685,32,FLEN)
NAN_BOXED(1075936995,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2127226685,32,FLEN)
NAN_BOXED(1075936995,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2127226685,32,FLEN)
NAN_BOXED(1075936995,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2127226685,32,FLEN)
NAN_BOXED(1075936995,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2127226685,32,FLEN)
NAN_BOXED(1075936995,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895825408,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895825409,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895825411,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895825415,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895825423,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895825439,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895825471,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895825535,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895825663,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895825919,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895826431,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895827455,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895829503,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895833599,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895841791,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895858175,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895890943,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1895956479,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1896087551,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1896349695,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1896873983,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1897922559,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1900019711,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1900019712,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1902116864,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1903165440,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1903689728,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1903951872,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904082944,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904148480,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904181248,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904197632,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904205824,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904209920,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904211968,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904212992,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904213504,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904213760,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904213888,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904213952,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904213984,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904214000,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904214008,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904214012,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904214014,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(1904214015,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2127291165,32,FLEN)
NAN_BOXED(1075885921,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3019898880,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3019898881,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3019898883,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3019898887,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3019898895,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3019898911,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3019898943,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3019899007,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3019899135,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3019899391,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3019899903,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3019900927,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3019902975,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3019907071,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3019915263,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3019931647,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3019964415,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3020029951,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3020161023,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3020423167,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3020947455,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3021996031,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3024093183,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3024093184,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3026190336,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3027238912,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3027763200,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028025344,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028156416,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028221952,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028254720,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028271104,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028279296,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028283392,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028285440,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028286464,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028286976,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028287232,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028287360,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028287424,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028287456,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028287472,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028287480,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028287484,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028287486,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3028287487,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
