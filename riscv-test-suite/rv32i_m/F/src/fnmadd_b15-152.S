
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_19328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:57984*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57984*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:57987*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57987*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:57990*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57990*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:57993*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57993*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:57996*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57996*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:57999*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57999*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:58002*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58002*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:58005*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58005*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:58008*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58008*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:58011*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58011*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c7ce2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x501f43 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecc7ce2; op2val:0x80501f43;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:58014*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58014*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:58017*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58017*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:58020*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58020*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:58023*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58023*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:58026*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58026*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:58029*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58029*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:58032*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58032*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:58035*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58035*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:58038*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58038*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:58041*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58041*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:58044*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58044*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:58047*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58047*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:58050*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58050*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:58053*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58053*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:58056*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58056*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:58059*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58059*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:58062*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58062*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x82000000; valaddr_reg:x3; val_offset:58065*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58065*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x82000001; valaddr_reg:x3; val_offset:58068*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58068*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x82000003; valaddr_reg:x3; val_offset:58071*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58071*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x82000007; valaddr_reg:x3; val_offset:58074*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58074*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x8200000f; valaddr_reg:x3; val_offset:58077*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58077*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x8200001f; valaddr_reg:x3; val_offset:58080*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58080*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x8200003f; valaddr_reg:x3; val_offset:58083*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58083*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x8200007f; valaddr_reg:x3; val_offset:58086*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58086*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x820000ff; valaddr_reg:x3; val_offset:58089*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58089*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x820001ff; valaddr_reg:x3; val_offset:58092*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58092*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x820003ff; valaddr_reg:x3; val_offset:58095*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58095*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x820007ff; valaddr_reg:x3; val_offset:58098*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58098*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x82000fff; valaddr_reg:x3; val_offset:58101*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58101*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x82001fff; valaddr_reg:x3; val_offset:58104*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58104*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x82003fff; valaddr_reg:x3; val_offset:58107*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58107*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x82007fff; valaddr_reg:x3; val_offset:58110*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58110*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x8200ffff; valaddr_reg:x3; val_offset:58113*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58113*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x8201ffff; valaddr_reg:x3; val_offset:58116*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58116*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x8203ffff; valaddr_reg:x3; val_offset:58119*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58119*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x8207ffff; valaddr_reg:x3; val_offset:58122*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58122*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x820fffff; valaddr_reg:x3; val_offset:58125*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58125*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x821fffff; valaddr_reg:x3; val_offset:58128*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58128*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x823fffff; valaddr_reg:x3; val_offset:58131*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58131*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x82400000; valaddr_reg:x3; val_offset:58134*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58134*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x82600000; valaddr_reg:x3; val_offset:58137*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58137*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x82700000; valaddr_reg:x3; val_offset:58140*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58140*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x82780000; valaddr_reg:x3; val_offset:58143*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58143*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827c0000; valaddr_reg:x3; val_offset:58146*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58146*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827e0000; valaddr_reg:x3; val_offset:58149*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58149*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827f0000; valaddr_reg:x3; val_offset:58152*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58152*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827f8000; valaddr_reg:x3; val_offset:58155*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58155*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827fc000; valaddr_reg:x3; val_offset:58158*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58158*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827fe000; valaddr_reg:x3; val_offset:58161*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58161*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827ff000; valaddr_reg:x3; val_offset:58164*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58164*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827ff800; valaddr_reg:x3; val_offset:58167*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58167*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827ffc00; valaddr_reg:x3; val_offset:58170*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58170*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827ffe00; valaddr_reg:x3; val_offset:58173*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58173*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827fff00; valaddr_reg:x3; val_offset:58176*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58176*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827fff80; valaddr_reg:x3; val_offset:58179*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58179*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827fffc0; valaddr_reg:x3; val_offset:58182*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58182*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827fffe0; valaddr_reg:x3; val_offset:58185*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58185*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827ffff0; valaddr_reg:x3; val_offset:58188*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58188*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827ffff8; valaddr_reg:x3; val_offset:58191*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58191*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827ffffc; valaddr_reg:x3; val_offset:58194*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58194*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827ffffe; valaddr_reg:x3; val_offset:58197*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58197*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d13b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd13b2; op2val:0x80000000;
op3val:0x827fffff; valaddr_reg:x3; val_offset:58200*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58200*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xbf800001; valaddr_reg:x3; val_offset:58203*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58203*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xbf800003; valaddr_reg:x3; val_offset:58206*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58206*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xbf800007; valaddr_reg:x3; val_offset:58209*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58209*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xbf999999; valaddr_reg:x3; val_offset:58212*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58212*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:58215*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58215*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:58218*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58218*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:58221*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58221*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:58224*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58224*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:58227*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58227*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:58230*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58230*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:58233*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58233*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:58236*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58236*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:58239*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58239*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:58242*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58242*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:58245*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58245*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:58248*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58248*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc5000000; valaddr_reg:x3; val_offset:58251*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58251*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc5000001; valaddr_reg:x3; val_offset:58254*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58254*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc5000003; valaddr_reg:x3; val_offset:58257*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58257*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc5000007; valaddr_reg:x3; val_offset:58260*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58260*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc500000f; valaddr_reg:x3; val_offset:58263*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58263*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc500001f; valaddr_reg:x3; val_offset:58266*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58266*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc500003f; valaddr_reg:x3; val_offset:58269*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58269*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc500007f; valaddr_reg:x3; val_offset:58272*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58272*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc50000ff; valaddr_reg:x3; val_offset:58275*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58275*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc50001ff; valaddr_reg:x3; val_offset:58278*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58278*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc50003ff; valaddr_reg:x3; val_offset:58281*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58281*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc50007ff; valaddr_reg:x3; val_offset:58284*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58284*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc5000fff; valaddr_reg:x3; val_offset:58287*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58287*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc5001fff; valaddr_reg:x3; val_offset:58290*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58290*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc5003fff; valaddr_reg:x3; val_offset:58293*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58293*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc5007fff; valaddr_reg:x3; val_offset:58296*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58296*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc500ffff; valaddr_reg:x3; val_offset:58299*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58299*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc501ffff; valaddr_reg:x3; val_offset:58302*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58302*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc503ffff; valaddr_reg:x3; val_offset:58305*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58305*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc507ffff; valaddr_reg:x3; val_offset:58308*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58308*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc50fffff; valaddr_reg:x3; val_offset:58311*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58311*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc51fffff; valaddr_reg:x3; val_offset:58314*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58314*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc53fffff; valaddr_reg:x3; val_offset:58317*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58317*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc5400000; valaddr_reg:x3; val_offset:58320*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58320*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc5600000; valaddr_reg:x3; val_offset:58323*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58323*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc5700000; valaddr_reg:x3; val_offset:58326*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58326*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc5780000; valaddr_reg:x3; val_offset:58329*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58329*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57c0000; valaddr_reg:x3; val_offset:58332*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58332*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57e0000; valaddr_reg:x3; val_offset:58335*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58335*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57f0000; valaddr_reg:x3; val_offset:58338*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58338*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57f8000; valaddr_reg:x3; val_offset:58341*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58341*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57fc000; valaddr_reg:x3; val_offset:58344*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58344*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57fe000; valaddr_reg:x3; val_offset:58347*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58347*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57ff000; valaddr_reg:x3; val_offset:58350*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58350*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57ff800; valaddr_reg:x3; val_offset:58353*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58353*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57ffc00; valaddr_reg:x3; val_offset:58356*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58356*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57ffe00; valaddr_reg:x3; val_offset:58359*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58359*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57fff00; valaddr_reg:x3; val_offset:58362*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58362*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57fff80; valaddr_reg:x3; val_offset:58365*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58365*0 + 3*151*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2127330530,32,FLEN)
NAN_BOXED(2152734531,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038080,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038081,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038083,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038087,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038095,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038111,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038143,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038207,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038335,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038591,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181039103,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181040127,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181042175,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181046271,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181054463,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181070847,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181103615,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181169151,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181300223,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181562367,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2182086655,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2183135231,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2185232383,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2185232384,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2187329536,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2188378112,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2188902400,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189164544,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189295616,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189361152,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189393920,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189410304,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189418496,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189422592,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189424640,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189425664,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426176,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426432,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426560,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426624,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426656,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426672,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426680,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426684,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426686,32,FLEN)
NAN_BOXED(2127369138,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426687,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305111552,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305111553,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305111555,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305111559,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305111567,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305111583,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305111615,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305111679,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305111807,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305112063,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305112575,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305113599,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305115647,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305119743,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305127935,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305144319,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305177087,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305242623,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305373695,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3305635839,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3306160127,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3307208703,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3309305855,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3309305856,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3311403008,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3312451584,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3312975872,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313238016,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313369088,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313434624,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313467392,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313483776,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313491968,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313496064,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313498112,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313499136,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313499648,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313499904,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313500032,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
