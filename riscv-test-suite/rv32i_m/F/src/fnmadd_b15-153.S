
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_19456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57fffc0; valaddr_reg:x3; val_offset:58368*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58368*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57fffe0; valaddr_reg:x3; val_offset:58371*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58371*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57ffff0; valaddr_reg:x3; val_offset:58374*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58374*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57ffff8; valaddr_reg:x3; val_offset:58377*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58377*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57ffffc; valaddr_reg:x3; val_offset:58380*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58380*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57ffffe; valaddr_reg:x3; val_offset:58383*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58383*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2b40 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fdb2b and fs3 == 1 and fe3 == 0x8a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2b40; op2val:0x804fdb2b;
op3val:0xc57fffff; valaddr_reg:x3; val_offset:58386*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58386*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb3000000; valaddr_reg:x3; val_offset:58389*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58389*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb3000001; valaddr_reg:x3; val_offset:58392*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58392*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb3000003; valaddr_reg:x3; val_offset:58395*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58395*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb3000007; valaddr_reg:x3; val_offset:58398*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58398*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb300000f; valaddr_reg:x3; val_offset:58401*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58401*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb300001f; valaddr_reg:x3; val_offset:58404*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58404*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb300003f; valaddr_reg:x3; val_offset:58407*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58407*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb300007f; valaddr_reg:x3; val_offset:58410*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58410*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb30000ff; valaddr_reg:x3; val_offset:58413*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58413*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb30001ff; valaddr_reg:x3; val_offset:58416*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58416*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb30003ff; valaddr_reg:x3; val_offset:58419*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58419*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb30007ff; valaddr_reg:x3; val_offset:58422*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58422*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb3000fff; valaddr_reg:x3; val_offset:58425*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58425*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb3001fff; valaddr_reg:x3; val_offset:58428*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58428*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb3003fff; valaddr_reg:x3; val_offset:58431*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58431*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb3007fff; valaddr_reg:x3; val_offset:58434*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58434*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb300ffff; valaddr_reg:x3; val_offset:58437*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58437*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb301ffff; valaddr_reg:x3; val_offset:58440*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58440*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb303ffff; valaddr_reg:x3; val_offset:58443*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58443*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb307ffff; valaddr_reg:x3; val_offset:58446*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58446*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb30fffff; valaddr_reg:x3; val_offset:58449*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58449*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb31fffff; valaddr_reg:x3; val_offset:58452*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58452*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb33fffff; valaddr_reg:x3; val_offset:58455*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58455*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb3400000; valaddr_reg:x3; val_offset:58458*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58458*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb3600000; valaddr_reg:x3; val_offset:58461*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58461*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb3700000; valaddr_reg:x3; val_offset:58464*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58464*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb3780000; valaddr_reg:x3; val_offset:58467*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58467*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37c0000; valaddr_reg:x3; val_offset:58470*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58470*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37e0000; valaddr_reg:x3; val_offset:58473*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58473*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37f0000; valaddr_reg:x3; val_offset:58476*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58476*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37f8000; valaddr_reg:x3; val_offset:58479*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58479*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37fc000; valaddr_reg:x3; val_offset:58482*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58482*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37fe000; valaddr_reg:x3; val_offset:58485*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58485*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37ff000; valaddr_reg:x3; val_offset:58488*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58488*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37ff800; valaddr_reg:x3; val_offset:58491*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58491*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37ffc00; valaddr_reg:x3; val_offset:58494*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58494*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37ffe00; valaddr_reg:x3; val_offset:58497*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58497*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37fff00; valaddr_reg:x3; val_offset:58500*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58500*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37fff80; valaddr_reg:x3; val_offset:58503*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58503*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37fffc0; valaddr_reg:x3; val_offset:58506*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58506*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37fffe0; valaddr_reg:x3; val_offset:58509*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58509*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37ffff0; valaddr_reg:x3; val_offset:58512*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58512*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37ffff8; valaddr_reg:x3; val_offset:58515*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58515*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37ffffc; valaddr_reg:x3; val_offset:58518*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58518*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37ffffe; valaddr_reg:x3; val_offset:58521*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58521*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xb37fffff; valaddr_reg:x3; val_offset:58524*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58524*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xbf800001; valaddr_reg:x3; val_offset:58527*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58527*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xbf800003; valaddr_reg:x3; val_offset:58530*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58530*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xbf800007; valaddr_reg:x3; val_offset:58533*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58533*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xbf999999; valaddr_reg:x3; val_offset:58536*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58536*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:58539*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58539*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:58542*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58542*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:58545*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58545*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:58548*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58548*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:58551*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58551*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:58554*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58554*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:58557*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58557*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:58560*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58560*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:58563*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58563*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:58566*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58566*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:58569*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58569*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d2ec7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fd9cc and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd2ec7; op2val:0x804fd9cc;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:58572*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58572*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6800000; valaddr_reg:x3; val_offset:58575*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58575*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6800001; valaddr_reg:x3; val_offset:58578*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58578*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6800003; valaddr_reg:x3; val_offset:58581*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58581*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6800007; valaddr_reg:x3; val_offset:58584*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58584*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb680000f; valaddr_reg:x3; val_offset:58587*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58587*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb680001f; valaddr_reg:x3; val_offset:58590*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58590*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb680003f; valaddr_reg:x3; val_offset:58593*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58593*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb680007f; valaddr_reg:x3; val_offset:58596*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58596*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb68000ff; valaddr_reg:x3; val_offset:58599*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58599*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb68001ff; valaddr_reg:x3; val_offset:58602*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58602*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb68003ff; valaddr_reg:x3; val_offset:58605*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58605*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb68007ff; valaddr_reg:x3; val_offset:58608*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58608*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6800fff; valaddr_reg:x3; val_offset:58611*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58611*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6801fff; valaddr_reg:x3; val_offset:58614*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58614*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6803fff; valaddr_reg:x3; val_offset:58617*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58617*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6807fff; valaddr_reg:x3; val_offset:58620*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58620*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb680ffff; valaddr_reg:x3; val_offset:58623*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58623*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb681ffff; valaddr_reg:x3; val_offset:58626*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58626*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb683ffff; valaddr_reg:x3; val_offset:58629*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58629*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb687ffff; valaddr_reg:x3; val_offset:58632*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58632*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb68fffff; valaddr_reg:x3; val_offset:58635*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58635*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb69fffff; valaddr_reg:x3; val_offset:58638*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58638*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6bfffff; valaddr_reg:x3; val_offset:58641*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58641*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6c00000; valaddr_reg:x3; val_offset:58644*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58644*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6e00000; valaddr_reg:x3; val_offset:58647*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58647*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6f00000; valaddr_reg:x3; val_offset:58650*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58650*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6f80000; valaddr_reg:x3; val_offset:58653*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58653*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6fc0000; valaddr_reg:x3; val_offset:58656*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58656*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6fe0000; valaddr_reg:x3; val_offset:58659*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58659*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6ff0000; valaddr_reg:x3; val_offset:58662*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58662*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6ff8000; valaddr_reg:x3; val_offset:58665*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58665*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6ffc000; valaddr_reg:x3; val_offset:58668*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58668*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6ffe000; valaddr_reg:x3; val_offset:58671*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58671*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6fff000; valaddr_reg:x3; val_offset:58674*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58674*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6fff800; valaddr_reg:x3; val_offset:58677*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58677*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6fffc00; valaddr_reg:x3; val_offset:58680*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58680*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6fffe00; valaddr_reg:x3; val_offset:58683*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58683*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6ffff00; valaddr_reg:x3; val_offset:58686*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58686*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6ffff80; valaddr_reg:x3; val_offset:58689*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58689*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6ffffc0; valaddr_reg:x3; val_offset:58692*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58692*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6ffffe0; valaddr_reg:x3; val_offset:58695*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58695*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6fffff0; valaddr_reg:x3; val_offset:58698*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58698*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6fffff8; valaddr_reg:x3; val_offset:58701*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58701*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6fffffc; valaddr_reg:x3; val_offset:58704*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58704*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6fffffe; valaddr_reg:x3; val_offset:58707*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58707*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xb6ffffff; valaddr_reg:x3; val_offset:58710*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58710*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xbf800001; valaddr_reg:x3; val_offset:58713*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58713*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xbf800003; valaddr_reg:x3; val_offset:58716*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58716*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xbf800007; valaddr_reg:x3; val_offset:58719*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58719*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xbf999999; valaddr_reg:x3; val_offset:58722*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58722*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:58725*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58725*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:58728*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58728*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:58731*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58731*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:58734*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58734*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:58737*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58737*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:58740*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58740*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:58743*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58743*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:58746*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58746*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:58749*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58749*0 + 3*152*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313500096,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313500128,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313500144,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313500152,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313500156,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313500158,32,FLEN)
NAN_BOXED(2127375168,32,FLEN)
NAN_BOXED(2152717099,32,FLEN)
NAN_BOXED(3313500159,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003121664,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003121665,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003121667,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003121671,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003121679,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003121695,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003121727,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003121791,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003121919,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003122175,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003122687,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003123711,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003125759,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003129855,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003138047,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003154431,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003187199,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003252735,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003383807,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3003645951,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3004170239,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3005218815,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3007315967,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3007315968,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3009413120,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3010461696,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3010985984,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011248128,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011379200,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011444736,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011477504,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011493888,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011502080,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011506176,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011508224,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011509248,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011509760,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011510016,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011510144,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011510208,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011510240,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011510256,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011510264,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011510268,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011510270,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3011510271,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2127376071,32,FLEN)
NAN_BOXED(2152716748,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061841920,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061841921,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061841923,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061841927,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061841935,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061841951,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061841983,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061842047,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061842175,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061842431,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061842943,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061843967,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061846015,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061850111,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061858303,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061874687,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061907455,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3061972991,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3062104063,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3062366207,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3062890495,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3063939071,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3066036223,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3066036224,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3068133376,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3069181952,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3069706240,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3069968384,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070099456,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070164992,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070197760,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070214144,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070222336,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070226432,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070228480,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070229504,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070230016,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070230272,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070230400,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070230464,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070230496,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070230512,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070230520,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070230524,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070230526,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3070230527,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
