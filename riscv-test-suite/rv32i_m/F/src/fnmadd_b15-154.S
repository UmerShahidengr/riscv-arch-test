
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_19584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:58752*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58752*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:58755*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58755*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eac11 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4f467b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceac11; op2val:0x804f467b;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:58758*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58758*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x30000000; valaddr_reg:x3; val_offset:58761*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58761*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x30000001; valaddr_reg:x3; val_offset:58764*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58764*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x30000003; valaddr_reg:x3; val_offset:58767*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58767*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x30000007; valaddr_reg:x3; val_offset:58770*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58770*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3000000f; valaddr_reg:x3; val_offset:58773*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58773*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3000001f; valaddr_reg:x3; val_offset:58776*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58776*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3000003f; valaddr_reg:x3; val_offset:58779*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58779*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3000007f; valaddr_reg:x3; val_offset:58782*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58782*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x300000ff; valaddr_reg:x3; val_offset:58785*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58785*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x300001ff; valaddr_reg:x3; val_offset:58788*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58788*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x300003ff; valaddr_reg:x3; val_offset:58791*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58791*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x300007ff; valaddr_reg:x3; val_offset:58794*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58794*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x30000fff; valaddr_reg:x3; val_offset:58797*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58797*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x30001fff; valaddr_reg:x3; val_offset:58800*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58800*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x30003fff; valaddr_reg:x3; val_offset:58803*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58803*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x30007fff; valaddr_reg:x3; val_offset:58806*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58806*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3000ffff; valaddr_reg:x3; val_offset:58809*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58809*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3001ffff; valaddr_reg:x3; val_offset:58812*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58812*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3003ffff; valaddr_reg:x3; val_offset:58815*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58815*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3007ffff; valaddr_reg:x3; val_offset:58818*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58818*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x300fffff; valaddr_reg:x3; val_offset:58821*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58821*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x301fffff; valaddr_reg:x3; val_offset:58824*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58824*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x303fffff; valaddr_reg:x3; val_offset:58827*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58827*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x30400000; valaddr_reg:x3; val_offset:58830*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58830*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x30600000; valaddr_reg:x3; val_offset:58833*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58833*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x30700000; valaddr_reg:x3; val_offset:58836*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58836*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x30780000; valaddr_reg:x3; val_offset:58839*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58839*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307c0000; valaddr_reg:x3; val_offset:58842*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58842*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307e0000; valaddr_reg:x3; val_offset:58845*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58845*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307f0000; valaddr_reg:x3; val_offset:58848*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58848*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307f8000; valaddr_reg:x3; val_offset:58851*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58851*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307fc000; valaddr_reg:x3; val_offset:58854*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58854*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307fe000; valaddr_reg:x3; val_offset:58857*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58857*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307ff000; valaddr_reg:x3; val_offset:58860*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58860*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307ff800; valaddr_reg:x3; val_offset:58863*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58863*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307ffc00; valaddr_reg:x3; val_offset:58866*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58866*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307ffe00; valaddr_reg:x3; val_offset:58869*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58869*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307fff00; valaddr_reg:x3; val_offset:58872*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58872*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307fff80; valaddr_reg:x3; val_offset:58875*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58875*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307fffc0; valaddr_reg:x3; val_offset:58878*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58878*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307fffe0; valaddr_reg:x3; val_offset:58881*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58881*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307ffff0; valaddr_reg:x3; val_offset:58884*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58884*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307ffff8; valaddr_reg:x3; val_offset:58887*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58887*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307ffffc; valaddr_reg:x3; val_offset:58890*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58890*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307ffffe; valaddr_reg:x3; val_offset:58893*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58893*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x60 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x307fffff; valaddr_reg:x3; val_offset:58896*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58896*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3f800001; valaddr_reg:x3; val_offset:58899*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58899*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3f800003; valaddr_reg:x3; val_offset:58902*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58902*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3f800007; valaddr_reg:x3; val_offset:58905*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58905*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3f999999; valaddr_reg:x3; val_offset:58908*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58908*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:58911*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58911*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:58914*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58914*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:58917*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58917*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:58920*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58920*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:58923*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58923*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:58926*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58926*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:58929*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58929*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:58932*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58932*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:58935*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58935*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:58938*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58938*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:58941*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58941*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f66ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4eff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf66ed; op2val:0x4eff0e;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:58944*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58944*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:58947*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58947*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:58950*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58950*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:58953*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58953*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:58956*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58956*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:58959*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58959*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:58962*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58962*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:58965*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58965*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:58968*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58968*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:58971*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58971*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:58974*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58974*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:58977*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58977*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:58980*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58980*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:58983*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58983*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:58986*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58986*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:58989*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58989*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:58992*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58992*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa000000; valaddr_reg:x3; val_offset:58995*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58995*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa000001; valaddr_reg:x3; val_offset:58998*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58998*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa000003; valaddr_reg:x3; val_offset:59001*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59001*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa000007; valaddr_reg:x3; val_offset:59004*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59004*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa00000f; valaddr_reg:x3; val_offset:59007*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59007*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa00001f; valaddr_reg:x3; val_offset:59010*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59010*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa00003f; valaddr_reg:x3; val_offset:59013*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59013*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa00007f; valaddr_reg:x3; val_offset:59016*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59016*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa0000ff; valaddr_reg:x3; val_offset:59019*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59019*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa0001ff; valaddr_reg:x3; val_offset:59022*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59022*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa0003ff; valaddr_reg:x3; val_offset:59025*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59025*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa0007ff; valaddr_reg:x3; val_offset:59028*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59028*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa000fff; valaddr_reg:x3; val_offset:59031*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59031*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa001fff; valaddr_reg:x3; val_offset:59034*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59034*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa003fff; valaddr_reg:x3; val_offset:59037*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59037*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa007fff; valaddr_reg:x3; val_offset:59040*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59040*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa00ffff; valaddr_reg:x3; val_offset:59043*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59043*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa01ffff; valaddr_reg:x3; val_offset:59046*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59046*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa03ffff; valaddr_reg:x3; val_offset:59049*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59049*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa07ffff; valaddr_reg:x3; val_offset:59052*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59052*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa0fffff; valaddr_reg:x3; val_offset:59055*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59055*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa1fffff; valaddr_reg:x3; val_offset:59058*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59058*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa3fffff; valaddr_reg:x3; val_offset:59061*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59061*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa400000; valaddr_reg:x3; val_offset:59064*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59064*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa600000; valaddr_reg:x3; val_offset:59067*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59067*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa700000; valaddr_reg:x3; val_offset:59070*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59070*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa780000; valaddr_reg:x3; val_offset:59073*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59073*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7c0000; valaddr_reg:x3; val_offset:59076*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59076*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7e0000; valaddr_reg:x3; val_offset:59079*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59079*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7f0000; valaddr_reg:x3; val_offset:59082*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59082*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7f8000; valaddr_reg:x3; val_offset:59085*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59085*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7fc000; valaddr_reg:x3; val_offset:59088*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59088*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7fe000; valaddr_reg:x3; val_offset:59091*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59091*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7ff000; valaddr_reg:x3; val_offset:59094*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59094*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7ff800; valaddr_reg:x3; val_offset:59097*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59097*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7ffc00; valaddr_reg:x3; val_offset:59100*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59100*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7ffe00; valaddr_reg:x3; val_offset:59103*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59103*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7fff00; valaddr_reg:x3; val_offset:59106*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59106*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7fff80; valaddr_reg:x3; val_offset:59109*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59109*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7fffc0; valaddr_reg:x3; val_offset:59112*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59112*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7fffe0; valaddr_reg:x3; val_offset:59115*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59115*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7ffff0; valaddr_reg:x3; val_offset:59118*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59118*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7ffff8; valaddr_reg:x3; val_offset:59121*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59121*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7ffffc; valaddr_reg:x3; val_offset:59124*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59124*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7ffffe; valaddr_reg:x3; val_offset:59127*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59127*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe396 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecfe396; op2val:0x0;
op3val:0xa7fffff; valaddr_reg:x3; val_offset:59130*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59130*0 + 3*153*FLEN/8, x4, x1, x2)

inst_19711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ff9aa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecff9aa; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:59133*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59133*0 + 3*153*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2127473681,32,FLEN)
NAN_BOXED(2152679035,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805306368,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805306369,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805306371,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805306375,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805306383,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805306399,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805306431,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805306495,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805306623,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805306879,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805307391,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805308415,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805310463,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805314559,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805322751,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805339135,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805371903,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805437439,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805568511,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(805830655,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(806354943,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(807403519,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(809500671,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(809500672,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(811597824,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(812646400,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813170688,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813432832,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813563904,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813629440,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813662208,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813678592,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813686784,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813690880,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813692928,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813693952,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813694464,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813694720,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813694848,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813694912,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813694944,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813694960,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813694968,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813694972,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813694974,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(813694975,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2127521517,32,FLEN)
NAN_BOXED(5177102,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772160,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772161,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772163,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772167,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772175,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772191,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772223,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772287,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772415,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772671,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167773183,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167774207,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167776255,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167780351,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167788543,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167804927,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167837695,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167903231,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(168034303,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(168296447,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(168820735,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(169869311,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(171966463,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(171966464,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(174063616,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175112192,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175636480,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175898624,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176029696,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176095232,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176128000,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176144384,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176152576,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176156672,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176158720,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176159744,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160256,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160512,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160640,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160704,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160736,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160752,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160760,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160764,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160766,32,FLEN)
NAN_BOXED(2127553430,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160767,32,FLEN)
NAN_BOXED(2127559082,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
