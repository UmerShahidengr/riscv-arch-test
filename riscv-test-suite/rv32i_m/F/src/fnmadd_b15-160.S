
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_20352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8f8007ff; valaddr_reg:x3; val_offset:61056*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61056*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8f800fff; valaddr_reg:x3; val_offset:61059*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61059*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8f801fff; valaddr_reg:x3; val_offset:61062*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61062*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8f803fff; valaddr_reg:x3; val_offset:61065*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61065*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8f807fff; valaddr_reg:x3; val_offset:61068*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61068*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8f80ffff; valaddr_reg:x3; val_offset:61071*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61071*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8f81ffff; valaddr_reg:x3; val_offset:61074*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61074*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8f83ffff; valaddr_reg:x3; val_offset:61077*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61077*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8f87ffff; valaddr_reg:x3; val_offset:61080*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61080*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8f8fffff; valaddr_reg:x3; val_offset:61083*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61083*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8f9fffff; valaddr_reg:x3; val_offset:61086*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61086*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8fbfffff; valaddr_reg:x3; val_offset:61089*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61089*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8fc00000; valaddr_reg:x3; val_offset:61092*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61092*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8fe00000; valaddr_reg:x3; val_offset:61095*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61095*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8ff00000; valaddr_reg:x3; val_offset:61098*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61098*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8ff80000; valaddr_reg:x3; val_offset:61101*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61101*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8ffc0000; valaddr_reg:x3; val_offset:61104*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61104*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8ffe0000; valaddr_reg:x3; val_offset:61107*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61107*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8fff0000; valaddr_reg:x3; val_offset:61110*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61110*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8fff8000; valaddr_reg:x3; val_offset:61113*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61113*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8fffc000; valaddr_reg:x3; val_offset:61116*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61116*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8fffe000; valaddr_reg:x3; val_offset:61119*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61119*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8ffff000; valaddr_reg:x3; val_offset:61122*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61122*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8ffff800; valaddr_reg:x3; val_offset:61125*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61125*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8ffffc00; valaddr_reg:x3; val_offset:61128*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61128*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8ffffe00; valaddr_reg:x3; val_offset:61131*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61131*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8fffff00; valaddr_reg:x3; val_offset:61134*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61134*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8fffff80; valaddr_reg:x3; val_offset:61137*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61137*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8fffffc0; valaddr_reg:x3; val_offset:61140*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61140*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8fffffe0; valaddr_reg:x3; val_offset:61143*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61143*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8ffffff0; valaddr_reg:x3; val_offset:61146*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61146*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8ffffff8; valaddr_reg:x3; val_offset:61149*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61149*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8ffffffc; valaddr_reg:x3; val_offset:61152*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61152*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8ffffffe; valaddr_reg:x3; val_offset:61155*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61155*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54170c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4170c; op2val:0x80000000;
op3val:0x8fffffff; valaddr_reg:x3; val_offset:61158*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61158*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:61161*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61161*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:61164*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61164*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:61167*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61167*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:61170*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61170*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:61173*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61173*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:61176*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61176*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:61179*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61179*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:61182*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61182*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:61185*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61185*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:61188*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61188*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:61191*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61191*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:61194*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61194*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:61197*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61197*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:61200*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61200*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:61203*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61203*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:61206*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61206*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd800000; valaddr_reg:x3; val_offset:61209*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61209*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd800001; valaddr_reg:x3; val_offset:61212*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61212*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd800003; valaddr_reg:x3; val_offset:61215*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61215*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd800007; valaddr_reg:x3; val_offset:61218*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61218*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd80000f; valaddr_reg:x3; val_offset:61221*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61221*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd80001f; valaddr_reg:x3; val_offset:61224*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61224*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd80003f; valaddr_reg:x3; val_offset:61227*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61227*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd80007f; valaddr_reg:x3; val_offset:61230*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61230*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd8000ff; valaddr_reg:x3; val_offset:61233*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61233*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd8001ff; valaddr_reg:x3; val_offset:61236*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61236*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd8003ff; valaddr_reg:x3; val_offset:61239*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61239*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd8007ff; valaddr_reg:x3; val_offset:61242*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61242*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd800fff; valaddr_reg:x3; val_offset:61245*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61245*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd801fff; valaddr_reg:x3; val_offset:61248*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61248*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd803fff; valaddr_reg:x3; val_offset:61251*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61251*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd807fff; valaddr_reg:x3; val_offset:61254*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61254*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd80ffff; valaddr_reg:x3; val_offset:61257*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61257*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd81ffff; valaddr_reg:x3; val_offset:61260*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61260*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd83ffff; valaddr_reg:x3; val_offset:61263*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61263*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd87ffff; valaddr_reg:x3; val_offset:61266*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61266*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd8fffff; valaddr_reg:x3; val_offset:61269*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61269*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xd9fffff; valaddr_reg:x3; val_offset:61272*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61272*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdbfffff; valaddr_reg:x3; val_offset:61275*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61275*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdc00000; valaddr_reg:x3; val_offset:61278*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61278*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xde00000; valaddr_reg:x3; val_offset:61281*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61281*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdf00000; valaddr_reg:x3; val_offset:61284*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61284*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdf80000; valaddr_reg:x3; val_offset:61287*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61287*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdfc0000; valaddr_reg:x3; val_offset:61290*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61290*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdfe0000; valaddr_reg:x3; val_offset:61293*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61293*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdff0000; valaddr_reg:x3; val_offset:61296*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61296*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdff8000; valaddr_reg:x3; val_offset:61299*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61299*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdffc000; valaddr_reg:x3; val_offset:61302*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61302*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdffe000; valaddr_reg:x3; val_offset:61305*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61305*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdfff000; valaddr_reg:x3; val_offset:61308*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61308*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdfff800; valaddr_reg:x3; val_offset:61311*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61311*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdfffc00; valaddr_reg:x3; val_offset:61314*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61314*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdfffe00; valaddr_reg:x3; val_offset:61317*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61317*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdffff00; valaddr_reg:x3; val_offset:61320*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61320*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdffff80; valaddr_reg:x3; val_offset:61323*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61323*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdffffc0; valaddr_reg:x3; val_offset:61326*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61326*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdffffe0; valaddr_reg:x3; val_offset:61329*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61329*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdfffff0; valaddr_reg:x3; val_offset:61332*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61332*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdfffff8; valaddr_reg:x3; val_offset:61335*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61335*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdfffffc; valaddr_reg:x3; val_offset:61338*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61338*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdfffffe; valaddr_reg:x3; val_offset:61341*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61341*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x544c4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed44c4e; op2val:0x0;
op3val:0xdffffff; valaddr_reg:x3; val_offset:61344*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61344*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d000000; valaddr_reg:x3; val_offset:61347*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61347*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d000001; valaddr_reg:x3; val_offset:61350*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61350*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d000003; valaddr_reg:x3; val_offset:61353*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61353*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d000007; valaddr_reg:x3; val_offset:61356*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61356*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d00000f; valaddr_reg:x3; val_offset:61359*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61359*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d00001f; valaddr_reg:x3; val_offset:61362*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61362*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d00003f; valaddr_reg:x3; val_offset:61365*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61365*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d00007f; valaddr_reg:x3; val_offset:61368*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61368*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d0000ff; valaddr_reg:x3; val_offset:61371*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61371*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d0001ff; valaddr_reg:x3; val_offset:61374*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61374*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d0003ff; valaddr_reg:x3; val_offset:61377*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61377*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d0007ff; valaddr_reg:x3; val_offset:61380*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61380*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d000fff; valaddr_reg:x3; val_offset:61383*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61383*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d001fff; valaddr_reg:x3; val_offset:61386*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61386*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d003fff; valaddr_reg:x3; val_offset:61389*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61389*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d007fff; valaddr_reg:x3; val_offset:61392*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61392*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d00ffff; valaddr_reg:x3; val_offset:61395*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61395*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d01ffff; valaddr_reg:x3; val_offset:61398*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61398*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d03ffff; valaddr_reg:x3; val_offset:61401*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61401*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d07ffff; valaddr_reg:x3; val_offset:61404*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61404*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d0fffff; valaddr_reg:x3; val_offset:61407*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61407*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d1fffff; valaddr_reg:x3; val_offset:61410*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61410*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d3fffff; valaddr_reg:x3; val_offset:61413*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61413*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d400000; valaddr_reg:x3; val_offset:61416*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61416*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d600000; valaddr_reg:x3; val_offset:61419*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61419*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d700000; valaddr_reg:x3; val_offset:61422*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61422*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d780000; valaddr_reg:x3; val_offset:61425*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61425*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7c0000; valaddr_reg:x3; val_offset:61428*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61428*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7e0000; valaddr_reg:x3; val_offset:61431*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61431*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7f0000; valaddr_reg:x3; val_offset:61434*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61434*0 + 3*159*FLEN/8, x4, x1, x2)

inst_20479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7f8000; valaddr_reg:x3; val_offset:61437*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61437*0 + 3*159*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407532543,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407534591,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407538687,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407546879,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407563263,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407596031,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407661567,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407792639,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2408054783,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2408579071,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2409627647,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2411724799,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2411724800,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2413821952,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2414870528,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415394816,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415656960,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415788032,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415853568,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415886336,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415902720,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415910912,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415915008,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415917056,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918080,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918592,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918848,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918976,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919040,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919072,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919088,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919096,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919100,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919102,32,FLEN)
NAN_BOXED(2127828748,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919103,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492416,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492417,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492419,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492423,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492431,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492447,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492479,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492543,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492671,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492927,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226493439,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226494463,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226496511,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226500607,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226508799,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226525183,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226557951,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226623487,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226754559,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(227016703,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(227540991,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(228589567,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(230686719,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(230686720,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(232783872,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(233832448,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234356736,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234618880,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234749952,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234815488,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234848256,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234864640,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234872832,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234876928,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234878976,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880000,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880512,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880768,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880896,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880960,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880992,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881008,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881016,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881020,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881022,32,FLEN)
NAN_BOXED(2127842382,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881023,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(754974720,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(754974721,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(754974723,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(754974727,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(754974735,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(754974751,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(754974783,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(754974847,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(754974975,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(754975231,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(754975743,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(754976767,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(754978815,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(754982911,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(754991103,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(755007487,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(755040255,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(755105791,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(755236863,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(755499007,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(756023295,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(757071871,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(759169023,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(759169024,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(761266176,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(762314752,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(762839040,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763101184,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763232256,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763297792,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763330560,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
