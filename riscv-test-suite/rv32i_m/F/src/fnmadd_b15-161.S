
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_20480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7fc000; valaddr_reg:x3; val_offset:61440*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61440*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7fe000; valaddr_reg:x3; val_offset:61443*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61443*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7ff000; valaddr_reg:x3; val_offset:61446*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61446*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7ff800; valaddr_reg:x3; val_offset:61449*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61449*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7ffc00; valaddr_reg:x3; val_offset:61452*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61452*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7ffe00; valaddr_reg:x3; val_offset:61455*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61455*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7fff00; valaddr_reg:x3; val_offset:61458*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61458*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7fff80; valaddr_reg:x3; val_offset:61461*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61461*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7fffc0; valaddr_reg:x3; val_offset:61464*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61464*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7fffe0; valaddr_reg:x3; val_offset:61467*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61467*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7ffff0; valaddr_reg:x3; val_offset:61470*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61470*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7ffff8; valaddr_reg:x3; val_offset:61473*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61473*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7ffffc; valaddr_reg:x3; val_offset:61476*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61476*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7ffffe; valaddr_reg:x3; val_offset:61479*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61479*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x5a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x2d7fffff; valaddr_reg:x3; val_offset:61482*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61482*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x3f800001; valaddr_reg:x3; val_offset:61485*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61485*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x3f800003; valaddr_reg:x3; val_offset:61488*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61488*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x3f800007; valaddr_reg:x3; val_offset:61491*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61491*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x3f999999; valaddr_reg:x3; val_offset:61494*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61494*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:61497*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61497*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:61500*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61500*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:61503*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61503*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:61506*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61506*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:61509*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61509*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:61512*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61512*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:61515*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61515*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:61518*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61518*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:61521*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61521*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:61524*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61524*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:61527*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61527*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x54e3da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4cf5bc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed4e3da; op2val:0x4cf5bc;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:61530*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61530*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed000000; valaddr_reg:x3; val_offset:61533*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61533*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed000001; valaddr_reg:x3; val_offset:61536*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61536*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed000003; valaddr_reg:x3; val_offset:61539*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61539*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed000007; valaddr_reg:x3; val_offset:61542*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61542*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed00000f; valaddr_reg:x3; val_offset:61545*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61545*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed00001f; valaddr_reg:x3; val_offset:61548*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61548*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed00003f; valaddr_reg:x3; val_offset:61551*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61551*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed00007f; valaddr_reg:x3; val_offset:61554*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61554*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed0000ff; valaddr_reg:x3; val_offset:61557*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61557*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed0001ff; valaddr_reg:x3; val_offset:61560*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61560*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed0003ff; valaddr_reg:x3; val_offset:61563*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61563*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed0007ff; valaddr_reg:x3; val_offset:61566*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61566*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed000fff; valaddr_reg:x3; val_offset:61569*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61569*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed001fff; valaddr_reg:x3; val_offset:61572*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61572*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed003fff; valaddr_reg:x3; val_offset:61575*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61575*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed007fff; valaddr_reg:x3; val_offset:61578*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61578*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed00ffff; valaddr_reg:x3; val_offset:61581*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61581*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed01ffff; valaddr_reg:x3; val_offset:61584*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61584*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed03ffff; valaddr_reg:x3; val_offset:61587*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61587*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed07ffff; valaddr_reg:x3; val_offset:61590*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61590*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed0fffff; valaddr_reg:x3; val_offset:61593*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61593*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed1fffff; valaddr_reg:x3; val_offset:61596*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61596*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed3fffff; valaddr_reg:x3; val_offset:61599*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61599*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed400000; valaddr_reg:x3; val_offset:61602*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61602*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed600000; valaddr_reg:x3; val_offset:61605*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61605*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed700000; valaddr_reg:x3; val_offset:61608*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61608*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed780000; valaddr_reg:x3; val_offset:61611*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61611*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7c0000; valaddr_reg:x3; val_offset:61614*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61614*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7e0000; valaddr_reg:x3; val_offset:61617*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61617*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7f0000; valaddr_reg:x3; val_offset:61620*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61620*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7f8000; valaddr_reg:x3; val_offset:61623*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61623*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7fc000; valaddr_reg:x3; val_offset:61626*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61626*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7fe000; valaddr_reg:x3; val_offset:61629*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61629*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7ff000; valaddr_reg:x3; val_offset:61632*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61632*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7ff800; valaddr_reg:x3; val_offset:61635*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61635*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7ffc00; valaddr_reg:x3; val_offset:61638*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61638*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7ffe00; valaddr_reg:x3; val_offset:61641*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61641*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7fff00; valaddr_reg:x3; val_offset:61644*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61644*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7fff80; valaddr_reg:x3; val_offset:61647*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61647*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7fffc0; valaddr_reg:x3; val_offset:61650*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61650*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7fffe0; valaddr_reg:x3; val_offset:61653*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61653*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7ffff0; valaddr_reg:x3; val_offset:61656*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61656*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7ffff8; valaddr_reg:x3; val_offset:61659*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61659*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7ffffc; valaddr_reg:x3; val_offset:61662*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61662*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7ffffe; valaddr_reg:x3; val_offset:61665*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61665*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xed7fffff; valaddr_reg:x3; val_offset:61668*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61668*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xff000001; valaddr_reg:x3; val_offset:61671*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61671*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xff000003; valaddr_reg:x3; val_offset:61674*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61674*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xff000007; valaddr_reg:x3; val_offset:61677*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61677*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xff199999; valaddr_reg:x3; val_offset:61680*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61680*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xff249249; valaddr_reg:x3; val_offset:61683*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61683*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xff333333; valaddr_reg:x3; val_offset:61686*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61686*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:61689*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61689*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:61692*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61692*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xff444444; valaddr_reg:x3; val_offset:61695*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61695*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:61698*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61698*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:61701*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61701*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xff666666; valaddr_reg:x3; val_offset:61704*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61704*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:61707*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61707*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:61710*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61710*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:61713*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61713*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5598d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x19690d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed598d6; op2val:0xc019690d;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:61716*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61716*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea800000; valaddr_reg:x3; val_offset:61719*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61719*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea800001; valaddr_reg:x3; val_offset:61722*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61722*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea800003; valaddr_reg:x3; val_offset:61725*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61725*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea800007; valaddr_reg:x3; val_offset:61728*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61728*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea80000f; valaddr_reg:x3; val_offset:61731*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61731*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea80001f; valaddr_reg:x3; val_offset:61734*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61734*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea80003f; valaddr_reg:x3; val_offset:61737*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61737*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea80007f; valaddr_reg:x3; val_offset:61740*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61740*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea8000ff; valaddr_reg:x3; val_offset:61743*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61743*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea8001ff; valaddr_reg:x3; val_offset:61746*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61746*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea8003ff; valaddr_reg:x3; val_offset:61749*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61749*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea8007ff; valaddr_reg:x3; val_offset:61752*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61752*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea800fff; valaddr_reg:x3; val_offset:61755*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61755*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea801fff; valaddr_reg:x3; val_offset:61758*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61758*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea803fff; valaddr_reg:x3; val_offset:61761*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61761*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea807fff; valaddr_reg:x3; val_offset:61764*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61764*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea80ffff; valaddr_reg:x3; val_offset:61767*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61767*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea81ffff; valaddr_reg:x3; val_offset:61770*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61770*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea83ffff; valaddr_reg:x3; val_offset:61773*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61773*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea87ffff; valaddr_reg:x3; val_offset:61776*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61776*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea8fffff; valaddr_reg:x3; val_offset:61779*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61779*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xea9fffff; valaddr_reg:x3; val_offset:61782*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61782*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeabfffff; valaddr_reg:x3; val_offset:61785*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61785*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeac00000; valaddr_reg:x3; val_offset:61788*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61788*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeae00000; valaddr_reg:x3; val_offset:61791*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61791*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeaf00000; valaddr_reg:x3; val_offset:61794*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61794*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeaf80000; valaddr_reg:x3; val_offset:61797*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61797*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeafc0000; valaddr_reg:x3; val_offset:61800*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61800*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeafe0000; valaddr_reg:x3; val_offset:61803*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61803*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeaff0000; valaddr_reg:x3; val_offset:61806*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61806*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeaff8000; valaddr_reg:x3; val_offset:61809*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61809*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeaffc000; valaddr_reg:x3; val_offset:61812*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61812*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeaffe000; valaddr_reg:x3; val_offset:61815*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61815*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeafff000; valaddr_reg:x3; val_offset:61818*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61818*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeafff800; valaddr_reg:x3; val_offset:61821*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61821*0 + 3*160*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763346944,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763355136,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763359232,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763361280,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763362304,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763362816,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763363072,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763363200,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763363264,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763363296,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763363312,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763363320,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763363324,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763363326,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(763363327,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2127881178,32,FLEN)
NAN_BOXED(5043644,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976200192,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976200193,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976200195,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976200199,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976200207,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976200223,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976200255,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976200319,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976200447,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976200703,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976201215,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976202239,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976204287,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976208383,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976216575,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976232959,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976265727,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976331263,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976462335,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3976724479,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3977248767,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3978297343,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3980394495,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3980394496,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3982491648,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3983540224,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984064512,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984326656,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984457728,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984523264,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984556032,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984572416,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984580608,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984584704,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984586752,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984587776,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984588288,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984588544,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984588672,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984588736,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984588768,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984588784,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984588792,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984588796,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984588798,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(3984588799,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2127927510,32,FLEN)
NAN_BOXED(3222890765,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934257152,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934257153,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934257155,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934257159,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934257167,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934257183,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934257215,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934257279,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934257407,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934257663,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934258175,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934259199,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934261247,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934265343,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934273535,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934289919,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934322687,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934388223,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934519295,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3934781439,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3935305727,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3936354303,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3938451455,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3938451456,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3940548608,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3941597184,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942121472,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942383616,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942514688,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942580224,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942612992,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942629376,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942637568,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942641664,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942643712,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
