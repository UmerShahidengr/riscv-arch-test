
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_20608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeafffc00; valaddr_reg:x3; val_offset:61824*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61824*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeafffe00; valaddr_reg:x3; val_offset:61827*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61827*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeaffff00; valaddr_reg:x3; val_offset:61830*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61830*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeaffff80; valaddr_reg:x3; val_offset:61833*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61833*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeaffffc0; valaddr_reg:x3; val_offset:61836*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61836*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeaffffe0; valaddr_reg:x3; val_offset:61839*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61839*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeafffff0; valaddr_reg:x3; val_offset:61842*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61842*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeafffff8; valaddr_reg:x3; val_offset:61845*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61845*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeafffffc; valaddr_reg:x3; val_offset:61848*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61848*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeafffffe; valaddr_reg:x3; val_offset:61851*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61851*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xd5 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xeaffffff; valaddr_reg:x3; val_offset:61854*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61854*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xff000001; valaddr_reg:x3; val_offset:61857*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61857*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xff000003; valaddr_reg:x3; val_offset:61860*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61860*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xff000007; valaddr_reg:x3; val_offset:61863*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61863*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xff199999; valaddr_reg:x3; val_offset:61866*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61866*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xff249249; valaddr_reg:x3; val_offset:61869*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61869*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xff333333; valaddr_reg:x3; val_offset:61872*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61872*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:61875*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61875*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:61878*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61878*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xff444444; valaddr_reg:x3; val_offset:61881*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61881*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:61884*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61884*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:61887*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61887*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xff666666; valaddr_reg:x3; val_offset:61890*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61890*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:61893*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61893*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:61896*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61896*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:61899*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61899*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x562350 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1905d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed62350; op2val:0xc01905d9;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:61902*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61902*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:61905*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61905*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:61908*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61908*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:61911*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61911*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:61914*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61914*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:61917*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61917*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:61920*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61920*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:61923*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61923*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:61926*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61926*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:61929*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61929*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:61932*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61932*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:61935*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61935*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:61938*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61938*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:61941*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61941*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:61944*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61944*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:61947*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61947*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:61950*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61950*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84800000; valaddr_reg:x3; val_offset:61953*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61953*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84800001; valaddr_reg:x3; val_offset:61956*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61956*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84800003; valaddr_reg:x3; val_offset:61959*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61959*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84800007; valaddr_reg:x3; val_offset:61962*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61962*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x8480000f; valaddr_reg:x3; val_offset:61965*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61965*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x8480001f; valaddr_reg:x3; val_offset:61968*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61968*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x8480003f; valaddr_reg:x3; val_offset:61971*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61971*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x8480007f; valaddr_reg:x3; val_offset:61974*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61974*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x848000ff; valaddr_reg:x3; val_offset:61977*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61977*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x848001ff; valaddr_reg:x3; val_offset:61980*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61980*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x848003ff; valaddr_reg:x3; val_offset:61983*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61983*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x848007ff; valaddr_reg:x3; val_offset:61986*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61986*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84800fff; valaddr_reg:x3; val_offset:61989*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61989*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84801fff; valaddr_reg:x3; val_offset:61992*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61992*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84803fff; valaddr_reg:x3; val_offset:61995*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61995*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84807fff; valaddr_reg:x3; val_offset:61998*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61998*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x8480ffff; valaddr_reg:x3; val_offset:62001*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62001*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x8481ffff; valaddr_reg:x3; val_offset:62004*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62004*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x8483ffff; valaddr_reg:x3; val_offset:62007*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62007*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x8487ffff; valaddr_reg:x3; val_offset:62010*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62010*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x848fffff; valaddr_reg:x3; val_offset:62013*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62013*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x849fffff; valaddr_reg:x3; val_offset:62016*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62016*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84bfffff; valaddr_reg:x3; val_offset:62019*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62019*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84c00000; valaddr_reg:x3; val_offset:62022*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62022*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84e00000; valaddr_reg:x3; val_offset:62025*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62025*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84f00000; valaddr_reg:x3; val_offset:62028*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62028*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84f80000; valaddr_reg:x3; val_offset:62031*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62031*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84fc0000; valaddr_reg:x3; val_offset:62034*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62034*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84fe0000; valaddr_reg:x3; val_offset:62037*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62037*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84ff0000; valaddr_reg:x3; val_offset:62040*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62040*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84ff8000; valaddr_reg:x3; val_offset:62043*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62043*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84ffc000; valaddr_reg:x3; val_offset:62046*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62046*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84ffe000; valaddr_reg:x3; val_offset:62049*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62049*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84fff000; valaddr_reg:x3; val_offset:62052*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62052*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84fff800; valaddr_reg:x3; val_offset:62055*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62055*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84fffc00; valaddr_reg:x3; val_offset:62058*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62058*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84fffe00; valaddr_reg:x3; val_offset:62061*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62061*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84ffff00; valaddr_reg:x3; val_offset:62064*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62064*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84ffff80; valaddr_reg:x3; val_offset:62067*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62067*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84ffffc0; valaddr_reg:x3; val_offset:62070*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62070*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84ffffe0; valaddr_reg:x3; val_offset:62073*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62073*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84fffff0; valaddr_reg:x3; val_offset:62076*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62076*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84fffff8; valaddr_reg:x3; val_offset:62079*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62079*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84fffffc; valaddr_reg:x3; val_offset:62082*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62082*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84fffffe; valaddr_reg:x3; val_offset:62085*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62085*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56ccb6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6ccb6; op2val:0x80000000;
op3val:0x84ffffff; valaddr_reg:x3; val_offset:62088*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62088*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa1000000; valaddr_reg:x3; val_offset:62091*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62091*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa1000001; valaddr_reg:x3; val_offset:62094*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62094*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa1000003; valaddr_reg:x3; val_offset:62097*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62097*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa1000007; valaddr_reg:x3; val_offset:62100*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62100*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa100000f; valaddr_reg:x3; val_offset:62103*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62103*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa100001f; valaddr_reg:x3; val_offset:62106*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62106*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa100003f; valaddr_reg:x3; val_offset:62109*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62109*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa100007f; valaddr_reg:x3; val_offset:62112*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62112*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa10000ff; valaddr_reg:x3; val_offset:62115*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62115*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa10001ff; valaddr_reg:x3; val_offset:62118*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62118*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa10003ff; valaddr_reg:x3; val_offset:62121*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62121*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa10007ff; valaddr_reg:x3; val_offset:62124*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62124*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa1000fff; valaddr_reg:x3; val_offset:62127*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62127*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa1001fff; valaddr_reg:x3; val_offset:62130*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62130*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa1003fff; valaddr_reg:x3; val_offset:62133*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62133*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa1007fff; valaddr_reg:x3; val_offset:62136*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62136*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa100ffff; valaddr_reg:x3; val_offset:62139*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62139*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa101ffff; valaddr_reg:x3; val_offset:62142*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62142*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa103ffff; valaddr_reg:x3; val_offset:62145*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62145*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa107ffff; valaddr_reg:x3; val_offset:62148*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62148*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa10fffff; valaddr_reg:x3; val_offset:62151*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62151*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa11fffff; valaddr_reg:x3; val_offset:62154*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62154*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa13fffff; valaddr_reg:x3; val_offset:62157*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62157*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa1400000; valaddr_reg:x3; val_offset:62160*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62160*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa1600000; valaddr_reg:x3; val_offset:62163*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62163*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa1700000; valaddr_reg:x3; val_offset:62166*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62166*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa1780000; valaddr_reg:x3; val_offset:62169*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62169*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa17c0000; valaddr_reg:x3; val_offset:62172*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62172*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa17e0000; valaddr_reg:x3; val_offset:62175*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62175*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa17f0000; valaddr_reg:x3; val_offset:62178*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62178*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa17f8000; valaddr_reg:x3; val_offset:62181*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62181*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa17fc000; valaddr_reg:x3; val_offset:62184*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62184*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa17fe000; valaddr_reg:x3; val_offset:62187*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62187*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa17ff000; valaddr_reg:x3; val_offset:62190*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62190*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa17ff800; valaddr_reg:x3; val_offset:62193*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62193*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa17ffc00; valaddr_reg:x3; val_offset:62196*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62196*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa17ffe00; valaddr_reg:x3; val_offset:62199*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62199*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa17fff00; valaddr_reg:x3; val_offset:62202*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62202*0 + 3*161*FLEN/8, x4, x1, x2)

inst_20735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5750c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4c17cf and fs3 == 1 and fe3 == 0x42 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed750c0; op2val:0x804c17cf;
op3val:0xa17fff80; valaddr_reg:x3; val_offset:62205*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62205*0 + 3*161*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942644736,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942645248,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942645504,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942645632,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942645696,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942645728,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942645744,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942645752,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942645756,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942645758,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(3942645759,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2127962960,32,FLEN)
NAN_BOXED(3222865369,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981120,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981121,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981123,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981127,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981135,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981151,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981183,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981247,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981375,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981631,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222982143,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222983167,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222985215,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222989311,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222997503,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223013887,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223046655,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223112191,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223243263,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223505407,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2224029695,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2225078271,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2227175423,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2227175424,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2229272576,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2230321152,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2230845440,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231107584,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231238656,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231304192,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231336960,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231353344,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231361536,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231365632,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231367680,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231368704,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369216,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369472,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369600,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369664,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369696,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369712,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369720,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369724,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369726,32,FLEN)
NAN_BOXED(2128006326,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369727,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701131776,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701131777,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701131779,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701131783,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701131791,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701131807,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701131839,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701131903,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701132031,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701132287,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701132799,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701133823,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701135871,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701139967,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701148159,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701164543,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701197311,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701262847,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701393919,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2701656063,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2702180351,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2703228927,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2705326079,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2705326080,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2707423232,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2708471808,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2708996096,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2709258240,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2709389312,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2709454848,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2709487616,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2709504000,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2709512192,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2709516288,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2709518336,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2709519360,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2709519872,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2709520128,32,FLEN)
NAN_BOXED(2128040128,32,FLEN)
NAN_BOXED(2152470479,32,FLEN)
NAN_BOXED(2709520256,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
