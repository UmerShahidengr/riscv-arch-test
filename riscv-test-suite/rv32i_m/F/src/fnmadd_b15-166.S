
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_21120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb1c9d; op2val:0x0;
op3val:0xefffc00; valaddr_reg:x3; val_offset:63360*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63360*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb1c9d; op2val:0x0;
op3val:0xefffe00; valaddr_reg:x3; val_offset:63363*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63363*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb1c9d; op2val:0x0;
op3val:0xeffff00; valaddr_reg:x3; val_offset:63366*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63366*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb1c9d; op2val:0x0;
op3val:0xeffff80; valaddr_reg:x3; val_offset:63369*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63369*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb1c9d; op2val:0x0;
op3val:0xeffffc0; valaddr_reg:x3; val_offset:63372*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63372*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb1c9d; op2val:0x0;
op3val:0xeffffe0; valaddr_reg:x3; val_offset:63375*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63375*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb1c9d; op2val:0x0;
op3val:0xefffff0; valaddr_reg:x3; val_offset:63378*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63378*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb1c9d; op2val:0x0;
op3val:0xefffff8; valaddr_reg:x3; val_offset:63381*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63381*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb1c9d; op2val:0x0;
op3val:0xefffffc; valaddr_reg:x3; val_offset:63384*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63384*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb1c9d; op2val:0x0;
op3val:0xefffffe; valaddr_reg:x3; val_offset:63387*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63387*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb1c9d; op2val:0x0;
op3val:0xeffffff; valaddr_reg:x3; val_offset:63390*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63390*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:63393*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63393*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:63396*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63396*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:63399*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63399*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:63402*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63402*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:63405*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63405*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:63408*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63408*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:63411*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63411*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:63414*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63414*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:63417*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63417*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:63420*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63420*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:63423*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63423*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:63426*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63426*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:63429*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63429*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:63432*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63432*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:63435*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63435*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:63438*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63438*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1800000; valaddr_reg:x3; val_offset:63441*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63441*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1800001; valaddr_reg:x3; val_offset:63444*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63444*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1800003; valaddr_reg:x3; val_offset:63447*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63447*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1800007; valaddr_reg:x3; val_offset:63450*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63450*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x180000f; valaddr_reg:x3; val_offset:63453*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63453*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x180001f; valaddr_reg:x3; val_offset:63456*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63456*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x180003f; valaddr_reg:x3; val_offset:63459*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63459*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x180007f; valaddr_reg:x3; val_offset:63462*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63462*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x18000ff; valaddr_reg:x3; val_offset:63465*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63465*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x18001ff; valaddr_reg:x3; val_offset:63468*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63468*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x18003ff; valaddr_reg:x3; val_offset:63471*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63471*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x18007ff; valaddr_reg:x3; val_offset:63474*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63474*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1800fff; valaddr_reg:x3; val_offset:63477*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63477*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1801fff; valaddr_reg:x3; val_offset:63480*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63480*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1803fff; valaddr_reg:x3; val_offset:63483*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63483*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1807fff; valaddr_reg:x3; val_offset:63486*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63486*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x180ffff; valaddr_reg:x3; val_offset:63489*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63489*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x181ffff; valaddr_reg:x3; val_offset:63492*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63492*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x183ffff; valaddr_reg:x3; val_offset:63495*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63495*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x187ffff; valaddr_reg:x3; val_offset:63498*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63498*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x18fffff; valaddr_reg:x3; val_offset:63501*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63501*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x19fffff; valaddr_reg:x3; val_offset:63504*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63504*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1bfffff; valaddr_reg:x3; val_offset:63507*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63507*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1c00000; valaddr_reg:x3; val_offset:63510*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63510*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1e00000; valaddr_reg:x3; val_offset:63513*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63513*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1f00000; valaddr_reg:x3; val_offset:63516*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63516*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1f80000; valaddr_reg:x3; val_offset:63519*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63519*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1fc0000; valaddr_reg:x3; val_offset:63522*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63522*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1fe0000; valaddr_reg:x3; val_offset:63525*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63525*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1ff0000; valaddr_reg:x3; val_offset:63528*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63528*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1ff8000; valaddr_reg:x3; val_offset:63531*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63531*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1ffc000; valaddr_reg:x3; val_offset:63534*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63534*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1ffe000; valaddr_reg:x3; val_offset:63537*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63537*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1fff000; valaddr_reg:x3; val_offset:63540*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63540*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1fff800; valaddr_reg:x3; val_offset:63543*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63543*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1fffc00; valaddr_reg:x3; val_offset:63546*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63546*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1fffe00; valaddr_reg:x3; val_offset:63549*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63549*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1ffff00; valaddr_reg:x3; val_offset:63552*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63552*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1ffff80; valaddr_reg:x3; val_offset:63555*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63555*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1ffffc0; valaddr_reg:x3; val_offset:63558*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63558*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1ffffe0; valaddr_reg:x3; val_offset:63561*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63561*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1fffff0; valaddr_reg:x3; val_offset:63564*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63564*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1fffff8; valaddr_reg:x3; val_offset:63567*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63567*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1fffffc; valaddr_reg:x3; val_offset:63570*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63570*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1fffffe; valaddr_reg:x3; val_offset:63573*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63573*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b5a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edb5a74; op2val:0x0;
op3val:0x1ffffff; valaddr_reg:x3; val_offset:63576*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63576*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61800000; valaddr_reg:x3; val_offset:63579*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63579*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61800001; valaddr_reg:x3; val_offset:63582*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63582*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61800003; valaddr_reg:x3; val_offset:63585*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63585*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61800007; valaddr_reg:x3; val_offset:63588*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63588*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x6180000f; valaddr_reg:x3; val_offset:63591*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63591*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x6180001f; valaddr_reg:x3; val_offset:63594*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63594*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x6180003f; valaddr_reg:x3; val_offset:63597*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63597*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x6180007f; valaddr_reg:x3; val_offset:63600*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63600*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x618000ff; valaddr_reg:x3; val_offset:63603*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63603*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x618001ff; valaddr_reg:x3; val_offset:63606*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63606*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x618003ff; valaddr_reg:x3; val_offset:63609*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63609*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x618007ff; valaddr_reg:x3; val_offset:63612*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63612*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61800fff; valaddr_reg:x3; val_offset:63615*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63615*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61801fff; valaddr_reg:x3; val_offset:63618*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63618*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61803fff; valaddr_reg:x3; val_offset:63621*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63621*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61807fff; valaddr_reg:x3; val_offset:63624*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63624*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x6180ffff; valaddr_reg:x3; val_offset:63627*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63627*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x6181ffff; valaddr_reg:x3; val_offset:63630*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63630*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x6183ffff; valaddr_reg:x3; val_offset:63633*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63633*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x6187ffff; valaddr_reg:x3; val_offset:63636*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63636*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x618fffff; valaddr_reg:x3; val_offset:63639*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63639*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x619fffff; valaddr_reg:x3; val_offset:63642*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63642*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61bfffff; valaddr_reg:x3; val_offset:63645*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63645*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61c00000; valaddr_reg:x3; val_offset:63648*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63648*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61e00000; valaddr_reg:x3; val_offset:63651*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63651*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61f00000; valaddr_reg:x3; val_offset:63654*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63654*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61f80000; valaddr_reg:x3; val_offset:63657*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63657*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61fc0000; valaddr_reg:x3; val_offset:63660*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63660*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61fe0000; valaddr_reg:x3; val_offset:63663*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63663*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61ff0000; valaddr_reg:x3; val_offset:63666*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63666*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61ff8000; valaddr_reg:x3; val_offset:63669*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63669*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61ffc000; valaddr_reg:x3; val_offset:63672*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63672*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61ffe000; valaddr_reg:x3; val_offset:63675*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63675*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61fff000; valaddr_reg:x3; val_offset:63678*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63678*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61fff800; valaddr_reg:x3; val_offset:63681*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63681*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61fffc00; valaddr_reg:x3; val_offset:63684*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63684*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61fffe00; valaddr_reg:x3; val_offset:63687*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63687*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61ffff00; valaddr_reg:x3; val_offset:63690*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63690*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61ffff80; valaddr_reg:x3; val_offset:63693*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63693*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61ffffc0; valaddr_reg:x3; val_offset:63696*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63696*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61ffffe0; valaddr_reg:x3; val_offset:63699*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63699*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61fffff0; valaddr_reg:x3; val_offset:63702*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63702*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61fffff8; valaddr_reg:x3; val_offset:63705*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63705*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61fffffc; valaddr_reg:x3; val_offset:63708*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63708*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61fffffe; valaddr_reg:x3; val_offset:63711*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63711*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xc3 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x61ffffff; valaddr_reg:x3; val_offset:63714*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63714*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x7f000001; valaddr_reg:x3; val_offset:63717*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63717*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x7f000003; valaddr_reg:x3; val_offset:63720*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63720*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x7f000007; valaddr_reg:x3; val_offset:63723*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63723*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x7f199999; valaddr_reg:x3; val_offset:63726*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63726*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x7f249249; valaddr_reg:x3; val_offset:63729*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63729*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x7f333333; valaddr_reg:x3; val_offset:63732*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63732*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:63735*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63735*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:63738*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63738*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x7f444444; valaddr_reg:x3; val_offset:63741*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63741*0 + 3*165*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657216,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657728,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657984,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658112,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658176,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658208,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658224,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658232,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658236,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658238,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658239,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165824,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165825,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165827,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165831,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165839,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165855,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165887,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165951,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25166079,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25166335,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25166847,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25167871,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25169919,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25174015,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25182207,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25198591,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25231359,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25296895,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25427967,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25690111,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(26214399,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(27262975,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(29360127,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(29360128,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31457280,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32505856,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33030144,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33292288,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33423360,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33488896,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33521664,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33538048,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33546240,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33550336,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33552384,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33553408,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33553920,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554176,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554304,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554368,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554400,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554416,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554424,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554428,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554430,32,FLEN)
NAN_BOXED(2128304756,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554431,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635778560,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635778561,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635778563,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635778567,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635778575,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635778591,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635778623,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635778687,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635778815,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635779071,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635779583,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635780607,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635782655,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635786751,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635794943,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635811327,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635844095,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1635909631,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1636040703,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1636302847,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1636827135,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1637875711,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1639972863,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1639972864,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1642070016,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1643118592,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1643642880,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1643905024,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644036096,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644101632,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644134400,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644150784,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644158976,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644163072,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644165120,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644166144,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644166656,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644166912,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644167040,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644167104,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644167136,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644167152,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644167160,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644167164,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644167166,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(1644167167,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
