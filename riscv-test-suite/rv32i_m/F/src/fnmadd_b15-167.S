
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_21248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:63744*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63744*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:63747*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63747*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x7f666666; valaddr_reg:x3; val_offset:63750*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63750*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:63753*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63753*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:63756*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63756*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:63759*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63759*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5bdebb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x150891 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edbdebb; op2val:0x40150891;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:63762*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63762*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7800000; valaddr_reg:x3; val_offset:63765*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63765*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7800001; valaddr_reg:x3; val_offset:63768*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63768*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7800003; valaddr_reg:x3; val_offset:63771*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63771*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7800007; valaddr_reg:x3; val_offset:63774*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63774*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa780000f; valaddr_reg:x3; val_offset:63777*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63777*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa780001f; valaddr_reg:x3; val_offset:63780*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63780*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa780003f; valaddr_reg:x3; val_offset:63783*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63783*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa780007f; valaddr_reg:x3; val_offset:63786*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63786*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa78000ff; valaddr_reg:x3; val_offset:63789*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63789*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa78001ff; valaddr_reg:x3; val_offset:63792*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63792*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa78003ff; valaddr_reg:x3; val_offset:63795*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63795*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa78007ff; valaddr_reg:x3; val_offset:63798*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63798*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7800fff; valaddr_reg:x3; val_offset:63801*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63801*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7801fff; valaddr_reg:x3; val_offset:63804*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63804*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7803fff; valaddr_reg:x3; val_offset:63807*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63807*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7807fff; valaddr_reg:x3; val_offset:63810*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63810*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa780ffff; valaddr_reg:x3; val_offset:63813*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63813*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa781ffff; valaddr_reg:x3; val_offset:63816*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63816*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa783ffff; valaddr_reg:x3; val_offset:63819*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63819*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa787ffff; valaddr_reg:x3; val_offset:63822*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63822*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa78fffff; valaddr_reg:x3; val_offset:63825*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63825*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa79fffff; valaddr_reg:x3; val_offset:63828*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63828*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7bfffff; valaddr_reg:x3; val_offset:63831*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63831*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7c00000; valaddr_reg:x3; val_offset:63834*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63834*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7e00000; valaddr_reg:x3; val_offset:63837*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63837*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7f00000; valaddr_reg:x3; val_offset:63840*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63840*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7f80000; valaddr_reg:x3; val_offset:63843*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63843*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7fc0000; valaddr_reg:x3; val_offset:63846*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63846*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7fe0000; valaddr_reg:x3; val_offset:63849*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63849*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7ff0000; valaddr_reg:x3; val_offset:63852*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63852*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7ff8000; valaddr_reg:x3; val_offset:63855*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63855*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7ffc000; valaddr_reg:x3; val_offset:63858*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63858*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7ffe000; valaddr_reg:x3; val_offset:63861*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63861*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7fff000; valaddr_reg:x3; val_offset:63864*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63864*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7fff800; valaddr_reg:x3; val_offset:63867*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63867*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7fffc00; valaddr_reg:x3; val_offset:63870*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63870*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7fffe00; valaddr_reg:x3; val_offset:63873*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63873*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7ffff00; valaddr_reg:x3; val_offset:63876*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63876*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7ffff80; valaddr_reg:x3; val_offset:63879*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63879*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7ffffc0; valaddr_reg:x3; val_offset:63882*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63882*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7ffffe0; valaddr_reg:x3; val_offset:63885*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63885*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7fffff0; valaddr_reg:x3; val_offset:63888*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63888*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7fffff8; valaddr_reg:x3; val_offset:63891*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63891*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7fffffc; valaddr_reg:x3; val_offset:63894*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63894*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7fffffe; valaddr_reg:x3; val_offset:63897*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63897*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xa7ffffff; valaddr_reg:x3; val_offset:63900*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63900*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xbf800001; valaddr_reg:x3; val_offset:63903*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63903*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xbf800003; valaddr_reg:x3; val_offset:63906*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63906*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xbf800007; valaddr_reg:x3; val_offset:63909*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63909*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xbf999999; valaddr_reg:x3; val_offset:63912*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63912*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:63915*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63915*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:63918*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63918*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:63921*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63921*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:63924*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63924*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:63927*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63927*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:63930*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63930*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:63933*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63933*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:63936*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63936*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:63939*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63939*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:63942*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63942*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:63945*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63945*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c2dcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4a6985 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc2dcf; op2val:0x804a6985;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:63948*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63948*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f800000; valaddr_reg:x3; val_offset:63951*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63951*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f800001; valaddr_reg:x3; val_offset:63954*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63954*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f800003; valaddr_reg:x3; val_offset:63957*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63957*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f800007; valaddr_reg:x3; val_offset:63960*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63960*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f80000f; valaddr_reg:x3; val_offset:63963*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63963*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f80001f; valaddr_reg:x3; val_offset:63966*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63966*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f80003f; valaddr_reg:x3; val_offset:63969*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63969*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f80007f; valaddr_reg:x3; val_offset:63972*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63972*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f8000ff; valaddr_reg:x3; val_offset:63975*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63975*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f8001ff; valaddr_reg:x3; val_offset:63978*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63978*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f8003ff; valaddr_reg:x3; val_offset:63981*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63981*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f8007ff; valaddr_reg:x3; val_offset:63984*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63984*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f800fff; valaddr_reg:x3; val_offset:63987*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63987*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f801fff; valaddr_reg:x3; val_offset:63990*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63990*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f803fff; valaddr_reg:x3; val_offset:63993*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63993*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f807fff; valaddr_reg:x3; val_offset:63996*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63996*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f80ffff; valaddr_reg:x3; val_offset:63999*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63999*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f81ffff; valaddr_reg:x3; val_offset:64002*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64002*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f83ffff; valaddr_reg:x3; val_offset:64005*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64005*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f87ffff; valaddr_reg:x3; val_offset:64008*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64008*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f8fffff; valaddr_reg:x3; val_offset:64011*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64011*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1f9fffff; valaddr_reg:x3; val_offset:64014*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64014*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fbfffff; valaddr_reg:x3; val_offset:64017*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64017*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fc00000; valaddr_reg:x3; val_offset:64020*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64020*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fe00000; valaddr_reg:x3; val_offset:64023*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64023*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ff00000; valaddr_reg:x3; val_offset:64026*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64026*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ff80000; valaddr_reg:x3; val_offset:64029*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64029*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffc0000; valaddr_reg:x3; val_offset:64032*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64032*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffe0000; valaddr_reg:x3; val_offset:64035*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64035*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fff0000; valaddr_reg:x3; val_offset:64038*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64038*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fff8000; valaddr_reg:x3; val_offset:64041*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64041*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fffc000; valaddr_reg:x3; val_offset:64044*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64044*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fffe000; valaddr_reg:x3; val_offset:64047*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64047*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffff000; valaddr_reg:x3; val_offset:64050*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64050*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffff800; valaddr_reg:x3; val_offset:64053*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64053*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffffc00; valaddr_reg:x3; val_offset:64056*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64056*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffffe00; valaddr_reg:x3; val_offset:64059*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64059*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fffff00; valaddr_reg:x3; val_offset:64062*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64062*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fffff80; valaddr_reg:x3; val_offset:64065*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64065*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fffffc0; valaddr_reg:x3; val_offset:64068*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64068*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fffffe0; valaddr_reg:x3; val_offset:64071*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64071*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffffff0; valaddr_reg:x3; val_offset:64074*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64074*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffffff8; valaddr_reg:x3; val_offset:64077*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64077*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffffffc; valaddr_reg:x3; val_offset:64080*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64080*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1ffffffe; valaddr_reg:x3; val_offset:64083*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64083*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x1fffffff; valaddr_reg:x3; val_offset:64086*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64086*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3f800001; valaddr_reg:x3; val_offset:64089*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64089*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3f800003; valaddr_reg:x3; val_offset:64092*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64092*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3f800007; valaddr_reg:x3; val_offset:64095*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64095*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3f999999; valaddr_reg:x3; val_offset:64098*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64098*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:64101*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64101*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:64104*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64104*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:64107*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64107*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:64110*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64110*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:64113*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64113*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:64116*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64116*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:64119*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64119*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:64122*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64122*0 + 3*166*FLEN/8, x4, x1, x2)

inst_21375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e0500 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x49cb99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ede0500; op2val:0x49cb99;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:64125*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64125*0 + 3*166*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2128338619,32,FLEN)
NAN_BOXED(1075120273,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810183680,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810183681,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810183683,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810183687,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810183695,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810183711,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810183743,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810183807,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810183935,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810184191,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810184703,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810185727,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810187775,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810191871,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810200063,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810216447,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810249215,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810314751,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810445823,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2810707967,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2811232255,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2812280831,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2814377983,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2814377984,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2816475136,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2817523712,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818048000,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818310144,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818441216,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818506752,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818539520,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818555904,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818564096,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818568192,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818570240,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818571264,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818571776,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818572032,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818572160,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818572224,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818572256,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818572272,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818572280,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818572284,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818572286,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(2818572287,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2128358863,32,FLEN)
NAN_BOXED(2152360325,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482304,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482305,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482307,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482311,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482319,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482335,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482367,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482431,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482559,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528482815,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528483327,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528484351,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528486399,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528490495,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528498687,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528515071,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528547839,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528613375,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(528744447,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(529006591,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(529530879,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(530579455,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(532676607,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(532676608,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(534773760,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(535822336,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536346624,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536608768,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536739840,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536805376,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536838144,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536854528,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536862720,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536866816,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536868864,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536869888,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870400,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870656,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870784,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870848,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870880,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870896,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870904,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870908,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870910,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(536870911,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2128479488,32,FLEN)
NAN_BOXED(4836249,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
