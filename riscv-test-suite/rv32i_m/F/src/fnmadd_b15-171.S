
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_21760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:65280*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65280*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:65283*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65283*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:65286*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65286*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:65289*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65289*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:65292*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65292*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:65295*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65295*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:65298*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65298*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb800000; valaddr_reg:x3; val_offset:65301*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65301*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb800001; valaddr_reg:x3; val_offset:65304*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65304*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb800003; valaddr_reg:x3; val_offset:65307*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65307*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb800007; valaddr_reg:x3; val_offset:65310*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65310*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb80000f; valaddr_reg:x3; val_offset:65313*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65313*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb80001f; valaddr_reg:x3; val_offset:65316*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65316*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb80003f; valaddr_reg:x3; val_offset:65319*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65319*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb80007f; valaddr_reg:x3; val_offset:65322*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65322*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb8000ff; valaddr_reg:x3; val_offset:65325*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65325*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb8001ff; valaddr_reg:x3; val_offset:65328*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65328*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb8003ff; valaddr_reg:x3; val_offset:65331*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65331*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb8007ff; valaddr_reg:x3; val_offset:65334*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65334*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb800fff; valaddr_reg:x3; val_offset:65337*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65337*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb801fff; valaddr_reg:x3; val_offset:65340*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65340*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb803fff; valaddr_reg:x3; val_offset:65343*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65343*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb807fff; valaddr_reg:x3; val_offset:65346*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65346*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb80ffff; valaddr_reg:x3; val_offset:65349*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65349*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb81ffff; valaddr_reg:x3; val_offset:65352*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65352*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb83ffff; valaddr_reg:x3; val_offset:65355*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65355*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb87ffff; valaddr_reg:x3; val_offset:65358*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65358*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb8fffff; valaddr_reg:x3; val_offset:65361*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65361*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcb9fffff; valaddr_reg:x3; val_offset:65364*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65364*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbbfffff; valaddr_reg:x3; val_offset:65367*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65367*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbc00000; valaddr_reg:x3; val_offset:65370*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65370*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbe00000; valaddr_reg:x3; val_offset:65373*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65373*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbf00000; valaddr_reg:x3; val_offset:65376*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65376*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbf80000; valaddr_reg:x3; val_offset:65379*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65379*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbfc0000; valaddr_reg:x3; val_offset:65382*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65382*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbfe0000; valaddr_reg:x3; val_offset:65385*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65385*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbff0000; valaddr_reg:x3; val_offset:65388*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65388*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbff8000; valaddr_reg:x3; val_offset:65391*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65391*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbffc000; valaddr_reg:x3; val_offset:65394*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65394*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbffe000; valaddr_reg:x3; val_offset:65397*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65397*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbfff000; valaddr_reg:x3; val_offset:65400*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65400*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbfff800; valaddr_reg:x3; val_offset:65403*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65403*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbfffc00; valaddr_reg:x3; val_offset:65406*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65406*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbfffe00; valaddr_reg:x3; val_offset:65409*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65409*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbffff00; valaddr_reg:x3; val_offset:65412*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65412*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbffff80; valaddr_reg:x3; val_offset:65415*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65415*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbffffc0; valaddr_reg:x3; val_offset:65418*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65418*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbffffe0; valaddr_reg:x3; val_offset:65421*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65421*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbfffff0; valaddr_reg:x3; val_offset:65424*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65424*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbfffff8; valaddr_reg:x3; val_offset:65427*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65427*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbfffffc; valaddr_reg:x3; val_offset:65430*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65430*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbfffffe; valaddr_reg:x3; val_offset:65433*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65433*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x615415 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48b62d and fs3 == 1 and fe3 == 0x97 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee15415; op2val:0x8048b62d;
op3val:0xcbffffff; valaddr_reg:x3; val_offset:65436*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65436*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xbf800001; valaddr_reg:x3; val_offset:65439*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65439*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xbf800003; valaddr_reg:x3; val_offset:65442*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65442*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xbf800007; valaddr_reg:x3; val_offset:65445*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65445*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xbf999999; valaddr_reg:x3; val_offset:65448*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65448*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:65451*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65451*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:65454*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65454*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:65457*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65457*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:65460*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65460*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:65463*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65463*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:65466*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65466*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:65469*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65469*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:65472*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65472*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:65475*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65475*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:65478*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65478*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:65481*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65481*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:65484*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65484*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc1000000; valaddr_reg:x3; val_offset:65487*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65487*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc1000001; valaddr_reg:x3; val_offset:65490*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65490*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc1000003; valaddr_reg:x3; val_offset:65493*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65493*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc1000007; valaddr_reg:x3; val_offset:65496*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65496*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc100000f; valaddr_reg:x3; val_offset:65499*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65499*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc100001f; valaddr_reg:x3; val_offset:65502*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65502*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc100003f; valaddr_reg:x3; val_offset:65505*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65505*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc100007f; valaddr_reg:x3; val_offset:65508*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65508*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc10000ff; valaddr_reg:x3; val_offset:65511*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65511*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc10001ff; valaddr_reg:x3; val_offset:65514*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65514*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc10003ff; valaddr_reg:x3; val_offset:65517*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65517*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc10007ff; valaddr_reg:x3; val_offset:65520*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65520*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc1000fff; valaddr_reg:x3; val_offset:65523*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65523*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc1001fff; valaddr_reg:x3; val_offset:65526*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65526*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc1003fff; valaddr_reg:x3; val_offset:65529*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65529*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc1007fff; valaddr_reg:x3; val_offset:65532*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65532*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc100ffff; valaddr_reg:x3; val_offset:65535*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65535*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc101ffff; valaddr_reg:x3; val_offset:65538*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65538*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc103ffff; valaddr_reg:x3; val_offset:65541*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65541*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc107ffff; valaddr_reg:x3; val_offset:65544*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65544*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc10fffff; valaddr_reg:x3; val_offset:65547*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65547*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc11fffff; valaddr_reg:x3; val_offset:65550*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65550*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc13fffff; valaddr_reg:x3; val_offset:65553*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65553*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc1400000; valaddr_reg:x3; val_offset:65556*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65556*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc1600000; valaddr_reg:x3; val_offset:65559*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65559*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc1700000; valaddr_reg:x3; val_offset:65562*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65562*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc1780000; valaddr_reg:x3; val_offset:65565*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65565*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17c0000; valaddr_reg:x3; val_offset:65568*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65568*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17e0000; valaddr_reg:x3; val_offset:65571*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65571*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17f0000; valaddr_reg:x3; val_offset:65574*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65574*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17f8000; valaddr_reg:x3; val_offset:65577*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65577*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17fc000; valaddr_reg:x3; val_offset:65580*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65580*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17fe000; valaddr_reg:x3; val_offset:65583*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65583*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17ff000; valaddr_reg:x3; val_offset:65586*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65586*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17ff800; valaddr_reg:x3; val_offset:65589*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65589*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17ffc00; valaddr_reg:x3; val_offset:65592*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65592*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17ffe00; valaddr_reg:x3; val_offset:65595*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65595*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17fff00; valaddr_reg:x3; val_offset:65598*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65598*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17fff80; valaddr_reg:x3; val_offset:65601*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65601*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17fffc0; valaddr_reg:x3; val_offset:65604*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65604*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17fffe0; valaddr_reg:x3; val_offset:65607*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65607*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17ffff0; valaddr_reg:x3; val_offset:65610*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65610*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17ffff8; valaddr_reg:x3; val_offset:65613*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65613*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17ffffc; valaddr_reg:x3; val_offset:65616*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65616*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17ffffe; valaddr_reg:x3; val_offset:65619*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65619*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61908b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x48a2b0 and fs3 == 1 and fe3 == 0x82 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee1908b; op2val:0x8048a2b0;
op3val:0xc17fffff; valaddr_reg:x3; val_offset:65622*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65622*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62c8c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x483eb0 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee2c8c3; op2val:0x80483eb0;
op3val:0xa2000000; valaddr_reg:x3; val_offset:65625*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65625*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62c8c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x483eb0 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee2c8c3; op2val:0x80483eb0;
op3val:0xa2000001; valaddr_reg:x3; val_offset:65628*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65628*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62c8c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x483eb0 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee2c8c3; op2val:0x80483eb0;
op3val:0xa2000003; valaddr_reg:x3; val_offset:65631*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65631*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62c8c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x483eb0 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee2c8c3; op2val:0x80483eb0;
op3val:0xa2000007; valaddr_reg:x3; val_offset:65634*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65634*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62c8c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x483eb0 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee2c8c3; op2val:0x80483eb0;
op3val:0xa200000f; valaddr_reg:x3; val_offset:65637*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65637*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62c8c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x483eb0 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee2c8c3; op2val:0x80483eb0;
op3val:0xa200001f; valaddr_reg:x3; val_offset:65640*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65640*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62c8c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x483eb0 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee2c8c3; op2val:0x80483eb0;
op3val:0xa200003f; valaddr_reg:x3; val_offset:65643*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65643*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62c8c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x483eb0 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee2c8c3; op2val:0x80483eb0;
op3val:0xa200007f; valaddr_reg:x3; val_offset:65646*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65646*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62c8c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x483eb0 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee2c8c3; op2val:0x80483eb0;
op3val:0xa20000ff; valaddr_reg:x3; val_offset:65649*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65649*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62c8c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x483eb0 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee2c8c3; op2val:0x80483eb0;
op3val:0xa20001ff; valaddr_reg:x3; val_offset:65652*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65652*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62c8c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x483eb0 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee2c8c3; op2val:0x80483eb0;
op3val:0xa20003ff; valaddr_reg:x3; val_offset:65655*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65655*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62c8c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x483eb0 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee2c8c3; op2val:0x80483eb0;
op3val:0xa20007ff; valaddr_reg:x3; val_offset:65658*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65658*0 + 3*170*FLEN/8, x4, x1, x2)

inst_21887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62c8c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x483eb0 and fs3 == 1 and fe3 == 0x44 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee2c8c3; op2val:0x80483eb0;
op3val:0xa2000fff; valaddr_reg:x3; val_offset:65661*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65661*0 + 3*170*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414163456,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414163457,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414163459,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414163463,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414163471,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414163487,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414163519,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414163583,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414163711,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414163967,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414164479,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414165503,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414167551,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414171647,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414179839,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414196223,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414228991,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414294527,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414425599,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3414687743,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3415212031,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3416260607,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3418357759,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3418357760,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3420454912,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3421503488,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422027776,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422289920,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422420992,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422486528,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422519296,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422535680,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422543872,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422547968,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422550016,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422551040,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422551552,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422551808,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422551936,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422552000,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422552032,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422552048,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422552056,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422552060,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422552062,32,FLEN)
NAN_BOXED(2128696341,32,FLEN)
NAN_BOXED(2152248877,32,FLEN)
NAN_BOXED(3422552063,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238002688,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238002689,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238002691,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238002695,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238002703,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238002719,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238002751,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238002815,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238002943,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238003199,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238003711,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238004735,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238006783,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238010879,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238019071,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238035455,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238068223,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238133759,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238264831,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3238526975,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3239051263,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3240099839,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3242196991,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3242196992,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3244294144,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3245342720,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3245867008,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246129152,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246260224,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246325760,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246358528,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246374912,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246383104,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246387200,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246389248,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246390272,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246390784,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246391040,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246391168,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246391232,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246391264,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246391280,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246391288,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246391292,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246391294,32,FLEN)
NAN_BOXED(2128711819,32,FLEN)
NAN_BOXED(2152243888,32,FLEN)
NAN_BOXED(3246391295,32,FLEN)
NAN_BOXED(2128791747,32,FLEN)
NAN_BOXED(2152218288,32,FLEN)
NAN_BOXED(2717908992,32,FLEN)
NAN_BOXED(2128791747,32,FLEN)
NAN_BOXED(2152218288,32,FLEN)
NAN_BOXED(2717908993,32,FLEN)
NAN_BOXED(2128791747,32,FLEN)
NAN_BOXED(2152218288,32,FLEN)
NAN_BOXED(2717908995,32,FLEN)
NAN_BOXED(2128791747,32,FLEN)
NAN_BOXED(2152218288,32,FLEN)
NAN_BOXED(2717908999,32,FLEN)
NAN_BOXED(2128791747,32,FLEN)
NAN_BOXED(2152218288,32,FLEN)
NAN_BOXED(2717909007,32,FLEN)
NAN_BOXED(2128791747,32,FLEN)
NAN_BOXED(2152218288,32,FLEN)
NAN_BOXED(2717909023,32,FLEN)
NAN_BOXED(2128791747,32,FLEN)
NAN_BOXED(2152218288,32,FLEN)
NAN_BOXED(2717909055,32,FLEN)
NAN_BOXED(2128791747,32,FLEN)
NAN_BOXED(2152218288,32,FLEN)
NAN_BOXED(2717909119,32,FLEN)
NAN_BOXED(2128791747,32,FLEN)
NAN_BOXED(2152218288,32,FLEN)
NAN_BOXED(2717909247,32,FLEN)
NAN_BOXED(2128791747,32,FLEN)
NAN_BOXED(2152218288,32,FLEN)
NAN_BOXED(2717909503,32,FLEN)
NAN_BOXED(2128791747,32,FLEN)
NAN_BOXED(2152218288,32,FLEN)
NAN_BOXED(2717910015,32,FLEN)
NAN_BOXED(2128791747,32,FLEN)
NAN_BOXED(2152218288,32,FLEN)
NAN_BOXED(2717911039,32,FLEN)
NAN_BOXED(2128791747,32,FLEN)
NAN_BOXED(2152218288,32,FLEN)
NAN_BOXED(2717913087,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
