
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_22016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x7000001; valaddr_reg:x3; val_offset:66048*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66048*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x7000003; valaddr_reg:x3; val_offset:66051*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66051*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x7000007; valaddr_reg:x3; val_offset:66054*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66054*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x700000f; valaddr_reg:x3; val_offset:66057*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66057*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x700001f; valaddr_reg:x3; val_offset:66060*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66060*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x700003f; valaddr_reg:x3; val_offset:66063*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66063*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x700007f; valaddr_reg:x3; val_offset:66066*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66066*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x70000ff; valaddr_reg:x3; val_offset:66069*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66069*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x70001ff; valaddr_reg:x3; val_offset:66072*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66072*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x70003ff; valaddr_reg:x3; val_offset:66075*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66075*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x70007ff; valaddr_reg:x3; val_offset:66078*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66078*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x7000fff; valaddr_reg:x3; val_offset:66081*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66081*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x7001fff; valaddr_reg:x3; val_offset:66084*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66084*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x7003fff; valaddr_reg:x3; val_offset:66087*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66087*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x7007fff; valaddr_reg:x3; val_offset:66090*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66090*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x700ffff; valaddr_reg:x3; val_offset:66093*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66093*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x701ffff; valaddr_reg:x3; val_offset:66096*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66096*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x703ffff; valaddr_reg:x3; val_offset:66099*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66099*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x707ffff; valaddr_reg:x3; val_offset:66102*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66102*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x70fffff; valaddr_reg:x3; val_offset:66105*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66105*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x71fffff; valaddr_reg:x3; val_offset:66108*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66108*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x73fffff; valaddr_reg:x3; val_offset:66111*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66111*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x7400000; valaddr_reg:x3; val_offset:66114*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66114*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x7600000; valaddr_reg:x3; val_offset:66117*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66117*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x7700000; valaddr_reg:x3; val_offset:66120*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66120*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x7780000; valaddr_reg:x3; val_offset:66123*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66123*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77c0000; valaddr_reg:x3; val_offset:66126*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66126*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77e0000; valaddr_reg:x3; val_offset:66129*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66129*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77f0000; valaddr_reg:x3; val_offset:66132*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66132*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77f8000; valaddr_reg:x3; val_offset:66135*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66135*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77fc000; valaddr_reg:x3; val_offset:66138*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66138*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77fe000; valaddr_reg:x3; val_offset:66141*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66141*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77ff000; valaddr_reg:x3; val_offset:66144*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66144*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77ff800; valaddr_reg:x3; val_offset:66147*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66147*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77ffc00; valaddr_reg:x3; val_offset:66150*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66150*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77ffe00; valaddr_reg:x3; val_offset:66153*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66153*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77fff00; valaddr_reg:x3; val_offset:66156*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66156*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77fff80; valaddr_reg:x3; val_offset:66159*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66159*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77fffc0; valaddr_reg:x3; val_offset:66162*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66162*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77fffe0; valaddr_reg:x3; val_offset:66165*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66165*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77ffff0; valaddr_reg:x3; val_offset:66168*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66168*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77ffff8; valaddr_reg:x3; val_offset:66171*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66171*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77ffffc; valaddr_reg:x3; val_offset:66174*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66174*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77ffffe; valaddr_reg:x3; val_offset:66177*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66177*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6300be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee300be; op2val:0x0;
op3val:0x77fffff; valaddr_reg:x3; val_offset:66180*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66180*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8800000; valaddr_reg:x3; val_offset:66183*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66183*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8800001; valaddr_reg:x3; val_offset:66186*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66186*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8800003; valaddr_reg:x3; val_offset:66189*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66189*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8800007; valaddr_reg:x3; val_offset:66192*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66192*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa880000f; valaddr_reg:x3; val_offset:66195*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66195*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa880001f; valaddr_reg:x3; val_offset:66198*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66198*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa880003f; valaddr_reg:x3; val_offset:66201*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66201*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa880007f; valaddr_reg:x3; val_offset:66204*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66204*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa88000ff; valaddr_reg:x3; val_offset:66207*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66207*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa88001ff; valaddr_reg:x3; val_offset:66210*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66210*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa88003ff; valaddr_reg:x3; val_offset:66213*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66213*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa88007ff; valaddr_reg:x3; val_offset:66216*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66216*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8800fff; valaddr_reg:x3; val_offset:66219*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66219*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8801fff; valaddr_reg:x3; val_offset:66222*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66222*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8803fff; valaddr_reg:x3; val_offset:66225*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66225*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8807fff; valaddr_reg:x3; val_offset:66228*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66228*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa880ffff; valaddr_reg:x3; val_offset:66231*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66231*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa881ffff; valaddr_reg:x3; val_offset:66234*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66234*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa883ffff; valaddr_reg:x3; val_offset:66237*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66237*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa887ffff; valaddr_reg:x3; val_offset:66240*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66240*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa88fffff; valaddr_reg:x3; val_offset:66243*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66243*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa89fffff; valaddr_reg:x3; val_offset:66246*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66246*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8bfffff; valaddr_reg:x3; val_offset:66249*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66249*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8c00000; valaddr_reg:x3; val_offset:66252*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66252*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8e00000; valaddr_reg:x3; val_offset:66255*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66255*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8f00000; valaddr_reg:x3; val_offset:66258*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66258*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8f80000; valaddr_reg:x3; val_offset:66261*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66261*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8fc0000; valaddr_reg:x3; val_offset:66264*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66264*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8fe0000; valaddr_reg:x3; val_offset:66267*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66267*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8ff0000; valaddr_reg:x3; val_offset:66270*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66270*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8ff8000; valaddr_reg:x3; val_offset:66273*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66273*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8ffc000; valaddr_reg:x3; val_offset:66276*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66276*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8ffe000; valaddr_reg:x3; val_offset:66279*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66279*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8fff000; valaddr_reg:x3; val_offset:66282*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66282*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8fff800; valaddr_reg:x3; val_offset:66285*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66285*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8fffc00; valaddr_reg:x3; val_offset:66288*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66288*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8fffe00; valaddr_reg:x3; val_offset:66291*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66291*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8ffff00; valaddr_reg:x3; val_offset:66294*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66294*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8ffff80; valaddr_reg:x3; val_offset:66297*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66297*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8ffffc0; valaddr_reg:x3; val_offset:66300*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66300*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8ffffe0; valaddr_reg:x3; val_offset:66303*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66303*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8fffff0; valaddr_reg:x3; val_offset:66306*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66306*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8fffff8; valaddr_reg:x3; val_offset:66309*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66309*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8fffffc; valaddr_reg:x3; val_offset:66312*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66312*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8fffffe; valaddr_reg:x3; val_offset:66315*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66315*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x51 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xa8ffffff; valaddr_reg:x3; val_offset:66318*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66318*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xbf800001; valaddr_reg:x3; val_offset:66321*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66321*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xbf800003; valaddr_reg:x3; val_offset:66324*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66324*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xbf800007; valaddr_reg:x3; val_offset:66327*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66327*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xbf999999; valaddr_reg:x3; val_offset:66330*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66330*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:66333*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66333*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:66336*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66336*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:66339*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66339*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:66342*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66342*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:66345*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66345*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:66348*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66348*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:66351*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66351*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:66354*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66354*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:66357*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66357*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:66360*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66360*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:66363*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66363*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6319e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4824e1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee319e6; op2val:0x804824e1;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:66366*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66366*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:66369*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66369*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:66372*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66372*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:66375*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66375*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:66378*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66378*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:66381*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66381*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:66384*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66384*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:66387*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66387*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:66390*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66390*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:66393*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66393*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:66396*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66396*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:66399*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66399*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:66402*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66402*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:66405*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66405*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:66408*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66408*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:66411*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66411*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:66414*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66414*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c000000; valaddr_reg:x3; val_offset:66417*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66417*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c000001; valaddr_reg:x3; val_offset:66420*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66420*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c000003; valaddr_reg:x3; val_offset:66423*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66423*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c000007; valaddr_reg:x3; val_offset:66426*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66426*0 + 3*172*FLEN/8, x4, x1, x2)

inst_22143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c00000f; valaddr_reg:x3; val_offset:66429*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66429*0 + 3*172*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440513,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440515,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440519,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440527,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440543,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440575,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440639,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440767,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117441023,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117441535,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117442559,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117444607,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117448703,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117456895,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117473279,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117506047,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117571583,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117702655,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117964799,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(118489087,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(119537663,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(121634815,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(121634816,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(123731968,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(124780544,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125304832,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125566976,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125698048,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125763584,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125796352,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125812736,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125820928,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125825024,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125827072,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828096,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828608,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828864,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828992,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829056,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829088,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829104,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829112,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829116,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829118,32,FLEN)
NAN_BOXED(2128806078,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829119,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2826960896,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2826960897,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2826960899,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2826960903,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2826960911,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2826960927,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2826960959,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2826961023,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2826961151,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2826961407,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2826961919,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2826962943,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2826964991,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2826969087,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2826977279,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2826993663,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2827026431,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2827091967,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2827223039,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2827485183,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2828009471,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2829058047,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2831155199,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2831155200,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2833252352,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2834300928,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2834825216,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835087360,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835218432,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835283968,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835316736,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835333120,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835341312,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835345408,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835347456,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835348480,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835348992,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835349248,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835349376,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835349440,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835349472,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835349488,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835349496,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835349500,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835349502,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(2835349503,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2128812518,32,FLEN)
NAN_BOXED(2152211681,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275068416,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275068417,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275068419,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275068423,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275068431,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
