
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_22144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c00001f; valaddr_reg:x3; val_offset:66432*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66432*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c00003f; valaddr_reg:x3; val_offset:66435*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66435*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c00007f; valaddr_reg:x3; val_offset:66438*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66438*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c0000ff; valaddr_reg:x3; val_offset:66441*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66441*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c0001ff; valaddr_reg:x3; val_offset:66444*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66444*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c0003ff; valaddr_reg:x3; val_offset:66447*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66447*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c0007ff; valaddr_reg:x3; val_offset:66450*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66450*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c000fff; valaddr_reg:x3; val_offset:66453*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66453*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c001fff; valaddr_reg:x3; val_offset:66456*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66456*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c003fff; valaddr_reg:x3; val_offset:66459*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66459*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c007fff; valaddr_reg:x3; val_offset:66462*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66462*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c00ffff; valaddr_reg:x3; val_offset:66465*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66465*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c01ffff; valaddr_reg:x3; val_offset:66468*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66468*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c03ffff; valaddr_reg:x3; val_offset:66471*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66471*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c07ffff; valaddr_reg:x3; val_offset:66474*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66474*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c0fffff; valaddr_reg:x3; val_offset:66477*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66477*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c1fffff; valaddr_reg:x3; val_offset:66480*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66480*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c3fffff; valaddr_reg:x3; val_offset:66483*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66483*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c400000; valaddr_reg:x3; val_offset:66486*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66486*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c600000; valaddr_reg:x3; val_offset:66489*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66489*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c700000; valaddr_reg:x3; val_offset:66492*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66492*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c780000; valaddr_reg:x3; val_offset:66495*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66495*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7c0000; valaddr_reg:x3; val_offset:66498*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66498*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7e0000; valaddr_reg:x3; val_offset:66501*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66501*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7f0000; valaddr_reg:x3; val_offset:66504*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66504*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7f8000; valaddr_reg:x3; val_offset:66507*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66507*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7fc000; valaddr_reg:x3; val_offset:66510*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66510*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7fe000; valaddr_reg:x3; val_offset:66513*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66513*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7ff000; valaddr_reg:x3; val_offset:66516*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66516*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7ff800; valaddr_reg:x3; val_offset:66519*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66519*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7ffc00; valaddr_reg:x3; val_offset:66522*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66522*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7ffe00; valaddr_reg:x3; val_offset:66525*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66525*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7fff00; valaddr_reg:x3; val_offset:66528*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66528*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7fff80; valaddr_reg:x3; val_offset:66531*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66531*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7fffc0; valaddr_reg:x3; val_offset:66534*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66534*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7fffe0; valaddr_reg:x3; val_offset:66537*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66537*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7ffff0; valaddr_reg:x3; val_offset:66540*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66540*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7ffff8; valaddr_reg:x3; val_offset:66543*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66543*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7ffffc; valaddr_reg:x3; val_offset:66546*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66546*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7ffffe; valaddr_reg:x3; val_offset:66549*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66549*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64515f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4515f; op2val:0x0;
op3val:0x4c7fffff; valaddr_reg:x3; val_offset:66552*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66552*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:66555*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66555*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:66558*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66558*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:66561*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66561*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:66564*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66564*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:66567*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66567*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:66570*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66570*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:66573*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66573*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:66576*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66576*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:66579*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66579*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:66582*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66582*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:66585*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66585*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:66588*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66588*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:66591*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66591*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:66594*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66594*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:66597*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66597*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:66600*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66600*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x4000000; valaddr_reg:x3; val_offset:66603*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66603*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x4000001; valaddr_reg:x3; val_offset:66606*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66606*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x4000003; valaddr_reg:x3; val_offset:66609*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66609*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x4000007; valaddr_reg:x3; val_offset:66612*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66612*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x400000f; valaddr_reg:x3; val_offset:66615*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66615*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x400001f; valaddr_reg:x3; val_offset:66618*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66618*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x400003f; valaddr_reg:x3; val_offset:66621*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66621*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x400007f; valaddr_reg:x3; val_offset:66624*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66624*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x40000ff; valaddr_reg:x3; val_offset:66627*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66627*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x40001ff; valaddr_reg:x3; val_offset:66630*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66630*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x40003ff; valaddr_reg:x3; val_offset:66633*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66633*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x40007ff; valaddr_reg:x3; val_offset:66636*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66636*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x4000fff; valaddr_reg:x3; val_offset:66639*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66639*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x4001fff; valaddr_reg:x3; val_offset:66642*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66642*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x4003fff; valaddr_reg:x3; val_offset:66645*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66645*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x4007fff; valaddr_reg:x3; val_offset:66648*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66648*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x400ffff; valaddr_reg:x3; val_offset:66651*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66651*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x401ffff; valaddr_reg:x3; val_offset:66654*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66654*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x403ffff; valaddr_reg:x3; val_offset:66657*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66657*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x407ffff; valaddr_reg:x3; val_offset:66660*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66660*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x40fffff; valaddr_reg:x3; val_offset:66663*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66663*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x41fffff; valaddr_reg:x3; val_offset:66666*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66666*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x43fffff; valaddr_reg:x3; val_offset:66669*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66669*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x4400000; valaddr_reg:x3; val_offset:66672*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66672*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x4600000; valaddr_reg:x3; val_offset:66675*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66675*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x4700000; valaddr_reg:x3; val_offset:66678*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66678*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x4780000; valaddr_reg:x3; val_offset:66681*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66681*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47c0000; valaddr_reg:x3; val_offset:66684*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66684*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47e0000; valaddr_reg:x3; val_offset:66687*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66687*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47f0000; valaddr_reg:x3; val_offset:66690*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66690*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47f8000; valaddr_reg:x3; val_offset:66693*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66693*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47fc000; valaddr_reg:x3; val_offset:66696*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66696*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47fe000; valaddr_reg:x3; val_offset:66699*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66699*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47ff000; valaddr_reg:x3; val_offset:66702*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66702*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47ff800; valaddr_reg:x3; val_offset:66705*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66705*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47ffc00; valaddr_reg:x3; val_offset:66708*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66708*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47ffe00; valaddr_reg:x3; val_offset:66711*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66711*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47fff00; valaddr_reg:x3; val_offset:66714*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66714*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47fff80; valaddr_reg:x3; val_offset:66717*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66717*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47fffc0; valaddr_reg:x3; val_offset:66720*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66720*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47fffe0; valaddr_reg:x3; val_offset:66723*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66723*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47ffff0; valaddr_reg:x3; val_offset:66726*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66726*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47ffff8; valaddr_reg:x3; val_offset:66729*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66729*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47ffffc; valaddr_reg:x3; val_offset:66732*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66732*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47ffffe; valaddr_reg:x3; val_offset:66735*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66735*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee51547; op2val:0x0;
op3val:0x47fffff; valaddr_reg:x3; val_offset:66738*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66738*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a800000; valaddr_reg:x3; val_offset:66741*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66741*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a800001; valaddr_reg:x3; val_offset:66744*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66744*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a800003; valaddr_reg:x3; val_offset:66747*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66747*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a800007; valaddr_reg:x3; val_offset:66750*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66750*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a80000f; valaddr_reg:x3; val_offset:66753*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66753*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a80001f; valaddr_reg:x3; val_offset:66756*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66756*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a80003f; valaddr_reg:x3; val_offset:66759*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66759*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a80007f; valaddr_reg:x3; val_offset:66762*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66762*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a8000ff; valaddr_reg:x3; val_offset:66765*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66765*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a8001ff; valaddr_reg:x3; val_offset:66768*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66768*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a8003ff; valaddr_reg:x3; val_offset:66771*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66771*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a8007ff; valaddr_reg:x3; val_offset:66774*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66774*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a800fff; valaddr_reg:x3; val_offset:66777*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66777*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a801fff; valaddr_reg:x3; val_offset:66780*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66780*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a803fff; valaddr_reg:x3; val_offset:66783*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66783*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a807fff; valaddr_reg:x3; val_offset:66786*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66786*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a80ffff; valaddr_reg:x3; val_offset:66789*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66789*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a81ffff; valaddr_reg:x3; val_offset:66792*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66792*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a83ffff; valaddr_reg:x3; val_offset:66795*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66795*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a87ffff; valaddr_reg:x3; val_offset:66798*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66798*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a8fffff; valaddr_reg:x3; val_offset:66801*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66801*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6a9fffff; valaddr_reg:x3; val_offset:66804*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66804*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6abfffff; valaddr_reg:x3; val_offset:66807*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66807*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6ac00000; valaddr_reg:x3; val_offset:66810*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66810*0 + 3*173*FLEN/8, x4, x1, x2)

inst_22271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65b1ee and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea8a1 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5b1ee; op2val:0x400ea8a1;
op3val:0x6ae00000; valaddr_reg:x3; val_offset:66813*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 66813*0 + 3*173*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275068447,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275068479,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275068543,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275068671,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275068927,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275069439,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275070463,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275072511,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275076607,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275084799,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275101183,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275133951,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275199487,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275330559,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1275592703,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1276116991,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1277165567,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1279262719,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1279262720,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1281359872,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1282408448,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1282932736,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283194880,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283325952,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283391488,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283424256,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283440640,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283448832,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283452928,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283454976,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283456000,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283456512,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283456768,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283456896,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283456960,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283456992,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283457008,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283457016,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283457020,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283457022,32,FLEN)
NAN_BOXED(2128892255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1283457023,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108864,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108865,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108867,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108871,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108879,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108895,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108927,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108991,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109119,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109375,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109887,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67110911,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67112959,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67117055,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67125247,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67141631,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67174399,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67239935,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67371007,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67633151,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(68157439,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(69206015,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(71303167,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(71303168,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(73400320,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(74448896,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(74973184,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75235328,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75366400,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75431936,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75464704,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75481088,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75489280,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75493376,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75495424,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75496448,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75496960,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497216,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497344,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497408,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497440,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497456,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497464,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497468,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497470,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497471,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786773504,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786773505,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786773507,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786773511,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786773519,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786773535,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786773567,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786773631,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786773759,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786774015,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786774527,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786775551,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786777599,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786781695,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786789887,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786806271,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786839039,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1786904575,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1787035647,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1787297791,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1787822079,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1788870655,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1790967807,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1790967808,32,FLEN)
NAN_BOXED(2128982510,32,FLEN)
NAN_BOXED(1074702497,32,FLEN)
NAN_BOXED(1793064960,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
