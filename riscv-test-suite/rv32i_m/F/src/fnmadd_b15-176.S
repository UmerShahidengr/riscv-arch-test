
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_22400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:67200*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67200*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:67203*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67203*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:67206*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67206*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x600000; valaddr_reg:x3; val_offset:67209*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67209*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:67212*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67212*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:67215*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67215*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x700000; valaddr_reg:x3; val_offset:67218*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67218*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x780000; valaddr_reg:x3; val_offset:67221*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67221*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7c0000; valaddr_reg:x3; val_offset:67224*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67224*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7e0000; valaddr_reg:x3; val_offset:67227*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67227*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7f0000; valaddr_reg:x3; val_offset:67230*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67230*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7f8000; valaddr_reg:x3; val_offset:67233*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67233*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7fc000; valaddr_reg:x3; val_offset:67236*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67236*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7fe000; valaddr_reg:x3; val_offset:67239*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67239*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7ff000; valaddr_reg:x3; val_offset:67242*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67242*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7ff800; valaddr_reg:x3; val_offset:67245*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67245*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7ffc00; valaddr_reg:x3; val_offset:67248*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67248*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7ffe00; valaddr_reg:x3; val_offset:67251*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67251*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7fff00; valaddr_reg:x3; val_offset:67254*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67254*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7fff80; valaddr_reg:x3; val_offset:67257*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67257*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7fffc0; valaddr_reg:x3; val_offset:67260*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67260*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7fffe0; valaddr_reg:x3; val_offset:67263*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67263*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7ffff0; valaddr_reg:x3; val_offset:67266*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67266*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:67269*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67269*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:67272*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67272*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:67275*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67275*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x672073 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee72073; op2val:0x0;
op3val:0x7fffff; valaddr_reg:x3; val_offset:67278*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67278*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d000000; valaddr_reg:x3; val_offset:67281*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67281*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d000001; valaddr_reg:x3; val_offset:67284*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67284*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d000003; valaddr_reg:x3; val_offset:67287*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67287*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d000007; valaddr_reg:x3; val_offset:67290*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67290*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d00000f; valaddr_reg:x3; val_offset:67293*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67293*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d00001f; valaddr_reg:x3; val_offset:67296*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67296*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d00003f; valaddr_reg:x3; val_offset:67299*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67299*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d00007f; valaddr_reg:x3; val_offset:67302*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67302*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d0000ff; valaddr_reg:x3; val_offset:67305*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67305*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d0001ff; valaddr_reg:x3; val_offset:67308*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67308*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d0003ff; valaddr_reg:x3; val_offset:67311*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67311*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d0007ff; valaddr_reg:x3; val_offset:67314*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67314*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d000fff; valaddr_reg:x3; val_offset:67317*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67317*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d001fff; valaddr_reg:x3; val_offset:67320*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67320*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d003fff; valaddr_reg:x3; val_offset:67323*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67323*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d007fff; valaddr_reg:x3; val_offset:67326*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67326*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d00ffff; valaddr_reg:x3; val_offset:67329*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67329*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d01ffff; valaddr_reg:x3; val_offset:67332*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67332*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d03ffff; valaddr_reg:x3; val_offset:67335*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67335*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d07ffff; valaddr_reg:x3; val_offset:67338*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67338*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d0fffff; valaddr_reg:x3; val_offset:67341*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67341*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d1fffff; valaddr_reg:x3; val_offset:67344*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67344*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d3fffff; valaddr_reg:x3; val_offset:67347*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67347*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d400000; valaddr_reg:x3; val_offset:67350*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67350*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d600000; valaddr_reg:x3; val_offset:67353*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67353*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d700000; valaddr_reg:x3; val_offset:67356*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67356*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d780000; valaddr_reg:x3; val_offset:67359*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67359*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7c0000; valaddr_reg:x3; val_offset:67362*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67362*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7e0000; valaddr_reg:x3; val_offset:67365*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67365*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7f0000; valaddr_reg:x3; val_offset:67368*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67368*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7f8000; valaddr_reg:x3; val_offset:67371*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67371*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7fc000; valaddr_reg:x3; val_offset:67374*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67374*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7fe000; valaddr_reg:x3; val_offset:67377*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67377*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7ff000; valaddr_reg:x3; val_offset:67380*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67380*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7ff800; valaddr_reg:x3; val_offset:67383*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67383*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7ffc00; valaddr_reg:x3; val_offset:67386*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67386*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7ffe00; valaddr_reg:x3; val_offset:67389*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67389*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7fff00; valaddr_reg:x3; val_offset:67392*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67392*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7fff80; valaddr_reg:x3; val_offset:67395*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67395*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7fffc0; valaddr_reg:x3; val_offset:67398*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67398*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7fffe0; valaddr_reg:x3; val_offset:67401*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67401*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7ffff0; valaddr_reg:x3; val_offset:67404*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67404*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7ffff8; valaddr_reg:x3; val_offset:67407*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67407*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7ffffc; valaddr_reg:x3; val_offset:67410*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67410*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7ffffe; valaddr_reg:x3; val_offset:67413*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67413*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7d7fffff; valaddr_reg:x3; val_offset:67416*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67416*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7f000001; valaddr_reg:x3; val_offset:67419*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67419*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7f000003; valaddr_reg:x3; val_offset:67422*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67422*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7f000007; valaddr_reg:x3; val_offset:67425*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67425*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7f199999; valaddr_reg:x3; val_offset:67428*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67428*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7f249249; valaddr_reg:x3; val_offset:67431*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67431*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7f333333; valaddr_reg:x3; val_offset:67434*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67434*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:67437*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67437*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:67440*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67440*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7f444444; valaddr_reg:x3; val_offset:67443*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67443*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:67446*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67446*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:67449*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67449*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7f666666; valaddr_reg:x3; val_offset:67452*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67452*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:67455*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67455*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:67458*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67458*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:67461*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67461*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x687f5f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cf069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee87f5f; op2val:0x400cf069;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:67464*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67464*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:67467*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67467*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:67470*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67470*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:67473*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67473*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:67476*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67476*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:67479*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67479*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:67482*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67482*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:67485*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67485*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:67488*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67488*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:67491*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67491*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:67494*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67494*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:67497*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67497*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:67500*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67500*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:67503*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67503*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:67506*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67506*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:67509*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67509*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:67512*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67512*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4800000; valaddr_reg:x3; val_offset:67515*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67515*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4800001; valaddr_reg:x3; val_offset:67518*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67518*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4800003; valaddr_reg:x3; val_offset:67521*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67521*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4800007; valaddr_reg:x3; val_offset:67524*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67524*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x480000f; valaddr_reg:x3; val_offset:67527*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67527*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x480001f; valaddr_reg:x3; val_offset:67530*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67530*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x480003f; valaddr_reg:x3; val_offset:67533*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67533*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x480007f; valaddr_reg:x3; val_offset:67536*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67536*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x48000ff; valaddr_reg:x3; val_offset:67539*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67539*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x48001ff; valaddr_reg:x3; val_offset:67542*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67542*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x48003ff; valaddr_reg:x3; val_offset:67545*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67545*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x48007ff; valaddr_reg:x3; val_offset:67548*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67548*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4800fff; valaddr_reg:x3; val_offset:67551*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67551*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4801fff; valaddr_reg:x3; val_offset:67554*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67554*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4803fff; valaddr_reg:x3; val_offset:67557*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67557*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4807fff; valaddr_reg:x3; val_offset:67560*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67560*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x480ffff; valaddr_reg:x3; val_offset:67563*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67563*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x481ffff; valaddr_reg:x3; val_offset:67566*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67566*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x483ffff; valaddr_reg:x3; val_offset:67569*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67569*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x487ffff; valaddr_reg:x3; val_offset:67572*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67572*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x48fffff; valaddr_reg:x3; val_offset:67575*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67575*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x49fffff; valaddr_reg:x3; val_offset:67578*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67578*0 + 3*175*FLEN/8, x4, x1, x2)

inst_22527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4bfffff; valaddr_reg:x3; val_offset:67581*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67581*0 + 3*175*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6291456,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7340032,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7864320,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8126464,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8257536,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8323072,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8355840,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8372224,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8380416,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8384512,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8386560,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8387584,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388096,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388352,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388480,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388544,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388576,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388592,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2129076339,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097152000,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097152001,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097152003,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097152007,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097152015,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097152031,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097152063,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097152127,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097152255,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097152511,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097153023,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097154047,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097156095,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097160191,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097168383,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097184767,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097217535,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097283071,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097414143,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2097676287,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2098200575,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2099249151,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2101346303,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2101346304,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2103443456,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2104492032,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105016320,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105278464,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105409536,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105475072,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105507840,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105524224,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105532416,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105536512,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105538560,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105539584,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105540096,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105540352,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105540480,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105540544,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105540576,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105540592,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105540600,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105540604,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105540606,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2105540607,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2129166175,32,FLEN)
NAN_BOXED(1074589801,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497472,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497473,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497475,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497479,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497487,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497503,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497535,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497599,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497727,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497983,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75498495,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75499519,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75501567,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75505663,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75513855,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75530239,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75563007,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75628543,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75759615,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(76021759,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(76546047,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(77594623,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691775,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
