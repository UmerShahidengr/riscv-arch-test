
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_22528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4c00000; valaddr_reg:x3; val_offset:67584*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67584*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4e00000; valaddr_reg:x3; val_offset:67587*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67587*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4f00000; valaddr_reg:x3; val_offset:67590*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67590*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4f80000; valaddr_reg:x3; val_offset:67593*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67593*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4fc0000; valaddr_reg:x3; val_offset:67596*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67596*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4fe0000; valaddr_reg:x3; val_offset:67599*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67599*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4ff0000; valaddr_reg:x3; val_offset:67602*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67602*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4ff8000; valaddr_reg:x3; val_offset:67605*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67605*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4ffc000; valaddr_reg:x3; val_offset:67608*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67608*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4ffe000; valaddr_reg:x3; val_offset:67611*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67611*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4fff000; valaddr_reg:x3; val_offset:67614*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67614*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4fff800; valaddr_reg:x3; val_offset:67617*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67617*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4fffc00; valaddr_reg:x3; val_offset:67620*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67620*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4fffe00; valaddr_reg:x3; val_offset:67623*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67623*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4ffff00; valaddr_reg:x3; val_offset:67626*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67626*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4ffff80; valaddr_reg:x3; val_offset:67629*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67629*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4ffffc0; valaddr_reg:x3; val_offset:67632*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67632*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4ffffe0; valaddr_reg:x3; val_offset:67635*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67635*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4fffff0; valaddr_reg:x3; val_offset:67638*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67638*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4fffff8; valaddr_reg:x3; val_offset:67641*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67641*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4fffffc; valaddr_reg:x3; val_offset:67644*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67644*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4fffffe; valaddr_reg:x3; val_offset:67647*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67647*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x694195 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee94195; op2val:0x0;
op3val:0x4ffffff; valaddr_reg:x3; val_offset:67650*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67650*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26800000; valaddr_reg:x3; val_offset:67653*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67653*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26800001; valaddr_reg:x3; val_offset:67656*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67656*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26800003; valaddr_reg:x3; val_offset:67659*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67659*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26800007; valaddr_reg:x3; val_offset:67662*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67662*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x2680000f; valaddr_reg:x3; val_offset:67665*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67665*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x2680001f; valaddr_reg:x3; val_offset:67668*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67668*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x2680003f; valaddr_reg:x3; val_offset:67671*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67671*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x2680007f; valaddr_reg:x3; val_offset:67674*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67674*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x268000ff; valaddr_reg:x3; val_offset:67677*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67677*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x268001ff; valaddr_reg:x3; val_offset:67680*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67680*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x268003ff; valaddr_reg:x3; val_offset:67683*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67683*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x268007ff; valaddr_reg:x3; val_offset:67686*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67686*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26800fff; valaddr_reg:x3; val_offset:67689*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67689*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26801fff; valaddr_reg:x3; val_offset:67692*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67692*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26803fff; valaddr_reg:x3; val_offset:67695*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67695*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26807fff; valaddr_reg:x3; val_offset:67698*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67698*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x2680ffff; valaddr_reg:x3; val_offset:67701*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67701*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x2681ffff; valaddr_reg:x3; val_offset:67704*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67704*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x2683ffff; valaddr_reg:x3; val_offset:67707*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67707*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x2687ffff; valaddr_reg:x3; val_offset:67710*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67710*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x268fffff; valaddr_reg:x3; val_offset:67713*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67713*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x269fffff; valaddr_reg:x3; val_offset:67716*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67716*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26bfffff; valaddr_reg:x3; val_offset:67719*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67719*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26c00000; valaddr_reg:x3; val_offset:67722*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67722*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26e00000; valaddr_reg:x3; val_offset:67725*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67725*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26f00000; valaddr_reg:x3; val_offset:67728*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67728*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26f80000; valaddr_reg:x3; val_offset:67731*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67731*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26fc0000; valaddr_reg:x3; val_offset:67734*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67734*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26fe0000; valaddr_reg:x3; val_offset:67737*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67737*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26ff0000; valaddr_reg:x3; val_offset:67740*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67740*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26ff8000; valaddr_reg:x3; val_offset:67743*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67743*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26ffc000; valaddr_reg:x3; val_offset:67746*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67746*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26ffe000; valaddr_reg:x3; val_offset:67749*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67749*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26fff000; valaddr_reg:x3; val_offset:67752*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67752*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26fff800; valaddr_reg:x3; val_offset:67755*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67755*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26fffc00; valaddr_reg:x3; val_offset:67758*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67758*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26fffe00; valaddr_reg:x3; val_offset:67761*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67761*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26ffff00; valaddr_reg:x3; val_offset:67764*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67764*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26ffff80; valaddr_reg:x3; val_offset:67767*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67767*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26ffffc0; valaddr_reg:x3; val_offset:67770*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67770*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26ffffe0; valaddr_reg:x3; val_offset:67773*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67773*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26fffff0; valaddr_reg:x3; val_offset:67776*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67776*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26fffff8; valaddr_reg:x3; val_offset:67779*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67779*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26fffffc; valaddr_reg:x3; val_offset:67782*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67782*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26fffffe; valaddr_reg:x3; val_offset:67785*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67785*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x4d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x26ffffff; valaddr_reg:x3; val_offset:67788*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67788*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x3f800001; valaddr_reg:x3; val_offset:67791*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67791*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x3f800003; valaddr_reg:x3; val_offset:67794*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67794*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x3f800007; valaddr_reg:x3; val_offset:67797*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67797*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x3f999999; valaddr_reg:x3; val_offset:67800*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67800*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:67803*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67803*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:67806*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67806*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:67809*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67809*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:67812*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67812*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:67815*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67815*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:67818*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67818*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:67821*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67821*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:67824*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67824*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:67827*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67827*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:67830*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67830*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:67833*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67833*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69d5b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x461109 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee9d5b5; op2val:0x461109;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:67836*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67836*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf2000000; valaddr_reg:x3; val_offset:67839*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67839*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf2000001; valaddr_reg:x3; val_offset:67842*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67842*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf2000003; valaddr_reg:x3; val_offset:67845*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67845*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf2000007; valaddr_reg:x3; val_offset:67848*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67848*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf200000f; valaddr_reg:x3; val_offset:67851*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67851*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf200001f; valaddr_reg:x3; val_offset:67854*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67854*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf200003f; valaddr_reg:x3; val_offset:67857*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67857*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf200007f; valaddr_reg:x3; val_offset:67860*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67860*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf20000ff; valaddr_reg:x3; val_offset:67863*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67863*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf20001ff; valaddr_reg:x3; val_offset:67866*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67866*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf20003ff; valaddr_reg:x3; val_offset:67869*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67869*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf20007ff; valaddr_reg:x3; val_offset:67872*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67872*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf2000fff; valaddr_reg:x3; val_offset:67875*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67875*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf2001fff; valaddr_reg:x3; val_offset:67878*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67878*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf2003fff; valaddr_reg:x3; val_offset:67881*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67881*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf2007fff; valaddr_reg:x3; val_offset:67884*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67884*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf200ffff; valaddr_reg:x3; val_offset:67887*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67887*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf201ffff; valaddr_reg:x3; val_offset:67890*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67890*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf203ffff; valaddr_reg:x3; val_offset:67893*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67893*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf207ffff; valaddr_reg:x3; val_offset:67896*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67896*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf20fffff; valaddr_reg:x3; val_offset:67899*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67899*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf21fffff; valaddr_reg:x3; val_offset:67902*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67902*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf23fffff; valaddr_reg:x3; val_offset:67905*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67905*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf2400000; valaddr_reg:x3; val_offset:67908*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67908*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf2600000; valaddr_reg:x3; val_offset:67911*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67911*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf2700000; valaddr_reg:x3; val_offset:67914*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67914*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf2780000; valaddr_reg:x3; val_offset:67917*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67917*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf27c0000; valaddr_reg:x3; val_offset:67920*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67920*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf27e0000; valaddr_reg:x3; val_offset:67923*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67923*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf27f0000; valaddr_reg:x3; val_offset:67926*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67926*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf27f8000; valaddr_reg:x3; val_offset:67929*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67929*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf27fc000; valaddr_reg:x3; val_offset:67932*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67932*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf27fe000; valaddr_reg:x3; val_offset:67935*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67935*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf27ff000; valaddr_reg:x3; val_offset:67938*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67938*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf27ff800; valaddr_reg:x3; val_offset:67941*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67941*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf27ffc00; valaddr_reg:x3; val_offset:67944*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67944*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf27ffe00; valaddr_reg:x3; val_offset:67947*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67947*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf27fff00; valaddr_reg:x3; val_offset:67950*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67950*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf27fff80; valaddr_reg:x3; val_offset:67953*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67953*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf27fffc0; valaddr_reg:x3; val_offset:67956*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67956*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf27fffe0; valaddr_reg:x3; val_offset:67959*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67959*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf27ffff0; valaddr_reg:x3; val_offset:67962*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67962*0 + 3*176*FLEN/8, x4, x1, x2)

inst_22655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a388b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0be6f1 and fs3 == 1 and fe3 == 0xe4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea388b; op2val:0xc00be6f1;
op3val:0xf27ffff8; valaddr_reg:x3; val_offset:67965*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 67965*0 + 3*176*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691776,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(81788928,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(82837504,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83361792,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83623936,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83755008,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83820544,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83853312,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83869696,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83877888,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83881984,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83884032,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885056,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885568,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885824,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885952,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886016,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886048,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886064,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886072,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886076,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886078,32,FLEN)
NAN_BOXED(2129215893,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886079,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(645922816,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(645922817,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(645922819,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(645922823,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(645922831,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(645922847,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(645922879,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(645922943,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(645923071,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(645923327,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(645923839,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(645924863,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(645926911,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(645931007,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(645939199,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(645955583,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(645988351,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(646053887,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(646184959,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(646447103,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(646971391,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(648019967,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(650117119,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(650117120,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(652214272,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(653262848,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(653787136,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654049280,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654180352,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654245888,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654278656,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654295040,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654303232,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654307328,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654309376,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654310400,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654310912,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654311168,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654311296,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654311360,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654311392,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654311408,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654311416,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654311420,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654311422,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(654311423,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2129253813,32,FLEN)
NAN_BOXED(4591881,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060086272,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060086273,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060086275,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060086279,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060086287,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060086303,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060086335,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060086399,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060086527,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060086783,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060087295,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060088319,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060090367,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060094463,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060102655,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060119039,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060151807,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060217343,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060348415,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4060610559,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4061134847,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4062183423,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4064280575,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4064280576,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4066377728,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4067426304,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4067950592,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4068212736,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4068343808,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4068409344,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4068442112,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4068458496,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4068466688,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4068470784,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4068472832,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4068473856,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4068474368,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4068474624,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4068474752,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4068474816,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4068474848,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4068474864,32,FLEN)
NAN_BOXED(2129279115,32,FLEN)
NAN_BOXED(3222005489,32,FLEN)
NAN_BOXED(4068474872,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
