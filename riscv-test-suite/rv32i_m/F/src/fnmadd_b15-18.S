
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_2176:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1800fff; valaddr_reg:x3; val_offset:6528*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6528*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2177:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1801fff; valaddr_reg:x3; val_offset:6531*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6531*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2178:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1803fff; valaddr_reg:x3; val_offset:6534*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6534*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2179:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1807fff; valaddr_reg:x3; val_offset:6537*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6537*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2180:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe180ffff; valaddr_reg:x3; val_offset:6540*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6540*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2181:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe181ffff; valaddr_reg:x3; val_offset:6543*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6543*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2182:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe183ffff; valaddr_reg:x3; val_offset:6546*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6546*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2183:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe187ffff; valaddr_reg:x3; val_offset:6549*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6549*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2184:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe18fffff; valaddr_reg:x3; val_offset:6552*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6552*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2185:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe19fffff; valaddr_reg:x3; val_offset:6555*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6555*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2186:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1bfffff; valaddr_reg:x3; val_offset:6558*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6558*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2187:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1c00000; valaddr_reg:x3; val_offset:6561*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6561*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2188:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1e00000; valaddr_reg:x3; val_offset:6564*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6564*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2189:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1f00000; valaddr_reg:x3; val_offset:6567*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6567*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2190:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1f80000; valaddr_reg:x3; val_offset:6570*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6570*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2191:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fc0000; valaddr_reg:x3; val_offset:6573*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6573*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2192:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fe0000; valaddr_reg:x3; val_offset:6576*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6576*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2193:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ff0000; valaddr_reg:x3; val_offset:6579*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6579*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2194:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ff8000; valaddr_reg:x3; val_offset:6582*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6582*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2195:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ffc000; valaddr_reg:x3; val_offset:6585*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6585*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2196:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ffe000; valaddr_reg:x3; val_offset:6588*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6588*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2197:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fff000; valaddr_reg:x3; val_offset:6591*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6591*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2198:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fff800; valaddr_reg:x3; val_offset:6594*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6594*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2199:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fffc00; valaddr_reg:x3; val_offset:6597*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6597*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2200:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fffe00; valaddr_reg:x3; val_offset:6600*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6600*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2201:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ffff00; valaddr_reg:x3; val_offset:6603*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6603*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2202:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ffff80; valaddr_reg:x3; val_offset:6606*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6606*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2203:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ffffc0; valaddr_reg:x3; val_offset:6609*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6609*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2204:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ffffe0; valaddr_reg:x3; val_offset:6612*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6612*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2205:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fffff0; valaddr_reg:x3; val_offset:6615*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6615*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2206:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fffff8; valaddr_reg:x3; val_offset:6618*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6618*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2207:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fffffc; valaddr_reg:x3; val_offset:6621*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6621*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2208:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1fffffe; valaddr_reg:x3; val_offset:6624*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6624*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2209:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xc3 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xe1ffffff; valaddr_reg:x3; val_offset:6627*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6627*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2210:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff000001; valaddr_reg:x3; val_offset:6630*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6630*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2211:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff000003; valaddr_reg:x3; val_offset:6633*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6633*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2212:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff000007; valaddr_reg:x3; val_offset:6636*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6636*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2213:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff199999; valaddr_reg:x3; val_offset:6639*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6639*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2214:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff249249; valaddr_reg:x3; val_offset:6642*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6642*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2215:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff333333; valaddr_reg:x3; val_offset:6645*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6645*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2216:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:6648*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6648*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2217:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:6651*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6651*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2218:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff444444; valaddr_reg:x3; val_offset:6654*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6654*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2219:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:6657*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6657*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2220:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:6660*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6660*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2221:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff666666; valaddr_reg:x3; val_offset:6663*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6663*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2222:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:6666*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6666*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2223:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:6669*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6669*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2224:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:6672*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6672*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2225:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x564900 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x18eaef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d564900; op2val:0xc198eaef;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:6675*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6675*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2226:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x37000000; valaddr_reg:x3; val_offset:6678*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6678*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2227:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x37000001; valaddr_reg:x3; val_offset:6681*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6681*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2228:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x37000003; valaddr_reg:x3; val_offset:6684*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6684*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2229:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x37000007; valaddr_reg:x3; val_offset:6687*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6687*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2230:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3700000f; valaddr_reg:x3; val_offset:6690*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6690*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2231:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3700001f; valaddr_reg:x3; val_offset:6693*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6693*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2232:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3700003f; valaddr_reg:x3; val_offset:6696*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6696*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2233:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3700007f; valaddr_reg:x3; val_offset:6699*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6699*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2234:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x370000ff; valaddr_reg:x3; val_offset:6702*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6702*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2235:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x370001ff; valaddr_reg:x3; val_offset:6705*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6705*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2236:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x370003ff; valaddr_reg:x3; val_offset:6708*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6708*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2237:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x370007ff; valaddr_reg:x3; val_offset:6711*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6711*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2238:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x37000fff; valaddr_reg:x3; val_offset:6714*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6714*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2239:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x37001fff; valaddr_reg:x3; val_offset:6717*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6717*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2240:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x37003fff; valaddr_reg:x3; val_offset:6720*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6720*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2241:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x37007fff; valaddr_reg:x3; val_offset:6723*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6723*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2242:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3700ffff; valaddr_reg:x3; val_offset:6726*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6726*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2243:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3701ffff; valaddr_reg:x3; val_offset:6729*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6729*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2244:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3703ffff; valaddr_reg:x3; val_offset:6732*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6732*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2245:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3707ffff; valaddr_reg:x3; val_offset:6735*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6735*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2246:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x370fffff; valaddr_reg:x3; val_offset:6738*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6738*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2247:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x371fffff; valaddr_reg:x3; val_offset:6741*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6741*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2248:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x373fffff; valaddr_reg:x3; val_offset:6744*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6744*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2249:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x37400000; valaddr_reg:x3; val_offset:6747*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6747*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2250:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x37600000; valaddr_reg:x3; val_offset:6750*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6750*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2251:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x37700000; valaddr_reg:x3; val_offset:6753*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6753*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2252:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x37780000; valaddr_reg:x3; val_offset:6756*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6756*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2253:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377c0000; valaddr_reg:x3; val_offset:6759*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6759*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2254:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377e0000; valaddr_reg:x3; val_offset:6762*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6762*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2255:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377f0000; valaddr_reg:x3; val_offset:6765*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6765*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2256:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377f8000; valaddr_reg:x3; val_offset:6768*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6768*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2257:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377fc000; valaddr_reg:x3; val_offset:6771*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6771*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2258:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377fe000; valaddr_reg:x3; val_offset:6774*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6774*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2259:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377ff000; valaddr_reg:x3; val_offset:6777*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6777*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2260:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377ff800; valaddr_reg:x3; val_offset:6780*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6780*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2261:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377ffc00; valaddr_reg:x3; val_offset:6783*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6783*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2262:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377ffe00; valaddr_reg:x3; val_offset:6786*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6786*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2263:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377fff00; valaddr_reg:x3; val_offset:6789*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6789*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2264:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377fff80; valaddr_reg:x3; val_offset:6792*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6792*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2265:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377fffc0; valaddr_reg:x3; val_offset:6795*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6795*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2266:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377fffe0; valaddr_reg:x3; val_offset:6798*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6798*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2267:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377ffff0; valaddr_reg:x3; val_offset:6801*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6801*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2268:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377ffff8; valaddr_reg:x3; val_offset:6804*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6804*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2269:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377ffffc; valaddr_reg:x3; val_offset:6807*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6807*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2270:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377ffffe; valaddr_reg:x3; val_offset:6810*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6810*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2271:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x377fffff; valaddr_reg:x3; val_offset:6813*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6813*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2272:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3f800001; valaddr_reg:x3; val_offset:6816*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6816*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2273:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3f800003; valaddr_reg:x3; val_offset:6819*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6819*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2274:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3f800007; valaddr_reg:x3; val_offset:6822*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6822*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2275:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3f999999; valaddr_reg:x3; val_offset:6825*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6825*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2276:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:6828*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6828*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2277:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:6831*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6831*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2278:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:6834*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6834*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2279:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:6837*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6837*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2280:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:6840*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6840*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2281:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:6843*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6843*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2282:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:6846*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6846*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2283:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:6849*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6849*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2284:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:6852*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6852*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2285:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:6855*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6855*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2286:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:6858*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6858*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2287:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x586edd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x176670 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d586edd; op2val:0x1976670;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:6861*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6861*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2288:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf7000000; valaddr_reg:x3; val_offset:6864*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6864*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2289:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf7000001; valaddr_reg:x3; val_offset:6867*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6867*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2290:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf7000003; valaddr_reg:x3; val_offset:6870*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6870*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2291:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf7000007; valaddr_reg:x3; val_offset:6873*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6873*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2292:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf700000f; valaddr_reg:x3; val_offset:6876*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6876*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2293:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf700001f; valaddr_reg:x3; val_offset:6879*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6879*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2294:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf700003f; valaddr_reg:x3; val_offset:6882*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6882*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2295:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf700007f; valaddr_reg:x3; val_offset:6885*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6885*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2296:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf70000ff; valaddr_reg:x3; val_offset:6888*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6888*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2297:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf70001ff; valaddr_reg:x3; val_offset:6891*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6891*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2298:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf70003ff; valaddr_reg:x3; val_offset:6894*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6894*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2299:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf70007ff; valaddr_reg:x3; val_offset:6897*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6897*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2300:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf7000fff; valaddr_reg:x3; val_offset:6900*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6900*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2301:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf7001fff; valaddr_reg:x3; val_offset:6903*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6903*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2302:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf7003fff; valaddr_reg:x3; val_offset:6906*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6906*0 + 3*17*FLEN/8, x4, x1, x2)

inst_2303:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf7007fff; valaddr_reg:x3; val_offset:6909*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6909*0 + 3*17*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783266303,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783270399,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783278591,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783294975,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783327743,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783393279,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783524351,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3783786495,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3784310783,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3785359359,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3787456511,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3787456512,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3789553664,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3790602240,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791126528,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791388672,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791519744,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791585280,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791618048,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791634432,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791642624,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791646720,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791648768,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791649792,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650304,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650560,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650688,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650752,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650784,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650800,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650808,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650812,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650814,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(3791650815,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2102806784,32,FLEN)
NAN_BOXED(3248024303,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922746880,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922746881,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922746883,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922746887,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922746895,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922746911,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922746943,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922747007,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922747135,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922747391,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922747903,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922748927,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922750975,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922755071,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922763263,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922779647,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922812415,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(922877951,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(923009023,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(923271167,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(923795455,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(924844031,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(926941183,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(926941184,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(929038336,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(930086912,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(930611200,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(930873344,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931004416,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931069952,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931102720,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931119104,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931127296,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931131392,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931133440,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931134464,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931134976,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931135232,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931135360,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931135424,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931135456,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931135472,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931135480,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931135484,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931135486,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(931135487,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2102947549,32,FLEN)
NAN_BOXED(26699376,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4143972352,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4143972353,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4143972355,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4143972359,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4143972367,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4143972383,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4143972415,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4143972479,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4143972607,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4143972863,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4143973375,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4143974399,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4143976447,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4143980543,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4143988735,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4144005119,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
