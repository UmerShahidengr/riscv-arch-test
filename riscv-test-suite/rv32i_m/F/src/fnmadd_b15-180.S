
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_22912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0ea9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b3c0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0ea9; op2val:0x8045b3c0;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:68736*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68736*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0ea9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b3c0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0ea9; op2val:0x8045b3c0;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:68739*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68739*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0ea9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b3c0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0ea9; op2val:0x8045b3c0;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:68742*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68742*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0ea9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b3c0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0ea9; op2val:0x8045b3c0;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:68745*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68745*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0ea9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b3c0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0ea9; op2val:0x8045b3c0;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:68748*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68748*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0ea9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b3c0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0ea9; op2val:0x8045b3c0;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:68751*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68751*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0ea9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b3c0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0ea9; op2val:0x8045b3c0;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:68754*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68754*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0ea9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b3c0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0ea9; op2val:0x8045b3c0;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:68757*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68757*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0ea9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b3c0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0ea9; op2val:0x8045b3c0;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:68760*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68760*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0ea9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b3c0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0ea9; op2val:0x8045b3c0;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:68763*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68763*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b0ea9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x45b3c0 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb0ea9; op2val:0x8045b3c0;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:68766*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68766*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xbf800001; valaddr_reg:x3; val_offset:68769*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68769*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xbf800003; valaddr_reg:x3; val_offset:68772*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68772*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xbf800007; valaddr_reg:x3; val_offset:68775*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68775*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xbf999999; valaddr_reg:x3; val_offset:68778*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68778*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:68781*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68781*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:68784*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68784*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:68787*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68787*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:68790*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68790*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:68793*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68793*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:68796*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68796*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:68799*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68799*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:68802*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68802*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:68805*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68805*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:68808*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68808*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:68811*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68811*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:68814*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68814*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc8000000; valaddr_reg:x3; val_offset:68817*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68817*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc8000001; valaddr_reg:x3; val_offset:68820*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68820*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc8000003; valaddr_reg:x3; val_offset:68823*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68823*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc8000007; valaddr_reg:x3; val_offset:68826*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68826*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc800000f; valaddr_reg:x3; val_offset:68829*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68829*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc800001f; valaddr_reg:x3; val_offset:68832*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68832*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc800003f; valaddr_reg:x3; val_offset:68835*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68835*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc800007f; valaddr_reg:x3; val_offset:68838*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68838*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc80000ff; valaddr_reg:x3; val_offset:68841*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68841*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc80001ff; valaddr_reg:x3; val_offset:68844*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68844*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc80003ff; valaddr_reg:x3; val_offset:68847*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68847*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc80007ff; valaddr_reg:x3; val_offset:68850*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68850*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc8000fff; valaddr_reg:x3; val_offset:68853*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68853*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc8001fff; valaddr_reg:x3; val_offset:68856*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68856*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc8003fff; valaddr_reg:x3; val_offset:68859*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68859*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc8007fff; valaddr_reg:x3; val_offset:68862*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68862*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc800ffff; valaddr_reg:x3; val_offset:68865*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68865*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc801ffff; valaddr_reg:x3; val_offset:68868*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68868*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc803ffff; valaddr_reg:x3; val_offset:68871*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68871*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc807ffff; valaddr_reg:x3; val_offset:68874*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68874*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc80fffff; valaddr_reg:x3; val_offset:68877*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68877*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc81fffff; valaddr_reg:x3; val_offset:68880*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68880*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc83fffff; valaddr_reg:x3; val_offset:68883*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68883*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc8400000; valaddr_reg:x3; val_offset:68886*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68886*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc8600000; valaddr_reg:x3; val_offset:68889*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68889*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc8700000; valaddr_reg:x3; val_offset:68892*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68892*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc8780000; valaddr_reg:x3; val_offset:68895*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68895*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87c0000; valaddr_reg:x3; val_offset:68898*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68898*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87e0000; valaddr_reg:x3; val_offset:68901*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68901*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87f0000; valaddr_reg:x3; val_offset:68904*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68904*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87f8000; valaddr_reg:x3; val_offset:68907*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68907*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87fc000; valaddr_reg:x3; val_offset:68910*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68910*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87fe000; valaddr_reg:x3; val_offset:68913*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68913*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87ff000; valaddr_reg:x3; val_offset:68916*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68916*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87ff800; valaddr_reg:x3; val_offset:68919*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68919*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87ffc00; valaddr_reg:x3; val_offset:68922*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68922*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87ffe00; valaddr_reg:x3; val_offset:68925*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68925*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87fff00; valaddr_reg:x3; val_offset:68928*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68928*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87fff80; valaddr_reg:x3; val_offset:68931*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68931*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87fffc0; valaddr_reg:x3; val_offset:68934*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68934*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87fffe0; valaddr_reg:x3; val_offset:68937*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68937*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87ffff0; valaddr_reg:x3; val_offset:68940*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68940*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87ffff8; valaddr_reg:x3; val_offset:68943*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68943*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87ffffc; valaddr_reg:x3; val_offset:68946*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68946*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87ffffe; valaddr_reg:x3; val_offset:68949*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68949*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ba6e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4586b9 and fs3 == 1 and fe3 == 0x90 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeba6e4; op2val:0x804586b9;
op3val:0xc87fffff; valaddr_reg:x3; val_offset:68952*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68952*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f000000; valaddr_reg:x3; val_offset:68955*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68955*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f000001; valaddr_reg:x3; val_offset:68958*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68958*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f000003; valaddr_reg:x3; val_offset:68961*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68961*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f000007; valaddr_reg:x3; val_offset:68964*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68964*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f00000f; valaddr_reg:x3; val_offset:68967*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68967*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f00001f; valaddr_reg:x3; val_offset:68970*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68970*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f00003f; valaddr_reg:x3; val_offset:68973*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68973*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f00007f; valaddr_reg:x3; val_offset:68976*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68976*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f0000ff; valaddr_reg:x3; val_offset:68979*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68979*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f0001ff; valaddr_reg:x3; val_offset:68982*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68982*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f0003ff; valaddr_reg:x3; val_offset:68985*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68985*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f0007ff; valaddr_reg:x3; val_offset:68988*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68988*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f000fff; valaddr_reg:x3; val_offset:68991*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68991*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f001fff; valaddr_reg:x3; val_offset:68994*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68994*0 + 3*179*FLEN/8, x4, x1, x2)

inst_22999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f003fff; valaddr_reg:x3; val_offset:68997*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68997*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f007fff; valaddr_reg:x3; val_offset:69000*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69000*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f00ffff; valaddr_reg:x3; val_offset:69003*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69003*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f01ffff; valaddr_reg:x3; val_offset:69006*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69006*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f03ffff; valaddr_reg:x3; val_offset:69009*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69009*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f07ffff; valaddr_reg:x3; val_offset:69012*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69012*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f0fffff; valaddr_reg:x3; val_offset:69015*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69015*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f1fffff; valaddr_reg:x3; val_offset:69018*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69018*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f3fffff; valaddr_reg:x3; val_offset:69021*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69021*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f400000; valaddr_reg:x3; val_offset:69024*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69024*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f600000; valaddr_reg:x3; val_offset:69027*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69027*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f700000; valaddr_reg:x3; val_offset:69030*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69030*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f780000; valaddr_reg:x3; val_offset:69033*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69033*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7c0000; valaddr_reg:x3; val_offset:69036*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69036*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7e0000; valaddr_reg:x3; val_offset:69039*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69039*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7f0000; valaddr_reg:x3; val_offset:69042*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69042*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7f8000; valaddr_reg:x3; val_offset:69045*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69045*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7fc000; valaddr_reg:x3; val_offset:69048*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69048*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7fe000; valaddr_reg:x3; val_offset:69051*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69051*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7ff000; valaddr_reg:x3; val_offset:69054*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69054*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7ff800; valaddr_reg:x3; val_offset:69057*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69057*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7ffc00; valaddr_reg:x3; val_offset:69060*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69060*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7ffe00; valaddr_reg:x3; val_offset:69063*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69063*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7fff00; valaddr_reg:x3; val_offset:69066*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69066*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7fff80; valaddr_reg:x3; val_offset:69069*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69069*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7fffc0; valaddr_reg:x3; val_offset:69072*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69072*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7fffe0; valaddr_reg:x3; val_offset:69075*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69075*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7ffff0; valaddr_reg:x3; val_offset:69078*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69078*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7ffff8; valaddr_reg:x3; val_offset:69081*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69081*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7ffffc; valaddr_reg:x3; val_offset:69084*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69084*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7ffffe; valaddr_reg:x3; val_offset:69087*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69087*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x3e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x1f7fffff; valaddr_reg:x3; val_offset:69090*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69090*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3f800001; valaddr_reg:x3; val_offset:69093*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69093*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3f800003; valaddr_reg:x3; val_offset:69096*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69096*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3f800007; valaddr_reg:x3; val_offset:69099*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69099*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3f999999; valaddr_reg:x3; val_offset:69102*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69102*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:69105*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69105*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:69108*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69108*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:69111*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69111*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:69114*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69114*0 + 3*179*FLEN/8, x4, x1, x2)

inst_23039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c1659 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4565e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec1659; op2val:0x4565e6;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:69117*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69117*0 + 3*179*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129333929,32,FLEN)
NAN_BOXED(2152051648,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2129333929,32,FLEN)
NAN_BOXED(2152051648,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2129333929,32,FLEN)
NAN_BOXED(2152051648,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2129333929,32,FLEN)
NAN_BOXED(2152051648,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2129333929,32,FLEN)
NAN_BOXED(2152051648,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2129333929,32,FLEN)
NAN_BOXED(2152051648,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2129333929,32,FLEN)
NAN_BOXED(2152051648,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2129333929,32,FLEN)
NAN_BOXED(2152051648,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2129333929,32,FLEN)
NAN_BOXED(2152051648,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2129333929,32,FLEN)
NAN_BOXED(2152051648,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2129333929,32,FLEN)
NAN_BOXED(2152051648,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355443200,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355443201,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355443203,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355443207,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355443215,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355443231,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355443263,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355443327,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355443455,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355443711,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355444223,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355445247,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355447295,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355451391,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355459583,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355475967,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355508735,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355574271,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355705343,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3355967487,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3356491775,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3357540351,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3359637503,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3359637504,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3361734656,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3362783232,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363307520,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363569664,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363700736,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363766272,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363799040,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363815424,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363823616,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363827712,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363829760,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363830784,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363831296,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363831552,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363831680,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363831744,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363831776,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363831792,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363831800,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363831804,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363831806,32,FLEN)
NAN_BOXED(2129372900,32,FLEN)
NAN_BOXED(2152040121,32,FLEN)
NAN_BOXED(3363831807,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093696,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093697,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093699,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093703,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093711,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093727,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093759,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093823,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520093951,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520094207,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520094719,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520095743,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520097791,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520101887,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520110079,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520126463,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520159231,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520224767,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520355839,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(520617983,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(521142271,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(522190847,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(524287999,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(524288000,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(526385152,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(527433728,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(527958016,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528220160,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528351232,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528416768,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528449536,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528465920,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528474112,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528478208,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528480256,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528481280,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528481792,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482048,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482176,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482240,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482272,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482288,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482296,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482300,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482302,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(528482303,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2129401433,32,FLEN)
NAN_BOXED(4548070,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
