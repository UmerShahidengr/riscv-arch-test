
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_23552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:70656*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70656*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:70659*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70659*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:70662*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70662*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:70665*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70665*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:70668*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70668*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:70671*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70671*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:70674*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70674*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49800000; valaddr_reg:x3; val_offset:70677*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70677*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49800001; valaddr_reg:x3; val_offset:70680*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70680*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49800003; valaddr_reg:x3; val_offset:70683*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70683*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49800007; valaddr_reg:x3; val_offset:70686*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70686*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x4980000f; valaddr_reg:x3; val_offset:70689*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70689*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x4980001f; valaddr_reg:x3; val_offset:70692*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70692*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x4980003f; valaddr_reg:x3; val_offset:70695*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70695*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x4980007f; valaddr_reg:x3; val_offset:70698*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70698*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x498000ff; valaddr_reg:x3; val_offset:70701*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70701*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x498001ff; valaddr_reg:x3; val_offset:70704*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70704*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x498003ff; valaddr_reg:x3; val_offset:70707*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70707*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x498007ff; valaddr_reg:x3; val_offset:70710*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70710*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49800fff; valaddr_reg:x3; val_offset:70713*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70713*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49801fff; valaddr_reg:x3; val_offset:70716*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70716*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49803fff; valaddr_reg:x3; val_offset:70719*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70719*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49807fff; valaddr_reg:x3; val_offset:70722*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70722*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x4980ffff; valaddr_reg:x3; val_offset:70725*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70725*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x4981ffff; valaddr_reg:x3; val_offset:70728*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70728*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x4983ffff; valaddr_reg:x3; val_offset:70731*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70731*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x4987ffff; valaddr_reg:x3; val_offset:70734*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70734*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x498fffff; valaddr_reg:x3; val_offset:70737*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70737*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x499fffff; valaddr_reg:x3; val_offset:70740*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70740*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49bfffff; valaddr_reg:x3; val_offset:70743*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70743*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49c00000; valaddr_reg:x3; val_offset:70746*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70746*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49e00000; valaddr_reg:x3; val_offset:70749*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70749*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49f00000; valaddr_reg:x3; val_offset:70752*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70752*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49f80000; valaddr_reg:x3; val_offset:70755*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70755*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49fc0000; valaddr_reg:x3; val_offset:70758*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70758*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49fe0000; valaddr_reg:x3; val_offset:70761*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70761*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49ff0000; valaddr_reg:x3; val_offset:70764*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70764*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49ff8000; valaddr_reg:x3; val_offset:70767*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70767*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49ffc000; valaddr_reg:x3; val_offset:70770*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70770*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49ffe000; valaddr_reg:x3; val_offset:70773*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70773*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49fff000; valaddr_reg:x3; val_offset:70776*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70776*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49fff800; valaddr_reg:x3; val_offset:70779*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70779*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49fffc00; valaddr_reg:x3; val_offset:70782*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70782*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49fffe00; valaddr_reg:x3; val_offset:70785*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70785*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49ffff00; valaddr_reg:x3; val_offset:70788*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70788*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49ffff80; valaddr_reg:x3; val_offset:70791*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70791*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49ffffc0; valaddr_reg:x3; val_offset:70794*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70794*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49ffffe0; valaddr_reg:x3; val_offset:70797*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70797*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49fffff0; valaddr_reg:x3; val_offset:70800*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70800*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49fffff8; valaddr_reg:x3; val_offset:70803*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70803*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49fffffc; valaddr_reg:x3; val_offset:70806*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70806*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49fffffe; valaddr_reg:x3; val_offset:70809*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70809*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x723764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x43a45a and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef23764; op2val:0x43a45a;
op3val:0x49ffffff; valaddr_reg:x3; val_offset:70812*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70812*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a000000; valaddr_reg:x3; val_offset:70815*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70815*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a000001; valaddr_reg:x3; val_offset:70818*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70818*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a000003; valaddr_reg:x3; val_offset:70821*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70821*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a000007; valaddr_reg:x3; val_offset:70824*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70824*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a00000f; valaddr_reg:x3; val_offset:70827*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70827*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a00001f; valaddr_reg:x3; val_offset:70830*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70830*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a00003f; valaddr_reg:x3; val_offset:70833*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70833*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a00007f; valaddr_reg:x3; val_offset:70836*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70836*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a0000ff; valaddr_reg:x3; val_offset:70839*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70839*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a0001ff; valaddr_reg:x3; val_offset:70842*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70842*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a0003ff; valaddr_reg:x3; val_offset:70845*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70845*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a0007ff; valaddr_reg:x3; val_offset:70848*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70848*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a000fff; valaddr_reg:x3; val_offset:70851*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70851*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a001fff; valaddr_reg:x3; val_offset:70854*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70854*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a003fff; valaddr_reg:x3; val_offset:70857*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70857*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a007fff; valaddr_reg:x3; val_offset:70860*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70860*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a00ffff; valaddr_reg:x3; val_offset:70863*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70863*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a01ffff; valaddr_reg:x3; val_offset:70866*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70866*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a03ffff; valaddr_reg:x3; val_offset:70869*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70869*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a07ffff; valaddr_reg:x3; val_offset:70872*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70872*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a0fffff; valaddr_reg:x3; val_offset:70875*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70875*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a1fffff; valaddr_reg:x3; val_offset:70878*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70878*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a3fffff; valaddr_reg:x3; val_offset:70881*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70881*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a400000; valaddr_reg:x3; val_offset:70884*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70884*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a600000; valaddr_reg:x3; val_offset:70887*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70887*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a700000; valaddr_reg:x3; val_offset:70890*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70890*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a780000; valaddr_reg:x3; val_offset:70893*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70893*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7c0000; valaddr_reg:x3; val_offset:70896*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70896*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7e0000; valaddr_reg:x3; val_offset:70899*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70899*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7f0000; valaddr_reg:x3; val_offset:70902*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70902*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7f8000; valaddr_reg:x3; val_offset:70905*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70905*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7fc000; valaddr_reg:x3; val_offset:70908*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70908*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7fe000; valaddr_reg:x3; val_offset:70911*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70911*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7ff000; valaddr_reg:x3; val_offset:70914*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70914*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7ff800; valaddr_reg:x3; val_offset:70917*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70917*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7ffc00; valaddr_reg:x3; val_offset:70920*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70920*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7ffe00; valaddr_reg:x3; val_offset:70923*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70923*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7fff00; valaddr_reg:x3; val_offset:70926*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70926*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7fff80; valaddr_reg:x3; val_offset:70929*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70929*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7fffc0; valaddr_reg:x3; val_offset:70932*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70932*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7fffe0; valaddr_reg:x3; val_offset:70935*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70935*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7ffff0; valaddr_reg:x3; val_offset:70938*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70938*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7ffff8; valaddr_reg:x3; val_offset:70941*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70941*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7ffffc; valaddr_reg:x3; val_offset:70944*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70944*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7ffffe; valaddr_reg:x3; val_offset:70947*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70947*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7a7fffff; valaddr_reg:x3; val_offset:70950*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70950*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7f000001; valaddr_reg:x3; val_offset:70953*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70953*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7f000003; valaddr_reg:x3; val_offset:70956*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70956*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7f000007; valaddr_reg:x3; val_offset:70959*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70959*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7f199999; valaddr_reg:x3; val_offset:70962*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70962*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7f249249; valaddr_reg:x3; val_offset:70965*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70965*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7f333333; valaddr_reg:x3; val_offset:70968*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70968*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:70971*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70971*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:70974*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70974*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7f444444; valaddr_reg:x3; val_offset:70977*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70977*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:70980*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70980*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:70983*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70983*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7f666666; valaddr_reg:x3; val_offset:70986*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70986*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:70989*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70989*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:70992*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70992*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:70995*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70995*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735a70 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06a6e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35a70; op2val:0x4006a6e7;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:70998*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 70998*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73fb84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x432701 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef3fb84; op2val:0x432701;
op3val:0x32800000; valaddr_reg:x3; val_offset:71001*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71001*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73fb84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x432701 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef3fb84; op2val:0x432701;
op3val:0x32800001; valaddr_reg:x3; val_offset:71004*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71004*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73fb84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x432701 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef3fb84; op2val:0x432701;
op3val:0x32800003; valaddr_reg:x3; val_offset:71007*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71007*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73fb84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x432701 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef3fb84; op2val:0x432701;
op3val:0x32800007; valaddr_reg:x3; val_offset:71010*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71010*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73fb84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x432701 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef3fb84; op2val:0x432701;
op3val:0x3280000f; valaddr_reg:x3; val_offset:71013*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71013*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73fb84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x432701 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef3fb84; op2val:0x432701;
op3val:0x3280001f; valaddr_reg:x3; val_offset:71016*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71016*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73fb84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x432701 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef3fb84; op2val:0x432701;
op3val:0x3280003f; valaddr_reg:x3; val_offset:71019*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71019*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73fb84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x432701 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef3fb84; op2val:0x432701;
op3val:0x3280007f; valaddr_reg:x3; val_offset:71022*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71022*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73fb84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x432701 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef3fb84; op2val:0x432701;
op3val:0x328000ff; valaddr_reg:x3; val_offset:71025*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71025*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73fb84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x432701 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef3fb84; op2val:0x432701;
op3val:0x328001ff; valaddr_reg:x3; val_offset:71028*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71028*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73fb84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x432701 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef3fb84; op2val:0x432701;
op3val:0x328003ff; valaddr_reg:x3; val_offset:71031*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71031*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73fb84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x432701 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef3fb84; op2val:0x432701;
op3val:0x328007ff; valaddr_reg:x3; val_offset:71034*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71034*0 + 3*184*FLEN/8, x4, x1, x2)

inst_23679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73fb84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x432701 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef3fb84; op2val:0x432701;
op3val:0x32800fff; valaddr_reg:x3; val_offset:71037*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71037*0 + 3*184*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233125376,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233125377,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233125379,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233125383,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233125391,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233125407,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233125439,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233125503,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233125631,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233125887,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233126399,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233127423,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233129471,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233133567,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233141759,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233158143,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233190911,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233256447,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233387519,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1233649663,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1234173951,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1235222527,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1237319679,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1237319680,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1239416832,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1240465408,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1240989696,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241251840,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241382912,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241448448,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241481216,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241497600,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241505792,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241509888,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241511936,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241512960,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241513472,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241513728,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241513856,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241513920,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241513952,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241513968,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241513976,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241513980,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241513982,32,FLEN)
NAN_BOXED(2129803108,32,FLEN)
NAN_BOXED(4432986,32,FLEN)
NAN_BOXED(1241513983,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046820352,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046820353,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046820355,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046820359,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046820367,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046820383,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046820415,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046820479,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046820607,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046820863,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046821375,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046822399,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046824447,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046828543,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046836735,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046853119,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046885887,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2046951423,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2047082495,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2047344639,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2047868927,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2048917503,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2051014655,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2051014656,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2053111808,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2054160384,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2054684672,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2054946816,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055077888,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055143424,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055176192,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055192576,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055200768,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055204864,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055206912,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055207936,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055208448,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055208704,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055208832,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055208896,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055208928,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055208944,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055208952,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055208956,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055208958,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2055208959,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2129877616,32,FLEN)
NAN_BOXED(1074177767,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2129918852,32,FLEN)
NAN_BOXED(4400897,32,FLEN)
NAN_BOXED(847249408,32,FLEN)
NAN_BOXED(2129918852,32,FLEN)
NAN_BOXED(4400897,32,FLEN)
NAN_BOXED(847249409,32,FLEN)
NAN_BOXED(2129918852,32,FLEN)
NAN_BOXED(4400897,32,FLEN)
NAN_BOXED(847249411,32,FLEN)
NAN_BOXED(2129918852,32,FLEN)
NAN_BOXED(4400897,32,FLEN)
NAN_BOXED(847249415,32,FLEN)
NAN_BOXED(2129918852,32,FLEN)
NAN_BOXED(4400897,32,FLEN)
NAN_BOXED(847249423,32,FLEN)
NAN_BOXED(2129918852,32,FLEN)
NAN_BOXED(4400897,32,FLEN)
NAN_BOXED(847249439,32,FLEN)
NAN_BOXED(2129918852,32,FLEN)
NAN_BOXED(4400897,32,FLEN)
NAN_BOXED(847249471,32,FLEN)
NAN_BOXED(2129918852,32,FLEN)
NAN_BOXED(4400897,32,FLEN)
NAN_BOXED(847249535,32,FLEN)
NAN_BOXED(2129918852,32,FLEN)
NAN_BOXED(4400897,32,FLEN)
NAN_BOXED(847249663,32,FLEN)
NAN_BOXED(2129918852,32,FLEN)
NAN_BOXED(4400897,32,FLEN)
NAN_BOXED(847249919,32,FLEN)
NAN_BOXED(2129918852,32,FLEN)
NAN_BOXED(4400897,32,FLEN)
NAN_BOXED(847250431,32,FLEN)
NAN_BOXED(2129918852,32,FLEN)
NAN_BOXED(4400897,32,FLEN)
NAN_BOXED(847251455,32,FLEN)
NAN_BOXED(2129918852,32,FLEN)
NAN_BOXED(4400897,32,FLEN)
NAN_BOXED(847253503,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
