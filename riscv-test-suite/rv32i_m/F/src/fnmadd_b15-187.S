
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_23808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x85000001; valaddr_reg:x3; val_offset:71424*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71424*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x85000003; valaddr_reg:x3; val_offset:71427*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71427*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x85000007; valaddr_reg:x3; val_offset:71430*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71430*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x8500000f; valaddr_reg:x3; val_offset:71433*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71433*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x8500001f; valaddr_reg:x3; val_offset:71436*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71436*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x8500003f; valaddr_reg:x3; val_offset:71439*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71439*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x8500007f; valaddr_reg:x3; val_offset:71442*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71442*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x850000ff; valaddr_reg:x3; val_offset:71445*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71445*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x850001ff; valaddr_reg:x3; val_offset:71448*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71448*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x850003ff; valaddr_reg:x3; val_offset:71451*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71451*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x850007ff; valaddr_reg:x3; val_offset:71454*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71454*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x85000fff; valaddr_reg:x3; val_offset:71457*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71457*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x85001fff; valaddr_reg:x3; val_offset:71460*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71460*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x85003fff; valaddr_reg:x3; val_offset:71463*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71463*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x85007fff; valaddr_reg:x3; val_offset:71466*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71466*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x8500ffff; valaddr_reg:x3; val_offset:71469*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71469*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x8501ffff; valaddr_reg:x3; val_offset:71472*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71472*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x8503ffff; valaddr_reg:x3; val_offset:71475*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71475*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x8507ffff; valaddr_reg:x3; val_offset:71478*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71478*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x850fffff; valaddr_reg:x3; val_offset:71481*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71481*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x851fffff; valaddr_reg:x3; val_offset:71484*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71484*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x853fffff; valaddr_reg:x3; val_offset:71487*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71487*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x85400000; valaddr_reg:x3; val_offset:71490*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71490*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x85600000; valaddr_reg:x3; val_offset:71493*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71493*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x85700000; valaddr_reg:x3; val_offset:71496*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71496*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x85780000; valaddr_reg:x3; val_offset:71499*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71499*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857c0000; valaddr_reg:x3; val_offset:71502*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71502*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857e0000; valaddr_reg:x3; val_offset:71505*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71505*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857f0000; valaddr_reg:x3; val_offset:71508*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71508*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857f8000; valaddr_reg:x3; val_offset:71511*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71511*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857fc000; valaddr_reg:x3; val_offset:71514*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71514*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857fe000; valaddr_reg:x3; val_offset:71517*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71517*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857ff000; valaddr_reg:x3; val_offset:71520*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71520*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857ff800; valaddr_reg:x3; val_offset:71523*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71523*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857ffc00; valaddr_reg:x3; val_offset:71526*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71526*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857ffe00; valaddr_reg:x3; val_offset:71529*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71529*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857fff00; valaddr_reg:x3; val_offset:71532*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71532*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857fff80; valaddr_reg:x3; val_offset:71535*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71535*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857fffc0; valaddr_reg:x3; val_offset:71538*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71538*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857fffe0; valaddr_reg:x3; val_offset:71541*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71541*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857ffff0; valaddr_reg:x3; val_offset:71544*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71544*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857ffff8; valaddr_reg:x3; val_offset:71547*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71547*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857ffffc; valaddr_reg:x3; val_offset:71550*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71550*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857ffffe; valaddr_reg:x3; val_offset:71553*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71553*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x756b26 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef56b26; op2val:0x80000000;
op3val:0x857fffff; valaddr_reg:x3; val_offset:71556*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71556*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77800000; valaddr_reg:x3; val_offset:71559*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71559*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77800001; valaddr_reg:x3; val_offset:71562*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71562*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77800003; valaddr_reg:x3; val_offset:71565*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71565*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77800007; valaddr_reg:x3; val_offset:71568*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71568*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7780000f; valaddr_reg:x3; val_offset:71571*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71571*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7780001f; valaddr_reg:x3; val_offset:71574*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71574*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7780003f; valaddr_reg:x3; val_offset:71577*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71577*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7780007f; valaddr_reg:x3; val_offset:71580*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71580*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x778000ff; valaddr_reg:x3; val_offset:71583*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71583*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x778001ff; valaddr_reg:x3; val_offset:71586*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71586*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x778003ff; valaddr_reg:x3; val_offset:71589*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71589*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x778007ff; valaddr_reg:x3; val_offset:71592*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71592*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77800fff; valaddr_reg:x3; val_offset:71595*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71595*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77801fff; valaddr_reg:x3; val_offset:71598*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71598*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77803fff; valaddr_reg:x3; val_offset:71601*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71601*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77807fff; valaddr_reg:x3; val_offset:71604*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71604*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7780ffff; valaddr_reg:x3; val_offset:71607*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71607*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7781ffff; valaddr_reg:x3; val_offset:71610*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71610*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7783ffff; valaddr_reg:x3; val_offset:71613*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71613*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7787ffff; valaddr_reg:x3; val_offset:71616*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71616*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x778fffff; valaddr_reg:x3; val_offset:71619*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71619*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x779fffff; valaddr_reg:x3; val_offset:71622*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71622*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77bfffff; valaddr_reg:x3; val_offset:71625*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71625*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77c00000; valaddr_reg:x3; val_offset:71628*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71628*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77e00000; valaddr_reg:x3; val_offset:71631*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71631*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77f00000; valaddr_reg:x3; val_offset:71634*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71634*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77f80000; valaddr_reg:x3; val_offset:71637*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71637*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77fc0000; valaddr_reg:x3; val_offset:71640*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71640*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77fe0000; valaddr_reg:x3; val_offset:71643*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71643*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77ff0000; valaddr_reg:x3; val_offset:71646*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71646*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77ff8000; valaddr_reg:x3; val_offset:71649*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71649*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77ffc000; valaddr_reg:x3; val_offset:71652*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71652*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77ffe000; valaddr_reg:x3; val_offset:71655*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71655*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77fff000; valaddr_reg:x3; val_offset:71658*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71658*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77fff800; valaddr_reg:x3; val_offset:71661*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71661*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77fffc00; valaddr_reg:x3; val_offset:71664*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71664*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77fffe00; valaddr_reg:x3; val_offset:71667*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71667*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77ffff00; valaddr_reg:x3; val_offset:71670*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71670*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77ffff80; valaddr_reg:x3; val_offset:71673*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71673*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77ffffc0; valaddr_reg:x3; val_offset:71676*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71676*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77ffffe0; valaddr_reg:x3; val_offset:71679*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71679*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77fffff0; valaddr_reg:x3; val_offset:71682*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71682*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77fffff8; valaddr_reg:x3; val_offset:71685*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71685*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77fffffc; valaddr_reg:x3; val_offset:71688*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71688*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77fffffe; valaddr_reg:x3; val_offset:71691*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71691*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x77ffffff; valaddr_reg:x3; val_offset:71694*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71694*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7f000001; valaddr_reg:x3; val_offset:71697*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71697*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7f000003; valaddr_reg:x3; val_offset:71700*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71700*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7f000007; valaddr_reg:x3; val_offset:71703*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71703*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7f199999; valaddr_reg:x3; val_offset:71706*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71706*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7f249249; valaddr_reg:x3; val_offset:71709*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71709*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7f333333; valaddr_reg:x3; val_offset:71712*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71712*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:71715*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71715*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:71718*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71718*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7f444444; valaddr_reg:x3; val_offset:71721*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71721*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:71724*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71724*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:71727*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71727*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7f666666; valaddr_reg:x3; val_offset:71730*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71730*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:71733*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71733*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:71736*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71736*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:71739*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71739*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75e57e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x054263 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5e57e; op2val:0x40054263;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:71742*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71742*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:71745*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71745*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:71748*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71748*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:71751*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71751*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:71754*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71754*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:71757*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71757*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:71760*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71760*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:71763*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71763*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:71766*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71766*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:71769*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71769*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:71772*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71772*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:71775*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71775*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:71778*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71778*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:71781*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71781*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:71784*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71784*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:71787*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71787*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:71790*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71790*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0xf800000; valaddr_reg:x3; val_offset:71793*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71793*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0xf800001; valaddr_reg:x3; val_offset:71796*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71796*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0xf800003; valaddr_reg:x3; val_offset:71799*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71799*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0xf800007; valaddr_reg:x3; val_offset:71802*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71802*0 + 3*186*FLEN/8, x4, x1, x2)

inst_23935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x771749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef71749; op2val:0x0;
op3val:0xf80000f; valaddr_reg:x3; val_offset:71805*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 71805*0 + 3*186*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369729,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369731,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369735,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369743,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369759,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369791,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369855,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369983,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231370239,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231370751,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231371775,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231373823,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231377919,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231386111,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231402495,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231435263,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231500799,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231631871,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231894015,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2232418303,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2233466879,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2235564031,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2235564032,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2237661184,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2238709760,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239234048,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239496192,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239627264,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239692800,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239725568,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239741952,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239750144,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239754240,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239756288,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239757312,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239757824,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758080,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758208,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758272,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758304,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758320,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758328,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758332,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758334,32,FLEN)
NAN_BOXED(2130012966,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758335,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2004877312,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2004877313,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2004877315,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2004877319,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2004877327,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2004877343,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2004877375,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2004877439,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2004877567,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2004877823,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2004878335,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2004879359,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2004881407,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2004885503,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2004893695,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2004910079,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2004942847,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2005008383,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2005139455,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2005401599,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2005925887,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2006974463,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2009071615,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2009071616,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2011168768,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2012217344,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2012741632,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013003776,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013134848,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013200384,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013233152,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013249536,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013257728,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013261824,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013263872,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013264896,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013265408,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013265664,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013265792,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013265856,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013265888,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013265904,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013265912,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013265916,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013265918,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2013265919,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2130044286,32,FLEN)
NAN_BOXED(1074086499,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046848,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046849,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046851,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046855,32,FLEN)
NAN_BOXED(2130122569,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046863,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
