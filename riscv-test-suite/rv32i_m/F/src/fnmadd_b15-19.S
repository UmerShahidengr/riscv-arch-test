
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_2304:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf700ffff; valaddr_reg:x3; val_offset:6912*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6912*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2305:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf701ffff; valaddr_reg:x3; val_offset:6915*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6915*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2306:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf703ffff; valaddr_reg:x3; val_offset:6918*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6918*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2307:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf707ffff; valaddr_reg:x3; val_offset:6921*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6921*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2308:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf70fffff; valaddr_reg:x3; val_offset:6924*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6924*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2309:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf71fffff; valaddr_reg:x3; val_offset:6927*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6927*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2310:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf73fffff; valaddr_reg:x3; val_offset:6930*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6930*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2311:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf7400000; valaddr_reg:x3; val_offset:6933*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6933*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2312:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf7600000; valaddr_reg:x3; val_offset:6936*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6936*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2313:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf7700000; valaddr_reg:x3; val_offset:6939*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6939*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2314:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf7780000; valaddr_reg:x3; val_offset:6942*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6942*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2315:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77c0000; valaddr_reg:x3; val_offset:6945*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6945*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2316:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77e0000; valaddr_reg:x3; val_offset:6948*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6948*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2317:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77f0000; valaddr_reg:x3; val_offset:6951*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6951*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2318:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77f8000; valaddr_reg:x3; val_offset:6954*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6954*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2319:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77fc000; valaddr_reg:x3; val_offset:6957*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6957*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2320:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77fe000; valaddr_reg:x3; val_offset:6960*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6960*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2321:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77ff000; valaddr_reg:x3; val_offset:6963*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6963*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2322:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77ff800; valaddr_reg:x3; val_offset:6966*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6966*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2323:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77ffc00; valaddr_reg:x3; val_offset:6969*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6969*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2324:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77ffe00; valaddr_reg:x3; val_offset:6972*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6972*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2325:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77fff00; valaddr_reg:x3; val_offset:6975*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6975*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2326:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77fff80; valaddr_reg:x3; val_offset:6978*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6978*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2327:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77fffc0; valaddr_reg:x3; val_offset:6981*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6981*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2328:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77fffe0; valaddr_reg:x3; val_offset:6984*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6984*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2329:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77ffff0; valaddr_reg:x3; val_offset:6987*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6987*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2330:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77ffff8; valaddr_reg:x3; val_offset:6990*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6990*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2331:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77ffffc; valaddr_reg:x3; val_offset:6993*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6993*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2332:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77ffffe; valaddr_reg:x3; val_offset:6996*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6996*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2333:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xee and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xf77fffff; valaddr_reg:x3; val_offset:6999*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6999*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2334:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xff000001; valaddr_reg:x3; val_offset:7002*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7002*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2335:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xff000003; valaddr_reg:x3; val_offset:7005*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7005*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2336:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xff000007; valaddr_reg:x3; val_offset:7008*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7008*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2337:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xff199999; valaddr_reg:x3; val_offset:7011*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7011*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2338:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xff249249; valaddr_reg:x3; val_offset:7014*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7014*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2339:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xff333333; valaddr_reg:x3; val_offset:7017*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7017*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2340:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:7020*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7020*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2341:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:7023*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7023*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2342:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xff444444; valaddr_reg:x3; val_offset:7026*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7026*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2343:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:7029*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7029*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2344:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:7032*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7032*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2345:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xff666666; valaddr_reg:x3; val_offset:7035*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7035*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2346:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:7038*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7038*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2347:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:7041*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7041*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2348:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:7044*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7044*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2349:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5ed740 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x130bf1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5ed740; op2val:0xc1930bf1;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:7047*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7047*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2350:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xbf800001; valaddr_reg:x3; val_offset:7050*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7050*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2351:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xbf800003; valaddr_reg:x3; val_offset:7053*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7053*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2352:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xbf800007; valaddr_reg:x3; val_offset:7056*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7056*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2353:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xbf999999; valaddr_reg:x3; val_offset:7059*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7059*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2354:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:7062*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7062*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2355:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:7065*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7065*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2356:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:7068*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7068*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2357:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:7071*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7071*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2358:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:7074*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7074*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2359:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:7077*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7077*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2360:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:7080*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7080*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2361:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:7083*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7083*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2362:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:7086*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7086*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2363:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:7089*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7089*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2364:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:7092*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7092*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2365:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:7095*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7095*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2366:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc2000000; valaddr_reg:x3; val_offset:7098*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7098*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2367:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc2000001; valaddr_reg:x3; val_offset:7101*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7101*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2368:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc2000003; valaddr_reg:x3; val_offset:7104*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7104*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2369:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc2000007; valaddr_reg:x3; val_offset:7107*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7107*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2370:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc200000f; valaddr_reg:x3; val_offset:7110*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7110*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2371:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc200001f; valaddr_reg:x3; val_offset:7113*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7113*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2372:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc200003f; valaddr_reg:x3; val_offset:7116*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7116*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2373:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc200007f; valaddr_reg:x3; val_offset:7119*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7119*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2374:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc20000ff; valaddr_reg:x3; val_offset:7122*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7122*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2375:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc20001ff; valaddr_reg:x3; val_offset:7125*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7125*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2376:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc20003ff; valaddr_reg:x3; val_offset:7128*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7128*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2377:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc20007ff; valaddr_reg:x3; val_offset:7131*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7131*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2378:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc2000fff; valaddr_reg:x3; val_offset:7134*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7134*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2379:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc2001fff; valaddr_reg:x3; val_offset:7137*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7137*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2380:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc2003fff; valaddr_reg:x3; val_offset:7140*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7140*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2381:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc2007fff; valaddr_reg:x3; val_offset:7143*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7143*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2382:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc200ffff; valaddr_reg:x3; val_offset:7146*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7146*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2383:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc201ffff; valaddr_reg:x3; val_offset:7149*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7149*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2384:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc203ffff; valaddr_reg:x3; val_offset:7152*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7152*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2385:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc207ffff; valaddr_reg:x3; val_offset:7155*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7155*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2386:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc20fffff; valaddr_reg:x3; val_offset:7158*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7158*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2387:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc21fffff; valaddr_reg:x3; val_offset:7161*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7161*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2388:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc23fffff; valaddr_reg:x3; val_offset:7164*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7164*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2389:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc2400000; valaddr_reg:x3; val_offset:7167*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7167*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2390:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc2600000; valaddr_reg:x3; val_offset:7170*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7170*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2391:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc2700000; valaddr_reg:x3; val_offset:7173*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7173*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2392:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc2780000; valaddr_reg:x3; val_offset:7176*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7176*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2393:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27c0000; valaddr_reg:x3; val_offset:7179*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7179*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2394:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27e0000; valaddr_reg:x3; val_offset:7182*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7182*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2395:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27f0000; valaddr_reg:x3; val_offset:7185*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7185*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2396:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27f8000; valaddr_reg:x3; val_offset:7188*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7188*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2397:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27fc000; valaddr_reg:x3; val_offset:7191*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7191*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2398:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27fe000; valaddr_reg:x3; val_offset:7194*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7194*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2399:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27ff000; valaddr_reg:x3; val_offset:7197*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7197*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2400:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27ff800; valaddr_reg:x3; val_offset:7200*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7200*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2401:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27ffc00; valaddr_reg:x3; val_offset:7203*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7203*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2402:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27ffe00; valaddr_reg:x3; val_offset:7206*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7206*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2403:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27fff00; valaddr_reg:x3; val_offset:7209*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7209*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2404:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27fff80; valaddr_reg:x3; val_offset:7212*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7212*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2405:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27fffc0; valaddr_reg:x3; val_offset:7215*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7215*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2406:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27fffe0; valaddr_reg:x3; val_offset:7218*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7218*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2407:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27ffff0; valaddr_reg:x3; val_offset:7221*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7221*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2408:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27ffff8; valaddr_reg:x3; val_offset:7224*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7224*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2409:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27ffffc; valaddr_reg:x3; val_offset:7227*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7227*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2410:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27ffffe; valaddr_reg:x3; val_offset:7230*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7230*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2411:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b794c and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0b2860 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d6b794c; op2val:0x818b2860;
op3val:0xc27fffff; valaddr_reg:x3; val_offset:7233*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7233*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2412:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:7236*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7236*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2413:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:7239*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7239*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2414:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:7242*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7242*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2415:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:7245*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7245*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2416:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:7248*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7248*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2417:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:7251*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7251*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2418:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:7254*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7254*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2419:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:7257*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7257*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2420:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:7260*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7260*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2421:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:7263*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7263*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2422:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:7266*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7266*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2423:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:7269*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7269*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2424:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:7272*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7272*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2425:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:7275*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7275*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2426:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:7278*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7278*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2427:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:7281*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7281*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2428:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0xd000000; valaddr_reg:x3; val_offset:7284*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7284*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2429:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0xd000001; valaddr_reg:x3; val_offset:7287*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7287*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2430:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0xd000003; valaddr_reg:x3; val_offset:7290*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7290*0 + 3*18*FLEN/8, x4, x1, x2)

inst_2431:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d79f6ff; op2val:0x0;
op3val:0xd000007; valaddr_reg:x3; val_offset:7293*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7293*0 + 3*18*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4144037887,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4144103423,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4144234495,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4144496639,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4145020927,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4146069503,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4148166655,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4148166656,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4150263808,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4151312384,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4151836672,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152098816,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152229888,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152295424,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152328192,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152344576,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152352768,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152356864,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152358912,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152359936,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152360448,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152360704,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152360832,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152360896,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152360928,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152360944,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152360952,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152360956,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152360958,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4152360959,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2103367488,32,FLEN)
NAN_BOXED(3247639537,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254779904,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254779905,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254779907,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254779911,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254779919,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254779935,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254779967,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254780031,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254780159,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254780415,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254780927,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254781951,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254783999,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254788095,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254796287,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254812671,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254845439,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3254910975,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3255042047,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3255304191,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3255828479,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3256877055,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3258974207,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3258974208,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3261071360,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3262119936,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3262644224,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3262906368,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263037440,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263102976,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263135744,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263152128,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263160320,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263164416,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263166464,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263167488,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263168000,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263168256,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263168384,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263168448,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263168480,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263168496,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263168504,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263168508,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263168510,32,FLEN)
NAN_BOXED(2104195404,32,FLEN)
NAN_BOXED(2173380704,32,FLEN)
NAN_BOXED(3263168511,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103808,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103809,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103811,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103815,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
