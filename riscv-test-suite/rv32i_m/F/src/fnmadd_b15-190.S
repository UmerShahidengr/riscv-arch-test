
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_24192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x687f0000; valaddr_reg:x3; val_offset:72576*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72576*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x687f8000; valaddr_reg:x3; val_offset:72579*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72579*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x687fc000; valaddr_reg:x3; val_offset:72582*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72582*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x687fe000; valaddr_reg:x3; val_offset:72585*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72585*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x687ff000; valaddr_reg:x3; val_offset:72588*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72588*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x687ff800; valaddr_reg:x3; val_offset:72591*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72591*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x687ffc00; valaddr_reg:x3; val_offset:72594*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72594*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x687ffe00; valaddr_reg:x3; val_offset:72597*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72597*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x687fff00; valaddr_reg:x3; val_offset:72600*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72600*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x687fff80; valaddr_reg:x3; val_offset:72603*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72603*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x687fffc0; valaddr_reg:x3; val_offset:72606*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72606*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x687fffe0; valaddr_reg:x3; val_offset:72609*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72609*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x687ffff0; valaddr_reg:x3; val_offset:72612*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72612*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x687ffff8; valaddr_reg:x3; val_offset:72615*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72615*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x687ffffc; valaddr_reg:x3; val_offset:72618*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72618*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x687ffffe; valaddr_reg:x3; val_offset:72621*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72621*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x687fffff; valaddr_reg:x3; val_offset:72624*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72624*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x7f000001; valaddr_reg:x3; val_offset:72627*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72627*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x7f000003; valaddr_reg:x3; val_offset:72630*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72630*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x7f000007; valaddr_reg:x3; val_offset:72633*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72633*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x7f199999; valaddr_reg:x3; val_offset:72636*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72636*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x7f249249; valaddr_reg:x3; val_offset:72639*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72639*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x7f333333; valaddr_reg:x3; val_offset:72642*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72642*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:72645*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72645*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:72648*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72648*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x7f444444; valaddr_reg:x3; val_offset:72651*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72651*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:72654*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72654*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:72657*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72657*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x7f666666; valaddr_reg:x3; val_offset:72660*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72660*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:72663*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72663*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:72666*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72666*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:72669*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72669*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78b460 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03c133 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8b460; op2val:0x4003c133;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:72672*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72672*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d800000; valaddr_reg:x3; val_offset:72675*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72675*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d800001; valaddr_reg:x3; val_offset:72678*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72678*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d800003; valaddr_reg:x3; val_offset:72681*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72681*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d800007; valaddr_reg:x3; val_offset:72684*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72684*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d80000f; valaddr_reg:x3; val_offset:72687*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72687*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d80001f; valaddr_reg:x3; val_offset:72690*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72690*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d80003f; valaddr_reg:x3; val_offset:72693*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72693*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d80007f; valaddr_reg:x3; val_offset:72696*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72696*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d8000ff; valaddr_reg:x3; val_offset:72699*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72699*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d8001ff; valaddr_reg:x3; val_offset:72702*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72702*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d8003ff; valaddr_reg:x3; val_offset:72705*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72705*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d8007ff; valaddr_reg:x3; val_offset:72708*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72708*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d800fff; valaddr_reg:x3; val_offset:72711*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72711*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d801fff; valaddr_reg:x3; val_offset:72714*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72714*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d803fff; valaddr_reg:x3; val_offset:72717*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72717*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d807fff; valaddr_reg:x3; val_offset:72720*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72720*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d80ffff; valaddr_reg:x3; val_offset:72723*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72723*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d81ffff; valaddr_reg:x3; val_offset:72726*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72726*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d83ffff; valaddr_reg:x3; val_offset:72729*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72729*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d87ffff; valaddr_reg:x3; val_offset:72732*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72732*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d8fffff; valaddr_reg:x3; val_offset:72735*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72735*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3d9fffff; valaddr_reg:x3; val_offset:72738*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72738*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dbfffff; valaddr_reg:x3; val_offset:72741*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72741*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dc00000; valaddr_reg:x3; val_offset:72744*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72744*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3de00000; valaddr_reg:x3; val_offset:72747*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72747*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3df00000; valaddr_reg:x3; val_offset:72750*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72750*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3df80000; valaddr_reg:x3; val_offset:72753*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72753*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dfc0000; valaddr_reg:x3; val_offset:72756*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72756*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dfe0000; valaddr_reg:x3; val_offset:72759*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72759*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dff0000; valaddr_reg:x3; val_offset:72762*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72762*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dff8000; valaddr_reg:x3; val_offset:72765*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72765*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dffc000; valaddr_reg:x3; val_offset:72768*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72768*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dffe000; valaddr_reg:x3; val_offset:72771*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72771*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dfff000; valaddr_reg:x3; val_offset:72774*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72774*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dfff800; valaddr_reg:x3; val_offset:72777*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72777*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dfffc00; valaddr_reg:x3; val_offset:72780*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72780*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dfffe00; valaddr_reg:x3; val_offset:72783*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72783*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dffff00; valaddr_reg:x3; val_offset:72786*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72786*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dffff80; valaddr_reg:x3; val_offset:72789*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72789*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dffffc0; valaddr_reg:x3; val_offset:72792*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72792*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dffffe0; valaddr_reg:x3; val_offset:72795*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72795*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dfffff0; valaddr_reg:x3; val_offset:72798*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72798*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dfffff8; valaddr_reg:x3; val_offset:72801*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72801*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dfffffc; valaddr_reg:x3; val_offset:72804*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72804*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dfffffe; valaddr_reg:x3; val_offset:72807*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72807*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3dffffff; valaddr_reg:x3; val_offset:72810*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72810*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3f800001; valaddr_reg:x3; val_offset:72813*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72813*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3f800003; valaddr_reg:x3; val_offset:72816*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72816*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3f800007; valaddr_reg:x3; val_offset:72819*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72819*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3f999999; valaddr_reg:x3; val_offset:72822*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72822*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:72825*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72825*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:72828*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72828*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:72831*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72831*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:72834*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72834*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:72837*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72837*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:72840*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72840*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:72843*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72843*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:72846*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72846*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:72849*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72849*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:72852*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72852*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:72855*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72855*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78e8ed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41d2b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8e8ed; op2val:0x41d2b1;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:72858*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72858*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x78000000; valaddr_reg:x3; val_offset:72861*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72861*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x78000001; valaddr_reg:x3; val_offset:72864*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72864*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x78000003; valaddr_reg:x3; val_offset:72867*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72867*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x78000007; valaddr_reg:x3; val_offset:72870*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72870*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7800000f; valaddr_reg:x3; val_offset:72873*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72873*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7800001f; valaddr_reg:x3; val_offset:72876*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72876*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7800003f; valaddr_reg:x3; val_offset:72879*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72879*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7800007f; valaddr_reg:x3; val_offset:72882*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72882*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x780000ff; valaddr_reg:x3; val_offset:72885*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72885*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x780001ff; valaddr_reg:x3; val_offset:72888*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72888*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x780003ff; valaddr_reg:x3; val_offset:72891*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72891*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x780007ff; valaddr_reg:x3; val_offset:72894*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72894*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x78000fff; valaddr_reg:x3; val_offset:72897*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72897*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x78001fff; valaddr_reg:x3; val_offset:72900*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72900*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x78003fff; valaddr_reg:x3; val_offset:72903*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72903*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x78007fff; valaddr_reg:x3; val_offset:72906*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72906*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7800ffff; valaddr_reg:x3; val_offset:72909*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72909*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7801ffff; valaddr_reg:x3; val_offset:72912*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72912*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7803ffff; valaddr_reg:x3; val_offset:72915*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72915*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7807ffff; valaddr_reg:x3; val_offset:72918*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72918*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x780fffff; valaddr_reg:x3; val_offset:72921*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72921*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x781fffff; valaddr_reg:x3; val_offset:72924*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72924*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x783fffff; valaddr_reg:x3; val_offset:72927*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72927*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x78400000; valaddr_reg:x3; val_offset:72930*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72930*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x78600000; valaddr_reg:x3; val_offset:72933*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72933*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x78700000; valaddr_reg:x3; val_offset:72936*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72936*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x78780000; valaddr_reg:x3; val_offset:72939*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72939*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787c0000; valaddr_reg:x3; val_offset:72942*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72942*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787e0000; valaddr_reg:x3; val_offset:72945*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72945*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787f0000; valaddr_reg:x3; val_offset:72948*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72948*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787f8000; valaddr_reg:x3; val_offset:72951*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72951*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787fc000; valaddr_reg:x3; val_offset:72954*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72954*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787fe000; valaddr_reg:x3; val_offset:72957*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72957*0 + 3*189*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(1753153536,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(1753186304,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(1753202688,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(1753210880,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(1753214976,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(1753217024,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(1753218048,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(1753218560,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(1753218816,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(1753218944,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(1753219008,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(1753219040,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(1753219056,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(1753219064,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(1753219068,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(1753219070,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(1753219071,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2130228320,32,FLEN)
NAN_BOXED(1073987891,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031798784,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031798785,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031798787,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031798791,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031798799,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031798815,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031798847,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031798911,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031799039,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031799295,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031799807,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031800831,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031802879,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031806975,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031815167,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031831551,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031864319,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1031929855,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1032060927,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1032323071,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1032847359,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1033895935,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1035993087,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1035993088,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1038090240,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1039138816,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1039663104,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1039925248,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040056320,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040121856,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040154624,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040171008,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040179200,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040183296,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040185344,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040186368,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040186880,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040187136,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040187264,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040187328,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040187360,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040187376,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040187384,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040187388,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040187390,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1040187391,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2130241773,32,FLEN)
NAN_BOXED(4313777,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013265920,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013265921,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013265923,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013265927,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013265935,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013265951,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013265983,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013266047,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013266175,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013266431,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013266943,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013267967,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013270015,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013274111,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013282303,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013298687,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013331455,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013396991,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013528063,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2013790207,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2014314495,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2015363071,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2017460223,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2017460224,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2019557376,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2020605952,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021130240,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021392384,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021523456,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021588992,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021621760,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021638144,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021646336,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
