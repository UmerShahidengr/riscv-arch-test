
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_24320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787ff000; valaddr_reg:x3; val_offset:72960*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72960*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787ff800; valaddr_reg:x3; val_offset:72963*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72963*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787ffc00; valaddr_reg:x3; val_offset:72966*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72966*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787ffe00; valaddr_reg:x3; val_offset:72969*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72969*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787fff00; valaddr_reg:x3; val_offset:72972*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72972*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787fff80; valaddr_reg:x3; val_offset:72975*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72975*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787fffc0; valaddr_reg:x3; val_offset:72978*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72978*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787fffe0; valaddr_reg:x3; val_offset:72981*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72981*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787ffff0; valaddr_reg:x3; val_offset:72984*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72984*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787ffff8; valaddr_reg:x3; val_offset:72987*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72987*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787ffffc; valaddr_reg:x3; val_offset:72990*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72990*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787ffffe; valaddr_reg:x3; val_offset:72993*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72993*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x787fffff; valaddr_reg:x3; val_offset:72996*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72996*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7f000001; valaddr_reg:x3; val_offset:72999*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 72999*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7f000003; valaddr_reg:x3; val_offset:73002*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73002*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7f000007; valaddr_reg:x3; val_offset:73005*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73005*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7f199999; valaddr_reg:x3; val_offset:73008*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73008*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7f249249; valaddr_reg:x3; val_offset:73011*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73011*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7f333333; valaddr_reg:x3; val_offset:73014*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73014*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:73017*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73017*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:73020*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73020*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7f444444; valaddr_reg:x3; val_offset:73023*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73023*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:73026*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73026*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:73029*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73029*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7f666666; valaddr_reg:x3; val_offset:73032*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73032*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:73035*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73035*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:73038*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73038*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:73041*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73041*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x791e44 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x038932 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef91e44; op2val:0x40038932;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:73044*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73044*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:73047*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73047*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:73050*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73050*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:73053*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73053*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:73056*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73056*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:73059*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73059*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:73062*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73062*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:73065*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73065*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:73068*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73068*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:73071*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73071*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:73074*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73074*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:73077*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73077*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:73080*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73080*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:73083*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73083*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:73086*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73086*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:73089*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73089*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:73092*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73092*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x9000000; valaddr_reg:x3; val_offset:73095*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73095*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x9000001; valaddr_reg:x3; val_offset:73098*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73098*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x9000003; valaddr_reg:x3; val_offset:73101*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73101*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x9000007; valaddr_reg:x3; val_offset:73104*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73104*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x900000f; valaddr_reg:x3; val_offset:73107*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73107*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x900001f; valaddr_reg:x3; val_offset:73110*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73110*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x900003f; valaddr_reg:x3; val_offset:73113*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73113*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x900007f; valaddr_reg:x3; val_offset:73116*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73116*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x90000ff; valaddr_reg:x3; val_offset:73119*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73119*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x90001ff; valaddr_reg:x3; val_offset:73122*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73122*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x90003ff; valaddr_reg:x3; val_offset:73125*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73125*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x90007ff; valaddr_reg:x3; val_offset:73128*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73128*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x9000fff; valaddr_reg:x3; val_offset:73131*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73131*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x9001fff; valaddr_reg:x3; val_offset:73134*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73134*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x9003fff; valaddr_reg:x3; val_offset:73137*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73137*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x9007fff; valaddr_reg:x3; val_offset:73140*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73140*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x900ffff; valaddr_reg:x3; val_offset:73143*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73143*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x901ffff; valaddr_reg:x3; val_offset:73146*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73146*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x903ffff; valaddr_reg:x3; val_offset:73149*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73149*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x907ffff; valaddr_reg:x3; val_offset:73152*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73152*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x90fffff; valaddr_reg:x3; val_offset:73155*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73155*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x91fffff; valaddr_reg:x3; val_offset:73158*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73158*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x93fffff; valaddr_reg:x3; val_offset:73161*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73161*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x9400000; valaddr_reg:x3; val_offset:73164*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73164*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x9600000; valaddr_reg:x3; val_offset:73167*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73167*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x9700000; valaddr_reg:x3; val_offset:73170*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73170*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x9780000; valaddr_reg:x3; val_offset:73173*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73173*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97c0000; valaddr_reg:x3; val_offset:73176*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73176*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97e0000; valaddr_reg:x3; val_offset:73179*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73179*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97f0000; valaddr_reg:x3; val_offset:73182*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73182*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97f8000; valaddr_reg:x3; val_offset:73185*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73185*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97fc000; valaddr_reg:x3; val_offset:73188*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73188*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97fe000; valaddr_reg:x3; val_offset:73191*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73191*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97ff000; valaddr_reg:x3; val_offset:73194*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73194*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97ff800; valaddr_reg:x3; val_offset:73197*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73197*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97ffc00; valaddr_reg:x3; val_offset:73200*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73200*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97ffe00; valaddr_reg:x3; val_offset:73203*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73203*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97fff00; valaddr_reg:x3; val_offset:73206*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73206*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97fff80; valaddr_reg:x3; val_offset:73209*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73209*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97fffc0; valaddr_reg:x3; val_offset:73212*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73212*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97fffe0; valaddr_reg:x3; val_offset:73215*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73215*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97ffff0; valaddr_reg:x3; val_offset:73218*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73218*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97ffff8; valaddr_reg:x3; val_offset:73221*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73221*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97ffffc; valaddr_reg:x3; val_offset:73224*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73224*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97ffffe; valaddr_reg:x3; val_offset:73227*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73227*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x796cfb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef96cfb; op2val:0x0;
op3val:0x97fffff; valaddr_reg:x3; val_offset:73230*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73230*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:73233*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73233*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:73236*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73236*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:73239*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73239*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:73242*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73242*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:73245*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73245*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:73248*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73248*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:73251*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73251*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:73254*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73254*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:73257*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73257*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:73260*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73260*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:73263*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73263*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:73266*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73266*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:73269*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73269*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:73272*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73272*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:73275*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73275*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:73278*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73278*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf000000; valaddr_reg:x3; val_offset:73281*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73281*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf000001; valaddr_reg:x3; val_offset:73284*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73284*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf000003; valaddr_reg:x3; val_offset:73287*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73287*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf000007; valaddr_reg:x3; val_offset:73290*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73290*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf00000f; valaddr_reg:x3; val_offset:73293*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73293*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf00001f; valaddr_reg:x3; val_offset:73296*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73296*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf00003f; valaddr_reg:x3; val_offset:73299*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73299*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf00007f; valaddr_reg:x3; val_offset:73302*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73302*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf0000ff; valaddr_reg:x3; val_offset:73305*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73305*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf0001ff; valaddr_reg:x3; val_offset:73308*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73308*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf0003ff; valaddr_reg:x3; val_offset:73311*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73311*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf0007ff; valaddr_reg:x3; val_offset:73314*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73314*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf000fff; valaddr_reg:x3; val_offset:73317*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73317*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf001fff; valaddr_reg:x3; val_offset:73320*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73320*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf003fff; valaddr_reg:x3; val_offset:73323*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73323*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf007fff; valaddr_reg:x3; val_offset:73326*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73326*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf00ffff; valaddr_reg:x3; val_offset:73329*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73329*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf01ffff; valaddr_reg:x3; val_offset:73332*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73332*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf03ffff; valaddr_reg:x3; val_offset:73335*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73335*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf07ffff; valaddr_reg:x3; val_offset:73338*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73338*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efa5f3d; op2val:0x0;
op3val:0xf0fffff; valaddr_reg:x3; val_offset:73341*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73341*0 + 3*190*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021650432,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021652480,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021653504,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021654016,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021654272,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021654400,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021654464,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021654496,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021654512,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021654520,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021654524,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021654526,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2021654527,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2130255428,32,FLEN)
NAN_BOXED(1073973554,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994944,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994945,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994947,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994951,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994959,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994975,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995007,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995071,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995199,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995455,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150995967,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150996991,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150999039,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151003135,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151011327,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151027711,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151060479,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151126015,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151257087,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(151519231,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(152043519,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(153092095,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(155189247,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(155189248,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(157286400,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(158334976,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(158859264,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159121408,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159252480,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159318016,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159350784,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159367168,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159375360,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159379456,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159381504,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159382528,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383040,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383296,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383424,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383488,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383520,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383536,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383544,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383548,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383550,32,FLEN)
NAN_BOXED(2130275579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383551,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658240,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658241,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658243,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658247,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658255,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658271,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658303,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658367,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658495,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658751,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251659263,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251660287,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251662335,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251666431,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251674623,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251691007,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251723775,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251789311,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251920383,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(252182527,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(252706815,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
