
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_24576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89f00000; valaddr_reg:x3; val_offset:73728*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73728*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89f80000; valaddr_reg:x3; val_offset:73731*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73731*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89fc0000; valaddr_reg:x3; val_offset:73734*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73734*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89fe0000; valaddr_reg:x3; val_offset:73737*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73737*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89ff0000; valaddr_reg:x3; val_offset:73740*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73740*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89ff8000; valaddr_reg:x3; val_offset:73743*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73743*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89ffc000; valaddr_reg:x3; val_offset:73746*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73746*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89ffe000; valaddr_reg:x3; val_offset:73749*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73749*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89fff000; valaddr_reg:x3; val_offset:73752*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73752*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89fff800; valaddr_reg:x3; val_offset:73755*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73755*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89fffc00; valaddr_reg:x3; val_offset:73758*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73758*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89fffe00; valaddr_reg:x3; val_offset:73761*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73761*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89ffff00; valaddr_reg:x3; val_offset:73764*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73764*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89ffff80; valaddr_reg:x3; val_offset:73767*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73767*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89ffffc0; valaddr_reg:x3; val_offset:73770*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73770*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89ffffe0; valaddr_reg:x3; val_offset:73773*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73773*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89fffff0; valaddr_reg:x3; val_offset:73776*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73776*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89fffff8; valaddr_reg:x3; val_offset:73779*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73779*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89fffffc; valaddr_reg:x3; val_offset:73782*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73782*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89fffffe; valaddr_reg:x3; val_offset:73785*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73785*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ae896 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efae896; op2val:0x80000000;
op3val:0x89ffffff; valaddr_reg:x3; val_offset:73788*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73788*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d000000; valaddr_reg:x3; val_offset:73791*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73791*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d000001; valaddr_reg:x3; val_offset:73794*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73794*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d000003; valaddr_reg:x3; val_offset:73797*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73797*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d000007; valaddr_reg:x3; val_offset:73800*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73800*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d00000f; valaddr_reg:x3; val_offset:73803*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73803*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d00001f; valaddr_reg:x3; val_offset:73806*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73806*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d00003f; valaddr_reg:x3; val_offset:73809*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73809*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d00007f; valaddr_reg:x3; val_offset:73812*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73812*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d0000ff; valaddr_reg:x3; val_offset:73815*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73815*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d0001ff; valaddr_reg:x3; val_offset:73818*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73818*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d0003ff; valaddr_reg:x3; val_offset:73821*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73821*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d0007ff; valaddr_reg:x3; val_offset:73824*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73824*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d000fff; valaddr_reg:x3; val_offset:73827*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73827*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d001fff; valaddr_reg:x3; val_offset:73830*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73830*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d003fff; valaddr_reg:x3; val_offset:73833*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73833*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d007fff; valaddr_reg:x3; val_offset:73836*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73836*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d00ffff; valaddr_reg:x3; val_offset:73839*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73839*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d01ffff; valaddr_reg:x3; val_offset:73842*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73842*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d03ffff; valaddr_reg:x3; val_offset:73845*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73845*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d07ffff; valaddr_reg:x3; val_offset:73848*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73848*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d0fffff; valaddr_reg:x3; val_offset:73851*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73851*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d1fffff; valaddr_reg:x3; val_offset:73854*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73854*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d3fffff; valaddr_reg:x3; val_offset:73857*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73857*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d400000; valaddr_reg:x3; val_offset:73860*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73860*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d600000; valaddr_reg:x3; val_offset:73863*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73863*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d700000; valaddr_reg:x3; val_offset:73866*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73866*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d780000; valaddr_reg:x3; val_offset:73869*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73869*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7c0000; valaddr_reg:x3; val_offset:73872*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73872*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7e0000; valaddr_reg:x3; val_offset:73875*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73875*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7f0000; valaddr_reg:x3; val_offset:73878*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73878*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7f8000; valaddr_reg:x3; val_offset:73881*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73881*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7fc000; valaddr_reg:x3; val_offset:73884*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73884*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7fe000; valaddr_reg:x3; val_offset:73887*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73887*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7ff000; valaddr_reg:x3; val_offset:73890*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73890*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7ff800; valaddr_reg:x3; val_offset:73893*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73893*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7ffc00; valaddr_reg:x3; val_offset:73896*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73896*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7ffe00; valaddr_reg:x3; val_offset:73899*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73899*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7fff00; valaddr_reg:x3; val_offset:73902*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73902*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7fff80; valaddr_reg:x3; val_offset:73905*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73905*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7fffc0; valaddr_reg:x3; val_offset:73908*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73908*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7fffe0; valaddr_reg:x3; val_offset:73911*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73911*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7ffff0; valaddr_reg:x3; val_offset:73914*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73914*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7ffff8; valaddr_reg:x3; val_offset:73917*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73917*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7ffffc; valaddr_reg:x3; val_offset:73920*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73920*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7ffffe; valaddr_reg:x3; val_offset:73923*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73923*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3d7fffff; valaddr_reg:x3; val_offset:73926*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73926*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3f800001; valaddr_reg:x3; val_offset:73929*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73929*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3f800003; valaddr_reg:x3; val_offset:73932*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73932*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3f800007; valaddr_reg:x3; val_offset:73935*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73935*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3f999999; valaddr_reg:x3; val_offset:73938*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73938*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:73941*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73941*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:73944*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73944*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:73947*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73947*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:73950*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73950*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:73953*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73953*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:73956*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73956*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:73959*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73959*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:73962*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73962*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:73965*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73965*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:73968*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73968*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:73971*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73971*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c27f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40f9c2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc27f5; op2val:0x40f9c2;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:73974*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73974*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9800000; valaddr_reg:x3; val_offset:73977*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73977*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9800001; valaddr_reg:x3; val_offset:73980*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73980*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9800003; valaddr_reg:x3; val_offset:73983*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73983*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9800007; valaddr_reg:x3; val_offset:73986*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73986*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe980000f; valaddr_reg:x3; val_offset:73989*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73989*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe980001f; valaddr_reg:x3; val_offset:73992*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73992*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe980003f; valaddr_reg:x3; val_offset:73995*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73995*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe980007f; valaddr_reg:x3; val_offset:73998*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73998*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe98000ff; valaddr_reg:x3; val_offset:74001*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74001*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe98001ff; valaddr_reg:x3; val_offset:74004*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74004*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe98003ff; valaddr_reg:x3; val_offset:74007*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74007*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe98007ff; valaddr_reg:x3; val_offset:74010*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74010*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9800fff; valaddr_reg:x3; val_offset:74013*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74013*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9801fff; valaddr_reg:x3; val_offset:74016*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74016*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9803fff; valaddr_reg:x3; val_offset:74019*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74019*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9807fff; valaddr_reg:x3; val_offset:74022*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74022*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe980ffff; valaddr_reg:x3; val_offset:74025*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74025*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe981ffff; valaddr_reg:x3; val_offset:74028*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74028*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe983ffff; valaddr_reg:x3; val_offset:74031*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74031*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe987ffff; valaddr_reg:x3; val_offset:74034*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74034*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe98fffff; valaddr_reg:x3; val_offset:74037*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74037*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe99fffff; valaddr_reg:x3; val_offset:74040*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74040*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9bfffff; valaddr_reg:x3; val_offset:74043*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74043*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9c00000; valaddr_reg:x3; val_offset:74046*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74046*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9e00000; valaddr_reg:x3; val_offset:74049*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74049*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9f00000; valaddr_reg:x3; val_offset:74052*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74052*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9f80000; valaddr_reg:x3; val_offset:74055*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74055*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9fc0000; valaddr_reg:x3; val_offset:74058*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74058*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9fe0000; valaddr_reg:x3; val_offset:74061*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74061*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9ff0000; valaddr_reg:x3; val_offset:74064*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74064*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9ff8000; valaddr_reg:x3; val_offset:74067*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74067*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9ffc000; valaddr_reg:x3; val_offset:74070*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74070*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9ffe000; valaddr_reg:x3; val_offset:74073*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74073*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9fff000; valaddr_reg:x3; val_offset:74076*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74076*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9fff800; valaddr_reg:x3; val_offset:74079*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74079*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9fffc00; valaddr_reg:x3; val_offset:74082*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74082*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9fffe00; valaddr_reg:x3; val_offset:74085*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74085*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9ffff00; valaddr_reg:x3; val_offset:74088*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74088*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9ffff80; valaddr_reg:x3; val_offset:74091*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74091*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9ffffc0; valaddr_reg:x3; val_offset:74094*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74094*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9ffffe0; valaddr_reg:x3; val_offset:74097*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74097*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9fffff0; valaddr_reg:x3; val_offset:74100*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74100*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9fffff8; valaddr_reg:x3; val_offset:74103*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74103*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9fffffc; valaddr_reg:x3; val_offset:74106*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74106*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cf931 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x018809 and fs3 == 1 and fe3 == 0xd3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efcf931; op2val:0xc0018809;
op3val:0xe9fffffe; valaddr_reg:x3; val_offset:74109*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74109*0 + 3*192*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2314207232,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2314731520,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2314993664,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315124736,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315190272,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315223040,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315239424,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315247616,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315251712,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315253760,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315254784,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255296,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255552,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255680,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255744,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255776,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255792,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255800,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255804,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255806,32,FLEN)
NAN_BOXED(2130372758,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255807,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023410176,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023410177,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023410179,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023410183,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023410191,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023410207,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023410239,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023410303,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023410431,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023410687,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023411199,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023412223,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023414271,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023418367,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023426559,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023442943,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023475711,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023541247,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023672319,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1023934463,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1024458751,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1025507327,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1027604479,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1027604480,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1029701632,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1030750208,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031274496,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031536640,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031667712,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031733248,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031766016,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031782400,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031790592,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031794688,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031796736,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031797760,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031798272,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031798528,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031798656,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031798720,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031798752,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031798768,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031798776,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031798780,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031798782,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1031798783,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2130454517,32,FLEN)
NAN_BOXED(4258242,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917479936,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917479937,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917479939,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917479943,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917479951,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917479967,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917479999,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917480063,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917480191,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917480447,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917480959,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917481983,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917484031,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917488127,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917496319,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917512703,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917545471,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917611007,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3917742079,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3918004223,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3918528511,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3919577087,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3921674239,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3921674240,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3923771392,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3924819968,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925344256,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925606400,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925737472,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925803008,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925835776,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925852160,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925860352,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925864448,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925866496,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925867520,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925868032,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925868288,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925868416,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925868480,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925868512,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925868528,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925868536,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925868540,32,FLEN)
NAN_BOXED(2130508081,32,FLEN)
NAN_BOXED(3221325833,32,FLEN)
NAN_BOXED(3925868542,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
