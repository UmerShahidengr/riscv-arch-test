
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_25344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x3f999999; valaddr_reg:x3; val_offset:76032*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76032*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:76035*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76035*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:76038*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76038*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:76041*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76041*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:76044*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76044*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:76047*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76047*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:76050*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76050*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:76053*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76053*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:76056*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76056*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:76059*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76059*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:76062*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76062*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:76065*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76065*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:76068*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76068*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c000000; valaddr_reg:x3; val_offset:76071*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76071*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c000001; valaddr_reg:x3; val_offset:76074*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76074*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c000003; valaddr_reg:x3; val_offset:76077*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76077*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c000007; valaddr_reg:x3; val_offset:76080*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76080*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c00000f; valaddr_reg:x3; val_offset:76083*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76083*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c00001f; valaddr_reg:x3; val_offset:76086*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76086*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c00003f; valaddr_reg:x3; val_offset:76089*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76089*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c00007f; valaddr_reg:x3; val_offset:76092*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76092*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c0000ff; valaddr_reg:x3; val_offset:76095*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76095*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c0001ff; valaddr_reg:x3; val_offset:76098*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76098*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c0003ff; valaddr_reg:x3; val_offset:76101*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76101*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c0007ff; valaddr_reg:x3; val_offset:76104*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76104*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c000fff; valaddr_reg:x3; val_offset:76107*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76107*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c001fff; valaddr_reg:x3; val_offset:76110*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76110*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c003fff; valaddr_reg:x3; val_offset:76113*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76113*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c007fff; valaddr_reg:x3; val_offset:76116*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76116*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c00ffff; valaddr_reg:x3; val_offset:76119*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76119*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c01ffff; valaddr_reg:x3; val_offset:76122*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76122*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c03ffff; valaddr_reg:x3; val_offset:76125*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76125*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c07ffff; valaddr_reg:x3; val_offset:76128*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76128*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c0fffff; valaddr_reg:x3; val_offset:76131*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76131*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c1fffff; valaddr_reg:x3; val_offset:76134*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76134*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c3fffff; valaddr_reg:x3; val_offset:76137*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76137*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c400000; valaddr_reg:x3; val_offset:76140*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76140*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c600000; valaddr_reg:x3; val_offset:76143*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76143*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c700000; valaddr_reg:x3; val_offset:76146*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76146*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c780000; valaddr_reg:x3; val_offset:76149*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76149*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7c0000; valaddr_reg:x3; val_offset:76152*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76152*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7e0000; valaddr_reg:x3; val_offset:76155*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76155*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7f0000; valaddr_reg:x3; val_offset:76158*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76158*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7f8000; valaddr_reg:x3; val_offset:76161*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76161*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7fc000; valaddr_reg:x3; val_offset:76164*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76164*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7fe000; valaddr_reg:x3; val_offset:76167*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76167*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7ff000; valaddr_reg:x3; val_offset:76170*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76170*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7ff800; valaddr_reg:x3; val_offset:76173*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76173*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7ffc00; valaddr_reg:x3; val_offset:76176*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76176*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7ffe00; valaddr_reg:x3; val_offset:76179*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76179*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7fff00; valaddr_reg:x3; val_offset:76182*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76182*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7fff80; valaddr_reg:x3; val_offset:76185*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76185*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7fffc0; valaddr_reg:x3; val_offset:76188*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76188*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7fffe0; valaddr_reg:x3; val_offset:76191*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76191*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7ffff0; valaddr_reg:x3; val_offset:76194*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76194*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7ffff8; valaddr_reg:x3; val_offset:76197*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76197*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7ffffc; valaddr_reg:x3; val_offset:76200*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76200*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7ffffe; valaddr_reg:x3; val_offset:76203*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76203*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0194cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f3810 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0194cf; op2val:0x3f3810;
op3val:0x4c7fffff; valaddr_reg:x3; val_offset:76206*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76206*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:76209*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76209*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:76212*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76212*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:76215*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76215*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:76218*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76218*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:76221*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76221*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:76224*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76224*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:76227*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76227*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:76230*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76230*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:76233*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76233*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:76236*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76236*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:76239*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76239*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:76242*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76242*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:76245*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76245*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:76248*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76248*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:76251*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76251*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:76254*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76254*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe800000; valaddr_reg:x3; val_offset:76257*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76257*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe800001; valaddr_reg:x3; val_offset:76260*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76260*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe800003; valaddr_reg:x3; val_offset:76263*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76263*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe800007; valaddr_reg:x3; val_offset:76266*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76266*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe80000f; valaddr_reg:x3; val_offset:76269*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76269*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe80001f; valaddr_reg:x3; val_offset:76272*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76272*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe80003f; valaddr_reg:x3; val_offset:76275*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76275*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe80007f; valaddr_reg:x3; val_offset:76278*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76278*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe8000ff; valaddr_reg:x3; val_offset:76281*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76281*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe8001ff; valaddr_reg:x3; val_offset:76284*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76284*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe8003ff; valaddr_reg:x3; val_offset:76287*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76287*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe8007ff; valaddr_reg:x3; val_offset:76290*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76290*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe800fff; valaddr_reg:x3; val_offset:76293*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76293*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe801fff; valaddr_reg:x3; val_offset:76296*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76296*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe803fff; valaddr_reg:x3; val_offset:76299*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76299*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe807fff; valaddr_reg:x3; val_offset:76302*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76302*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe80ffff; valaddr_reg:x3; val_offset:76305*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76305*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe81ffff; valaddr_reg:x3; val_offset:76308*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76308*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe83ffff; valaddr_reg:x3; val_offset:76311*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76311*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe87ffff; valaddr_reg:x3; val_offset:76314*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76314*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe8fffff; valaddr_reg:x3; val_offset:76317*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76317*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xe9fffff; valaddr_reg:x3; val_offset:76320*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76320*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xebfffff; valaddr_reg:x3; val_offset:76323*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76323*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xec00000; valaddr_reg:x3; val_offset:76326*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76326*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xee00000; valaddr_reg:x3; val_offset:76329*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76329*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xef00000; valaddr_reg:x3; val_offset:76332*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76332*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xef80000; valaddr_reg:x3; val_offset:76335*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76335*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xefc0000; valaddr_reg:x3; val_offset:76338*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76338*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xefe0000; valaddr_reg:x3; val_offset:76341*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76341*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xeff0000; valaddr_reg:x3; val_offset:76344*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76344*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xeff8000; valaddr_reg:x3; val_offset:76347*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76347*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xeffc000; valaddr_reg:x3; val_offset:76350*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76350*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xeffe000; valaddr_reg:x3; val_offset:76353*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76353*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xefff000; valaddr_reg:x3; val_offset:76356*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76356*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xefff800; valaddr_reg:x3; val_offset:76359*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76359*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xefffc00; valaddr_reg:x3; val_offset:76362*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76362*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xefffe00; valaddr_reg:x3; val_offset:76365*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76365*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xeffff00; valaddr_reg:x3; val_offset:76368*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76368*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xeffff80; valaddr_reg:x3; val_offset:76371*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76371*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xeffffc0; valaddr_reg:x3; val_offset:76374*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76374*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xeffffe0; valaddr_reg:x3; val_offset:76377*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76377*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xefffff0; valaddr_reg:x3; val_offset:76380*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76380*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xefffff8; valaddr_reg:x3; val_offset:76383*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76383*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xefffffc; valaddr_reg:x3; val_offset:76386*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76386*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xefffffe; valaddr_reg:x3; val_offset:76389*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76389*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01f475 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01f475; op2val:0x0;
op3val:0xeffffff; valaddr_reg:x3; val_offset:76392*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76392*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xbf800001; valaddr_reg:x3; val_offset:76395*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76395*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xbf800003; valaddr_reg:x3; val_offset:76398*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76398*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xbf800007; valaddr_reg:x3; val_offset:76401*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76401*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xbf999999; valaddr_reg:x3; val_offset:76404*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76404*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:76407*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76407*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:76410*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76410*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:76413*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76413*0 + 3*198*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275068416,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275068417,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275068419,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275068423,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275068431,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275068447,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275068479,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275068543,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275068671,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275068927,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275069439,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275070463,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275072511,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275076607,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275084799,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275101183,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275133951,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275199487,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275330559,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1275592703,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1276116991,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1277165567,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1279262719,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1279262720,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1281359872,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1282408448,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1282932736,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283194880,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283325952,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283391488,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283424256,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283440640,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283448832,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283452928,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283454976,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283456000,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283456512,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283456768,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283456896,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283456960,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283456992,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283457008,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283457016,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283457020,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283457022,32,FLEN)
NAN_BOXED(2130810063,32,FLEN)
NAN_BOXED(4143120,32,FLEN)
NAN_BOXED(1283457023,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269632,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269633,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269635,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269639,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269647,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269663,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269695,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269759,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269887,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243270143,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243270655,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243271679,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243273727,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243277823,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243286015,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243302399,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243335167,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243400703,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243531775,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243793919,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(244318207,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(245366783,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(247463935,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(247463936,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(249561088,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(250609664,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251133952,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251396096,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251527168,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251592704,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251625472,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251641856,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251650048,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251654144,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251656192,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657216,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657728,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657984,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658112,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658176,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658208,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658224,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658232,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658236,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658238,32,FLEN)
NAN_BOXED(2130834549,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658239,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
