
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_25472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:76416*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76416*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:76419*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76419*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:76422*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76422*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:76425*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76425*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:76428*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76428*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:76431*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76431*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:76434*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76434*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:76437*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76437*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:76440*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76440*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd000000; valaddr_reg:x3; val_offset:76443*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76443*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd000001; valaddr_reg:x3; val_offset:76446*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76446*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd000003; valaddr_reg:x3; val_offset:76449*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76449*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd000007; valaddr_reg:x3; val_offset:76452*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76452*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd00000f; valaddr_reg:x3; val_offset:76455*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76455*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd00001f; valaddr_reg:x3; val_offset:76458*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76458*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd00003f; valaddr_reg:x3; val_offset:76461*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76461*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd00007f; valaddr_reg:x3; val_offset:76464*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76464*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd0000ff; valaddr_reg:x3; val_offset:76467*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76467*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd0001ff; valaddr_reg:x3; val_offset:76470*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76470*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd0003ff; valaddr_reg:x3; val_offset:76473*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76473*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd0007ff; valaddr_reg:x3; val_offset:76476*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76476*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd000fff; valaddr_reg:x3; val_offset:76479*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76479*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd001fff; valaddr_reg:x3; val_offset:76482*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76482*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd003fff; valaddr_reg:x3; val_offset:76485*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76485*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd007fff; valaddr_reg:x3; val_offset:76488*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76488*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd00ffff; valaddr_reg:x3; val_offset:76491*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76491*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd01ffff; valaddr_reg:x3; val_offset:76494*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76494*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd03ffff; valaddr_reg:x3; val_offset:76497*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76497*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd07ffff; valaddr_reg:x3; val_offset:76500*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76500*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd0fffff; valaddr_reg:x3; val_offset:76503*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76503*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd1fffff; valaddr_reg:x3; val_offset:76506*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76506*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd3fffff; valaddr_reg:x3; val_offset:76509*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76509*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd400000; valaddr_reg:x3; val_offset:76512*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76512*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd600000; valaddr_reg:x3; val_offset:76515*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76515*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd700000; valaddr_reg:x3; val_offset:76518*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76518*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd780000; valaddr_reg:x3; val_offset:76521*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76521*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7c0000; valaddr_reg:x3; val_offset:76524*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76524*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7e0000; valaddr_reg:x3; val_offset:76527*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76527*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7f0000; valaddr_reg:x3; val_offset:76530*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76530*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7f8000; valaddr_reg:x3; val_offset:76533*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76533*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7fc000; valaddr_reg:x3; val_offset:76536*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76536*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7fe000; valaddr_reg:x3; val_offset:76539*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76539*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7ff000; valaddr_reg:x3; val_offset:76542*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76542*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7ff800; valaddr_reg:x3; val_offset:76545*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76545*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7ffc00; valaddr_reg:x3; val_offset:76548*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76548*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7ffe00; valaddr_reg:x3; val_offset:76551*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76551*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7fff00; valaddr_reg:x3; val_offset:76554*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76554*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7fff80; valaddr_reg:x3; val_offset:76557*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76557*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7fffc0; valaddr_reg:x3; val_offset:76560*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76560*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7fffe0; valaddr_reg:x3; val_offset:76563*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76563*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7ffff0; valaddr_reg:x3; val_offset:76566*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76566*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7ffff8; valaddr_reg:x3; val_offset:76569*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76569*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7ffffc; valaddr_reg:x3; val_offset:76572*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76572*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7ffffe; valaddr_reg:x3; val_offset:76575*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76575*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02bb1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ea9bf and fs3 == 1 and fe3 == 0x9a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02bb1b; op2val:0x803ea9bf;
op3val:0xcd7fffff; valaddr_reg:x3; val_offset:76578*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76578*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:76581*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76581*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:76584*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76584*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:76587*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76587*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:76590*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76590*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:76593*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76593*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:76596*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76596*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:76599*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76599*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:76602*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76602*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:76605*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76605*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:76608*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76608*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:76611*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76611*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:76614*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76614*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:76617*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76617*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:76620*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76620*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:76623*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76623*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:76626*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76626*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x5000000; valaddr_reg:x3; val_offset:76629*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76629*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x5000001; valaddr_reg:x3; val_offset:76632*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76632*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x5000003; valaddr_reg:x3; val_offset:76635*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76635*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x5000007; valaddr_reg:x3; val_offset:76638*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76638*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x500000f; valaddr_reg:x3; val_offset:76641*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76641*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x500001f; valaddr_reg:x3; val_offset:76644*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76644*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x500003f; valaddr_reg:x3; val_offset:76647*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76647*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x500007f; valaddr_reg:x3; val_offset:76650*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76650*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x50000ff; valaddr_reg:x3; val_offset:76653*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76653*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x50001ff; valaddr_reg:x3; val_offset:76656*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76656*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x50003ff; valaddr_reg:x3; val_offset:76659*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76659*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x50007ff; valaddr_reg:x3; val_offset:76662*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76662*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x5000fff; valaddr_reg:x3; val_offset:76665*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76665*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x5001fff; valaddr_reg:x3; val_offset:76668*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76668*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x5003fff; valaddr_reg:x3; val_offset:76671*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76671*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x5007fff; valaddr_reg:x3; val_offset:76674*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76674*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x500ffff; valaddr_reg:x3; val_offset:76677*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76677*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x501ffff; valaddr_reg:x3; val_offset:76680*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76680*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x503ffff; valaddr_reg:x3; val_offset:76683*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76683*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x507ffff; valaddr_reg:x3; val_offset:76686*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76686*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x50fffff; valaddr_reg:x3; val_offset:76689*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76689*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x51fffff; valaddr_reg:x3; val_offset:76692*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76692*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x53fffff; valaddr_reg:x3; val_offset:76695*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76695*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x5400000; valaddr_reg:x3; val_offset:76698*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76698*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x5600000; valaddr_reg:x3; val_offset:76701*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76701*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x5700000; valaddr_reg:x3; val_offset:76704*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76704*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x5780000; valaddr_reg:x3; val_offset:76707*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76707*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57c0000; valaddr_reg:x3; val_offset:76710*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76710*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57e0000; valaddr_reg:x3; val_offset:76713*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76713*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57f0000; valaddr_reg:x3; val_offset:76716*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76716*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57f8000; valaddr_reg:x3; val_offset:76719*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76719*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57fc000; valaddr_reg:x3; val_offset:76722*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76722*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57fe000; valaddr_reg:x3; val_offset:76725*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76725*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57ff000; valaddr_reg:x3; val_offset:76728*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76728*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57ff800; valaddr_reg:x3; val_offset:76731*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76731*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57ffc00; valaddr_reg:x3; val_offset:76734*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76734*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57ffe00; valaddr_reg:x3; val_offset:76737*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76737*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57fff00; valaddr_reg:x3; val_offset:76740*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76740*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57fff80; valaddr_reg:x3; val_offset:76743*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76743*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57fffc0; valaddr_reg:x3; val_offset:76746*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76746*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57fffe0; valaddr_reg:x3; val_offset:76749*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76749*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57ffff0; valaddr_reg:x3; val_offset:76752*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76752*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57ffff8; valaddr_reg:x3; val_offset:76755*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76755*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57ffffc; valaddr_reg:x3; val_offset:76758*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76758*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57ffffe; valaddr_reg:x3; val_offset:76761*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76761*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02dfcb; op2val:0x0;
op3val:0x57fffff; valaddr_reg:x3; val_offset:76764*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76764*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x67000000; valaddr_reg:x3; val_offset:76767*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76767*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x67000001; valaddr_reg:x3; val_offset:76770*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76770*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x67000003; valaddr_reg:x3; val_offset:76773*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76773*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x67000007; valaddr_reg:x3; val_offset:76776*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76776*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x6700000f; valaddr_reg:x3; val_offset:76779*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76779*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x6700001f; valaddr_reg:x3; val_offset:76782*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76782*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x6700003f; valaddr_reg:x3; val_offset:76785*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76785*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x6700007f; valaddr_reg:x3; val_offset:76788*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76788*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x670000ff; valaddr_reg:x3; val_offset:76791*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76791*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x670001ff; valaddr_reg:x3; val_offset:76794*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76794*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x670003ff; valaddr_reg:x3; val_offset:76797*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76797*0 + 3*199*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439329280,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439329281,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439329283,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439329287,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439329295,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439329311,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439329343,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439329407,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439329535,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439329791,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439330303,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439331327,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439333375,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439337471,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439345663,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439362047,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439394815,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439460351,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439591423,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3439853567,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3440377855,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3441426431,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3443523583,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3443523584,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3445620736,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3446669312,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447193600,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447455744,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447586816,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447652352,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447685120,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447701504,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447709696,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447713792,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447715840,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447716864,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447717376,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447717632,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447717760,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447717824,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447717856,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447717872,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447717880,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447717884,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447717886,32,FLEN)
NAN_BOXED(2130885403,32,FLEN)
NAN_BOXED(2151590335,32,FLEN)
NAN_BOXED(3447717887,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886080,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886081,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886083,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886087,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886095,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886111,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886143,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886207,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886335,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886591,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83887103,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83888127,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83890175,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83894271,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83902463,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83918847,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83951615,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84017151,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84148223,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84410367,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84934655,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(85983231,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080383,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080384,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(90177536,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91226112,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91750400,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92012544,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92143616,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92209152,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92241920,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92258304,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92266496,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92270592,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92272640,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92273664,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274176,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274432,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274560,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274624,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274656,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274672,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274680,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274684,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274686,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274687,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728053248,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728053249,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728053251,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728053255,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728053263,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728053279,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728053311,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728053375,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728053503,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728053759,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728054271,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
