
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_25600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x670007ff; valaddr_reg:x3; val_offset:76800*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76800*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x67000fff; valaddr_reg:x3; val_offset:76803*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76803*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x67001fff; valaddr_reg:x3; val_offset:76806*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76806*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x67003fff; valaddr_reg:x3; val_offset:76809*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76809*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x67007fff; valaddr_reg:x3; val_offset:76812*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76812*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x6700ffff; valaddr_reg:x3; val_offset:76815*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76815*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x6701ffff; valaddr_reg:x3; val_offset:76818*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76818*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x6703ffff; valaddr_reg:x3; val_offset:76821*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76821*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x6707ffff; valaddr_reg:x3; val_offset:76824*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76824*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x670fffff; valaddr_reg:x3; val_offset:76827*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76827*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x671fffff; valaddr_reg:x3; val_offset:76830*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76830*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x673fffff; valaddr_reg:x3; val_offset:76833*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76833*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x67400000; valaddr_reg:x3; val_offset:76836*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76836*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x67600000; valaddr_reg:x3; val_offset:76839*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76839*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x67700000; valaddr_reg:x3; val_offset:76842*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76842*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x67780000; valaddr_reg:x3; val_offset:76845*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76845*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677c0000; valaddr_reg:x3; val_offset:76848*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76848*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677e0000; valaddr_reg:x3; val_offset:76851*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76851*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677f0000; valaddr_reg:x3; val_offset:76854*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76854*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677f8000; valaddr_reg:x3; val_offset:76857*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76857*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677fc000; valaddr_reg:x3; val_offset:76860*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76860*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677fe000; valaddr_reg:x3; val_offset:76863*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76863*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677ff000; valaddr_reg:x3; val_offset:76866*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76866*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677ff800; valaddr_reg:x3; val_offset:76869*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76869*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677ffc00; valaddr_reg:x3; val_offset:76872*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76872*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677ffe00; valaddr_reg:x3; val_offset:76875*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76875*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677fff00; valaddr_reg:x3; val_offset:76878*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76878*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677fff80; valaddr_reg:x3; val_offset:76881*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76881*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677fffc0; valaddr_reg:x3; val_offset:76884*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76884*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677fffe0; valaddr_reg:x3; val_offset:76887*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76887*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677ffff0; valaddr_reg:x3; val_offset:76890*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76890*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677ffff8; valaddr_reg:x3; val_offset:76893*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76893*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677ffffc; valaddr_reg:x3; val_offset:76896*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76896*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677ffffe; valaddr_reg:x3; val_offset:76899*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76899*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xce and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x677fffff; valaddr_reg:x3; val_offset:76902*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76902*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x7f000001; valaddr_reg:x3; val_offset:76905*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76905*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x7f000003; valaddr_reg:x3; val_offset:76908*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76908*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x7f000007; valaddr_reg:x3; val_offset:76911*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76911*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x7f199999; valaddr_reg:x3; val_offset:76914*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76914*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x7f249249; valaddr_reg:x3; val_offset:76917*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76917*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x7f333333; valaddr_reg:x3; val_offset:76920*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76920*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:76923*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76923*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:76926*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76926*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x7f444444; valaddr_reg:x3; val_offset:76929*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76929*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:76932*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76932*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:76935*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76935*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x7f666666; valaddr_reg:x3; val_offset:76938*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76938*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:76941*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76941*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:76944*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76944*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:76947*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76947*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03371b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x79ba1e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03371b; op2val:0x3ff9ba1e;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:76950*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76950*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:76953*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76953*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:76956*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76956*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:76959*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76959*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:76962*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76962*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:76965*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76965*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:76968*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76968*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:76971*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76971*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:76974*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76974*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:76977*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76977*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:76980*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76980*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:76983*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76983*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:76986*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76986*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:76989*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76989*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:76992*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76992*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:76995*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76995*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:76998*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76998*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa800000; valaddr_reg:x3; val_offset:77001*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77001*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa800001; valaddr_reg:x3; val_offset:77004*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77004*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa800003; valaddr_reg:x3; val_offset:77007*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77007*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa800007; valaddr_reg:x3; val_offset:77010*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77010*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa80000f; valaddr_reg:x3; val_offset:77013*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77013*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa80001f; valaddr_reg:x3; val_offset:77016*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77016*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa80003f; valaddr_reg:x3; val_offset:77019*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77019*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa80007f; valaddr_reg:x3; val_offset:77022*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77022*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa8000ff; valaddr_reg:x3; val_offset:77025*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77025*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa8001ff; valaddr_reg:x3; val_offset:77028*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77028*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa8003ff; valaddr_reg:x3; val_offset:77031*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77031*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa8007ff; valaddr_reg:x3; val_offset:77034*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77034*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa800fff; valaddr_reg:x3; val_offset:77037*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77037*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa801fff; valaddr_reg:x3; val_offset:77040*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77040*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa803fff; valaddr_reg:x3; val_offset:77043*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77043*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa807fff; valaddr_reg:x3; val_offset:77046*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77046*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa80ffff; valaddr_reg:x3; val_offset:77049*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77049*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa81ffff; valaddr_reg:x3; val_offset:77052*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77052*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa83ffff; valaddr_reg:x3; val_offset:77055*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77055*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa87ffff; valaddr_reg:x3; val_offset:77058*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77058*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa8fffff; valaddr_reg:x3; val_offset:77061*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77061*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xa9fffff; valaddr_reg:x3; val_offset:77064*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77064*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xabfffff; valaddr_reg:x3; val_offset:77067*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77067*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xac00000; valaddr_reg:x3; val_offset:77070*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77070*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xae00000; valaddr_reg:x3; val_offset:77073*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77073*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xaf00000; valaddr_reg:x3; val_offset:77076*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77076*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xaf80000; valaddr_reg:x3; val_offset:77079*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77079*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xafc0000; valaddr_reg:x3; val_offset:77082*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77082*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xafe0000; valaddr_reg:x3; val_offset:77085*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77085*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xaff0000; valaddr_reg:x3; val_offset:77088*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77088*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xaff8000; valaddr_reg:x3; val_offset:77091*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77091*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xaffc000; valaddr_reg:x3; val_offset:77094*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77094*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xaffe000; valaddr_reg:x3; val_offset:77097*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77097*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xafff000; valaddr_reg:x3; val_offset:77100*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77100*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xafff800; valaddr_reg:x3; val_offset:77103*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77103*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xafffc00; valaddr_reg:x3; val_offset:77106*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77106*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xafffe00; valaddr_reg:x3; val_offset:77109*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77109*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xaffff00; valaddr_reg:x3; val_offset:77112*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77112*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xaffff80; valaddr_reg:x3; val_offset:77115*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77115*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xaffffc0; valaddr_reg:x3; val_offset:77118*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77118*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xaffffe0; valaddr_reg:x3; val_offset:77121*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77121*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xafffff0; valaddr_reg:x3; val_offset:77124*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77124*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xafffff8; valaddr_reg:x3; val_offset:77127*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77127*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xafffffc; valaddr_reg:x3; val_offset:77130*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77130*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xafffffe; valaddr_reg:x3; val_offset:77133*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77133*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ce0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x15 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03ce0d; op2val:0x0;
op3val:0xaffffff; valaddr_reg:x3; val_offset:77136*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77136*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03e4ef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03e4ef; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:77139*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77139*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03e4ef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03e4ef; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:77142*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77142*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03e4ef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03e4ef; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:77145*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77145*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03e4ef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03e4ef; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:77148*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77148*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03e4ef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03e4ef; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:77151*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77151*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03e4ef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03e4ef; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:77154*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77154*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03e4ef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03e4ef; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:77157*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77157*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03e4ef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03e4ef; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:77160*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77160*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03e4ef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03e4ef; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:77163*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77163*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03e4ef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03e4ef; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:77166*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77166*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03e4ef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03e4ef; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:77169*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77169*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03e4ef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03e4ef; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:77172*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77172*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03e4ef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03e4ef; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:77175*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77175*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03e4ef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03e4ef; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:77178*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77178*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03e4ef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03e4ef; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:77181*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77181*0 + 3*200*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728055295,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728057343,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728061439,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728069631,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728086015,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728118783,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728184319,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728315391,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1728577535,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1729101823,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1730150399,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1732247551,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1732247552,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1734344704,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1735393280,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1735917568,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736179712,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736310784,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736376320,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736409088,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736425472,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736433664,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736437760,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736439808,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736440832,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736441344,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736441600,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736441728,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736441792,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736441824,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736441840,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736441848,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736441852,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736441854,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(1736441855,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2130917147,32,FLEN)
NAN_BOXED(1073330718,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160768,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160769,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160771,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160775,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160783,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160799,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160831,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160895,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176161023,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176161279,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176161791,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176162815,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176164863,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176168959,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176177151,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176193535,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176226303,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176291839,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176422911,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176685055,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(177209343,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(178257919,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(180355071,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(180355072,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(182452224,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(183500800,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184025088,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184287232,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184418304,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184483840,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184516608,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184532992,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184541184,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184545280,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184547328,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184548352,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184548864,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549120,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549248,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549312,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549344,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549360,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549368,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549372,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549374,32,FLEN)
NAN_BOXED(2130955789,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549375,32,FLEN)
NAN_BOXED(2130961647,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2130961647,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2130961647,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2130961647,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2130961647,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2130961647,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2130961647,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2130961647,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2130961647,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2130961647,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2130961647,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2130961647,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2130961647,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2130961647,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2130961647,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
