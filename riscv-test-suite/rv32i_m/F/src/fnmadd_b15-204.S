
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_25984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x580007f; valaddr_reg:x3; val_offset:77952*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77952*0 + 3*203*FLEN/8, x4, x1, x2)

inst_25985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x58000ff; valaddr_reg:x3; val_offset:77955*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77955*0 + 3*203*FLEN/8, x4, x1, x2)

inst_25986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x58001ff; valaddr_reg:x3; val_offset:77958*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77958*0 + 3*203*FLEN/8, x4, x1, x2)

inst_25987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x58003ff; valaddr_reg:x3; val_offset:77961*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77961*0 + 3*203*FLEN/8, x4, x1, x2)

inst_25988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x58007ff; valaddr_reg:x3; val_offset:77964*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77964*0 + 3*203*FLEN/8, x4, x1, x2)

inst_25989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5800fff; valaddr_reg:x3; val_offset:77967*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77967*0 + 3*203*FLEN/8, x4, x1, x2)

inst_25990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5801fff; valaddr_reg:x3; val_offset:77970*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77970*0 + 3*203*FLEN/8, x4, x1, x2)

inst_25991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5803fff; valaddr_reg:x3; val_offset:77973*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77973*0 + 3*203*FLEN/8, x4, x1, x2)

inst_25992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5807fff; valaddr_reg:x3; val_offset:77976*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77976*0 + 3*203*FLEN/8, x4, x1, x2)

inst_25993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x580ffff; valaddr_reg:x3; val_offset:77979*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77979*0 + 3*203*FLEN/8, x4, x1, x2)

inst_25994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x581ffff; valaddr_reg:x3; val_offset:77982*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77982*0 + 3*203*FLEN/8, x4, x1, x2)

inst_25995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x583ffff; valaddr_reg:x3; val_offset:77985*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77985*0 + 3*203*FLEN/8, x4, x1, x2)

inst_25996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x587ffff; valaddr_reg:x3; val_offset:77988*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77988*0 + 3*203*FLEN/8, x4, x1, x2)

inst_25997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x58fffff; valaddr_reg:x3; val_offset:77991*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77991*0 + 3*203*FLEN/8, x4, x1, x2)

inst_25998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x59fffff; valaddr_reg:x3; val_offset:77994*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77994*0 + 3*203*FLEN/8, x4, x1, x2)

inst_25999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5bfffff; valaddr_reg:x3; val_offset:77997*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77997*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5c00000; valaddr_reg:x3; val_offset:78000*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78000*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5e00000; valaddr_reg:x3; val_offset:78003*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78003*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5f00000; valaddr_reg:x3; val_offset:78006*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78006*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5f80000; valaddr_reg:x3; val_offset:78009*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78009*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5fc0000; valaddr_reg:x3; val_offset:78012*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78012*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5fe0000; valaddr_reg:x3; val_offset:78015*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78015*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5ff0000; valaddr_reg:x3; val_offset:78018*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78018*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5ff8000; valaddr_reg:x3; val_offset:78021*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78021*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5ffc000; valaddr_reg:x3; val_offset:78024*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78024*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5ffe000; valaddr_reg:x3; val_offset:78027*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78027*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5fff000; valaddr_reg:x3; val_offset:78030*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78030*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5fff800; valaddr_reg:x3; val_offset:78033*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78033*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5fffc00; valaddr_reg:x3; val_offset:78036*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78036*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5fffe00; valaddr_reg:x3; val_offset:78039*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78039*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5ffff00; valaddr_reg:x3; val_offset:78042*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78042*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5ffff80; valaddr_reg:x3; val_offset:78045*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78045*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5ffffc0; valaddr_reg:x3; val_offset:78048*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78048*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5ffffe0; valaddr_reg:x3; val_offset:78051*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78051*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5fffff0; valaddr_reg:x3; val_offset:78054*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78054*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5fffff8; valaddr_reg:x3; val_offset:78057*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78057*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5fffffc; valaddr_reg:x3; val_offset:78060*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78060*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5fffffe; valaddr_reg:x3; val_offset:78063*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78063*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x059993 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f059993; op2val:0x0;
op3val:0x5ffffff; valaddr_reg:x3; val_offset:78066*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78066*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8800000; valaddr_reg:x3; val_offset:78069*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78069*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8800001; valaddr_reg:x3; val_offset:78072*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78072*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8800003; valaddr_reg:x3; val_offset:78075*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78075*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8800007; valaddr_reg:x3; val_offset:78078*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78078*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe880000f; valaddr_reg:x3; val_offset:78081*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78081*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe880001f; valaddr_reg:x3; val_offset:78084*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78084*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe880003f; valaddr_reg:x3; val_offset:78087*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78087*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe880007f; valaddr_reg:x3; val_offset:78090*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78090*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe88000ff; valaddr_reg:x3; val_offset:78093*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78093*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe88001ff; valaddr_reg:x3; val_offset:78096*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78096*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe88003ff; valaddr_reg:x3; val_offset:78099*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78099*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe88007ff; valaddr_reg:x3; val_offset:78102*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78102*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8800fff; valaddr_reg:x3; val_offset:78105*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78105*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8801fff; valaddr_reg:x3; val_offset:78108*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78108*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8803fff; valaddr_reg:x3; val_offset:78111*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78111*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8807fff; valaddr_reg:x3; val_offset:78114*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78114*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe880ffff; valaddr_reg:x3; val_offset:78117*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78117*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe881ffff; valaddr_reg:x3; val_offset:78120*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78120*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe883ffff; valaddr_reg:x3; val_offset:78123*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78123*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe887ffff; valaddr_reg:x3; val_offset:78126*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78126*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe88fffff; valaddr_reg:x3; val_offset:78129*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78129*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe89fffff; valaddr_reg:x3; val_offset:78132*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78132*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8bfffff; valaddr_reg:x3; val_offset:78135*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78135*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8c00000; valaddr_reg:x3; val_offset:78138*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78138*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8e00000; valaddr_reg:x3; val_offset:78141*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78141*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8f00000; valaddr_reg:x3; val_offset:78144*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78144*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8f80000; valaddr_reg:x3; val_offset:78147*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78147*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8fc0000; valaddr_reg:x3; val_offset:78150*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78150*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8fe0000; valaddr_reg:x3; val_offset:78153*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78153*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8ff0000; valaddr_reg:x3; val_offset:78156*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78156*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8ff8000; valaddr_reg:x3; val_offset:78159*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78159*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8ffc000; valaddr_reg:x3; val_offset:78162*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78162*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8ffe000; valaddr_reg:x3; val_offset:78165*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78165*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8fff000; valaddr_reg:x3; val_offset:78168*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78168*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8fff800; valaddr_reg:x3; val_offset:78171*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78171*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8fffc00; valaddr_reg:x3; val_offset:78174*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78174*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8fffe00; valaddr_reg:x3; val_offset:78177*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78177*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8ffff00; valaddr_reg:x3; val_offset:78180*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78180*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8ffff80; valaddr_reg:x3; val_offset:78183*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78183*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8ffffc0; valaddr_reg:x3; val_offset:78186*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78186*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8ffffe0; valaddr_reg:x3; val_offset:78189*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78189*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8fffff0; valaddr_reg:x3; val_offset:78192*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78192*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8fffff8; valaddr_reg:x3; val_offset:78195*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78195*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8fffffc; valaddr_reg:x3; val_offset:78198*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78198*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8fffffe; valaddr_reg:x3; val_offset:78201*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78201*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xe8ffffff; valaddr_reg:x3; val_offset:78204*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78204*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xff000001; valaddr_reg:x3; val_offset:78207*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78207*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xff000003; valaddr_reg:x3; val_offset:78210*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78210*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xff000007; valaddr_reg:x3; val_offset:78213*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78213*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xff199999; valaddr_reg:x3; val_offset:78216*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78216*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xff249249; valaddr_reg:x3; val_offset:78219*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78219*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xff333333; valaddr_reg:x3; val_offset:78222*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78222*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:78225*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78225*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:78228*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78228*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xff444444; valaddr_reg:x3; val_offset:78231*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78231*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:78234*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78234*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:78237*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78237*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xff666666; valaddr_reg:x3; val_offset:78240*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78240*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:78243*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78243*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:78246*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78246*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:78249*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78249*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ed5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x741718 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f063ed5; op2val:0xbff41718;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:78252*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78252*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:78255*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78255*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:78258*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78258*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:78261*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78261*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:78264*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78264*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:78267*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78267*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:78270*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78270*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:78273*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78273*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:78276*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78276*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:78279*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78279*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:78282*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78282*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:78285*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78285*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:78288*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78288*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:78291*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78291*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:78294*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78294*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:78297*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78297*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:78300*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78300*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xd800000; valaddr_reg:x3; val_offset:78303*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78303*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xd800001; valaddr_reg:x3; val_offset:78306*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78306*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xd800003; valaddr_reg:x3; val_offset:78309*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78309*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xd800007; valaddr_reg:x3; val_offset:78312*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78312*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xd80000f; valaddr_reg:x3; val_offset:78315*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78315*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xd80001f; valaddr_reg:x3; val_offset:78318*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78318*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xd80003f; valaddr_reg:x3; val_offset:78321*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78321*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xd80007f; valaddr_reg:x3; val_offset:78324*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78324*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xd8000ff; valaddr_reg:x3; val_offset:78327*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78327*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xd8001ff; valaddr_reg:x3; val_offset:78330*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78330*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x067a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f067a70; op2val:0x0;
op3val:0xd8003ff; valaddr_reg:x3; val_offset:78333*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78333*0 + 3*203*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274815,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274943,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92275199,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92275711,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92276735,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92278783,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92282879,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92291071,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92307455,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92340223,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92405759,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92536831,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92798975,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(93323263,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(94371839,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(96468991,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(96468992,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(98566144,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(99614720,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100139008,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100401152,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100532224,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100597760,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100630528,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100646912,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100655104,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100659200,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100661248,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100662272,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100662784,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663040,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663168,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663232,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663264,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663280,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663288,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663292,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663294,32,FLEN)
NAN_BOXED(2131073427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663295,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900702720,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900702721,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900702723,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900702727,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900702735,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900702751,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900702783,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900702847,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900702975,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900703231,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900703743,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900704767,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900706815,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900710911,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900719103,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900735487,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900768255,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900833791,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3900964863,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3901227007,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3901751295,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3902799871,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3904897023,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3904897024,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3906994176,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3908042752,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3908567040,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3908829184,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3908960256,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3909025792,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3909058560,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3909074944,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3909083136,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3909087232,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3909089280,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3909090304,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3909090816,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3909091072,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3909091200,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3909091264,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3909091296,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3909091312,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3909091320,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3909091324,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3909091326,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(3909091327,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2131115733,32,FLEN)
NAN_BOXED(3220444952,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492416,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492417,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492419,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492423,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492431,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492447,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492479,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492543,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492671,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492927,32,FLEN)
NAN_BOXED(2131130992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226493439,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
