
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_26368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8f87ffff; valaddr_reg:x3; val_offset:79104*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79104*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8f8fffff; valaddr_reg:x3; val_offset:79107*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79107*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8f9fffff; valaddr_reg:x3; val_offset:79110*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79110*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8fbfffff; valaddr_reg:x3; val_offset:79113*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79113*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8fc00000; valaddr_reg:x3; val_offset:79116*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79116*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8fe00000; valaddr_reg:x3; val_offset:79119*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79119*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8ff00000; valaddr_reg:x3; val_offset:79122*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79122*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8ff80000; valaddr_reg:x3; val_offset:79125*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79125*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8ffc0000; valaddr_reg:x3; val_offset:79128*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79128*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8ffe0000; valaddr_reg:x3; val_offset:79131*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79131*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8fff0000; valaddr_reg:x3; val_offset:79134*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79134*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8fff8000; valaddr_reg:x3; val_offset:79137*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79137*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8fffc000; valaddr_reg:x3; val_offset:79140*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79140*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8fffe000; valaddr_reg:x3; val_offset:79143*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79143*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8ffff000; valaddr_reg:x3; val_offset:79146*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79146*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8ffff800; valaddr_reg:x3; val_offset:79149*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79149*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8ffffc00; valaddr_reg:x3; val_offset:79152*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79152*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8ffffe00; valaddr_reg:x3; val_offset:79155*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79155*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8fffff00; valaddr_reg:x3; val_offset:79158*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79158*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8fffff80; valaddr_reg:x3; val_offset:79161*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79161*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8fffffc0; valaddr_reg:x3; val_offset:79164*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79164*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8fffffe0; valaddr_reg:x3; val_offset:79167*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79167*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8ffffff0; valaddr_reg:x3; val_offset:79170*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79170*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8ffffff8; valaddr_reg:x3; val_offset:79173*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79173*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8ffffffc; valaddr_reg:x3; val_offset:79176*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79176*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8ffffffe; valaddr_reg:x3; val_offset:79179*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79179*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0830b1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0830b1; op2val:0x80000000;
op3val:0x8fffffff; valaddr_reg:x3; val_offset:79182*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79182*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3800000; valaddr_reg:x3; val_offset:79185*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79185*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3800001; valaddr_reg:x3; val_offset:79188*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79188*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3800003; valaddr_reg:x3; val_offset:79191*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79191*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3800007; valaddr_reg:x3; val_offset:79194*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79194*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe380000f; valaddr_reg:x3; val_offset:79197*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79197*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe380001f; valaddr_reg:x3; val_offset:79200*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79200*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe380003f; valaddr_reg:x3; val_offset:79203*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79203*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe380007f; valaddr_reg:x3; val_offset:79206*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79206*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe38000ff; valaddr_reg:x3; val_offset:79209*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79209*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe38001ff; valaddr_reg:x3; val_offset:79212*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79212*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe38003ff; valaddr_reg:x3; val_offset:79215*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79215*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe38007ff; valaddr_reg:x3; val_offset:79218*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79218*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3800fff; valaddr_reg:x3; val_offset:79221*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79221*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3801fff; valaddr_reg:x3; val_offset:79224*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79224*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3803fff; valaddr_reg:x3; val_offset:79227*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79227*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3807fff; valaddr_reg:x3; val_offset:79230*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79230*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe380ffff; valaddr_reg:x3; val_offset:79233*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79233*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe381ffff; valaddr_reg:x3; val_offset:79236*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79236*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe383ffff; valaddr_reg:x3; val_offset:79239*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79239*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe387ffff; valaddr_reg:x3; val_offset:79242*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79242*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe38fffff; valaddr_reg:x3; val_offset:79245*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79245*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe39fffff; valaddr_reg:x3; val_offset:79248*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79248*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3bfffff; valaddr_reg:x3; val_offset:79251*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79251*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3c00000; valaddr_reg:x3; val_offset:79254*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79254*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3e00000; valaddr_reg:x3; val_offset:79257*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79257*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3f00000; valaddr_reg:x3; val_offset:79260*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79260*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3f80000; valaddr_reg:x3; val_offset:79263*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79263*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3fc0000; valaddr_reg:x3; val_offset:79266*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79266*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3fe0000; valaddr_reg:x3; val_offset:79269*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79269*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3ff0000; valaddr_reg:x3; val_offset:79272*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79272*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3ff8000; valaddr_reg:x3; val_offset:79275*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79275*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3ffc000; valaddr_reg:x3; val_offset:79278*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79278*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3ffe000; valaddr_reg:x3; val_offset:79281*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79281*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3fff000; valaddr_reg:x3; val_offset:79284*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79284*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3fff800; valaddr_reg:x3; val_offset:79287*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79287*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3fffc00; valaddr_reg:x3; val_offset:79290*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79290*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3fffe00; valaddr_reg:x3; val_offset:79293*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79293*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3ffff00; valaddr_reg:x3; val_offset:79296*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79296*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3ffff80; valaddr_reg:x3; val_offset:79299*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79299*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3ffffc0; valaddr_reg:x3; val_offset:79302*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79302*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3ffffe0; valaddr_reg:x3; val_offset:79305*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79305*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3fffff0; valaddr_reg:x3; val_offset:79308*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79308*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3fffff8; valaddr_reg:x3; val_offset:79311*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79311*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3fffffc; valaddr_reg:x3; val_offset:79314*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79314*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3fffffe; valaddr_reg:x3; val_offset:79317*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79317*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xe3ffffff; valaddr_reg:x3; val_offset:79320*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79320*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xff000001; valaddr_reg:x3; val_offset:79323*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79323*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xff000003; valaddr_reg:x3; val_offset:79326*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79326*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xff000007; valaddr_reg:x3; val_offset:79329*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79329*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xff199999; valaddr_reg:x3; val_offset:79332*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79332*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xff249249; valaddr_reg:x3; val_offset:79335*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79335*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xff333333; valaddr_reg:x3; val_offset:79338*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79338*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:79341*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79341*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:79344*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79344*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xff444444; valaddr_reg:x3; val_offset:79347*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79347*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:79350*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79350*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:79353*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79353*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xff666666; valaddr_reg:x3; val_offset:79356*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79356*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:79359*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79359*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:79362*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79362*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:79365*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79365*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x085dea and fs2 == 1 and fe2 == 0x7f and fm2 == 0x704b00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f085dea; op2val:0xbff04b00;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:79368*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79368*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:79371*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79371*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:79374*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79374*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:79377*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79377*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:79380*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79380*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:79383*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79383*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:79386*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79386*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:79389*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79389*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:79392*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79392*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:79395*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79395*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:79398*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79398*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:79401*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79401*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:79404*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79404*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:79407*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79407*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:79410*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79410*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:79413*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79413*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:79416*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79416*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87800000; valaddr_reg:x3; val_offset:79419*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79419*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87800001; valaddr_reg:x3; val_offset:79422*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79422*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87800003; valaddr_reg:x3; val_offset:79425*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79425*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87800007; valaddr_reg:x3; val_offset:79428*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79428*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x8780000f; valaddr_reg:x3; val_offset:79431*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79431*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x8780001f; valaddr_reg:x3; val_offset:79434*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79434*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x8780003f; valaddr_reg:x3; val_offset:79437*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79437*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x8780007f; valaddr_reg:x3; val_offset:79440*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79440*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x878000ff; valaddr_reg:x3; val_offset:79443*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79443*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x878001ff; valaddr_reg:x3; val_offset:79446*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79446*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x878003ff; valaddr_reg:x3; val_offset:79449*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79449*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x878007ff; valaddr_reg:x3; val_offset:79452*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79452*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87800fff; valaddr_reg:x3; val_offset:79455*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79455*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87801fff; valaddr_reg:x3; val_offset:79458*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79458*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87803fff; valaddr_reg:x3; val_offset:79461*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79461*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87807fff; valaddr_reg:x3; val_offset:79464*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79464*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x8780ffff; valaddr_reg:x3; val_offset:79467*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79467*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x8781ffff; valaddr_reg:x3; val_offset:79470*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79470*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x8783ffff; valaddr_reg:x3; val_offset:79473*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79473*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x8787ffff; valaddr_reg:x3; val_offset:79476*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79476*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x878fffff; valaddr_reg:x3; val_offset:79479*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79479*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x879fffff; valaddr_reg:x3; val_offset:79482*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79482*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87bfffff; valaddr_reg:x3; val_offset:79485*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79485*0 + 3*206*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2408054783,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2408579071,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2409627647,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2411724799,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2411724800,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2413821952,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2414870528,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415394816,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415656960,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415788032,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415853568,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415886336,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415902720,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415910912,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415915008,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415917056,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918080,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918592,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918848,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415918976,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919040,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919072,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919088,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919096,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919100,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919102,32,FLEN)
NAN_BOXED(2131243185,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919103,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816816640,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816816641,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816816643,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816816647,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816816655,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816816671,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816816703,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816816767,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816816895,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816817151,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816817663,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816818687,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816820735,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816824831,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816833023,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816849407,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816882175,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3816947711,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3817078783,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3817340927,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3817865215,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3818913791,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3821010943,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3821010944,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3823108096,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3824156672,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3824680960,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3824943104,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825074176,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825139712,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825172480,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825188864,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825197056,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825201152,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825203200,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825204224,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825204736,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825204992,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825205120,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825205184,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825205216,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825205232,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825205240,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825205244,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825205246,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(3825205247,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2131254762,32,FLEN)
NAN_BOXED(3220196096,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312768,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312769,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312771,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312775,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312783,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312799,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312831,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312895,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313023,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313279,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313791,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273314815,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273316863,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273320959,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273329151,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273345535,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273378303,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273443839,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273574911,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273837055,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2274361343,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2275409919,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2277507071,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
