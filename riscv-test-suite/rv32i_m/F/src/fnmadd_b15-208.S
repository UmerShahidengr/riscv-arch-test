
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_26496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87c00000; valaddr_reg:x3; val_offset:79488*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79488*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87e00000; valaddr_reg:x3; val_offset:79491*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79491*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87f00000; valaddr_reg:x3; val_offset:79494*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79494*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87f80000; valaddr_reg:x3; val_offset:79497*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79497*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87fc0000; valaddr_reg:x3; val_offset:79500*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79500*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87fe0000; valaddr_reg:x3; val_offset:79503*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79503*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87ff0000; valaddr_reg:x3; val_offset:79506*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79506*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87ff8000; valaddr_reg:x3; val_offset:79509*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79509*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87ffc000; valaddr_reg:x3; val_offset:79512*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79512*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87ffe000; valaddr_reg:x3; val_offset:79515*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79515*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87fff000; valaddr_reg:x3; val_offset:79518*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79518*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87fff800; valaddr_reg:x3; val_offset:79521*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79521*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87fffc00; valaddr_reg:x3; val_offset:79524*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79524*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87fffe00; valaddr_reg:x3; val_offset:79527*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79527*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87ffff00; valaddr_reg:x3; val_offset:79530*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79530*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87ffff80; valaddr_reg:x3; val_offset:79533*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79533*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87ffffc0; valaddr_reg:x3; val_offset:79536*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79536*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87ffffe0; valaddr_reg:x3; val_offset:79539*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79539*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87fffff0; valaddr_reg:x3; val_offset:79542*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79542*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87fffff8; valaddr_reg:x3; val_offset:79545*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79545*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87fffffc; valaddr_reg:x3; val_offset:79548*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79548*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87fffffe; valaddr_reg:x3; val_offset:79551*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79551*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ddcf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f08ddcf; op2val:0x80000000;
op3val:0x87ffffff; valaddr_reg:x3; val_offset:79554*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79554*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:79557*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79557*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:79560*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79560*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:79563*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79563*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:79566*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79566*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:79569*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79569*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:79572*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79572*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:79575*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79575*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:79578*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79578*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:79581*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79581*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:79584*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79584*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:79587*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79587*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:79590*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79590*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:79593*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79593*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:79596*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79596*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:79599*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79599*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:79602*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79602*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6800000; valaddr_reg:x3; val_offset:79605*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79605*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6800001; valaddr_reg:x3; val_offset:79608*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79608*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6800003; valaddr_reg:x3; val_offset:79611*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79611*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6800007; valaddr_reg:x3; val_offset:79614*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79614*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x680000f; valaddr_reg:x3; val_offset:79617*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79617*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x680001f; valaddr_reg:x3; val_offset:79620*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79620*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x680003f; valaddr_reg:x3; val_offset:79623*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79623*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x680007f; valaddr_reg:x3; val_offset:79626*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79626*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x68000ff; valaddr_reg:x3; val_offset:79629*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79629*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x68001ff; valaddr_reg:x3; val_offset:79632*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79632*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x68003ff; valaddr_reg:x3; val_offset:79635*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79635*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x68007ff; valaddr_reg:x3; val_offset:79638*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79638*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6800fff; valaddr_reg:x3; val_offset:79641*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79641*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6801fff; valaddr_reg:x3; val_offset:79644*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79644*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6803fff; valaddr_reg:x3; val_offset:79647*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79647*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6807fff; valaddr_reg:x3; val_offset:79650*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79650*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x680ffff; valaddr_reg:x3; val_offset:79653*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79653*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x681ffff; valaddr_reg:x3; val_offset:79656*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79656*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x683ffff; valaddr_reg:x3; val_offset:79659*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79659*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x687ffff; valaddr_reg:x3; val_offset:79662*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79662*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x68fffff; valaddr_reg:x3; val_offset:79665*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79665*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x69fffff; valaddr_reg:x3; val_offset:79668*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79668*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6bfffff; valaddr_reg:x3; val_offset:79671*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79671*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6c00000; valaddr_reg:x3; val_offset:79674*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79674*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6e00000; valaddr_reg:x3; val_offset:79677*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79677*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6f00000; valaddr_reg:x3; val_offset:79680*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79680*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6f80000; valaddr_reg:x3; val_offset:79683*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79683*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fc0000; valaddr_reg:x3; val_offset:79686*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79686*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fe0000; valaddr_reg:x3; val_offset:79689*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79689*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ff0000; valaddr_reg:x3; val_offset:79692*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79692*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ff8000; valaddr_reg:x3; val_offset:79695*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79695*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ffc000; valaddr_reg:x3; val_offset:79698*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79698*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ffe000; valaddr_reg:x3; val_offset:79701*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79701*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fff000; valaddr_reg:x3; val_offset:79704*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79704*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fff800; valaddr_reg:x3; val_offset:79707*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79707*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fffc00; valaddr_reg:x3; val_offset:79710*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79710*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fffe00; valaddr_reg:x3; val_offset:79713*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79713*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ffff00; valaddr_reg:x3; val_offset:79716*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79716*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ffff80; valaddr_reg:x3; val_offset:79719*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79719*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ffffc0; valaddr_reg:x3; val_offset:79722*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79722*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ffffe0; valaddr_reg:x3; val_offset:79725*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79725*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fffff0; valaddr_reg:x3; val_offset:79728*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79728*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fffff8; valaddr_reg:x3; val_offset:79731*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79731*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fffffc; valaddr_reg:x3; val_offset:79734*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79734*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6fffffe; valaddr_reg:x3; val_offset:79737*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79737*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f093f0c; op2val:0x0;
op3val:0x6ffffff; valaddr_reg:x3; val_offset:79740*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79740*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb800000; valaddr_reg:x3; val_offset:79743*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79743*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb800001; valaddr_reg:x3; val_offset:79746*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79746*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb800003; valaddr_reg:x3; val_offset:79749*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79749*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb800007; valaddr_reg:x3; val_offset:79752*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79752*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb80000f; valaddr_reg:x3; val_offset:79755*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79755*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb80001f; valaddr_reg:x3; val_offset:79758*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79758*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb80003f; valaddr_reg:x3; val_offset:79761*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79761*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb80007f; valaddr_reg:x3; val_offset:79764*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79764*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb8000ff; valaddr_reg:x3; val_offset:79767*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79767*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb8001ff; valaddr_reg:x3; val_offset:79770*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79770*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb8003ff; valaddr_reg:x3; val_offset:79773*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79773*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb8007ff; valaddr_reg:x3; val_offset:79776*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79776*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb800fff; valaddr_reg:x3; val_offset:79779*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79779*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb801fff; valaddr_reg:x3; val_offset:79782*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79782*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb803fff; valaddr_reg:x3; val_offset:79785*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79785*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb807fff; valaddr_reg:x3; val_offset:79788*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79788*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb80ffff; valaddr_reg:x3; val_offset:79791*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79791*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb81ffff; valaddr_reg:x3; val_offset:79794*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79794*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb83ffff; valaddr_reg:x3; val_offset:79797*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79797*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb87ffff; valaddr_reg:x3; val_offset:79800*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79800*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb8fffff; valaddr_reg:x3; val_offset:79803*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79803*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbb9fffff; valaddr_reg:x3; val_offset:79806*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79806*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbbfffff; valaddr_reg:x3; val_offset:79809*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79809*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbc00000; valaddr_reg:x3; val_offset:79812*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79812*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbe00000; valaddr_reg:x3; val_offset:79815*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79815*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbf00000; valaddr_reg:x3; val_offset:79818*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79818*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbf80000; valaddr_reg:x3; val_offset:79821*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79821*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbfc0000; valaddr_reg:x3; val_offset:79824*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79824*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbfe0000; valaddr_reg:x3; val_offset:79827*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79827*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbff0000; valaddr_reg:x3; val_offset:79830*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79830*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbff8000; valaddr_reg:x3; val_offset:79833*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79833*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbffc000; valaddr_reg:x3; val_offset:79836*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79836*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbffe000; valaddr_reg:x3; val_offset:79839*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79839*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbfff000; valaddr_reg:x3; val_offset:79842*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79842*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbfff800; valaddr_reg:x3; val_offset:79845*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79845*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbfffc00; valaddr_reg:x3; val_offset:79848*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79848*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbfffe00; valaddr_reg:x3; val_offset:79851*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79851*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbffff00; valaddr_reg:x3; val_offset:79854*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79854*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbffff80; valaddr_reg:x3; val_offset:79857*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79857*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbffffc0; valaddr_reg:x3; val_offset:79860*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79860*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbffffe0; valaddr_reg:x3; val_offset:79863*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79863*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbfffff0; valaddr_reg:x3; val_offset:79866*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79866*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbfffff8; valaddr_reg:x3; val_offset:79869*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79869*0 + 3*207*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2277507072,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2279604224,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2280652800,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281177088,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281439232,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281570304,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281635840,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281668608,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281684992,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281693184,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281697280,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281699328,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281700352,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281700864,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701120,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701248,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701312,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701344,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701360,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701368,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701372,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701374,32,FLEN)
NAN_BOXED(2131287503,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701375,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051904,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051905,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051907,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051911,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051919,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051935,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051967,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052031,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052159,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052415,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052927,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109053951,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109055999,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109060095,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109068287,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109084671,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109117439,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109182975,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109314047,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109576191,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(110100479,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(111149055,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(113246207,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(113246208,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(115343360,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(116391936,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(116916224,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117178368,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117309440,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117374976,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117407744,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117424128,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117432320,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117436416,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117438464,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117439488,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440000,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440256,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440384,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440448,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440480,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440496,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440504,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440508,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440510,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440511,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145728000,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145728001,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145728003,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145728007,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145728015,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145728031,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145728063,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145728127,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145728255,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145728511,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145729023,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145730047,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145732095,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145736191,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145744383,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145760767,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145793535,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145859071,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3145990143,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3146252287,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3146776575,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3147825151,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3149922303,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3149922304,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3152019456,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3153068032,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3153592320,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3153854464,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3153985536,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3154051072,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3154083840,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3154100224,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3154108416,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3154112512,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3154114560,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3154115584,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3154116096,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3154116352,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3154116480,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3154116544,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3154116576,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3154116592,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3154116600,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
