
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_26624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbfffffc; valaddr_reg:x3; val_offset:79872*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79872*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbfffffe; valaddr_reg:x3; val_offset:79875*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79875*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbbffffff; valaddr_reg:x3; val_offset:79878*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79878*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbf800001; valaddr_reg:x3; val_offset:79881*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79881*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbf800003; valaddr_reg:x3; val_offset:79884*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79884*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbf800007; valaddr_reg:x3; val_offset:79887*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79887*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbf999999; valaddr_reg:x3; val_offset:79890*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79890*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:79893*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79893*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:79896*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79896*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:79899*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79899*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:79902*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79902*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:79905*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79905*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:79908*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79908*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:79911*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79911*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:79914*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79914*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:79917*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79917*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:79920*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79920*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:79923*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79923*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x094d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3baa22 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f094d04; op2val:0x803baa22;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:79926*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79926*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf1000000; valaddr_reg:x3; val_offset:79929*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79929*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf1000001; valaddr_reg:x3; val_offset:79932*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79932*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf1000003; valaddr_reg:x3; val_offset:79935*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79935*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf1000007; valaddr_reg:x3; val_offset:79938*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79938*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf100000f; valaddr_reg:x3; val_offset:79941*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79941*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf100001f; valaddr_reg:x3; val_offset:79944*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79944*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf100003f; valaddr_reg:x3; val_offset:79947*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79947*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf100007f; valaddr_reg:x3; val_offset:79950*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79950*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf10000ff; valaddr_reg:x3; val_offset:79953*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79953*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf10001ff; valaddr_reg:x3; val_offset:79956*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79956*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf10003ff; valaddr_reg:x3; val_offset:79959*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79959*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf10007ff; valaddr_reg:x3; val_offset:79962*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79962*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf1000fff; valaddr_reg:x3; val_offset:79965*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79965*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf1001fff; valaddr_reg:x3; val_offset:79968*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79968*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf1003fff; valaddr_reg:x3; val_offset:79971*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79971*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf1007fff; valaddr_reg:x3; val_offset:79974*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79974*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf100ffff; valaddr_reg:x3; val_offset:79977*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79977*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf101ffff; valaddr_reg:x3; val_offset:79980*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79980*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf103ffff; valaddr_reg:x3; val_offset:79983*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79983*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf107ffff; valaddr_reg:x3; val_offset:79986*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79986*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf10fffff; valaddr_reg:x3; val_offset:79989*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79989*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf11fffff; valaddr_reg:x3; val_offset:79992*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79992*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf13fffff; valaddr_reg:x3; val_offset:79995*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79995*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf1400000; valaddr_reg:x3; val_offset:79998*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79998*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf1600000; valaddr_reg:x3; val_offset:80001*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80001*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf1700000; valaddr_reg:x3; val_offset:80004*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80004*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf1780000; valaddr_reg:x3; val_offset:80007*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80007*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17c0000; valaddr_reg:x3; val_offset:80010*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80010*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17e0000; valaddr_reg:x3; val_offset:80013*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80013*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17f0000; valaddr_reg:x3; val_offset:80016*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80016*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17f8000; valaddr_reg:x3; val_offset:80019*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80019*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17fc000; valaddr_reg:x3; val_offset:80022*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80022*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17fe000; valaddr_reg:x3; val_offset:80025*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80025*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17ff000; valaddr_reg:x3; val_offset:80028*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80028*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17ff800; valaddr_reg:x3; val_offset:80031*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80031*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17ffc00; valaddr_reg:x3; val_offset:80034*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80034*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17ffe00; valaddr_reg:x3; val_offset:80037*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80037*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17fff00; valaddr_reg:x3; val_offset:80040*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80040*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17fff80; valaddr_reg:x3; val_offset:80043*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80043*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17fffc0; valaddr_reg:x3; val_offset:80046*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80046*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17fffe0; valaddr_reg:x3; val_offset:80049*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80049*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17ffff0; valaddr_reg:x3; val_offset:80052*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80052*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17ffff8; valaddr_reg:x3; val_offset:80055*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80055*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17ffffc; valaddr_reg:x3; val_offset:80058*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80058*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17ffffe; valaddr_reg:x3; val_offset:80061*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80061*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xe2 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xf17fffff; valaddr_reg:x3; val_offset:80064*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80064*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xff000001; valaddr_reg:x3; val_offset:80067*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80067*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xff000003; valaddr_reg:x3; val_offset:80070*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80070*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xff000007; valaddr_reg:x3; val_offset:80073*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80073*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xff199999; valaddr_reg:x3; val_offset:80076*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80076*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xff249249; valaddr_reg:x3; val_offset:80079*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80079*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xff333333; valaddr_reg:x3; val_offset:80082*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80082*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:80085*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80085*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:80088*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80088*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xff444444; valaddr_reg:x3; val_offset:80091*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80091*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:80094*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80094*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:80097*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80097*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xff666666; valaddr_reg:x3; val_offset:80100*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80100*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:80103*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80103*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:80106*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80106*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:80109*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80109*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097b66 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e5806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097b66; op2val:0xbfee5806;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:80112*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80112*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:80115*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80115*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:80118*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80118*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:80121*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80121*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:80124*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80124*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:80127*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80127*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:80130*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80130*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:80133*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80133*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:80136*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80136*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:80139*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80139*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:80142*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80142*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:80145*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80145*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:80148*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80148*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:80151*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80151*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:80154*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80154*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:80157*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80157*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:80160*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80160*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x5800000; valaddr_reg:x3; val_offset:80163*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80163*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x5800001; valaddr_reg:x3; val_offset:80166*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80166*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x5800003; valaddr_reg:x3; val_offset:80169*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80169*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x5800007; valaddr_reg:x3; val_offset:80172*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80172*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x580000f; valaddr_reg:x3; val_offset:80175*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80175*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x580001f; valaddr_reg:x3; val_offset:80178*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80178*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x580003f; valaddr_reg:x3; val_offset:80181*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80181*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x580007f; valaddr_reg:x3; val_offset:80184*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80184*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x58000ff; valaddr_reg:x3; val_offset:80187*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80187*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x58001ff; valaddr_reg:x3; val_offset:80190*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80190*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x58003ff; valaddr_reg:x3; val_offset:80193*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80193*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x58007ff; valaddr_reg:x3; val_offset:80196*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80196*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x5800fff; valaddr_reg:x3; val_offset:80199*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80199*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x5801fff; valaddr_reg:x3; val_offset:80202*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80202*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x5803fff; valaddr_reg:x3; val_offset:80205*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80205*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x5807fff; valaddr_reg:x3; val_offset:80208*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80208*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x580ffff; valaddr_reg:x3; val_offset:80211*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80211*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x581ffff; valaddr_reg:x3; val_offset:80214*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80214*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x583ffff; valaddr_reg:x3; val_offset:80217*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80217*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x587ffff; valaddr_reg:x3; val_offset:80220*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80220*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x58fffff; valaddr_reg:x3; val_offset:80223*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80223*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x59fffff; valaddr_reg:x3; val_offset:80226*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80226*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x5bfffff; valaddr_reg:x3; val_offset:80229*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80229*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x5c00000; valaddr_reg:x3; val_offset:80232*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80232*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x5e00000; valaddr_reg:x3; val_offset:80235*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80235*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x5f00000; valaddr_reg:x3; val_offset:80238*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80238*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x5f80000; valaddr_reg:x3; val_offset:80241*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80241*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x5fc0000; valaddr_reg:x3; val_offset:80244*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80244*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x5fe0000; valaddr_reg:x3; val_offset:80247*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80247*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x5ff0000; valaddr_reg:x3; val_offset:80250*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80250*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b184 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09b184; op2val:0x0;
op3val:0x5ff8000; valaddr_reg:x3; val_offset:80253*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80253*0 + 3*208*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3154116604,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3154116606,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3154116607,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2131315972,32,FLEN)
NAN_BOXED(2151393826,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043309056,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043309057,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043309059,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043309063,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043309071,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043309087,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043309119,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043309183,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043309311,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043309567,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043310079,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043311103,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043313151,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043317247,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043325439,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043341823,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043374591,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043440127,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043571199,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4043833343,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4044357631,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4045406207,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4047503359,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4047503360,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4049600512,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4050649088,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051173376,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051435520,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051566592,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051632128,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051664896,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051681280,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051689472,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051693568,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051695616,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051696640,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051697152,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051697408,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051697536,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051697600,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051697632,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051697648,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051697656,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051697660,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051697662,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4051697663,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2131327846,32,FLEN)
NAN_BOXED(3220068358,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274688,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274689,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274691,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274695,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274703,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274719,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274751,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274815,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274943,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92275199,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92275711,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92276735,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92278783,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92282879,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92291071,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92307455,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92340223,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92405759,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92536831,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92798975,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(93323263,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(94371839,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(96468991,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(96468992,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(98566144,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(99614720,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100139008,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100401152,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100532224,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100597760,32,FLEN)
NAN_BOXED(2131341700,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100630528,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
