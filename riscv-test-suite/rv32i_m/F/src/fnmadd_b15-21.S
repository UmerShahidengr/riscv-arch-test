
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_2560:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x818000ff; valaddr_reg:x3; val_offset:7680*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7680*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2561:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x818001ff; valaddr_reg:x3; val_offset:7683*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7683*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2562:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x818003ff; valaddr_reg:x3; val_offset:7686*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7686*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2563:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x818007ff; valaddr_reg:x3; val_offset:7689*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7689*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2564:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81800fff; valaddr_reg:x3; val_offset:7692*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7692*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2565:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81801fff; valaddr_reg:x3; val_offset:7695*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7695*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2566:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81803fff; valaddr_reg:x3; val_offset:7698*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7698*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2567:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81807fff; valaddr_reg:x3; val_offset:7701*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7701*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2568:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x8180ffff; valaddr_reg:x3; val_offset:7704*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7704*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2569:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x8181ffff; valaddr_reg:x3; val_offset:7707*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7707*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2570:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x8183ffff; valaddr_reg:x3; val_offset:7710*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7710*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2571:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x8187ffff; valaddr_reg:x3; val_offset:7713*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7713*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2572:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x818fffff; valaddr_reg:x3; val_offset:7716*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7716*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2573:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x819fffff; valaddr_reg:x3; val_offset:7719*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7719*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2574:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81bfffff; valaddr_reg:x3; val_offset:7722*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7722*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2575:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81c00000; valaddr_reg:x3; val_offset:7725*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7725*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2576:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81e00000; valaddr_reg:x3; val_offset:7728*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7728*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2577:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81f00000; valaddr_reg:x3; val_offset:7731*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7731*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2578:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81f80000; valaddr_reg:x3; val_offset:7734*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7734*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2579:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81fc0000; valaddr_reg:x3; val_offset:7737*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7737*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2580:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81fe0000; valaddr_reg:x3; val_offset:7740*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7740*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2581:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81ff0000; valaddr_reg:x3; val_offset:7743*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7743*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2582:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81ff8000; valaddr_reg:x3; val_offset:7746*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7746*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2583:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81ffc000; valaddr_reg:x3; val_offset:7749*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7749*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2584:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81ffe000; valaddr_reg:x3; val_offset:7752*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7752*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2585:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81fff000; valaddr_reg:x3; val_offset:7755*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7755*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2586:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81fff800; valaddr_reg:x3; val_offset:7758*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7758*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2587:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81fffc00; valaddr_reg:x3; val_offset:7761*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7761*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2588:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81fffe00; valaddr_reg:x3; val_offset:7764*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7764*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2589:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81ffff00; valaddr_reg:x3; val_offset:7767*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7767*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2590:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81ffff80; valaddr_reg:x3; val_offset:7770*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7770*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2591:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81ffffc0; valaddr_reg:x3; val_offset:7773*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7773*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2592:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81ffffe0; valaddr_reg:x3; val_offset:7776*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7776*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2593:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81fffff0; valaddr_reg:x3; val_offset:7779*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7779*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2594:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81fffff8; valaddr_reg:x3; val_offset:7782*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7782*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2595:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81fffffc; valaddr_reg:x3; val_offset:7785*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7785*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2596:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81fffffe; valaddr_reg:x3; val_offset:7788*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7788*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2597:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09156f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d89156f; op2val:0x80000000;
op3val:0x81ffffff; valaddr_reg:x3; val_offset:7791*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7791*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2598:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x34000000; valaddr_reg:x3; val_offset:7794*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7794*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2599:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x34000001; valaddr_reg:x3; val_offset:7797*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7797*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2600:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x34000003; valaddr_reg:x3; val_offset:7800*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7800*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2601:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x34000007; valaddr_reg:x3; val_offset:7803*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7803*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2602:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3400000f; valaddr_reg:x3; val_offset:7806*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7806*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2603:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3400001f; valaddr_reg:x3; val_offset:7809*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7809*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2604:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3400003f; valaddr_reg:x3; val_offset:7812*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7812*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2605:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3400007f; valaddr_reg:x3; val_offset:7815*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7815*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2606:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x340000ff; valaddr_reg:x3; val_offset:7818*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7818*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2607:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x340001ff; valaddr_reg:x3; val_offset:7821*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7821*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2608:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x340003ff; valaddr_reg:x3; val_offset:7824*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7824*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2609:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x340007ff; valaddr_reg:x3; val_offset:7827*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7827*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2610:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x34000fff; valaddr_reg:x3; val_offset:7830*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7830*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2611:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x34001fff; valaddr_reg:x3; val_offset:7833*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7833*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2612:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x34003fff; valaddr_reg:x3; val_offset:7836*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7836*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2613:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x34007fff; valaddr_reg:x3; val_offset:7839*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7839*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2614:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3400ffff; valaddr_reg:x3; val_offset:7842*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7842*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2615:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3401ffff; valaddr_reg:x3; val_offset:7845*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7845*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2616:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3403ffff; valaddr_reg:x3; val_offset:7848*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7848*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2617:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3407ffff; valaddr_reg:x3; val_offset:7851*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7851*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2618:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x340fffff; valaddr_reg:x3; val_offset:7854*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7854*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2619:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x341fffff; valaddr_reg:x3; val_offset:7857*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7857*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2620:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x343fffff; valaddr_reg:x3; val_offset:7860*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7860*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2621:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x34400000; valaddr_reg:x3; val_offset:7863*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7863*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2622:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x34600000; valaddr_reg:x3; val_offset:7866*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7866*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2623:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x34700000; valaddr_reg:x3; val_offset:7869*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7869*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2624:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x34780000; valaddr_reg:x3; val_offset:7872*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7872*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2625:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347c0000; valaddr_reg:x3; val_offset:7875*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7875*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2626:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347e0000; valaddr_reg:x3; val_offset:7878*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7878*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2627:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347f0000; valaddr_reg:x3; val_offset:7881*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7881*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2628:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347f8000; valaddr_reg:x3; val_offset:7884*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7884*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2629:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347fc000; valaddr_reg:x3; val_offset:7887*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7887*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2630:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347fe000; valaddr_reg:x3; val_offset:7890*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7890*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2631:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347ff000; valaddr_reg:x3; val_offset:7893*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7893*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2632:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347ff800; valaddr_reg:x3; val_offset:7896*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7896*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2633:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347ffc00; valaddr_reg:x3; val_offset:7899*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7899*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2634:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347ffe00; valaddr_reg:x3; val_offset:7902*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7902*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2635:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347fff00; valaddr_reg:x3; val_offset:7905*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7905*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2636:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347fff80; valaddr_reg:x3; val_offset:7908*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7908*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2637:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347fffc0; valaddr_reg:x3; val_offset:7911*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7911*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2638:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347fffe0; valaddr_reg:x3; val_offset:7914*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7914*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2639:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347ffff0; valaddr_reg:x3; val_offset:7917*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7917*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2640:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347ffff8; valaddr_reg:x3; val_offset:7920*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7920*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2641:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347ffffc; valaddr_reg:x3; val_offset:7923*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7923*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2642:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347ffffe; valaddr_reg:x3; val_offset:7926*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7926*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2643:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x347fffff; valaddr_reg:x3; val_offset:7929*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7929*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2644:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3f800001; valaddr_reg:x3; val_offset:7932*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7932*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2645:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3f800003; valaddr_reg:x3; val_offset:7935*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7935*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2646:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3f800007; valaddr_reg:x3; val_offset:7938*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7938*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2647:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3f999999; valaddr_reg:x3; val_offset:7941*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7941*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2648:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:7944*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7944*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2649:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:7947*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7947*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2650:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:7950*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7950*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2651:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:7953*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7953*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2652:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:7956*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7956*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2653:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:7959*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7959*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2654:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:7962*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7962*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2655:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:7965*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7965*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2656:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:7968*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7968*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2657:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:7971*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7971*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2658:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:7974*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7974*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2659:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cb323 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x68e4a1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8cb323; op2val:0x168e4a1;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:7977*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7977*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2660:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:7980*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7980*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2661:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:7983*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7983*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2662:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:7986*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7986*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2663:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:7989*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7989*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2664:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:7992*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7992*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2665:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:7995*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7995*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2666:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:7998*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7998*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2667:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:8001*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8001*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2668:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:8004*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8004*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2669:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:8007*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8007*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2670:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:8010*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8010*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2671:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:8013*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8013*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2672:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:8016*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8016*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2673:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:8019*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8019*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2674:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:8022*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8022*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2675:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:8025*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8025*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2676:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x84000000; valaddr_reg:x3; val_offset:8028*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8028*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2677:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x84000001; valaddr_reg:x3; val_offset:8031*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8031*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2678:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x84000003; valaddr_reg:x3; val_offset:8034*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8034*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2679:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x84000007; valaddr_reg:x3; val_offset:8037*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8037*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2680:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x8400000f; valaddr_reg:x3; val_offset:8040*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8040*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2681:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x8400001f; valaddr_reg:x3; val_offset:8043*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8043*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2682:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x8400003f; valaddr_reg:x3; val_offset:8046*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8046*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2683:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x8400007f; valaddr_reg:x3; val_offset:8049*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8049*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2684:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x840000ff; valaddr_reg:x3; val_offset:8052*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8052*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2685:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x840001ff; valaddr_reg:x3; val_offset:8055*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8055*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2686:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x840003ff; valaddr_reg:x3; val_offset:8058*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8058*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2687:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x840007ff; valaddr_reg:x3; val_offset:8061*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8061*0 + 3*20*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649727,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649983,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172650495,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172651519,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172653567,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172657663,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172665855,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172682239,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172715007,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172780543,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172911615,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2173173759,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2173698047,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2174746623,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2176843775,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2176843776,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2178940928,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2179989504,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180513792,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180775936,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180907008,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2180972544,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181005312,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181021696,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181029888,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181033984,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181036032,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037056,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037568,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037824,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181037952,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038016,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038048,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038064,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038072,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038076,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038078,32,FLEN)
NAN_BOXED(2106135919,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038079,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872415232,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872415233,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872415235,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872415239,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872415247,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872415263,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872415295,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872415359,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872415487,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872415743,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872416255,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872417279,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872419327,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872423423,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872431615,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872447999,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872480767,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872546303,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872677375,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(872939519,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(873463807,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(874512383,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(876609535,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(876609536,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(878706688,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(879755264,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880279552,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880541696,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880672768,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880738304,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880771072,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880787456,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880795648,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880799744,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880801792,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880802816,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880803328,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880803584,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880803712,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880803776,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880803808,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880803824,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880803832,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880803836,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880803838,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(880803839,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2106372899,32,FLEN)
NAN_BOXED(23651489,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592512,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592513,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592515,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592519,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592527,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592543,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592575,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592639,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592767,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214593023,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214593535,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214594559,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
